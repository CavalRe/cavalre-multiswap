{
  "version": 3,
  "sources": ["../../../app/components/Dashboard/Header/index.tsx", "../../../app/components/Dashboard/RequireAuth/index.tsx", "../../../app/components/Dashboard/index.tsx", "../../../app/components/Dashboard/Swap/index.tsx", "../../../app/components/Dashboard/Swap/PayComponent/index.tsx", "../../../app/components/Dashboard/Swap/ReceiveComponent/index.tsx", "../../../app/components/Dashboard/Swap/TokenSelect/index.tsx", "../../../app/components/Dashboard/Swap/TokenSelect/TokenItem/index.tsx"],
  "sourcesContent": ["import { useMoralis } from \"react-moralis\";\r\nimport {\r\n    Button,\r\n    Header\r\n} from '@mantine/core';\r\n\r\nconst DashboardHeader = () => {\r\n    const {\r\n        isAuthenticated,\r\n        authenticate,\r\n        logout\r\n    } = useMoralis();\r\n\r\n    const handleLogin = async () => { await authenticate(); };\r\n    const handleLogout = async () => { await logout(); };\r\n\r\n    return (\r\n        <Header height={60} p=\"xs\">\r\n            {isAuthenticated ?\r\n                <Button onClick={handleLogout}>Logout</Button> :\r\n                <Button onClick={handleLogin}>Connect Wallet</Button>\r\n            }\r\n        </Header>\r\n    )\r\n};\r\n\r\nexport default DashboardHeader;\r\n", "import { useMoralis } from \"react-moralis\";\nimport { Button } from '@mantine/core';\n\nconst RequireAuth = ({ children }: any) => {\n    const { isAuthenticated, authenticate } = useMoralis();\n\n    const handleLogin = async () => { await authenticate(); };\n\n    return (\n        <>\n            {isAuthenticated ?\n                children :\n                <Button onClick={handleLogin}>Connect Wallet</Button>\n            }\n        </>\n    );\n};\n\nexport default RequireAuth;\n", "import { useEffect, useState } from \"react\";\r\nimport { useMoralis } from \"react-moralis\";\r\nimport { useNavigate } from \"remix\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    Container,\r\n    Group,\r\n    Modal,\r\n    NativeSelect,\r\n    SimpleGrid,\r\n    Table,\r\n    Text,\r\n    Title\r\n} from '@mantine/core';\r\nimport type { MantineSize } from \"@mantine/core\";\r\n\r\nimport type { PoolToken, AssetToken } from \"~/moralis.server\";\r\n\r\nimport { Swap } from \"~/components/Dashboard\";\r\n\r\ntype Dict<T> = {\r\n    [key: string]: T\r\n};\r\n\r\ntype Numeraire = {\r\n    name: string,\r\n    symbol: string,\r\n    price: number\r\n};\r\n\r\nexport { default as Header } from \"~/components/Dashboard/Header\";\r\nexport { default as NavBar } from \"~/components/Dashboard/NavBar\";\r\nexport { default as RequireAuth } from \"~/components/Dashboard/RequireAuth\";\r\nexport { default as Swap } from \"~/components/Dashboard/Swap\";\r\n\r\ntype DashboardProps = {\r\n    address: string,\r\n    poolToken: PoolToken,\r\n    assetTokens: Dict<AssetToken>,\r\n    pathname: string\r\n};\r\n\r\nconst Dashboard = (props: DashboardProps) => {\r\n    const {\r\n        isInitialized,\r\n        isAuthenticated,\r\n        account,\r\n        isWeb3Enabled,\r\n        enableWeb3\r\n    } = useMoralis();\r\n    const { address, poolToken, assetTokens, pathname } = props;\r\n\r\n    const [opened, setOpened] = useState<boolean>(true);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated && !isWeb3Enabled) enableWeb3();\r\n\r\n        const newPathname = isAuthenticated ? account ? `/dashboard/${account}` : pathname : \"/dashboard\";\r\n\r\n        if (isInitialized && newPathname !== pathname) navigate(newPathname);\r\n    }, [isInitialized, isAuthenticated, account])\r\n\r\n    const poolBalance = poolToken.balance;\r\n    const poolTokens = poolToken.outstanding;\r\n\r\n    const price = (asset: AssetToken) => {\r\n        return poolTokens * asset.weight / asset.reserve;\r\n    };\r\n\r\n    const balance = (asset: AssetToken) => {\r\n        return asset.balance;\r\n    };\r\n\r\n    const poolTokenNumeraire = { name: poolToken.name, symbol: poolToken.symbol, price: 1 }\r\n    const [numeraire, setNumeraire] = useState<Numeraire>(poolTokenNumeraire);\r\n\r\n    const numeraires = [poolTokenNumeraire, ...Object.values(assetTokens)?.map((a: AssetToken) => { \r\n        return { name: a.name, symbol: a.symbol, price: price(a) }\r\n    })];\r\n    const numeraireMap: Dict<Numeraire> = {};\r\n    numeraires.forEach((n: Numeraire) => { numeraireMap[`${n.name} (${n.symbol})`] = n; });\r\n\r\n    const handleNumeraire = (value: string) => {\r\n        setNumeraire(numeraireMap[value]);\r\n    };\r\n\r\n    const numberOptions = {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n    };\r\n\r\n    const cellTextSize: MantineSize = \"md\";\r\n    const headerTextSize: MantineSize = \"lg\";\r\n    const subTextSize: MantineSize = \"sm\";\r\n    const rows = Object.values(assetTokens)?.filter((a: AssetToken) => (a.reserve > 0 && a.k !== undefined && a.fee !== undefined)).map((a: AssetToken, i: number) => (\r\n        <tr key={a.address}>\r\n            {/* <td>{i + 1}</td> */}\r\n            <td><span><Text size={cellTextSize} color=\"bold\" component=\"span\">{`${a.name}`}</Text><Text size=\"xs\" color=\"dimmed\" component=\"span\">{` (${a.symbol})`}</Text></span></td>\r\n            {address ? <td align=\"right\"><Text size={cellTextSize}>{(balance(a) / numeraire.price).toLocaleString(undefined, numberOptions)}</Text></td> : null}\r\n            <td align=\"right\"><Text size={cellTextSize}>{(price(a) / numeraire.price).toLocaleString(undefined, numberOptions)}</Text></td>\r\n            {/* <td align=\"right\">{`${100 / (assets.length)}%`}</td> */}\r\n            <td align=\"right\"><Text size={cellTextSize}>{(a.reserve / numeraire.price).toLocaleString(undefined, numberOptions)}</Text></td>\r\n            <td align=\"right\"><Text size={cellTextSize}>{(10000 * a.fee).toLocaleString()}</Text></td>\r\n            <td align=\"right\"><Text size={cellTextSize}>{a.k.toLocaleString()}</Text></td>\r\n        </tr>\r\n    ));\r\n\r\n    return (\r\n        <Container>\r\n            <Title>Liquidity Pool</Title>\r\n            {isAuthenticated ?\r\n                (<>\r\n                    <Button onClick={() => setOpened(true)} mt=\"xl\">Swap</Button>\r\n                    <Modal\r\n                        size=\"800px\"\r\n                        opened={opened}\r\n                        onClose={() => setOpened(false)}\r\n                        radius=\"lg\"\r\n                        title={<Title align=\"center\" order={3}>Mulit-Asset Swap</Title>}\r\n                    >\r\n                        <Swap\r\n                            poolToken={poolToken}\r\n                            assetTokens={assetTokens}\r\n                        />\r\n                    </Modal>\r\n                </>) : null}\r\n            <Card withBorder p=\"xl\" radius=\"md\" mt=\"lg\">\r\n                <Title order={3}>Pool Tokens</Title>\r\n                <SimpleGrid cols={address ? 4 : 3}>\r\n                    {address ?\r\n                        (<div>\r\n                            <Text size=\"xl\" mt=\"md\">{(poolBalance / numeraire.price).toLocaleString() + \" \" + numeraire.symbol}</Text>\r\n                            <Text size={subTextSize} color=\"dimmed\">Balance</Text>\r\n                        </div>) : null}\r\n                    <div>\r\n                        <Text size=\"xl\" mt=\"md\">{(poolTokens / numeraire.price).toLocaleString() + \" \" + numeraire.symbol}</Text>\r\n                        <Text size={subTextSize} color=\"dimmed\">TVL</Text>\r\n                    </div>\r\n                    <div>\r\n                        <Text size=\"xl\" mt=\"md\">{poolTokens?.toLocaleString()}</Text>\r\n                        <Text size={subTextSize} color=\"dimmed\">Outstanding</Text>\r\n                    </div>\r\n                    <div>\r\n                        <NativeSelect\r\n                            mt=\"md\"\r\n                            value={`${numeraire.name} (${numeraire.symbol})`}\r\n                            onChange={(event) => handleNumeraire(event.currentTarget.value)}\r\n                            data={numeraires.map(n => `${n.name} (${n.symbol})`)}\r\n                            description=\"Select numeraire\"\r\n                            // label=\"Select numeraire\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                </SimpleGrid>\r\n            </Card>\r\n            <Card withBorder p=\"xl\" radius=\"md\" mt=\"lg\">\r\n                <Title order={3}>AssetToken Tokens</Title>\r\n                <Text size=\"xl\" mt=\"md\">{Object.values(assetTokens)?.length.toLocaleString()}</Text>\r\n                <Text size={subTextSize} color=\"dimmed\">Number of assets</Text>\r\n                <Group mt=\"lg\">\r\n                    <Table\r\n                        verticalSpacing=\"sm\"\r\n                        style={{ width: \"100%\" }}\r\n                        highlightOnHover\r\n                    >\r\n                        <thead>\r\n                            <tr>\r\n                                {/* <th>#</th> */}\r\n                                <th><Text size={headerTextSize}>Name</Text></th>\r\n                                {address ?\r\n                                    <th><Text size={headerTextSize}>Balance ({numeraire.symbol})</Text></th> : null}\r\n                                <th><Text size={headerTextSize}>Price ({numeraire.symbol})</Text></th>\r\n                                {/* <th><Text size={headerTextSize}>Weight</Text></th> */}\r\n                                <th><Text size={headerTextSize}>Reserves ({numeraire.symbol})</Text></th>\r\n                                <th><Text size={headerTextSize}>Fee (bps)</Text></th>\r\n                                <th><Text size={headerTextSize}>Tuning (k)</Text></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>{rows}</tbody>\r\n                    </Table>\r\n                </Group>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n", "import { useState } from \"react\";\nimport {\n    Button,\n    SimpleGrid,\n    Text\n} from \"@mantine/core\";\n\nimport type { PoolToken, AssetToken } from \"~/moralis.server\";\n\nimport PayComponent from \"./PayComponent\";\nimport ReceiveComponent from \"./ReceiveComponent\";\nimport TokenSelect from \"./TokenSelect\";\n\ntype Dict<T> = {\n    [key: string]: T\n};\n\nexport type SwapState = {\n    poolToken: PoolToken\n    assetTokens: Dict<AssetToken>\n}\n\ntype SwapProps = {\n    poolToken: PoolToken,\n    assetTokens: Dict<AssetToken>\n};\n\nconst Swap = (props: SwapProps) => {\n    const [swapState, setSwapState] = useState<SwapState>(props);\n    const { poolToken, assetTokens } = swapState;\n\n    const getPreTradePrice = (asset: AssetToken) => {\n        return asset.weight * poolToken.outstanding / asset.reserve;\n    };\n\n    const getPostTradePrice = (asset: AssetToken, newPoolTokens: number) => {\n        return asset.weight * newPoolTokens / (asset.reserve + asset.amount);\n    };\n\n    const getAssetAmountIn = (assets: AssetToken[], newPoolTokens: number) => {\n        return assets.reduce(\n            (total: number, asset: AssetToken) => total + asset.amount * getPostTradePrice(asset, newPoolTokens),\n            0\n        );\n    };\n\n    const getQuote = (swapState: SwapState) => {\n        console.log(\"Getting quote...\");\n\n        const { poolToken, assetTokens } = swapState;\n\n        let newPoolTokens: number = poolToken.outstanding + poolToken.amount;\n\n        const selectedPayTokens = Object.values(assetTokens).filter(\n            (asset: AssetToken) => asset.isPay\n        )\n\n        const selectedReceiveTokens = Object.values(assetTokens).filter(\n            (asset: AssetToken) => asset.isReceive\n        )\n\n        let assetAmountIn: number = getAssetAmountIn(selectedPayTokens, newPoolTokens);\n\n        let totalAmountIn: number = assetAmountIn - poolToken.amount;\n\n        if (poolToken.allocation !== 0) {\n            const factor: number = (1 - poolToken.fee) *\n                poolToken.allocation -\n                getAssetAmountIn(selectedPayTokens, 1);\n\n            const poolTokensOut = totalAmountIn / factor;\n\n            newPoolTokens -= poolTokensOut;\n\n            assetAmountIn = getAssetAmountIn(selectedPayTokens, newPoolTokens);\n\n            totalAmountIn = assetAmountIn + poolTokensOut;\n        };\n\n        const quotes = selectedReceiveTokens.map(\n            (token: AssetToken) => {\n                const allocation = token.allocation / 100;\n                const factor = (1 - token.fee) * allocation * totalAmountIn / (token.weight * newPoolTokens);\n                console.log(`factor: ${factor}`);\n                const amountOut = factor * token.reserve / (1 + factor);\n                token.amount = -amountOut;\n                const preTradePrice = getPreTradePrice(token);\n                const postTradePrice = getPostTradePrice(token, newPoolTokens);\n                \n                return {\n                    token,\n                    preTradePrice,\n                    postTradePrice,\n                    amountOut\n                }\n            }\n        );\n        setSwapState({ poolToken, assetTokens });\n        return quotes;\n    };\n\n    const totalAllocation = Object.values(assetTokens).reduce(\n        (total: number, { allocation }) => total + allocation,\n        0\n    );\n\n    const handleSwap = () => {\n        const quotes = getQuote(swapState);\n        console.log(quotes);\n    };\n\n    return (\n        <>\n            <SimpleGrid cols={2}>\n                <TokenSelect\n                    title=\"Pay Tokens\"\n                    swapState={swapState}\n                    getQuote={getQuote}\n                    tokenComponent={PayComponent}\n                    isPay={true}\n                    placeholder=\"Select tokens to deposit:\"\n                />\n                <TokenSelect\n                    title=\"Receive Tokens\"\n                    swapState={swapState}\n                    getQuote={getQuote}\n                    tokenComponent={ReceiveComponent}\n                    isPay={false}\n                    placeholder=\"Select tokens to withdraw:\"\n                />\n            </SimpleGrid>\n            <Text>{`Total allocation: ${totalAllocation}%`}</Text>\n            <Button\n                onClick={handleSwap}\n                mt=\"xl\"\n                size=\"md\"\n                disabled={totalAllocation !== 100}\n            >\n                Swap\n            </Button>\n        </>\n    );\n};\n\nexport default Swap;\n", "\nimport { FC } from \"react\";\nimport {\n    Card,\n    Group,\n    NumberInput,\n    Text\n} from \"@mantine/core\";\n\nimport type { TokenComponentProps } from \"../TokenSelect\";\n\nconst PayComponent: FC<TokenComponentProps> = (props: TokenComponentProps) => {\n    const { token, swapState, getQuote } = props;\n    const { poolToken, assetTokens } = swapState;\n\n    const handleAmountChange = (amount: number) => {\n        assetTokens[token.address].amount = amount;\n        getQuote({ poolToken, assetTokens });\n    };\n\n    return (\n        <Card radius=\"md\" mt=\"xs\">\n            <NumberInput\n                // variant=\"unstyled\"\n                // defaultValue={0}\n                precision={2}\n                size=\"lg\"\n                icon={<Text size=\"md\">{token.symbol}</Text>}\n                hideControls\n                value={assetTokens[token.address].amount}\n                onChange={(a: number) => handleAmountChange(a)}\n                min={0}\n            // rightSection={<Text size=\"lg\">{token.symbol}</Text>}\n            />\n            <Group mt=\"xs\" position=\"left\">\n                <Text>Balance:</Text>\n                <Text>{token.balance.toLocaleString()}</Text>\n                <Text>{token.symbol}</Text>\n            </Group>\n            <Group mt=\"xs\" position=\"left\">\n                <Text>Pool Reserve:</Text>\n                <Text>{token.reserve.toLocaleString()}</Text>\n                <Text>{token.symbol}</Text>\n            </Group>\n        </Card>\n    );\n};\n\nexport default PayComponent;\n", "import { FC } from \"react\";\nimport {\n    Card,\n    Group,\n    NumberInput,\n    Text\n} from \"@mantine/core\";\n\nimport type { TokenComponentProps } from \"../TokenSelect\";\n\nconst ReceiveComponent: FC<TokenComponentProps> = (props: TokenComponentProps) => {\n    const { token, swapState, getQuote } = props;\n    const { poolToken, assetTokens } = swapState;\n\n    const handleAllocationChange = (allocation: number) => {\n        assetTokens[token.address].allocation = allocation;\n        getQuote({ poolToken, assetTokens });\n    };\n\n    return (\n        <Card radius=\"md\" mt=\"xs\">\n            <Text size=\"md\" mt=\"sm\" component=\"span\" color=\"dimmed\">\n                {token.symbol}\n            </Text>\n            <Text size=\"lg\" mt=\"sm\" component=\"span\" ml=\"md\">\n                {(-token.amount).toFixed(4)}\n            </Text>\n            <Group mt=\"xs\">\n                <Text\n                    component=\"span\"\n                    size=\"md\"\n                    styles={{ width: \"50%\" }}\n                >\n                    Allocation:\n                </Text>\n                <NumberInput\n                    // variant=\"filled\"\n                    // width={\"50%\"}\n                    // defaultValue={0}\n                    precision={2}\n                    size=\"md\"\n                    // icon={<Text size=\"md\">{token.symbol}</Text>}\n                    // hideControls\n                    value={assetTokens[token.address].allocation}\n                    onChange={(a: number) => handleAllocationChange(a)}\n                    rightSection={<>%</>}\n                    styles={{ root: { width: \"50%\" } }}\n                    min={0}\n                />\n            </Group>\n            <Group mt=\"xs\" position=\"left\">\n                <Text>Pool Reserve:</Text>\n                <Text>{token.reserve.toLocaleString()}</Text>\n                <Text>{token.symbol}</Text>\n            </Group>\n        </Card>\n    );\n};\n\nexport default ReceiveComponent;\n", "import { FC } from \"react\";\nimport {\n    MultiSelect,\n    Paper,\n    SelectItem,\n    Title,\n} from \"@mantine/core\";\n\nimport type { AssetToken } from \"~/moralis.server\";\nimport type { SwapState } from \"../../Swap\";\n\nimport TokenItem from \"./TokenItem\";\n\nexport type TokenComponentProps = {\n    token: AssetToken\n    swapState: SwapState\n    getQuote: Function\n};\n\ntype TokenSelectProps = {\n    title: string\n    swapState: SwapState\n    getQuote: Function\n    tokenComponent: FC<TokenComponentProps>\n    isPay: boolean\n    placeholder: string\n};\n\nconst TokenSelect = (props: TokenSelectProps) => {\n    const {\n        title,\n        swapState,\n        getQuote,\n        tokenComponent,\n        isPay,\n        placeholder\n    } = props;\n    const { poolToken, assetTokens } = swapState;\n\n    const TokenComponent: FC<TokenComponentProps> = tokenComponent;\n\n    const getItems = () => {\n        let items: SelectItem[] = [];\n        if ((isPay && poolToken.balance > 0) || (!isPay && poolToken.balance == 0)) {\n            items.push({\n                label: `${poolToken.name} (${poolToken.symbol})`,\n                value: poolToken.address,\n                token: poolToken,\n                group: \"Pool Token\"\n            })\n        };\n        items = items.concat(Object.values(\n            assetTokens\n        ).filter(\n            (t: AssetToken) => isPay ? !t.isReceive : !t.isPay\n        ).map((t: AssetToken) => {\n            return {\n                label: `${t.name} (${t.symbol})`,\n                value: t.address,\n                token: t,\n                group: \"Asset Tokens\"\n            }\n        }));\n        return items;\n    };\n    const items: SelectItem[] = getItems();\n\n    const selectedTokens = items.filter(\n        (a: SelectItem) => isPay ? a.token.isPay : a.token.isReceive\n    );\n\n    const handleSelect = ((v: string[]) => {\n        if (v.includes(poolToken.address)) {\n            console.log(\"Selection includes the pool token\");\n            v.splice(v.indexOf(poolToken.address),1) \n            poolToken.isPay = isPay;\n            poolToken.isReceive = !isPay;\n        } else {\n            if (isPay) {\n                poolToken.isPay = !isPay;\n                poolToken.amount = 0;\n            } else {\n                poolToken.isReceive = isPay;\n                poolToken.allocation = 0;\n            };\n        };;\n        const nSelected = v.length;\n        if (nSelected) {\n            Object.values(assetTokens).forEach((a: AssetToken) => {\n                if (v.includes(a.address)) {\n                    a.isPay = isPay;\n                    a.isReceive = !isPay;\n                } else {\n                    if (isPay) {\n                        a.isPay = !isPay;\n                        a.amount = 0;\n                    } else {\n                        a.isReceive = isPay;\n                        a.allocation = 0;\n                    };\n                };\n            });\n            if (isPay) {\n                for (let i = 0; i < nSelected; i++) {\n                    const oldAmount = assetTokens[v[i]].amount;\n                    assetTokens[v[i]].amount = oldAmount == 0 ? 1 : oldAmount;\n                }\n            } else {\n                let totalAllocation = 0;\n                for (let i = 0; i < nSelected - 1; i++) {\n                    totalAllocation += assetTokens[v[i]].allocation;\n                }\n                assetTokens[v[nSelected - 1]].allocation = Math.max(0, 100 - totalAllocation);\n            };\n        };\n        getQuote({ poolToken, assetTokens });\n    });\n\n    return (\n        <Paper withBorder p=\"xl\" radius=\"md\" mt=\"lg\">\n            <Title order={4} align=\"center\">{title}</Title>\n            {\n                Object.values(assetTokens)\n                    .filter((token: AssetToken) => isPay ? token.isPay : token.isReceive)\n                    .map((token: AssetToken, i: number) => {\n                        return (\n                            <TokenComponent\n                                token={token}\n                                swapState={swapState}\n                                getQuote={getQuote}\n                                key={token.address}\n                            />\n                        )\n                    })\n            }\n            <MultiSelect\n                data={items}\n                itemComponent={TokenItem}\n                // value={selectedTokens.map((token: AssetToken) => token.address)}\n                value={items.filter(item => isPay ? item.token.isPay : item.token.isReceive).map(item => item.token.address)}\n                onChange={handleSelect}\n                mt=\"xs\"\n                size=\"md\"\n                placeholder={placeholder}\n                searchable\n                nothingFound=\"Nothing found\"\n                clearable\n                clearButtonLabel=\"Clear selected tokens\"\n            />\n        </Paper >\n    );\n};\n\nexport default TokenSelect;\n", "import { forwardRef } from \"react\";\nimport {\n    Text,\n} from \"@mantine/core\";\n\nimport type { PoolToken, AssetToken } from \"~/moralis.server\";\n\ntype TokenItemProps = {\n    label: string,\n    value: string,\n    token: PoolToken | AssetToken\n};\n\nconst TokenItem = forwardRef<HTMLDivElement, TokenItemProps>(\n    ({ label, value, token, ...others }: TokenItemProps, ref) => {\n        return (\n            <div ref={ref} style={{ width: \"100%\" }} {...others}>\n                <span>\n                    <Text size=\"md\" color=\"bold\" component=\"span\">\n                        {`${token.name}`}\n                    </Text>\n                    <Text size=\"xs\" color=\"dimmed\" component=\"span\">\n                        {` (${token.symbol})`}\n                    </Text>\n                </span>\n            </div>\n        );\n    }\n);\n\nexport default TokenItem;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAMA,IAAM,kBAAkB,MAAM;AAC1B,QAAM;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,MACA;AAEJ,QAAM,cAAc,YAAY;AAAE,UAAM;AAAA;AACxC,QAAM,eAAe,YAAY;AAAE,UAAM;AAAA;AAEzC,SACI,oCAAC,QAAD;AAAA,IAAQ,QAAQ;AAAA,IAAI,GAAE;AAAA,KACjB,kBACG,oCAAC,QAAD;AAAA,IAAQ,SAAS;AAAA,KAAc,YAC/B,oCAAC,QAAD;AAAA,IAAQ,SAAS;AAAA,KAAa;AAAA;AAM9C,IAAO,iBAAQ;;;AC1Bf;AAGA,IAAM,cAAc,CAAC,EAAE,eAAoB;AACvC,QAAM,EAAE,iBAAiB,iBAAiB;AAE1C,QAAM,cAAc,YAAY;AAAE,UAAM;AAAA;AAExC,SACI,0DACK,kBACG,WACA,oCAAC,QAAD;AAAA,IAAQ,SAAS;AAAA,KAAa;AAAA;AAM9C,IAAO,sBAAQ;;;AClBf;AAAA,oBAAoC;;;ACApC;AAAA,oBAAyB;;;ACAzB;AAWA,IAAM,eAAwC,CAAC,UAA+B;AAC1E,QAAM,EAAE,OAAO,WAAW,aAAa;AACvC,QAAM,EAAE,WAAW,gBAAgB;AAEnC,QAAM,qBAAqB,CAAC,WAAmB;AAC3C,gBAAY,MAAM,SAAS,SAAS;AACpC,aAAS,EAAE,WAAW;AAAA;AAG1B,SACI,oCAAC,MAAD;AAAA,IAAM,QAAO;AAAA,IAAK,IAAG;AAAA,KACjB,oCAAC,aAAD;AAAA,IAGI,WAAW;AAAA,IACX,MAAK;AAAA,IACL,MAAM,oCAAC,MAAD;AAAA,MAAM,MAAK;AAAA,OAAM,MAAM;AAAA,IAC7B,cAAY;AAAA,IACZ,OAAO,YAAY,MAAM,SAAS;AAAA,IAClC,UAAU,CAAC,MAAc,mBAAmB;AAAA,IAC5C,KAAK;AAAA,MAGT,oCAAC,OAAD;AAAA,IAAO,IAAG;AAAA,IAAK,UAAS;AAAA,KACpB,oCAAC,MAAD,MAAM,aACN,oCAAC,MAAD,MAAO,MAAM,QAAQ,mBACrB,oCAAC,MAAD,MAAO,MAAM,UAEjB,oCAAC,OAAD;AAAA,IAAO,IAAG;AAAA,IAAK,UAAS;AAAA,KACpB,oCAAC,MAAD,MAAM,kBACN,oCAAC,MAAD,MAAO,MAAM,QAAQ,mBACrB,oCAAC,MAAD,MAAO,MAAM;AAAA;AAM7B,IAAO,uBAAQ;;;AChDf;AAUA,IAAM,mBAA4C,CAAC,UAA+B;AAC9E,QAAM,EAAE,OAAO,WAAW,aAAa;AACvC,QAAM,EAAE,WAAW,gBAAgB;AAEnC,QAAM,yBAAyB,CAAC,eAAuB;AACnD,gBAAY,MAAM,SAAS,aAAa;AACxC,aAAS,EAAE,WAAW;AAAA;AAG1B,SACI,oCAAC,MAAD;AAAA,IAAM,QAAO;AAAA,IAAK,IAAG;AAAA,KACjB,oCAAC,MAAD;AAAA,IAAM,MAAK;AAAA,IAAK,IAAG;AAAA,IAAK,WAAU;AAAA,IAAO,OAAM;AAAA,KAC1C,MAAM,SAEX,oCAAC,MAAD;AAAA,IAAM,MAAK;AAAA,IAAK,IAAG;AAAA,IAAK,WAAU;AAAA,IAAO,IAAG;AAAA,KACtC,EAAC,MAAM,QAAQ,QAAQ,KAE7B,oCAAC,OAAD;AAAA,IAAO,IAAG;AAAA,KACN,oCAAC,MAAD;AAAA,IACI,WAAU;AAAA,IACV,MAAK;AAAA,IACL,QAAQ,EAAE,OAAO;AAAA,KACpB,gBAGD,oCAAC,aAAD;AAAA,IAII,WAAW;AAAA,IACX,MAAK;AAAA,IAGL,OAAO,YAAY,MAAM,SAAS;AAAA,IAClC,UAAU,CAAC,MAAc,uBAAuB;AAAA,IAChD,cAAc,0DAAE;AAAA,IAChB,QAAQ,EAAE,MAAM,EAAE,OAAO;AAAA,IACzB,KAAK;AAAA,OAGb,oCAAC,OAAD;AAAA,IAAO,IAAG;AAAA,IAAK,UAAS;AAAA,KACpB,oCAAC,MAAD,MAAM,kBACN,oCAAC,MAAD,MAAO,MAAM,QAAQ,mBACrB,oCAAC,MAAD,MAAO,MAAM;AAAA;AAM7B,IAAO,2BAAQ;;;AC3Df;;;ACAA;AAAA,mBAA2B;AAa3B,IAAM,YAAY,6BACd,CAAC,EAAE,OAAO,OAAO,UAAU,UAA0B,QAAQ;AACzD,SACI,oCAAC,OAAD;AAAA,IAAK;AAAA,IAAU,OAAO,EAAE,OAAO;AAAA,OAAc;AAAA,KACzC,oCAAC,QAAD,MACI,oCAAC,MAAD;AAAA,IAAM,MAAK;AAAA,IAAK,OAAM;AAAA,IAAO,WAAU;AAAA,KAClC,GAAG,MAAM,SAEd,oCAAC,MAAD;AAAA,IAAM,MAAK;AAAA,IAAK,OAAM;AAAA,IAAS,WAAU;AAAA,KACpC,KAAK,MAAM;AAAA;AAQpC,IAAO,oBAAQ;;;ADFf,IAAM,cAAc,CAAC,UAA4B;AAC7C,QAAM;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACA;AACJ,QAAM,EAAE,WAAW,gBAAgB;AAEnC,QAAM,iBAA0C;AAEhD,QAAM,WAAW,MAAM;AACnB,QAAI,SAAsB;AAC1B,QAAK,SAAS,UAAU,UAAU,KAAO,CAAC,SAAS,UAAU,WAAW,GAAI;AACxE,aAAM,KAAK;AAAA,QACP,OAAO,GAAG,UAAU,SAAS,UAAU;AAAA,QACvC,OAAO,UAAU;AAAA,QACjB,OAAO;AAAA,QACP,OAAO;AAAA;AAAA;AAEd;AACD,aAAQ,OAAM,OAAO,OAAO,OACxB,aACF,OACE,CAAC,MAAkB,QAAQ,CAAC,EAAE,YAAY,CAAC,EAAE,OAC/C,IAAI,CAAC,MAAkB;AACrB,aAAO;AAAA,QACH,OAAO,GAAG,EAAE,SAAS,EAAE;AAAA,QACvB,OAAO,EAAE;AAAA,QACT,OAAO;AAAA,QACP,OAAO;AAAA;AAAA;AAGf,WAAO;AAAA;AAEX,QAAM,QAAsB;AAE5B,QAAM,iBAAiB,MAAM,OACzB,CAAC,MAAkB,QAAQ,EAAE,MAAM,QAAQ,EAAE,MAAM;AAGvD,QAAM,eAAgB,CAAC,MAAgB;AACnC,QAAI,EAAE,SAAS,UAAU,UAAU;AAC/B,cAAQ,IAAI;AACZ,QAAE,OAAO,EAAE,QAAQ,UAAU,UAAS;AACtC,gBAAU,QAAQ;AAClB,gBAAU,YAAY,CAAC;AAAA,WACpB;AACH,UAAI,OAAO;AACP,kBAAU,QAAQ,CAAC;AACnB,kBAAU,SAAS;AAAA,aAChB;AACH,kBAAU,YAAY;AACtB,kBAAU,aAAa;AAAA;AAC1B;AAAA;AACJ;AAAC;AACF,UAAM,YAAY,EAAE;AACpB,QAAI,WAAW;AACX,aAAO,OAAO,aAAa,QAAQ,CAAC,MAAkB;AAClD,YAAI,EAAE,SAAS,EAAE,UAAU;AACvB,YAAE,QAAQ;AACV,YAAE,YAAY,CAAC;AAAA,eACZ;AACH,cAAI,OAAO;AACP,cAAE,QAAQ,CAAC;AACX,cAAE,SAAS;AAAA,iBACR;AACH,cAAE,YAAY;AACd,cAAE,aAAa;AAAA;AAClB;AAAA;AACJ;AAAA;AAEL,UAAI,OAAO;AACP,iBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,gBAAM,YAAY,YAAY,EAAE,IAAI;AACpC,sBAAY,EAAE,IAAI,SAAS,aAAa,IAAI,IAAI;AAAA;AAAA,aAEjD;AACH,YAAI,kBAAkB;AACtB,iBAAS,IAAI,GAAG,IAAI,YAAY,GAAG,KAAK;AACpC,6BAAmB,YAAY,EAAE,IAAI;AAAA;AAEzC,oBAAY,EAAE,YAAY,IAAI,aAAa,KAAK,IAAI,GAAG,MAAM;AAAA;AAChE;AAAA;AACJ;AACD,aAAS,EAAE,WAAW;AAAA;AAG1B,SACI,oCAAC,OAAD;AAAA,IAAO,YAAU;AAAA,IAAC,GAAE;AAAA,IAAK,QAAO;AAAA,IAAK,IAAG;AAAA,KACpC,oCAAC,OAAD;AAAA,IAAO,OAAO;AAAA,IAAG,OAAM;AAAA,KAAU,QAE7B,OAAO,OAAO,aACT,OAAO,CAAC,UAAsB,QAAQ,MAAM,QAAQ,MAAM,WAC1D,IAAI,CAAC,OAAmB,MAAc;AACnC,WACI,oCAAC,gBAAD;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK,MAAM;AAAA;AAAA,MAK/B,oCAAC,aAAD;AAAA,IACI,MAAM;AAAA,IACN,eAAe;AAAA,IAEf,OAAO,MAAM,OAAO,UAAQ,QAAQ,KAAK,MAAM,QAAQ,KAAK,MAAM,WAAW,IAAI,UAAQ,KAAK,MAAM;AAAA,IACpG,UAAU;AAAA,IACV,IAAG;AAAA,IACH,MAAK;AAAA,IACL;AAAA,IACA,YAAU;AAAA,IACV,cAAa;AAAA,IACb,WAAS;AAAA,IACT,kBAAiB;AAAA;AAAA;AAMjC,IAAO,sBAAQ;;;AH9Hf,IAAM,OAAO,CAAC,UAAqB;AAC/B,QAAM,CAAC,WAAW,gBAAgB,4BAAoB;AACtD,QAAM,EAAE,WAAW,gBAAgB;AAEnC,QAAM,mBAAmB,CAAC,UAAsB;AAC5C,WAAO,MAAM,SAAS,UAAU,cAAc,MAAM;AAAA;AAGxD,QAAM,oBAAoB,CAAC,OAAmB,kBAA0B;AACpE,WAAO,MAAM,SAAS,gBAAiB,OAAM,UAAU,MAAM;AAAA;AAGjE,QAAM,mBAAmB,CAAC,QAAsB,kBAA0B;AACtE,WAAO,OAAO,OACV,CAAC,OAAe,UAAsB,QAAQ,MAAM,SAAS,kBAAkB,OAAO,gBACtF;AAAA;AAIR,QAAM,WAAW,CAAC,eAAyB;AACvC,YAAQ,IAAI;AAEZ,UAAM,EAAE,uBAAW,8BAAgB;AAEnC,QAAI,gBAAwB,WAAU,cAAc,WAAU;AAE9D,UAAM,oBAAoB,OAAO,OAAO,cAAa,OACjD,CAAC,UAAsB,MAAM;AAGjC,UAAM,wBAAwB,OAAO,OAAO,cAAa,OACrD,CAAC,UAAsB,MAAM;AAGjC,QAAI,gBAAwB,iBAAiB,mBAAmB;AAEhE,QAAI,gBAAwB,gBAAgB,WAAU;AAEtD,QAAI,WAAU,eAAe,GAAG;AAC5B,YAAM,SAAkB,KAAI,WAAU,OAClC,WAAU,aACV,iBAAiB,mBAAmB;AAExC,YAAM,gBAAgB,gBAAgB;AAEtC,uBAAiB;AAEjB,sBAAgB,iBAAiB,mBAAmB;AAEpD,sBAAgB,gBAAgB;AAAA;AACnC;AAED,UAAM,SAAS,sBAAsB,IACjC,CAAC,UAAsB;AACnB,YAAM,aAAa,MAAM,aAAa;AACtC,YAAM,SAAU,KAAI,MAAM,OAAO,aAAa,gBAAiB,OAAM,SAAS;AAC9E,cAAQ,IAAI,WAAW;AACvB,YAAM,YAAY,SAAS,MAAM,UAAW,KAAI;AAChD,YAAM,SAAS,CAAC;AAChB,YAAM,gBAAgB,iBAAiB;AACvC,YAAM,iBAAiB,kBAAkB,OAAO;AAEhD,aAAO;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA;AAIZ,iBAAa,EAAE,uBAAW;AAC1B,WAAO;AAAA;AAGX,QAAM,kBAAkB,OAAO,OAAO,aAAa,OAC/C,CAAC,OAAe,EAAE,iBAAiB,QAAQ,YAC3C;AAGJ,QAAM,aAAa,MAAM;AACrB,UAAM,SAAS,SAAS;AACxB,YAAQ,IAAI;AAAA;AAGhB,SACI,0DACI,oCAAC,YAAD;AAAA,IAAY,MAAM;AAAA,KACd,oCAAC,qBAAD;AAAA,IACI,OAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA,gBAAgB;AAAA,IAChB,OAAO;AAAA,IACP,aAAY;AAAA,MAEhB,oCAAC,qBAAD;AAAA,IACI,OAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA,gBAAgB;AAAA,IAChB,OAAO;AAAA,IACP,aAAY;AAAA,OAGpB,oCAAC,MAAD,MAAO,qBAAqB,qBAC5B,oCAAC,QAAD;AAAA,IACI,SAAS;AAAA,IACT,IAAG;AAAA,IACH,MAAK;AAAA,IACL,UAAU,oBAAoB;AAAA,KACjC;AAAA;AAOb,IAAO,eAAQ;;;ADrGf,IAAM,YAAY,CAAC,UAA0B;AA3C7C;AA4CI,QAAM;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACA;AACJ,QAAM,EAAE,SAAS,WAAW,aAAa,aAAa;AAEtD,QAAM,CAAC,QAAQ,aAAa,4BAAkB;AAE9C,QAAM,WAAW;AAEjB,+BAAU,MAAM;AACZ,QAAI,mBAAmB,CAAC;AAAe;AAEvC,UAAM,cAAc,kBAAkB,UAAU,cAAc,YAAY,WAAW;AAErF,QAAI,iBAAiB,gBAAgB;AAAU,eAAS;AAAA,KACzD,CAAC,eAAe,iBAAiB;AAEpC,QAAM,cAAc,UAAU;AAC9B,QAAM,aAAa,UAAU;AAE7B,QAAM,QAAQ,CAAC,UAAsB;AACjC,WAAO,aAAa,MAAM,SAAS,MAAM;AAAA;AAG7C,QAAM,UAAU,CAAC,UAAsB;AACnC,WAAO,MAAM;AAAA;AAGjB,QAAM,qBAAqB,EAAE,MAAM,UAAU,MAAM,QAAQ,UAAU,QAAQ,OAAO;AACpF,QAAM,CAAC,WAAW,gBAAgB,4BAAoB;AAEtD,QAAM,aAAa,CAAC,oBAAoB,GAAG,aAAO,OAAO,iBAAd,mBAA4B,IAAI,CAAC,MAAkB;AAC1F,WAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,EAAE,QAAQ,OAAO,MAAM;AAAA;AAE1D,QAAM,eAAgC;AACtC,aAAW,QAAQ,CAAC,MAAiB;AAAE,iBAAa,GAAG,EAAE,SAAS,EAAE,aAAa;AAAA;AAEjF,QAAM,kBAAkB,CAAC,UAAkB;AACvC,iBAAa,aAAa;AAAA;AAG9B,QAAM,gBAAgB;AAAA,IAClB,uBAAuB;AAAA,IACvB,uBAAuB;AAAA;AAG3B,QAAM,eAA4B;AAClC,QAAM,iBAA8B;AACpC,QAAM,cAA2B;AACjC,QAAM,OAAO,aAAO,OAAO,iBAAd,mBAA4B,OAAO,CAAC,MAAmB,EAAE,UAAU,KAAK,EAAE,MAAM,UAAa,EAAE,QAAQ,QAAY,IAAI,CAAC,GAAe,MAChJ,oCAAC,MAAD;AAAA,IAAI,KAAK,EAAE;AAAA,KAEP,oCAAC,MAAD,MAAI,oCAAC,QAAD,MAAM,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,IAAc,OAAM;AAAA,IAAO,WAAU;AAAA,KAAQ,GAAG,EAAE,SAAc,oCAAC,MAAD;AAAA,IAAM,MAAK;AAAA,IAAK,OAAM;AAAA,IAAS,WAAU;AAAA,KAAQ,KAAK,EAAE,cAC7I,UAAU,oCAAC,MAAD;AAAA,IAAI,OAAM;AAAA,KAAQ,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KAAgB,SAAQ,KAAK,UAAU,OAAO,eAAe,QAAW,mBAA8B,MAC/I,oCAAC,MAAD;AAAA,IAAI,OAAM;AAAA,KAAQ,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KAAgB,OAAM,KAAK,UAAU,OAAO,eAAe,QAAW,kBAEpG,oCAAC,MAAD;AAAA,IAAI,OAAM;AAAA,KAAQ,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KAAgB,GAAE,UAAU,UAAU,OAAO,eAAe,QAAW,kBACrG,oCAAC,MAAD;AAAA,IAAI,OAAM;AAAA,KAAQ,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KAAgB,OAAQ,EAAE,KAAK,oBAC7D,oCAAC,MAAD;AAAA,IAAI,OAAM;AAAA,KAAQ,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KAAe,EAAE,EAAE;AAIzD,SACI,oCAAC,WAAD,MACI,oCAAC,OAAD,MAAO,mBACN,kBACI,0DACG,oCAAC,QAAD;AAAA,IAAQ,SAAS,MAAM,UAAU;AAAA,IAAO,IAAG;AAAA,KAAK,SAChD,oCAAC,OAAD;AAAA,IACI,MAAK;AAAA,IACL;AAAA,IACA,SAAS,MAAM,UAAU;AAAA,IACzB,QAAO;AAAA,IACP,OAAO,oCAAC,OAAD;AAAA,MAAO,OAAM;AAAA,MAAS,OAAO;AAAA,OAAG;AAAA,KAEvC,oCAAC,cAAD;AAAA,IACI;AAAA,IACA;AAAA,SAGL,MACX,oCAAC,MAAD;AAAA,IAAM,YAAU;AAAA,IAAC,GAAE;AAAA,IAAK,QAAO;AAAA,IAAK,IAAG;AAAA,KACnC,oCAAC,OAAD;AAAA,IAAO,OAAO;AAAA,KAAG,gBACjB,oCAAC,YAAD;AAAA,IAAY,MAAM,UAAU,IAAI;AAAA,KAC3B,UACI,oCAAC,OAAD,MACG,oCAAC,MAAD;AAAA,IAAM,MAAK;AAAA,IAAK,IAAG;AAAA,KAAO,eAAc,UAAU,OAAO,mBAAmB,MAAM,UAAU,SAC5F,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,IAAa,OAAM;AAAA,KAAS,cAClC,MACd,oCAAC,OAAD,MACI,oCAAC,MAAD;AAAA,IAAM,MAAK;AAAA,IAAK,IAAG;AAAA,KAAO,cAAa,UAAU,OAAO,mBAAmB,MAAM,UAAU,SAC3F,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,IAAa,OAAM;AAAA,KAAS,SAE5C,oCAAC,OAAD,MACI,oCAAC,MAAD;AAAA,IAAM,MAAK;AAAA,IAAK,IAAG;AAAA,KAAM,yCAAY,mBACrC,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,IAAa,OAAM;AAAA,KAAS,iBAE5C,oCAAC,OAAD,MACI,oCAAC,cAAD;AAAA,IACI,IAAG;AAAA,IACH,OAAO,GAAG,UAAU,SAAS,UAAU;AAAA,IACvC,UAAU,CAAC,UAAU,gBAAgB,MAAM,cAAc;AAAA,IACzD,MAAM,WAAW,IAAI,OAAK,GAAG,EAAE,SAAS,EAAE;AAAA,IAC1C,aAAY;AAAA,IAEZ,UAAQ;AAAA,SAKxB,oCAAC,MAAD;AAAA,IAAM,YAAU;AAAA,IAAC,GAAE;AAAA,IAAK,QAAO;AAAA,IAAK,IAAG;AAAA,KACnC,oCAAC,OAAD;AAAA,IAAO,OAAO;AAAA,KAAG,sBACjB,oCAAC,MAAD;AAAA,IAAM,MAAK;AAAA,IAAK,IAAG;AAAA,KAAM,aAAO,OAAO,iBAAd,mBAA4B,OAAO,mBAC5D,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,IAAa,OAAM;AAAA,KAAS,qBACxC,oCAAC,OAAD;AAAA,IAAO,IAAG;AAAA,KACN,oCAAC,OAAD;AAAA,IACI,iBAAgB;AAAA,IAChB,OAAO,EAAE,OAAO;AAAA,IAChB,kBAAgB;AAAA,KAEhB,oCAAC,SAAD,MACI,oCAAC,MAAD,MAEI,oCAAC,MAAD,MAAI,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KAAgB,UAC/B,UACG,oCAAC,MAAD,MAAI,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KAAgB,aAAU,UAAU,QAAO,QAAgB,MAC/E,oCAAC,MAAD,MAAI,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KAAgB,WAAQ,UAAU,QAAO,OAEzD,oCAAC,MAAD,MAAI,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KAAgB,cAAW,UAAU,QAAO,OAC5D,oCAAC,MAAD,MAAI,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KAAgB,eAChC,oCAAC,MAAD,MAAI,oCAAC,MAAD;AAAA,IAAM,MAAM;AAAA,KAAgB,kBAGxC,oCAAC,SAAD,MAAQ;AAAA;AAQhC,IAAO,oBAAQ;",
  "names": []
}
