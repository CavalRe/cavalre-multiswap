{
  "version": 3,
  "sources": ["../../../app/components/Dashboard/Header/index.tsx", "../../../app/components/Dashboard/RequireAuth/index.tsx", "../../../app/components/Dashboard/index.tsx"],
  "sourcesContent": ["import { useMoralis } from \"react-moralis\";\r\nimport {\r\n    Button,\r\n    Header\r\n} from '@mantine/core';\r\n\r\nconst DashboardHeader = () => {\r\n    const {\r\n        isAuthenticated,\r\n        authenticate,\r\n        logout\r\n    } = useMoralis();\r\n\r\n    const handleLogin = async () => { await authenticate(); };\r\n    const handleLogout = async () => { await logout(); };\r\n\r\n    return (\r\n        <Header height={60} p=\"xs\">\r\n            {isAuthenticated ?\r\n                <Button onClick={handleLogout}>Logout</Button> :\r\n                <Button onClick={handleLogin}>Connect Wallet</Button>\r\n            }\r\n        </Header>\r\n    )\r\n};\r\n\r\nexport default DashboardHeader;\r\n", "import { useMoralis } from \"react-moralis\";\nimport { Button } from '@mantine/core';\n\nconst RequireAuth = ({ children }: any) => {\n    const { isAuthenticated, authenticate } = useMoralis();\n\n    const handleLogin = async () => { await authenticate(); };\n\n    return (\n        <>\n            {isAuthenticated ?\n                children :\n                <Button onClick={handleLogin}>Connect Wallet</Button>\n            }\n        </>\n    );\n};\n\nexport default RequireAuth;\n", "import { useEffect, useState } from \"react\";\r\nimport { useMoralis } from \"react-moralis\";\r\nimport { useNavigate } from \"remix\";\r\nimport {\r\n    Card,\r\n    Container,\r\n    Group,\r\n    NativeSelect,\r\n    SimpleGrid,\r\n    Table,\r\n    Text,\r\n    Title\r\n} from '@mantine/core';\r\n\r\nimport type { Asset, Balance } from \"~/moralis.server\";\r\n\r\ntype Dict<T> = {\r\n    [key: string]: T\r\n};\r\n\r\ntype Numeraire = {\r\n    name: string,\r\n    symbol: string,\r\n    price: number\r\n};\r\n\r\nexport { default as Header } from \"~/components/Dashboard/Header\";\r\nexport { default as NavBar } from \"~/components/Dashboard/NavBar\";\r\nexport { default as RequireAuth } from \"~/components/Dashboard/RequireAuth\";\r\n\r\ntype DashboardProps = {\r\n    contractAddress: string,\r\n    address: string,\r\n    poolTokens: number,\r\n    assets: Asset[],\r\n    balances: Balance[]\r\n};\r\n\r\nconst Dashboard = (props: DashboardProps) => {\r\n    const { isAuthenticated, account } = useMoralis();\r\n    const { contractAddress, address, poolTokens, assets, balances } = props;\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated && account && address) {\r\n            address === account || navigate(`/dashboard/${account}`);\r\n        };\r\n    },[isAuthenticated,account,address])\r\n\r\n    const assetMap: Dict<Asset> = {};\r\n    assets?.forEach((a: Asset) => { assetMap[a.token_address] = a });\r\n\r\n    const balanceMap: Dict<Balance> = {};\r\n    balances?.forEach((b: Balance) => { balanceMap[b.token_address] = b });\r\n\r\n    const poolToken = { name: \"Pool Token\", symbol: \"P\", price: 1 }\r\n    const [numeraire, setNumeraire] = useState<Numeraire>(poolToken);\r\n\r\n    const poolBalance = balanceMap[contractAddress] ? parseInt(balanceMap[contractAddress].balance) / 1e18 : 0;\r\n\r\n    const price = (address: string) => {\r\n        const asset: Asset = assetMap[address];\r\n        return poolTokens * asset.weight / asset.reserve;\r\n    };\r\n\r\n    const balance = (address: string) => {\r\n        const lowerAddress = address.toLowerCase();\r\n        return balanceMap[lowerAddress] ? parseInt(balanceMap[lowerAddress].balance) / 1e18 : 0;\r\n    };\r\n\r\n    const numeraires = [poolToken, ...assets?.map((a: Asset) => ({ name: a.name, symbol: a.symbol, price: price(a.token_address) }))];\r\n    const numeraireMap: Dict<Numeraire> = {};\r\n    numeraires.forEach((n: Numeraire) => { numeraireMap[`${n.name} (${n.symbol})`] = n; });\r\n\r\n    const handleNumeraire = (value: string) => {\r\n        setNumeraire(numeraireMap[value]);\r\n    };\r\n\r\n    const numberOptions = {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n    };\r\n\r\n    const rows = assets?.map((a: Asset, i: number) => (\r\n        <tr key={a.token_address}>\r\n            {/* <td>{i + 1}</td> */}\r\n            <td><span><Text size=\"md\" color=\"bold\" component=\"span\">{`${a.name}`}</Text><Text size=\"xs\" color=\"dimmed\" component=\"span\">{` (${a.symbol})`}</Text></span></td>\r\n            {isAuthenticated ? <td align=\"right\">{(balance(a.token_address) / numeraire.price).toLocaleString(undefined, numberOptions)}</td> : null}\r\n            <td align=\"right\">{(price(a.token_address) / numeraire.price).toLocaleString(undefined, numberOptions)}</td>\r\n            {/* <td align=\"right\">{`${100 / (assets.length)}%`}</td> */}\r\n            <td align=\"right\">{(a.reserve / numeraire.price).toLocaleString(undefined, numberOptions)}</td>\r\n            <td align=\"right\">{(10000 * a.fee).toLocaleString()}</td>\r\n            <td align=\"right\">{a.k.toLocaleString()}</td>\r\n        </tr>\r\n    ));\r\n\r\n    return (\r\n        <Container>\r\n            <Title>Liquidity Pool</Title>\r\n            <Card withBorder p=\"xl\" radius=\"md\" mt=\"lg\">\r\n                <Title order={3}>Pool Tokens</Title>\r\n                <SimpleGrid cols={isAuthenticated ? 4 : 3}>\r\n                    {isAuthenticated ?\r\n                        (<div>\r\n                            <Text size=\"xl\" mt=\"md\">{(poolBalance / numeraire.price).toLocaleString() + \" \" + numeraire.symbol}</Text>\r\n                            <Text size=\"sm\" color=\"dimmed\">Balance</Text>\r\n                        </div>) : null}\r\n                    <div>\r\n                        <Text size=\"xl\" mt=\"md\">{(poolTokens / numeraire.price).toLocaleString() + \" \" + numeraire.symbol}</Text>\r\n                        <Text size=\"sm\" color=\"dimmed\">TVL</Text>\r\n                    </div>\r\n                    <div>\r\n                        <Text size=\"xl\" mt=\"md\">{poolTokens?.toLocaleString()}</Text>\r\n                        <Text size=\"sm\" color=\"dimmed\">Outstanding</Text>\r\n                    </div>\r\n                    <NativeSelect\r\n                        mt=\"md\"\r\n                        value={`${numeraire.name} (${numeraire.symbol})`}\r\n                        onChange={(event) => handleNumeraire(event.currentTarget.value)}\r\n                        data={numeraires.map(n => `${n.name} (${n.symbol})`)}\r\n                        description=\"Select numeraire\"\r\n                        // label=\"Select numeraire\"\r\n                        required\r\n                    />\r\n                </SimpleGrid>\r\n            </Card>\r\n            <Card withBorder p=\"xl\" radius=\"md\" mt=\"lg\">\r\n                <Title order={3}>Asset Tokens</Title>\r\n                <Text size=\"xl\" mt=\"md\">{assets?.length.toLocaleString()}</Text>\r\n                <Text size=\"sm\" color=\"dimmed\">Number of assets</Text>\r\n                <Group mt=\"lg\">\r\n                    <Table\r\n                        verticalSpacing=\"sm\"\r\n                        style={{ width: \"100%\" }}\r\n                        highlightOnHover\r\n                    >\r\n                        <thead>\r\n                            <tr>\r\n                                {/* <th>#</th> */}\r\n                                <th><Text size=\"md\" color=\"dimmed\">Name</Text></th>\r\n                                {isAuthenticated ?\r\n                                    <th><Text size=\"md\" color=\"dimmed\">Balance ({numeraire.symbol})</Text></th> : null}\r\n                                <th><Text size=\"md\" color=\"dimmed\">Price ({numeraire.symbol})</Text></th>\r\n                                {/* <th><Text size=\"md\" color=\"dimmed\">Weight</Text></th> */}\r\n                                <th><Text size=\"md\" color=\"dimmed\">Reserves ({numeraire.symbol})</Text></th>\r\n                                <th><Text size=\"md\" color=\"dimmed\">Fee (bps)</Text></th>\r\n                                <th><Text size=\"md\" color=\"dimmed\">Tuning (k)</Text></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>{rows}</tbody>\r\n                    </Table>\r\n                </Group>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;AAMA,IAAM,kBAAkB,MAAM;AAC1B,QAAM;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,MACA;AAEJ,QAAM,cAAc,YAAY;AAAE,UAAM;AAAA;AACxC,QAAM,eAAe,YAAY;AAAE,UAAM;AAAA;AAEzC,SACI,oCAAC,QAAD;AAAA,IAAQ,QAAQ;AAAA,IAAI,GAAE;AAAA,KACjB,kBACG,oCAAC,QAAD;AAAA,IAAQ,SAAS;AAAA,KAAc,YAC/B,oCAAC,QAAD;AAAA,IAAQ,SAAS;AAAA,KAAa;AAAA;AAM9C,IAAO,iBAAQ;;;AC1Bf;AAGA,IAAM,cAAc,CAAC,EAAE,eAAoB;AACvC,QAAM,EAAE,iBAAiB,iBAAiB;AAE1C,QAAM,cAAc,YAAY;AAAE,UAAM;AAAA;AAExC,SACI,0DACK,kBACG,WACA,oCAAC,QAAD;AAAA,IAAQ,SAAS;AAAA,KAAa;AAAA;AAM9C,IAAO,sBAAQ;;;AClBf;AAAA,mBAAoC;",
  "names": []
}
