import {
  LOGIN_PROVIDER,
  init_openlogin_esm
} from "/build/_shared/chunk-YJFLYXUX.js";
import {
  AddressZero,
  BigNumber,
  Description,
  ErrorCode,
  FixedNumber,
  HashZero,
  Logger,
  MaxUint256,
  NegativeOne,
  One,
  SigningKey,
  TransactionTypes,
  TypedDataEncoder,
  UnicodeNormalizationForm,
  Utf8ErrorFuncs,
  Utf8ErrorReason,
  Zero,
  _toEscapedUtf8String,
  accessListify,
  arrayify,
  checkProperties,
  computeAddress,
  computePublicKey,
  concat,
  deepCopy,
  defineReadOnly,
  formatBytes32String,
  formatFixed,
  getAddress,
  getContractAddress,
  getCreate2Address,
  getIcapAddress,
  getStatic,
  hashMessage,
  hexConcat,
  hexDataLength,
  hexDataSlice,
  hexStripZeros,
  hexValue,
  hexZeroPad,
  hexlify,
  id,
  init_lib,
  init_lib10,
  init_lib11,
  init_lib12,
  init_lib2,
  init_lib3,
  init_lib4,
  init_lib5,
  init_lib6,
  init_lib7,
  init_lib8,
  init_lib9,
  isAddress,
  isBytes,
  isBytesLike,
  isHexString,
  isValidName,
  joinSignature,
  keccak256,
  lib_exports,
  lib_exports2,
  namehash,
  nameprep,
  parse,
  parseBytes32String,
  parseFixed,
  recoverAddress,
  recoverPublicKey,
  resolveProperties,
  serialize,
  shallowCopy,
  splitSignature,
  stripZeros,
  toUtf8Bytes,
  toUtf8CodePoints,
  toUtf8String,
  zeroPad
} from "/build/_shared/chunk-5LHDUPZJ.js";
import {
  require_dist
} from "/build/_shared/chunk-VJL6IW7N.js";
import {
  esm_browser_exports,
  init_esm_browser
} from "/build/_shared/chunk-Q4OQB5CY.js";
import {
  require_runtime
} from "/build/_shared/chunk-LT2KR7O7.js";
import {
  require_hash,
  require_lodash,
  require_loglevel
} from "/build/_shared/chunk-X3YGIL63.js";
import {
  ADAPTER_CATEGORY,
  ADAPTER_EVENTS,
  ADAPTER_NAMESPACES,
  ADAPTER_STATUS,
  CHAIN_NAMESPACES,
  EVM_ADAPTERS,
  SOLANA_ADAPTERS,
  SafeEventEmitter,
  WALLET_ADAPTERS,
  WalletInitializationError,
  WalletLoginError,
  _defineProperty,
  getChainConfig,
  init_base_esm,
  init_defineProperty,
  init_openloginJrpc_esm,
  require_events,
  storageAvailable
} from "/build/_shared/chunk-ZQZXQ4RX.js";
import {
  require_crypto
} from "/build/_shared/chunk-LLVLRWYQ.js";
import {
  require_react_dom
} from "/build/_shared/chunk-RRFWX4QA.js";
import {
  init_extends
} from "/build/_shared/chunk-Y7YN7CWX.js";
import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS,
  __toESM,
  init_react,
  require_object_assign,
  require_react
} from "/build/_shared/chunk-6CGL4AQG.js";

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    init_react();
    if (true) {
      (function() {
        "use strict";
        var React15 = require_react();
        var _assign = require_object_assign();
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        exports.Fragment = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          exports.Fragment = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React15.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case exports.Fragment:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentName(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name2, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match2 && match2[1] || "";
              }
            }
            return "\n" + prefix2 + name2;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn2, construct) {
          if (!fn2 || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn2);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn2, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn2.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn2();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        {
                          if (typeof fn2 === "function") {
                            componentFrameCache.set(fn2, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name2 = fn2 ? fn2.displayName || fn2.name : "";
          var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
          {
            if (typeof fn2 === "function") {
              componentFrameCache.set(fn2, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn2, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn2, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty2.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty2.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config, self2) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type, config, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            if (maybeKey !== void 0) {
              key = "" + maybeKey;
            }
            if (hasValidKey(config)) {
              key = "" + config.key;
            }
            if (hasValidRef(config)) {
              ref = config.ref;
              warnIfStringRefCannotBeAutoConverted(config, self2);
            }
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name2 = getComponentName(ReactCurrentOwner$1.current.type);
              if (name2) {
                return "\n\nCheck the render method of `" + name2 + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node2, parentType) {
          {
            if (typeof node2 !== "object") {
              return;
            }
            if (Array.isArray(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name2 = getComponentName(type);
              checkPropTypes(propTypes, element.props, "prop", name2, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentName(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type, props, key, source, self2);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (Array.isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, false);
          }
        }
        var jsx3 = jsxWithValidationDynamic;
        var jsxs3 = jsxWithValidationStatic;
        exports.jsx = jsx3;
        exports.jsxs = jsxs3;
      })();
    }
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module) {
    "use strict";
    init_react();
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_jsx_runtime_development();
    }
  }
});

// node_modules/core-js-pure/internals/global.js
var require_global = __commonJS({
  "node_modules/core-js-pure/internals/global.js"(exports, module) {
    init_react();
    var check = function(it) {
      return it && it.Math == Math && it;
    };
    module.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof globalThis == "object" && globalThis) || function() {
      return this;
    }() || Function("return this")();
  }
});

// node_modules/core-js-pure/internals/fails.js
var require_fails = __commonJS({
  "node_modules/core-js-pure/internals/fails.js"(exports, module) {
    init_react();
    module.exports = function(exec) {
      try {
        return !!exec();
      } catch (error) {
        return true;
      }
    };
  }
});

// node_modules/core-js-pure/internals/function-bind-native.js
var require_function_bind_native = __commonJS({
  "node_modules/core-js-pure/internals/function-bind-native.js"(exports, module) {
    init_react();
    var fails = require_fails();
    module.exports = !fails(function() {
      var test = function() {
      }.bind();
      return typeof test != "function" || test.hasOwnProperty("prototype");
    });
  }
});

// node_modules/core-js-pure/internals/function-apply.js
var require_function_apply = __commonJS({
  "node_modules/core-js-pure/internals/function-apply.js"(exports, module) {
    init_react();
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var apply = FunctionPrototype.apply;
    var call = FunctionPrototype.call;
    module.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
      return call.apply(apply, arguments);
    });
  }
});

// node_modules/core-js-pure/internals/function-uncurry-this.js
var require_function_uncurry_this = __commonJS({
  "node_modules/core-js-pure/internals/function-uncurry-this.js"(exports, module) {
    init_react();
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var bind = FunctionPrototype.bind;
    var call = FunctionPrototype.call;
    var uncurryThis = NATIVE_BIND && bind.bind(call, call);
    module.exports = NATIVE_BIND ? function(fn2) {
      return fn2 && uncurryThis(fn2);
    } : function(fn2) {
      return fn2 && function() {
        return call.apply(fn2, arguments);
      };
    };
  }
});

// node_modules/core-js-pure/internals/is-callable.js
var require_is_callable = __commonJS({
  "node_modules/core-js-pure/internals/is-callable.js"(exports, module) {
    init_react();
    module.exports = function(argument) {
      return typeof argument == "function";
    };
  }
});

// node_modules/core-js-pure/internals/descriptors.js
var require_descriptors = __commonJS({
  "node_modules/core-js-pure/internals/descriptors.js"(exports, module) {
    init_react();
    var fails = require_fails();
    module.exports = !fails(function() {
      return Object.defineProperty({}, 1, { get: function() {
        return 7;
      } })[1] != 7;
    });
  }
});

// node_modules/core-js-pure/internals/function-call.js
var require_function_call = __commonJS({
  "node_modules/core-js-pure/internals/function-call.js"(exports, module) {
    init_react();
    var NATIVE_BIND = require_function_bind_native();
    var call = Function.prototype.call;
    module.exports = NATIVE_BIND ? call.bind(call) : function() {
      return call.apply(call, arguments);
    };
  }
});

// node_modules/core-js-pure/internals/object-property-is-enumerable.js
var require_object_property_is_enumerable = __commonJS({
  "node_modules/core-js-pure/internals/object-property-is-enumerable.js"(exports) {
    "use strict";
    init_react();
    var $propertyIsEnumerable = {}.propertyIsEnumerable;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
    exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
      var descriptor = getOwnPropertyDescriptor(this, V);
      return !!descriptor && descriptor.enumerable;
    } : $propertyIsEnumerable;
  }
});

// node_modules/core-js-pure/internals/create-property-descriptor.js
var require_create_property_descriptor = __commonJS({
  "node_modules/core-js-pure/internals/create-property-descriptor.js"(exports, module) {
    init_react();
    module.exports = function(bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value
      };
    };
  }
});

// node_modules/core-js-pure/internals/classof-raw.js
var require_classof_raw = __commonJS({
  "node_modules/core-js-pure/internals/classof-raw.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var toString2 = uncurryThis({}.toString);
    var stringSlice = uncurryThis("".slice);
    module.exports = function(it) {
      return stringSlice(toString2(it), 8, -1);
    };
  }
});

// node_modules/core-js-pure/internals/indexed-object.js
var require_indexed_object = __commonJS({
  "node_modules/core-js-pure/internals/indexed-object.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var classof = require_classof_raw();
    var Object2 = global2.Object;
    var split = uncurryThis("".split);
    module.exports = fails(function() {
      return !Object2("z").propertyIsEnumerable(0);
    }) ? function(it) {
      return classof(it) == "String" ? split(it, "") : Object2(it);
    } : Object2;
  }
});

// node_modules/core-js-pure/internals/require-object-coercible.js
var require_require_object_coercible = __commonJS({
  "node_modules/core-js-pure/internals/require-object-coercible.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var TypeError2 = global2.TypeError;
    module.exports = function(it) {
      if (it == void 0)
        throw TypeError2("Can't call method on " + it);
      return it;
    };
  }
});

// node_modules/core-js-pure/internals/to-indexed-object.js
var require_to_indexed_object = __commonJS({
  "node_modules/core-js-pure/internals/to-indexed-object.js"(exports, module) {
    init_react();
    var IndexedObject = require_indexed_object();
    var requireObjectCoercible = require_require_object_coercible();
    module.exports = function(it) {
      return IndexedObject(requireObjectCoercible(it));
    };
  }
});

// node_modules/core-js-pure/internals/is-object.js
var require_is_object = __commonJS({
  "node_modules/core-js-pure/internals/is-object.js"(exports, module) {
    init_react();
    var isCallable = require_is_callable();
    module.exports = function(it) {
      return typeof it == "object" ? it !== null : isCallable(it);
    };
  }
});

// node_modules/core-js-pure/internals/path.js
var require_path = __commonJS({
  "node_modules/core-js-pure/internals/path.js"(exports, module) {
    init_react();
    module.exports = {};
  }
});

// node_modules/core-js-pure/internals/get-built-in.js
var require_get_built_in = __commonJS({
  "node_modules/core-js-pure/internals/get-built-in.js"(exports, module) {
    init_react();
    var path = require_path();
    var global2 = require_global();
    var isCallable = require_is_callable();
    var aFunction = function(variable) {
      return isCallable(variable) ? variable : void 0;
    };
    module.exports = function(namespace, method) {
      return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global2[namespace]) : path[namespace] && path[namespace][method] || global2[namespace] && global2[namespace][method];
    };
  }
});

// node_modules/core-js-pure/internals/object-is-prototype-of.js
var require_object_is_prototype_of = __commonJS({
  "node_modules/core-js-pure/internals/object-is-prototype-of.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    module.exports = uncurryThis({}.isPrototypeOf);
  }
});

// node_modules/core-js-pure/internals/engine-user-agent.js
var require_engine_user_agent = __commonJS({
  "node_modules/core-js-pure/internals/engine-user-agent.js"(exports, module) {
    init_react();
    var getBuiltIn = require_get_built_in();
    module.exports = getBuiltIn("navigator", "userAgent") || "";
  }
});

// node_modules/core-js-pure/internals/engine-v8-version.js
var require_engine_v8_version = __commonJS({
  "node_modules/core-js-pure/internals/engine-v8-version.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var userAgent = require_engine_user_agent();
    var process2 = global2.process;
    var Deno = global2.Deno;
    var versions = process2 && process2.versions || Deno && Deno.version;
    var v8 = versions && versions.v8;
    var match2;
    var version17;
    if (v8) {
      match2 = v8.split(".");
      version17 = match2[0] > 0 && match2[0] < 4 ? 1 : +(match2[0] + match2[1]);
    }
    if (!version17 && userAgent) {
      match2 = userAgent.match(/Edge\/(\d+)/);
      if (!match2 || match2[1] >= 74) {
        match2 = userAgent.match(/Chrome\/(\d+)/);
        if (match2)
          version17 = +match2[1];
      }
    }
    module.exports = version17;
  }
});

// node_modules/core-js-pure/internals/native-symbol.js
var require_native_symbol = __commonJS({
  "node_modules/core-js-pure/internals/native-symbol.js"(exports, module) {
    init_react();
    var V8_VERSION = require_engine_v8_version();
    var fails = require_fails();
    module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
      var symbol = Symbol();
      return !String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
    });
  }
});

// node_modules/core-js-pure/internals/use-symbol-as-uid.js
var require_use_symbol_as_uid = __commonJS({
  "node_modules/core-js-pure/internals/use-symbol-as-uid.js"(exports, module) {
    init_react();
    var NATIVE_SYMBOL = require_native_symbol();
    module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
  }
});

// node_modules/core-js-pure/internals/is-symbol.js
var require_is_symbol = __commonJS({
  "node_modules/core-js-pure/internals/is-symbol.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var getBuiltIn = require_get_built_in();
    var isCallable = require_is_callable();
    var isPrototypeOf = require_object_is_prototype_of();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var Object2 = global2.Object;
    module.exports = USE_SYMBOL_AS_UID ? function(it) {
      return typeof it == "symbol";
    } : function(it) {
      var $Symbol = getBuiltIn("Symbol");
      return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object2(it));
    };
  }
});

// node_modules/core-js-pure/internals/try-to-string.js
var require_try_to_string = __commonJS({
  "node_modules/core-js-pure/internals/try-to-string.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var String2 = global2.String;
    module.exports = function(argument) {
      try {
        return String2(argument);
      } catch (error) {
        return "Object";
      }
    };
  }
});

// node_modules/core-js-pure/internals/a-callable.js
var require_a_callable = __commonJS({
  "node_modules/core-js-pure/internals/a-callable.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isCallable = require_is_callable();
    var tryToString = require_try_to_string();
    var TypeError2 = global2.TypeError;
    module.exports = function(argument) {
      if (isCallable(argument))
        return argument;
      throw TypeError2(tryToString(argument) + " is not a function");
    };
  }
});

// node_modules/core-js-pure/internals/get-method.js
var require_get_method = __commonJS({
  "node_modules/core-js-pure/internals/get-method.js"(exports, module) {
    init_react();
    var aCallable = require_a_callable();
    module.exports = function(V, P2) {
      var func = V[P2];
      return func == null ? void 0 : aCallable(func);
    };
  }
});

// node_modules/core-js-pure/internals/ordinary-to-primitive.js
var require_ordinary_to_primitive = __commonJS({
  "node_modules/core-js-pure/internals/ordinary-to-primitive.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var call = require_function_call();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var TypeError2 = global2.TypeError;
    module.exports = function(input, pref) {
      var fn2, val;
      if (pref === "string" && isCallable(fn2 = input.toString) && !isObject(val = call(fn2, input)))
        return val;
      if (isCallable(fn2 = input.valueOf) && !isObject(val = call(fn2, input)))
        return val;
      if (pref !== "string" && isCallable(fn2 = input.toString) && !isObject(val = call(fn2, input)))
        return val;
      throw TypeError2("Can't convert object to primitive value");
    };
  }
});

// node_modules/core-js-pure/internals/is-pure.js
var require_is_pure = __commonJS({
  "node_modules/core-js-pure/internals/is-pure.js"(exports, module) {
    init_react();
    module.exports = true;
  }
});

// node_modules/core-js-pure/internals/set-global.js
var require_set_global = __commonJS({
  "node_modules/core-js-pure/internals/set-global.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var defineProperty = Object.defineProperty;
    module.exports = function(key, value) {
      try {
        defineProperty(global2, key, { value, configurable: true, writable: true });
      } catch (error) {
        global2[key] = value;
      }
      return value;
    };
  }
});

// node_modules/core-js-pure/internals/shared-store.js
var require_shared_store = __commonJS({
  "node_modules/core-js-pure/internals/shared-store.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var setGlobal = require_set_global();
    var SHARED = "__core-js_shared__";
    var store = global2[SHARED] || setGlobal(SHARED, {});
    module.exports = store;
  }
});

// node_modules/core-js-pure/internals/shared.js
var require_shared = __commonJS({
  "node_modules/core-js-pure/internals/shared.js"(exports, module) {
    init_react();
    var IS_PURE = require_is_pure();
    var store = require_shared_store();
    (module.exports = function(key, value) {
      return store[key] || (store[key] = value !== void 0 ? value : {});
    })("versions", []).push({
      version: "3.21.1",
      mode: IS_PURE ? "pure" : "global",
      copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",
      license: "https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",
      source: "https://github.com/zloirock/core-js"
    });
  }
});

// node_modules/core-js-pure/internals/to-object.js
var require_to_object = __commonJS({
  "node_modules/core-js-pure/internals/to-object.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var requireObjectCoercible = require_require_object_coercible();
    var Object2 = global2.Object;
    module.exports = function(argument) {
      return Object2(requireObjectCoercible(argument));
    };
  }
});

// node_modules/core-js-pure/internals/has-own-property.js
var require_has_own_property = __commonJS({
  "node_modules/core-js-pure/internals/has-own-property.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var toObject = require_to_object();
    var hasOwnProperty2 = uncurryThis({}.hasOwnProperty);
    module.exports = Object.hasOwn || function hasOwn(it, key) {
      return hasOwnProperty2(toObject(it), key);
    };
  }
});

// node_modules/core-js-pure/internals/uid.js
var require_uid = __commonJS({
  "node_modules/core-js-pure/internals/uid.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var id2 = 0;
    var postfix = Math.random();
    var toString2 = uncurryThis(1 .toString);
    module.exports = function(key) {
      return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString2(++id2 + postfix, 36);
    };
  }
});

// node_modules/core-js-pure/internals/well-known-symbol.js
var require_well_known_symbol = __commonJS({
  "node_modules/core-js-pure/internals/well-known-symbol.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var shared = require_shared();
    var hasOwn = require_has_own_property();
    var uid = require_uid();
    var NATIVE_SYMBOL = require_native_symbol();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var WellKnownSymbolsStore = shared("wks");
    var Symbol2 = global2.Symbol;
    var symbolFor = Symbol2 && Symbol2["for"];
    var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
    module.exports = function(name2) {
      if (!hasOwn(WellKnownSymbolsStore, name2) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name2] == "string")) {
        var description = "Symbol." + name2;
        if (NATIVE_SYMBOL && hasOwn(Symbol2, name2)) {
          WellKnownSymbolsStore[name2] = Symbol2[name2];
        } else if (USE_SYMBOL_AS_UID && symbolFor) {
          WellKnownSymbolsStore[name2] = symbolFor(description);
        } else {
          WellKnownSymbolsStore[name2] = createWellKnownSymbol(description);
        }
      }
      return WellKnownSymbolsStore[name2];
    };
  }
});

// node_modules/core-js-pure/internals/to-primitive.js
var require_to_primitive = __commonJS({
  "node_modules/core-js-pure/internals/to-primitive.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var call = require_function_call();
    var isObject = require_is_object();
    var isSymbol = require_is_symbol();
    var getMethod = require_get_method();
    var ordinaryToPrimitive = require_ordinary_to_primitive();
    var wellKnownSymbol = require_well_known_symbol();
    var TypeError2 = global2.TypeError;
    var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
    module.exports = function(input, pref) {
      if (!isObject(input) || isSymbol(input))
        return input;
      var exoticToPrim = getMethod(input, TO_PRIMITIVE);
      var result;
      if (exoticToPrim) {
        if (pref === void 0)
          pref = "default";
        result = call(exoticToPrim, input, pref);
        if (!isObject(result) || isSymbol(result))
          return result;
        throw TypeError2("Can't convert object to primitive value");
      }
      if (pref === void 0)
        pref = "number";
      return ordinaryToPrimitive(input, pref);
    };
  }
});

// node_modules/core-js-pure/internals/to-property-key.js
var require_to_property_key = __commonJS({
  "node_modules/core-js-pure/internals/to-property-key.js"(exports, module) {
    init_react();
    var toPrimitive = require_to_primitive();
    var isSymbol = require_is_symbol();
    module.exports = function(argument) {
      var key = toPrimitive(argument, "string");
      return isSymbol(key) ? key : key + "";
    };
  }
});

// node_modules/core-js-pure/internals/document-create-element.js
var require_document_create_element = __commonJS({
  "node_modules/core-js-pure/internals/document-create-element.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isObject = require_is_object();
    var document2 = global2.document;
    var EXISTS = isObject(document2) && isObject(document2.createElement);
    module.exports = function(it) {
      return EXISTS ? document2.createElement(it) : {};
    };
  }
});

// node_modules/core-js-pure/internals/ie8-dom-define.js
var require_ie8_dom_define = __commonJS({
  "node_modules/core-js-pure/internals/ie8-dom-define.js"(exports, module) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    var createElement3 = require_document_create_element();
    module.exports = !DESCRIPTORS && !fails(function() {
      return Object.defineProperty(createElement3("div"), "a", {
        get: function() {
          return 7;
        }
      }).a != 7;
    });
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-descriptor.js
var require_object_get_own_property_descriptor = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-descriptor.js"(exports) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var call = require_function_call();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var createPropertyDescriptor = require_create_property_descriptor();
    var toIndexedObject = require_to_indexed_object();
    var toPropertyKey = require_to_property_key();
    var hasOwn = require_has_own_property();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O2, P2) {
      O2 = toIndexedObject(O2);
      P2 = toPropertyKey(P2);
      if (IE8_DOM_DEFINE)
        try {
          return $getOwnPropertyDescriptor(O2, P2);
        } catch (error) {
        }
      if (hasOwn(O2, P2))
        return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O2, P2), O2[P2]);
    };
  }
});

// node_modules/core-js-pure/internals/is-forced.js
var require_is_forced = __commonJS({
  "node_modules/core-js-pure/internals/is-forced.js"(exports, module) {
    init_react();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var replacement = /#|\.prototype\./;
    var isForced = function(feature, detection) {
      var value = data[normalize(feature)];
      return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
    };
    var normalize = isForced.normalize = function(string) {
      return String(string).replace(replacement, ".").toLowerCase();
    };
    var data = isForced.data = {};
    var NATIVE = isForced.NATIVE = "N";
    var POLYFILL = isForced.POLYFILL = "P";
    module.exports = isForced;
  }
});

// node_modules/core-js-pure/internals/function-bind-context.js
var require_function_bind_context = __commonJS({
  "node_modules/core-js-pure/internals/function-bind-context.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var NATIVE_BIND = require_function_bind_native();
    var bind = uncurryThis(uncurryThis.bind);
    module.exports = function(fn2, that) {
      aCallable(fn2);
      return that === void 0 ? fn2 : NATIVE_BIND ? bind(fn2, that) : function() {
        return fn2.apply(that, arguments);
      };
    };
  }
});

// node_modules/core-js-pure/internals/v8-prototype-define-bug.js
var require_v8_prototype_define_bug = __commonJS({
  "node_modules/core-js-pure/internals/v8-prototype-define-bug.js"(exports, module) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    module.exports = DESCRIPTORS && fails(function() {
      return Object.defineProperty(function() {
      }, "prototype", {
        value: 42,
        writable: false
      }).prototype != 42;
    });
  }
});

// node_modules/core-js-pure/internals/an-object.js
var require_an_object = __commonJS({
  "node_modules/core-js-pure/internals/an-object.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isObject = require_is_object();
    var String2 = global2.String;
    var TypeError2 = global2.TypeError;
    module.exports = function(argument) {
      if (isObject(argument))
        return argument;
      throw TypeError2(String2(argument) + " is not an object");
    };
  }
});

// node_modules/core-js-pure/internals/object-define-property.js
var require_object_define_property = __commonJS({
  "node_modules/core-js-pure/internals/object-define-property.js"(exports) {
    init_react();
    var global2 = require_global();
    var DESCRIPTORS = require_descriptors();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var anObject = require_an_object();
    var toPropertyKey = require_to_property_key();
    var TypeError2 = global2.TypeError;
    var $defineProperty = Object.defineProperty;
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var ENUMERABLE = "enumerable";
    var CONFIGURABLE = "configurable";
    var WRITABLE = "writable";
    exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O2, P2, Attributes) {
      anObject(O2);
      P2 = toPropertyKey(P2);
      anObject(Attributes);
      if (typeof O2 === "function" && P2 === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
        var current = $getOwnPropertyDescriptor(O2, P2);
        if (current && current[WRITABLE]) {
          O2[P2] = Attributes.value;
          Attributes = {
            configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
            enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
            writable: false
          };
        }
      }
      return $defineProperty(O2, P2, Attributes);
    } : $defineProperty : function defineProperty(O2, P2, Attributes) {
      anObject(O2);
      P2 = toPropertyKey(P2);
      anObject(Attributes);
      if (IE8_DOM_DEFINE)
        try {
          return $defineProperty(O2, P2, Attributes);
        } catch (error) {
        }
      if ("get" in Attributes || "set" in Attributes)
        throw TypeError2("Accessors not supported");
      if ("value" in Attributes)
        O2[P2] = Attributes.value;
      return O2;
    };
  }
});

// node_modules/core-js-pure/internals/create-non-enumerable-property.js
var require_create_non_enumerable_property = __commonJS({
  "node_modules/core-js-pure/internals/create-non-enumerable-property.js"(exports, module) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module.exports = DESCRIPTORS ? function(object, key, value) {
      return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
    } : function(object, key, value) {
      object[key] = value;
      return object;
    };
  }
});

// node_modules/core-js-pure/internals/export.js
var require_export = __commonJS({
  "node_modules/core-js-pure/internals/export.js"(exports, module) {
    "use strict";
    init_react();
    var global2 = require_global();
    var apply = require_function_apply();
    var uncurryThis = require_function_uncurry_this();
    var isCallable = require_is_callable();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var isForced = require_is_forced();
    var path = require_path();
    var bind = require_function_bind_context();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var wrapConstructor = function(NativeConstructor) {
      var Wrapper = function(a2, b2, c2) {
        if (this instanceof Wrapper) {
          switch (arguments.length) {
            case 0:
              return new NativeConstructor();
            case 1:
              return new NativeConstructor(a2);
            case 2:
              return new NativeConstructor(a2, b2);
          }
          return new NativeConstructor(a2, b2, c2);
        }
        return apply(NativeConstructor, this, arguments);
      };
      Wrapper.prototype = NativeConstructor.prototype;
      return Wrapper;
    };
    module.exports = function(options, source) {
      var TARGET = options.target;
      var GLOBAL = options.global;
      var STATIC = options.stat;
      var PROTO = options.proto;
      var nativeSource = GLOBAL ? global2 : STATIC ? global2[TARGET] : (global2[TARGET] || {}).prototype;
      var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];
      var targetPrototype = target.prototype;
      var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
      var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
      for (key in source) {
        FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
        USE_NATIVE = !FORCED && nativeSource && hasOwn(nativeSource, key);
        targetProperty = target[key];
        if (USE_NATIVE)
          if (options.noTargetGet) {
            descriptor = getOwnPropertyDescriptor(nativeSource, key);
            nativeProperty = descriptor && descriptor.value;
          } else
            nativeProperty = nativeSource[key];
        sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
        if (USE_NATIVE && typeof targetProperty == typeof sourceProperty)
          continue;
        if (options.bind && USE_NATIVE)
          resultProperty = bind(sourceProperty, global2);
        else if (options.wrap && USE_NATIVE)
          resultProperty = wrapConstructor(sourceProperty);
        else if (PROTO && isCallable(sourceProperty))
          resultProperty = uncurryThis(sourceProperty);
        else
          resultProperty = sourceProperty;
        if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
          createNonEnumerableProperty(resultProperty, "sham", true);
        }
        createNonEnumerableProperty(target, key, resultProperty);
        if (PROTO) {
          VIRTUAL_PROTOTYPE = TARGET + "Prototype";
          if (!hasOwn(path, VIRTUAL_PROTOTYPE)) {
            createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
          }
          createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key, sourceProperty);
          if (options.real && targetPrototype && !targetPrototype[key]) {
            createNonEnumerableProperty(targetPrototype, key, sourceProperty);
          }
        }
      }
    };
  }
});

// node_modules/core-js-pure/internals/is-array.js
var require_is_array = __commonJS({
  "node_modules/core-js-pure/internals/is-array.js"(exports, module) {
    init_react();
    var classof = require_classof_raw();
    module.exports = Array.isArray || function isArray(argument) {
      return classof(argument) == "Array";
    };
  }
});

// node_modules/core-js-pure/internals/to-integer-or-infinity.js
var require_to_integer_or_infinity = __commonJS({
  "node_modules/core-js-pure/internals/to-integer-or-infinity.js"(exports, module) {
    init_react();
    var ceil = Math.ceil;
    var floor = Math.floor;
    module.exports = function(argument) {
      var number = +argument;
      return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
    };
  }
});

// node_modules/core-js-pure/internals/to-length.js
var require_to_length = __commonJS({
  "node_modules/core-js-pure/internals/to-length.js"(exports, module) {
    init_react();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var min = Math.min;
    module.exports = function(argument) {
      return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
    };
  }
});

// node_modules/core-js-pure/internals/length-of-array-like.js
var require_length_of_array_like = __commonJS({
  "node_modules/core-js-pure/internals/length-of-array-like.js"(exports, module) {
    init_react();
    var toLength = require_to_length();
    module.exports = function(obj) {
      return toLength(obj.length);
    };
  }
});

// node_modules/core-js-pure/internals/create-property.js
var require_create_property = __commonJS({
  "node_modules/core-js-pure/internals/create-property.js"(exports, module) {
    "use strict";
    init_react();
    var toPropertyKey = require_to_property_key();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module.exports = function(object, key, value) {
      var propertyKey = toPropertyKey(key);
      if (propertyKey in object)
        definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
      else
        object[propertyKey] = value;
    };
  }
});

// node_modules/core-js-pure/internals/to-string-tag-support.js
var require_to_string_tag_support = __commonJS({
  "node_modules/core-js-pure/internals/to-string-tag-support.js"(exports, module) {
    init_react();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var test = {};
    test[TO_STRING_TAG] = "z";
    module.exports = String(test) === "[object z]";
  }
});

// node_modules/core-js-pure/internals/classof.js
var require_classof = __commonJS({
  "node_modules/core-js-pure/internals/classof.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var isCallable = require_is_callable();
    var classofRaw = require_classof_raw();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var Object2 = global2.Object;
    var CORRECT_ARGUMENTS = classofRaw(function() {
      return arguments;
    }()) == "Arguments";
    var tryGet = function(it, key) {
      try {
        return it[key];
      } catch (error) {
      }
    };
    module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
      var O2, tag, result;
      return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O2 = Object2(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O2) : (result = classofRaw(O2)) == "Object" && isCallable(O2.callee) ? "Arguments" : result;
    };
  }
});

// node_modules/core-js-pure/internals/inspect-source.js
var require_inspect_source = __commonJS({
  "node_modules/core-js-pure/internals/inspect-source.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var isCallable = require_is_callable();
    var store = require_shared_store();
    var functionToString = uncurryThis(Function.toString);
    if (!isCallable(store.inspectSource)) {
      store.inspectSource = function(it) {
        return functionToString(it);
      };
    }
    module.exports = store.inspectSource;
  }
});

// node_modules/core-js-pure/internals/is-constructor.js
var require_is_constructor = __commonJS({
  "node_modules/core-js-pure/internals/is-constructor.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var classof = require_classof();
    var getBuiltIn = require_get_built_in();
    var inspectSource = require_inspect_source();
    var noop = function() {
    };
    var empty = [];
    var construct = getBuiltIn("Reflect", "construct");
    var constructorRegExp = /^\s*(?:class|function)\b/;
    var exec = uncurryThis(constructorRegExp.exec);
    var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
    var isConstructorModern = function isConstructor(argument) {
      if (!isCallable(argument))
        return false;
      try {
        construct(noop, empty, argument);
        return true;
      } catch (error) {
        return false;
      }
    };
    var isConstructorLegacy = function isConstructor(argument) {
      if (!isCallable(argument))
        return false;
      switch (classof(argument)) {
        case "AsyncFunction":
        case "GeneratorFunction":
        case "AsyncGeneratorFunction":
          return false;
      }
      try {
        return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
      } catch (error) {
        return true;
      }
    };
    isConstructorLegacy.sham = true;
    module.exports = !construct || fails(function() {
      var called;
      return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
        called = true;
      }) || called;
    }) ? isConstructorLegacy : isConstructorModern;
  }
});

// node_modules/core-js-pure/internals/array-species-constructor.js
var require_array_species_constructor = __commonJS({
  "node_modules/core-js-pure/internals/array-species-constructor.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isArray = require_is_array();
    var isConstructor = require_is_constructor();
    var isObject = require_is_object();
    var wellKnownSymbol = require_well_known_symbol();
    var SPECIES = wellKnownSymbol("species");
    var Array2 = global2.Array;
    module.exports = function(originalArray) {
      var C;
      if (isArray(originalArray)) {
        C = originalArray.constructor;
        if (isConstructor(C) && (C === Array2 || isArray(C.prototype)))
          C = void 0;
        else if (isObject(C)) {
          C = C[SPECIES];
          if (C === null)
            C = void 0;
        }
      }
      return C === void 0 ? Array2 : C;
    };
  }
});

// node_modules/core-js-pure/internals/array-species-create.js
var require_array_species_create = __commonJS({
  "node_modules/core-js-pure/internals/array-species-create.js"(exports, module) {
    init_react();
    var arraySpeciesConstructor = require_array_species_constructor();
    module.exports = function(originalArray, length2) {
      return new (arraySpeciesConstructor(originalArray))(length2 === 0 ? 0 : length2);
    };
  }
});

// node_modules/core-js-pure/internals/array-method-has-species-support.js
var require_array_method_has_species_support = __commonJS({
  "node_modules/core-js-pure/internals/array-method-has-species-support.js"(exports, module) {
    init_react();
    var fails = require_fails();
    var wellKnownSymbol = require_well_known_symbol();
    var V8_VERSION = require_engine_v8_version();
    var SPECIES = wellKnownSymbol("species");
    module.exports = function(METHOD_NAME) {
      return V8_VERSION >= 51 || !fails(function() {
        var array = [];
        var constructor = array.constructor = {};
        constructor[SPECIES] = function() {
          return { foo: 1 };
        };
        return array[METHOD_NAME](Boolean).foo !== 1;
      });
    };
  }
});

// node_modules/core-js-pure/modules/es.array.concat.js
var require_es_array_concat = __commonJS({
  "node_modules/core-js-pure/modules/es.array.concat.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var fails = require_fails();
    var isArray = require_is_array();
    var isObject = require_is_object();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var createProperty = require_create_property();
    var arraySpeciesCreate = require_array_species_create();
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var wellKnownSymbol = require_well_known_symbol();
    var V8_VERSION = require_engine_v8_version();
    var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAXIMUM_ALLOWED_INDEX_EXCEEDED = "Maximum allowed index exceeded";
    var TypeError2 = global2.TypeError;
    var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
      var array = [];
      array[IS_CONCAT_SPREADABLE] = false;
      return array.concat()[0] !== array;
    });
    var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");
    var isConcatSpreadable = function(O2) {
      if (!isObject(O2))
        return false;
      var spreadable = O2[IS_CONCAT_SPREADABLE];
      return spreadable !== void 0 ? !!spreadable : isArray(O2);
    };
    var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
    $({ target: "Array", proto: true, forced: FORCED }, {
      concat: function concat2(arg) {
        var O2 = toObject(this);
        var A2 = arraySpeciesCreate(O2, 0);
        var n2 = 0;
        var i, k2, length2, len, E2;
        for (i = -1, length2 = arguments.length; i < length2; i++) {
          E2 = i === -1 ? O2 : arguments[i];
          if (isConcatSpreadable(E2)) {
            len = lengthOfArrayLike(E2);
            if (n2 + len > MAX_SAFE_INTEGER)
              throw TypeError2(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
            for (k2 = 0; k2 < len; k2++, n2++)
              if (k2 in E2)
                createProperty(A2, n2, E2[k2]);
          } else {
            if (n2 >= MAX_SAFE_INTEGER)
              throw TypeError2(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
            createProperty(A2, n2++, E2);
          }
        }
        A2.length = n2;
        return A2;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.object.to-string.js
var require_es_object_to_string = __commonJS({
  "node_modules/core-js-pure/modules/es.object.to-string.js"() {
    init_react();
  }
});

// node_modules/core-js-pure/internals/to-string.js
var require_to_string = __commonJS({
  "node_modules/core-js-pure/internals/to-string.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var classof = require_classof();
    var String2 = global2.String;
    module.exports = function(argument) {
      if (classof(argument) === "Symbol")
        throw TypeError("Cannot convert a Symbol value to a string");
      return String2(argument);
    };
  }
});

// node_modules/core-js-pure/internals/to-absolute-index.js
var require_to_absolute_index = __commonJS({
  "node_modules/core-js-pure/internals/to-absolute-index.js"(exports, module) {
    init_react();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var max = Math.max;
    var min = Math.min;
    module.exports = function(index, length2) {
      var integer = toIntegerOrInfinity(index);
      return integer < 0 ? max(integer + length2, 0) : min(integer, length2);
    };
  }
});

// node_modules/core-js-pure/internals/array-includes.js
var require_array_includes = __commonJS({
  "node_modules/core-js-pure/internals/array-includes.js"(exports, module) {
    init_react();
    var toIndexedObject = require_to_indexed_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var createMethod = function(IS_INCLUDES) {
      return function($this, el, fromIndex) {
        var O2 = toIndexedObject($this);
        var length2 = lengthOfArrayLike(O2);
        var index = toAbsoluteIndex(fromIndex, length2);
        var value;
        if (IS_INCLUDES && el != el)
          while (length2 > index) {
            value = O2[index++];
            if (value != value)
              return true;
          }
        else
          for (; length2 > index; index++) {
            if ((IS_INCLUDES || index in O2) && O2[index] === el)
              return IS_INCLUDES || index || 0;
          }
        return !IS_INCLUDES && -1;
      };
    };
    module.exports = {
      includes: createMethod(true),
      indexOf: createMethod(false)
    };
  }
});

// node_modules/core-js-pure/internals/hidden-keys.js
var require_hidden_keys = __commonJS({
  "node_modules/core-js-pure/internals/hidden-keys.js"(exports, module) {
    init_react();
    module.exports = {};
  }
});

// node_modules/core-js-pure/internals/object-keys-internal.js
var require_object_keys_internal = __commonJS({
  "node_modules/core-js-pure/internals/object-keys-internal.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var hasOwn = require_has_own_property();
    var toIndexedObject = require_to_indexed_object();
    var indexOf = require_array_includes().indexOf;
    var hiddenKeys = require_hidden_keys();
    var push = uncurryThis([].push);
    module.exports = function(object, names2) {
      var O2 = toIndexedObject(object);
      var i = 0;
      var result = [];
      var key;
      for (key in O2)
        !hasOwn(hiddenKeys, key) && hasOwn(O2, key) && push(result, key);
      while (names2.length > i)
        if (hasOwn(O2, key = names2[i++])) {
          ~indexOf(result, key) || push(result, key);
        }
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/enum-bug-keys.js
var require_enum_bug_keys = __commonJS({
  "node_modules/core-js-pure/internals/enum-bug-keys.js"(exports, module) {
    init_react();
    module.exports = [
      "constructor",
      "hasOwnProperty",
      "isPrototypeOf",
      "propertyIsEnumerable",
      "toLocaleString",
      "toString",
      "valueOf"
    ];
  }
});

// node_modules/core-js-pure/internals/object-keys.js
var require_object_keys = __commonJS({
  "node_modules/core-js-pure/internals/object-keys.js"(exports, module) {
    init_react();
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    module.exports = Object.keys || function keys(O2) {
      return internalObjectKeys(O2, enumBugKeys);
    };
  }
});

// node_modules/core-js-pure/internals/object-define-properties.js
var require_object_define_properties = __commonJS({
  "node_modules/core-js-pure/internals/object-define-properties.js"(exports) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var definePropertyModule = require_object_define_property();
    var anObject = require_an_object();
    var toIndexedObject = require_to_indexed_object();
    var objectKeys = require_object_keys();
    exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O2, Properties) {
      anObject(O2);
      var props = toIndexedObject(Properties);
      var keys = objectKeys(Properties);
      var length2 = keys.length;
      var index = 0;
      var key;
      while (length2 > index)
        definePropertyModule.f(O2, key = keys[index++], props[key]);
      return O2;
    };
  }
});

// node_modules/core-js-pure/internals/html.js
var require_html = __commonJS({
  "node_modules/core-js-pure/internals/html.js"(exports, module) {
    init_react();
    var getBuiltIn = require_get_built_in();
    module.exports = getBuiltIn("document", "documentElement");
  }
});

// node_modules/core-js-pure/internals/shared-key.js
var require_shared_key = __commonJS({
  "node_modules/core-js-pure/internals/shared-key.js"(exports, module) {
    init_react();
    var shared = require_shared();
    var uid = require_uid();
    var keys = shared("keys");
    module.exports = function(key) {
      return keys[key] || (keys[key] = uid(key));
    };
  }
});

// node_modules/core-js-pure/internals/object-create.js
var require_object_create = __commonJS({
  "node_modules/core-js-pure/internals/object-create.js"(exports, module) {
    init_react();
    var anObject = require_an_object();
    var definePropertiesModule = require_object_define_properties();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = require_hidden_keys();
    var html = require_html();
    var documentCreateElement = require_document_create_element();
    var sharedKey = require_shared_key();
    var GT = ">";
    var LT = "<";
    var PROTOTYPE = "prototype";
    var SCRIPT = "script";
    var IE_PROTO = sharedKey("IE_PROTO");
    var EmptyConstructor = function() {
    };
    var scriptTag = function(content) {
      return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
    };
    var NullProtoObjectViaActiveX = function(activeXDocument2) {
      activeXDocument2.write(scriptTag(""));
      activeXDocument2.close();
      var temp = activeXDocument2.parentWindow.Object;
      activeXDocument2 = null;
      return temp;
    };
    var NullProtoObjectViaIFrame = function() {
      var iframe = documentCreateElement("iframe");
      var JS = "java" + SCRIPT + ":";
      var iframeDocument;
      iframe.style.display = "none";
      html.appendChild(iframe);
      iframe.src = String(JS);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(scriptTag("document.F=Object"));
      iframeDocument.close();
      return iframeDocument.F;
    };
    var activeXDocument;
    var NullProtoObject = function() {
      try {
        activeXDocument = new ActiveXObject("htmlfile");
      } catch (error) {
      }
      NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
      var length2 = enumBugKeys.length;
      while (length2--)
        delete NullProtoObject[PROTOTYPE][enumBugKeys[length2]];
      return NullProtoObject();
    };
    hiddenKeys[IE_PROTO] = true;
    module.exports = Object.create || function create(O2, Properties) {
      var result;
      if (O2 !== null) {
        EmptyConstructor[PROTOTYPE] = anObject(O2);
        result = new EmptyConstructor();
        EmptyConstructor[PROTOTYPE] = null;
        result[IE_PROTO] = O2;
      } else
        result = NullProtoObject();
      return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
    };
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-names.js
var require_object_get_own_property_names = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-names.js"(exports) {
    init_react();
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = enumBugKeys.concat("length", "prototype");
    exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O2) {
      return internalObjectKeys(O2, hiddenKeys);
    };
  }
});

// node_modules/core-js-pure/internals/array-slice-simple.js
var require_array_slice_simple = __commonJS({
  "node_modules/core-js-pure/internals/array-slice-simple.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var createProperty = require_create_property();
    var Array2 = global2.Array;
    var max = Math.max;
    module.exports = function(O2, start, end) {
      var length2 = lengthOfArrayLike(O2);
      var k2 = toAbsoluteIndex(start, length2);
      var fin = toAbsoluteIndex(end === void 0 ? length2 : end, length2);
      var result = Array2(max(fin - k2, 0));
      for (var n2 = 0; k2 < fin; k2++, n2++)
        createProperty(result, n2, O2[k2]);
      result.length = n2;
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-names-external.js
var require_object_get_own_property_names_external = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-names-external.js"(exports, module) {
    init_react();
    var classof = require_classof_raw();
    var toIndexedObject = require_to_indexed_object();
    var $getOwnPropertyNames = require_object_get_own_property_names().f;
    var arraySlice = require_array_slice_simple();
    var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    var getWindowNames = function(it) {
      try {
        return $getOwnPropertyNames(it);
      } catch (error) {
        return arraySlice(windowNames);
      }
    };
    module.exports.f = function getOwnPropertyNames(it) {
      return windowNames && classof(it) == "Window" ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
    };
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-symbols.js
var require_object_get_own_property_symbols = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-symbols.js"(exports) {
    init_react();
    exports.f = Object.getOwnPropertySymbols;
  }
});

// node_modules/core-js-pure/internals/array-slice.js
var require_array_slice = __commonJS({
  "node_modules/core-js-pure/internals/array-slice.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    module.exports = uncurryThis([].slice);
  }
});

// node_modules/core-js-pure/internals/redefine.js
var require_redefine = __commonJS({
  "node_modules/core-js-pure/internals/redefine.js"(exports, module) {
    init_react();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    module.exports = function(target, key, value, options) {
      if (options && options.enumerable)
        target[key] = value;
      else
        createNonEnumerableProperty(target, key, value);
    };
  }
});

// node_modules/core-js-pure/internals/well-known-symbol-wrapped.js
var require_well_known_symbol_wrapped = __commonJS({
  "node_modules/core-js-pure/internals/well-known-symbol-wrapped.js"(exports) {
    init_react();
    var wellKnownSymbol = require_well_known_symbol();
    exports.f = wellKnownSymbol;
  }
});

// node_modules/core-js-pure/internals/define-well-known-symbol.js
var require_define_well_known_symbol = __commonJS({
  "node_modules/core-js-pure/internals/define-well-known-symbol.js"(exports, module) {
    init_react();
    var path = require_path();
    var hasOwn = require_has_own_property();
    var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    var defineProperty = require_object_define_property().f;
    module.exports = function(NAME) {
      var Symbol2 = path.Symbol || (path.Symbol = {});
      if (!hasOwn(Symbol2, NAME))
        defineProperty(Symbol2, NAME, {
          value: wrappedWellKnownSymbolModule.f(NAME)
        });
    };
  }
});

// node_modules/core-js-pure/internals/object-to-string.js
var require_object_to_string = __commonJS({
  "node_modules/core-js-pure/internals/object-to-string.js"(exports, module) {
    "use strict";
    init_react();
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var classof = require_classof();
    module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString2() {
      return "[object " + classof(this) + "]";
    };
  }
});

// node_modules/core-js-pure/internals/set-to-string-tag.js
var require_set_to_string_tag = __commonJS({
  "node_modules/core-js-pure/internals/set-to-string-tag.js"(exports, module) {
    init_react();
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var defineProperty = require_object_define_property().f;
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var toString2 = require_object_to_string();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    module.exports = function(it, TAG, STATIC, SET_METHOD) {
      if (it) {
        var target = STATIC ? it : it.prototype;
        if (!hasOwn(target, TO_STRING_TAG)) {
          defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
        }
        if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
          createNonEnumerableProperty(target, "toString", toString2);
        }
      }
    };
  }
});

// node_modules/core-js-pure/internals/native-weak-map.js
var require_native_weak_map = __commonJS({
  "node_modules/core-js-pure/internals/native-weak-map.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isCallable = require_is_callable();
    var inspectSource = require_inspect_source();
    var WeakMap2 = global2.WeakMap;
    module.exports = isCallable(WeakMap2) && /native code/.test(inspectSource(WeakMap2));
  }
});

// node_modules/core-js-pure/internals/internal-state.js
var require_internal_state = __commonJS({
  "node_modules/core-js-pure/internals/internal-state.js"(exports, module) {
    init_react();
    var NATIVE_WEAK_MAP = require_native_weak_map();
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    var isObject = require_is_object();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var shared = require_shared_store();
    var sharedKey = require_shared_key();
    var hiddenKeys = require_hidden_keys();
    var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
    var TypeError2 = global2.TypeError;
    var WeakMap2 = global2.WeakMap;
    var set;
    var get;
    var has;
    var enforce = function(it) {
      return has(it) ? get(it) : set(it, {});
    };
    var getterFor = function(TYPE) {
      return function(it) {
        var state;
        if (!isObject(it) || (state = get(it)).type !== TYPE) {
          throw TypeError2("Incompatible receiver, " + TYPE + " required");
        }
        return state;
      };
    };
    if (NATIVE_WEAK_MAP || shared.state) {
      store = shared.state || (shared.state = new WeakMap2());
      wmget = uncurryThis(store.get);
      wmhas = uncurryThis(store.has);
      wmset = uncurryThis(store.set);
      set = function(it, metadata) {
        if (wmhas(store, it))
          throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        wmset(store, it, metadata);
        return metadata;
      };
      get = function(it) {
        return wmget(store, it) || {};
      };
      has = function(it) {
        return wmhas(store, it);
      };
    } else {
      STATE = sharedKey("state");
      hiddenKeys[STATE] = true;
      set = function(it, metadata) {
        if (hasOwn(it, STATE))
          throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        createNonEnumerableProperty(it, STATE, metadata);
        return metadata;
      };
      get = function(it) {
        return hasOwn(it, STATE) ? it[STATE] : {};
      };
      has = function(it) {
        return hasOwn(it, STATE);
      };
    }
    var store;
    var wmget;
    var wmhas;
    var wmset;
    var STATE;
    module.exports = {
      set,
      get,
      has,
      enforce,
      getterFor
    };
  }
});

// node_modules/core-js-pure/internals/array-iteration.js
var require_array_iteration = __commonJS({
  "node_modules/core-js-pure/internals/array-iteration.js"(exports, module) {
    init_react();
    var bind = require_function_bind_context();
    var uncurryThis = require_function_uncurry_this();
    var IndexedObject = require_indexed_object();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var arraySpeciesCreate = require_array_species_create();
    var push = uncurryThis([].push);
    var createMethod = function(TYPE) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var IS_FILTER_REJECT = TYPE == 7;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      return function($this, callbackfn, that, specificCreate) {
        var O2 = toObject($this);
        var self2 = IndexedObject(O2);
        var boundFunction = bind(callbackfn, that);
        var length2 = lengthOfArrayLike(self2);
        var index = 0;
        var create = specificCreate || arraySpeciesCreate;
        var target = IS_MAP ? create($this, length2) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : void 0;
        var value, result;
        for (; length2 > index; index++)
          if (NO_HOLES || index in self2) {
            value = self2[index];
            result = boundFunction(value, index, O2);
            if (TYPE) {
              if (IS_MAP)
                target[index] = result;
              else if (result)
                switch (TYPE) {
                  case 3:
                    return true;
                  case 5:
                    return value;
                  case 6:
                    return index;
                  case 2:
                    push(target, value);
                }
              else
                switch (TYPE) {
                  case 4:
                    return false;
                  case 7:
                    push(target, value);
                }
            }
          }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
      };
    };
    module.exports = {
      forEach: createMethod(0),
      map: createMethod(1),
      filter: createMethod(2),
      some: createMethod(3),
      every: createMethod(4),
      find: createMethod(5),
      findIndex: createMethod(6),
      filterReject: createMethod(7)
    };
  }
});

// node_modules/core-js-pure/modules/es.symbol.js
var require_es_symbol = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var getBuiltIn = require_get_built_in();
    var apply = require_function_apply();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var IS_PURE = require_is_pure();
    var DESCRIPTORS = require_descriptors();
    var NATIVE_SYMBOL = require_native_symbol();
    var fails = require_fails();
    var hasOwn = require_has_own_property();
    var isArray = require_is_array();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var isPrototypeOf = require_object_is_prototype_of();
    var isSymbol = require_is_symbol();
    var anObject = require_an_object();
    var toObject = require_to_object();
    var toIndexedObject = require_to_indexed_object();
    var toPropertyKey = require_to_property_key();
    var $toString = require_to_string();
    var createPropertyDescriptor = require_create_property_descriptor();
    var nativeObjectCreate = require_object_create();
    var objectKeys = require_object_keys();
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertyNamesExternal = require_object_get_own_property_names_external();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var definePropertyModule = require_object_define_property();
    var definePropertiesModule = require_object_define_properties();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var arraySlice = require_array_slice();
    var redefine = require_redefine();
    var shared = require_shared();
    var sharedKey = require_shared_key();
    var hiddenKeys = require_hidden_keys();
    var uid = require_uid();
    var wellKnownSymbol = require_well_known_symbol();
    var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    var setToStringTag = require_set_to_string_tag();
    var InternalStateModule = require_internal_state();
    var $forEach = require_array_iteration().forEach;
    var HIDDEN = sharedKey("hidden");
    var SYMBOL = "Symbol";
    var PROTOTYPE = "prototype";
    var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(SYMBOL);
    var ObjectPrototype = Object[PROTOTYPE];
    var $Symbol = global2.Symbol;
    var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
    var TypeError2 = global2.TypeError;
    var QObject = global2.QObject;
    var $stringify = getBuiltIn("JSON", "stringify");
    var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var nativeDefineProperty = definePropertyModule.f;
    var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
    var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
    var push = uncurryThis([].push);
    var AllSymbols = shared("symbols");
    var ObjectPrototypeSymbols = shared("op-symbols");
    var StringToSymbolRegistry = shared("string-to-symbol-registry");
    var SymbolToStringRegistry = shared("symbol-to-string-registry");
    var WellKnownSymbolsStore = shared("wks");
    var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
    var setSymbolDescriptor = DESCRIPTORS && fails(function() {
      return nativeObjectCreate(nativeDefineProperty({}, "a", {
        get: function() {
          return nativeDefineProperty(this, "a", { value: 7 }).a;
        }
      })).a != 7;
    }) ? function(O2, P2, Attributes) {
      var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P2);
      if (ObjectPrototypeDescriptor)
        delete ObjectPrototype[P2];
      nativeDefineProperty(O2, P2, Attributes);
      if (ObjectPrototypeDescriptor && O2 !== ObjectPrototype) {
        nativeDefineProperty(ObjectPrototype, P2, ObjectPrototypeDescriptor);
      }
    } : nativeDefineProperty;
    var wrap = function(tag, description) {
      var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
      setInternalState(symbol, {
        type: SYMBOL,
        tag,
        description
      });
      if (!DESCRIPTORS)
        symbol.description = description;
      return symbol;
    };
    var $defineProperty = function defineProperty(O2, P2, Attributes) {
      if (O2 === ObjectPrototype)
        $defineProperty(ObjectPrototypeSymbols, P2, Attributes);
      anObject(O2);
      var key = toPropertyKey(P2);
      anObject(Attributes);
      if (hasOwn(AllSymbols, key)) {
        if (!Attributes.enumerable) {
          if (!hasOwn(O2, HIDDEN))
            nativeDefineProperty(O2, HIDDEN, createPropertyDescriptor(1, {}));
          O2[HIDDEN][key] = true;
        } else {
          if (hasOwn(O2, HIDDEN) && O2[HIDDEN][key])
            O2[HIDDEN][key] = false;
          Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
        }
        return setSymbolDescriptor(O2, key, Attributes);
      }
      return nativeDefineProperty(O2, key, Attributes);
    };
    var $defineProperties = function defineProperties(O2, Properties) {
      anObject(O2);
      var properties = toIndexedObject(Properties);
      var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
      $forEach(keys, function(key) {
        if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key))
          $defineProperty(O2, key, properties[key]);
      });
      return O2;
    };
    var $create = function create(O2, Properties) {
      return Properties === void 0 ? nativeObjectCreate(O2) : $defineProperties(nativeObjectCreate(O2), Properties);
    };
    var $propertyIsEnumerable = function propertyIsEnumerable(V) {
      var P2 = toPropertyKey(V);
      var enumerable = call(nativePropertyIsEnumerable, this, P2);
      if (this === ObjectPrototype && hasOwn(AllSymbols, P2) && !hasOwn(ObjectPrototypeSymbols, P2))
        return false;
      return enumerable || !hasOwn(this, P2) || !hasOwn(AllSymbols, P2) || hasOwn(this, HIDDEN) && this[HIDDEN][P2] ? enumerable : true;
    };
    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O2, P2) {
      var it = toIndexedObject(O2);
      var key = toPropertyKey(P2);
      if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key))
        return;
      var descriptor = nativeGetOwnPropertyDescriptor(it, key);
      if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
        descriptor.enumerable = true;
      }
      return descriptor;
    };
    var $getOwnPropertyNames = function getOwnPropertyNames(O2) {
      var names2 = nativeGetOwnPropertyNames(toIndexedObject(O2));
      var result = [];
      $forEach(names2, function(key) {
        if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key))
          push(result, key);
      });
      return result;
    };
    var $getOwnPropertySymbols = function getOwnPropertySymbols(O2) {
      var IS_OBJECT_PROTOTYPE = O2 === ObjectPrototype;
      var names2 = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O2));
      var result = [];
      $forEach(names2, function(key) {
        if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
          push(result, AllSymbols[key]);
        }
      });
      return result;
    };
    if (!NATIVE_SYMBOL) {
      $Symbol = function Symbol2() {
        if (isPrototypeOf(SymbolPrototype, this))
          throw TypeError2("Symbol is not a constructor");
        var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString(arguments[0]);
        var tag = uid(description);
        var setter = function(value) {
          if (this === ObjectPrototype)
            call(setter, ObjectPrototypeSymbols, value);
          if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag))
            this[HIDDEN][tag] = false;
          setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
        };
        if (DESCRIPTORS && USE_SETTER)
          setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
        return wrap(tag, description);
      };
      SymbolPrototype = $Symbol[PROTOTYPE];
      redefine(SymbolPrototype, "toString", function toString2() {
        return getInternalState(this).tag;
      });
      redefine($Symbol, "withoutSetter", function(description) {
        return wrap(uid(description), description);
      });
      propertyIsEnumerableModule.f = $propertyIsEnumerable;
      definePropertyModule.f = $defineProperty;
      definePropertiesModule.f = $defineProperties;
      getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
      getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
      getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
      wrappedWellKnownSymbolModule.f = function(name2) {
        return wrap(wellKnownSymbol(name2), name2);
      };
      if (DESCRIPTORS) {
        nativeDefineProperty(SymbolPrototype, "description", {
          configurable: true,
          get: function description() {
            return getInternalState(this).description;
          }
        });
        if (!IS_PURE) {
          redefine(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, { unsafe: true });
        }
      }
    }
    $({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
      Symbol: $Symbol
    });
    $forEach(objectKeys(WellKnownSymbolsStore), function(name2) {
      defineWellKnownSymbol(name2);
    });
    $({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
      "for": function(key) {
        var string = $toString(key);
        if (hasOwn(StringToSymbolRegistry, string))
          return StringToSymbolRegistry[string];
        var symbol = $Symbol(string);
        StringToSymbolRegistry[string] = symbol;
        SymbolToStringRegistry[symbol] = string;
        return symbol;
      },
      keyFor: function keyFor(sym) {
        if (!isSymbol(sym))
          throw TypeError2(sym + " is not a symbol");
        if (hasOwn(SymbolToStringRegistry, sym))
          return SymbolToStringRegistry[sym];
      },
      useSetter: function() {
        USE_SETTER = true;
      },
      useSimple: function() {
        USE_SETTER = false;
      }
    });
    $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
      create: $create,
      defineProperty: $defineProperty,
      defineProperties: $defineProperties,
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor
    });
    $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL }, {
      getOwnPropertyNames: $getOwnPropertyNames,
      getOwnPropertySymbols: $getOwnPropertySymbols
    });
    $({ target: "Object", stat: true, forced: fails(function() {
      getOwnPropertySymbolsModule.f(1);
    }) }, {
      getOwnPropertySymbols: function getOwnPropertySymbols(it) {
        return getOwnPropertySymbolsModule.f(toObject(it));
      }
    });
    if ($stringify) {
      FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function() {
        var symbol = $Symbol();
        return $stringify([symbol]) != "[null]" || $stringify({ a: symbol }) != "{}" || $stringify(Object(symbol)) != "{}";
      });
      $({ target: "JSON", stat: true, forced: FORCED_JSON_STRINGIFY }, {
        stringify: function stringify2(it, replacer, space) {
          var args = arraySlice(arguments);
          var $replacer = replacer;
          if (!isObject(replacer) && it === void 0 || isSymbol(it))
            return;
          if (!isArray(replacer))
            replacer = function(key, value) {
              if (isCallable($replacer))
                value = call($replacer, this, key, value);
              if (!isSymbol(value))
                return value;
            };
          args[1] = replacer;
          return apply($stringify, null, args);
        }
      });
    }
    var FORCED_JSON_STRINGIFY;
    if (!SymbolPrototype[TO_PRIMITIVE]) {
      valueOf = SymbolPrototype.valueOf;
      redefine(SymbolPrototype, TO_PRIMITIVE, function(hint) {
        return call(valueOf, this);
      });
    }
    var valueOf;
    setToStringTag($Symbol, SYMBOL);
    hiddenKeys[HIDDEN] = true;
  }
});

// node_modules/core-js-pure/modules/es.symbol.async-iterator.js
var require_es_symbol_async_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.async-iterator.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("asyncIterator");
  }
});

// node_modules/core-js-pure/modules/es.symbol.description.js
var require_es_symbol_description = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.description.js"() {
    init_react();
  }
});

// node_modules/core-js-pure/modules/es.symbol.has-instance.js
var require_es_symbol_has_instance = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.has-instance.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("hasInstance");
  }
});

// node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js
var require_es_symbol_is_concat_spreadable = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("isConcatSpreadable");
  }
});

// node_modules/core-js-pure/modules/es.symbol.iterator.js
var require_es_symbol_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.iterator.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("iterator");
  }
});

// node_modules/core-js-pure/modules/es.symbol.match.js
var require_es_symbol_match = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.match.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("match");
  }
});

// node_modules/core-js-pure/modules/es.symbol.match-all.js
var require_es_symbol_match_all = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.match-all.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("matchAll");
  }
});

// node_modules/core-js-pure/modules/es.symbol.replace.js
var require_es_symbol_replace = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.replace.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("replace");
  }
});

// node_modules/core-js-pure/modules/es.symbol.search.js
var require_es_symbol_search = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.search.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("search");
  }
});

// node_modules/core-js-pure/modules/es.symbol.species.js
var require_es_symbol_species = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.species.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("species");
  }
});

// node_modules/core-js-pure/modules/es.symbol.split.js
var require_es_symbol_split = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.split.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("split");
  }
});

// node_modules/core-js-pure/modules/es.symbol.to-primitive.js
var require_es_symbol_to_primitive = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.to-primitive.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("toPrimitive");
  }
});

// node_modules/core-js-pure/modules/es.symbol.to-string-tag.js
var require_es_symbol_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.to-string-tag.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("toStringTag");
  }
});

// node_modules/core-js-pure/modules/es.symbol.unscopables.js
var require_es_symbol_unscopables = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.unscopables.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("unscopables");
  }
});

// node_modules/core-js-pure/modules/es.json.to-string-tag.js
var require_es_json_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.json.to-string-tag.js"() {
    init_react();
    var global2 = require_global();
    var setToStringTag = require_set_to_string_tag();
    setToStringTag(global2.JSON, "JSON", true);
  }
});

// node_modules/core-js-pure/modules/es.math.to-string-tag.js
var require_es_math_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.math.to-string-tag.js"() {
    init_react();
  }
});

// node_modules/core-js-pure/modules/es.reflect.to-string-tag.js
var require_es_reflect_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.reflect.to-string-tag.js"() {
    init_react();
  }
});

// node_modules/core-js-pure/es/symbol/index.js
var require_symbol = __commonJS({
  "node_modules/core-js-pure/es/symbol/index.js"(exports, module) {
    init_react();
    require_es_array_concat();
    require_es_object_to_string();
    require_es_symbol();
    require_es_symbol_async_iterator();
    require_es_symbol_description();
    require_es_symbol_has_instance();
    require_es_symbol_is_concat_spreadable();
    require_es_symbol_iterator();
    require_es_symbol_match();
    require_es_symbol_match_all();
    require_es_symbol_replace();
    require_es_symbol_search();
    require_es_symbol_species();
    require_es_symbol_split();
    require_es_symbol_to_primitive();
    require_es_symbol_to_string_tag();
    require_es_symbol_unscopables();
    require_es_json_to_string_tag();
    require_es_math_to_string_tag();
    require_es_reflect_to_string_tag();
    var path = require_path();
    module.exports = path.Symbol;
  }
});

// node_modules/core-js-pure/internals/add-to-unscopables.js
var require_add_to_unscopables = __commonJS({
  "node_modules/core-js-pure/internals/add-to-unscopables.js"(exports, module) {
    init_react();
    module.exports = function() {
    };
  }
});

// node_modules/core-js-pure/internals/iterators.js
var require_iterators = __commonJS({
  "node_modules/core-js-pure/internals/iterators.js"(exports, module) {
    init_react();
    module.exports = {};
  }
});

// node_modules/core-js-pure/internals/function-name.js
var require_function_name = __commonJS({
  "node_modules/core-js-pure/internals/function-name.js"(exports, module) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var hasOwn = require_has_own_property();
    var FunctionPrototype = Function.prototype;
    var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
    var EXISTS = hasOwn(FunctionPrototype, "name");
    var PROPER = EXISTS && function something() {
    }.name === "something";
    var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
    module.exports = {
      EXISTS,
      PROPER,
      CONFIGURABLE
    };
  }
});

// node_modules/core-js-pure/internals/correct-prototype-getter.js
var require_correct_prototype_getter = __commonJS({
  "node_modules/core-js-pure/internals/correct-prototype-getter.js"(exports, module) {
    init_react();
    var fails = require_fails();
    module.exports = !fails(function() {
      function F2() {
      }
      F2.prototype.constructor = null;
      return Object.getPrototypeOf(new F2()) !== F2.prototype;
    });
  }
});

// node_modules/core-js-pure/internals/object-get-prototype-of.js
var require_object_get_prototype_of = __commonJS({
  "node_modules/core-js-pure/internals/object-get-prototype-of.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var hasOwn = require_has_own_property();
    var isCallable = require_is_callable();
    var toObject = require_to_object();
    var sharedKey = require_shared_key();
    var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
    var IE_PROTO = sharedKey("IE_PROTO");
    var Object2 = global2.Object;
    var ObjectPrototype = Object2.prototype;
    module.exports = CORRECT_PROTOTYPE_GETTER ? Object2.getPrototypeOf : function(O2) {
      var object = toObject(O2);
      if (hasOwn(object, IE_PROTO))
        return object[IE_PROTO];
      var constructor = object.constructor;
      if (isCallable(constructor) && object instanceof constructor) {
        return constructor.prototype;
      }
      return object instanceof Object2 ? ObjectPrototype : null;
    };
  }
});

// node_modules/core-js-pure/internals/iterators-core.js
var require_iterators_core = __commonJS({
  "node_modules/core-js-pure/internals/iterators-core.js"(exports, module) {
    "use strict";
    init_react();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var create = require_object_create();
    var getPrototypeOf = require_object_get_prototype_of();
    var redefine = require_redefine();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_PURE = require_is_pure();
    var ITERATOR = wellKnownSymbol("iterator");
    var BUGGY_SAFARI_ITERATORS = false;
    var IteratorPrototype;
    var PrototypeOfArrayIteratorPrototype;
    var arrayIterator;
    if ([].keys) {
      arrayIterator = [].keys();
      if (!("next" in arrayIterator))
        BUGGY_SAFARI_ITERATORS = true;
      else {
        PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
        if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
          IteratorPrototype = PrototypeOfArrayIteratorPrototype;
      }
    }
    var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == void 0 || fails(function() {
      var test = {};
      return IteratorPrototype[ITERATOR].call(test) !== test;
    });
    if (NEW_ITERATOR_PROTOTYPE)
      IteratorPrototype = {};
    else if (IS_PURE)
      IteratorPrototype = create(IteratorPrototype);
    if (!isCallable(IteratorPrototype[ITERATOR])) {
      redefine(IteratorPrototype, ITERATOR, function() {
        return this;
      });
    }
    module.exports = {
      IteratorPrototype,
      BUGGY_SAFARI_ITERATORS
    };
  }
});

// node_modules/core-js-pure/internals/create-iterator-constructor.js
var require_create_iterator_constructor = __commonJS({
  "node_modules/core-js-pure/internals/create-iterator-constructor.js"(exports, module) {
    "use strict";
    init_react();
    var IteratorPrototype = require_iterators_core().IteratorPrototype;
    var create = require_object_create();
    var createPropertyDescriptor = require_create_property_descriptor();
    var setToStringTag = require_set_to_string_tag();
    var Iterators = require_iterators();
    var returnThis = function() {
      return this;
    };
    module.exports = function(IteratorConstructor, NAME, next2, ENUMERABLE_NEXT) {
      var TO_STRING_TAG = NAME + " Iterator";
      IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next2) });
      setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
      Iterators[TO_STRING_TAG] = returnThis;
      return IteratorConstructor;
    };
  }
});

// node_modules/core-js-pure/internals/a-possible-prototype.js
var require_a_possible_prototype = __commonJS({
  "node_modules/core-js-pure/internals/a-possible-prototype.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isCallable = require_is_callable();
    var String2 = global2.String;
    var TypeError2 = global2.TypeError;
    module.exports = function(argument) {
      if (typeof argument == "object" || isCallable(argument))
        return argument;
      throw TypeError2("Can't set " + String2(argument) + " as a prototype");
    };
  }
});

// node_modules/core-js-pure/internals/object-set-prototype-of.js
var require_object_set_prototype_of = __commonJS({
  "node_modules/core-js-pure/internals/object-set-prototype-of.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var anObject = require_an_object();
    var aPossiblePrototype = require_a_possible_prototype();
    module.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
      var CORRECT_SETTER = false;
      var test = {};
      var setter;
      try {
        setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
        setter(test, []);
        CORRECT_SETTER = test instanceof Array;
      } catch (error) {
      }
      return function setPrototypeOf(O2, proto) {
        anObject(O2);
        aPossiblePrototype(proto);
        if (CORRECT_SETTER)
          setter(O2, proto);
        else
          O2.__proto__ = proto;
        return O2;
      };
    }() : void 0);
  }
});

// node_modules/core-js-pure/internals/define-iterator.js
var require_define_iterator = __commonJS({
  "node_modules/core-js-pure/internals/define-iterator.js"(exports, module) {
    "use strict";
    init_react();
    var $ = require_export();
    var call = require_function_call();
    var IS_PURE = require_is_pure();
    var FunctionName = require_function_name();
    var isCallable = require_is_callable();
    var createIteratorConstructor = require_create_iterator_constructor();
    var getPrototypeOf = require_object_get_prototype_of();
    var setPrototypeOf = require_object_set_prototype_of();
    var setToStringTag = require_set_to_string_tag();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var redefine = require_redefine();
    var wellKnownSymbol = require_well_known_symbol();
    var Iterators = require_iterators();
    var IteratorsCore = require_iterators_core();
    var PROPER_FUNCTION_NAME = FunctionName.PROPER;
    var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
    var IteratorPrototype = IteratorsCore.IteratorPrototype;
    var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR = wellKnownSymbol("iterator");
    var KEYS = "keys";
    var VALUES = "values";
    var ENTRIES = "entries";
    var returnThis = function() {
      return this;
    };
    module.exports = function(Iterable, NAME, IteratorConstructor, next2, DEFAULT, IS_SET, FORCED) {
      createIteratorConstructor(IteratorConstructor, NAME, next2);
      var getIterationMethod = function(KIND) {
        if (KIND === DEFAULT && defaultIterator)
          return defaultIterator;
        if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
          return IterablePrototype[KIND];
        switch (KIND) {
          case KEYS:
            return function keys() {
              return new IteratorConstructor(this, KIND);
            };
          case VALUES:
            return function values() {
              return new IteratorConstructor(this, KIND);
            };
          case ENTRIES:
            return function entries() {
              return new IteratorConstructor(this, KIND);
            };
        }
        return function() {
          return new IteratorConstructor(this);
        };
      };
      var TO_STRING_TAG = NAME + " Iterator";
      var INCORRECT_VALUES_NAME = false;
      var IterablePrototype = Iterable.prototype;
      var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
      var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
      var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
      var CurrentIteratorPrototype, methods, KEY;
      if (anyNativeIterator) {
        CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
        if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
          if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
            if (setPrototypeOf) {
              setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
            } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
              redefine(CurrentIteratorPrototype, ITERATOR, returnThis);
            }
          }
          setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
          if (IS_PURE)
            Iterators[TO_STRING_TAG] = returnThis;
        }
      }
      if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
        if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
          createNonEnumerableProperty(IterablePrototype, "name", VALUES);
        } else {
          INCORRECT_VALUES_NAME = true;
          defaultIterator = function values() {
            return call(nativeIterator, this);
          };
        }
      }
      if (DEFAULT) {
        methods = {
          values: getIterationMethod(VALUES),
          keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
          entries: getIterationMethod(ENTRIES)
        };
        if (FORCED)
          for (KEY in methods) {
            if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
              redefine(IterablePrototype, KEY, methods[KEY]);
            }
          }
        else
          $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
      }
      if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
        redefine(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
      }
      Iterators[NAME] = defaultIterator;
      return methods;
    };
  }
});

// node_modules/core-js-pure/modules/es.array.iterator.js
var require_es_array_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.array.iterator.js"(exports, module) {
    "use strict";
    init_react();
    var toIndexedObject = require_to_indexed_object();
    var addToUnscopables = require_add_to_unscopables();
    var Iterators = require_iterators();
    var InternalStateModule = require_internal_state();
    var defineProperty = require_object_define_property().f;
    var defineIterator = require_define_iterator();
    var IS_PURE = require_is_pure();
    var DESCRIPTORS = require_descriptors();
    var ARRAY_ITERATOR = "Array Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
    module.exports = defineIterator(Array, "Array", function(iterated, kind) {
      setInternalState(this, {
        type: ARRAY_ITERATOR,
        target: toIndexedObject(iterated),
        index: 0,
        kind
      });
    }, function() {
      var state = getInternalState(this);
      var target = state.target;
      var kind = state.kind;
      var index = state.index++;
      if (!target || index >= target.length) {
        state.target = void 0;
        return { value: void 0, done: true };
      }
      if (kind == "keys")
        return { value: index, done: false };
      if (kind == "values")
        return { value: target[index], done: false };
      return { value: [index, target[index]], done: false };
    }, "values");
    var values = Iterators.Arguments = Iterators.Array;
    addToUnscopables("keys");
    addToUnscopables("values");
    addToUnscopables("entries");
    if (!IS_PURE && DESCRIPTORS && values.name !== "values")
      try {
        defineProperty(values, "name", { value: "values" });
      } catch (error) {
      }
  }
});

// node_modules/core-js-pure/internals/dom-iterables.js
var require_dom_iterables = __commonJS({
  "node_modules/core-js-pure/internals/dom-iterables.js"(exports, module) {
    init_react();
    module.exports = {
      CSSRuleList: 0,
      CSSStyleDeclaration: 0,
      CSSValueList: 0,
      ClientRectList: 0,
      DOMRectList: 0,
      DOMStringList: 0,
      DOMTokenList: 1,
      DataTransferItemList: 0,
      FileList: 0,
      HTMLAllCollection: 0,
      HTMLCollection: 0,
      HTMLFormElement: 0,
      HTMLSelectElement: 0,
      MediaList: 0,
      MimeTypeArray: 0,
      NamedNodeMap: 0,
      NodeList: 1,
      PaintRequestList: 0,
      Plugin: 0,
      PluginArray: 0,
      SVGLengthList: 0,
      SVGNumberList: 0,
      SVGPathSegList: 0,
      SVGPointList: 0,
      SVGStringList: 0,
      SVGTransformList: 0,
      SourceBufferList: 0,
      StyleSheetList: 0,
      TextTrackCueList: 0,
      TextTrackList: 0,
      TouchList: 0
    };
  }
});

// node_modules/core-js-pure/modules/web.dom-collections.iterator.js
var require_web_dom_collections_iterator = __commonJS({
  "node_modules/core-js-pure/modules/web.dom-collections.iterator.js"() {
    init_react();
    require_es_array_iterator();
    var DOMIterables = require_dom_iterables();
    var global2 = require_global();
    var classof = require_classof();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var Iterators = require_iterators();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    for (COLLECTION_NAME in DOMIterables) {
      Collection = global2[COLLECTION_NAME];
      CollectionPrototype = Collection && Collection.prototype;
      if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {
        createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
      }
      Iterators[COLLECTION_NAME] = Iterators.Array;
    }
    var Collection;
    var CollectionPrototype;
    var COLLECTION_NAME;
  }
});

// node_modules/core-js-pure/stable/symbol/index.js
var require_symbol2 = __commonJS({
  "node_modules/core-js-pure/stable/symbol/index.js"(exports, module) {
    init_react();
    var parent = require_symbol();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/symbol/index.js
var require_symbol3 = __commonJS({
  "node_modules/core-js-pure/actual/symbol/index.js"(exports, module) {
    init_react();
    var parent = require_symbol2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js
var require_esnext_symbol_async_dispose = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("asyncDispose");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.dispose.js
var require_esnext_symbol_dispose = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.dispose.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("dispose");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.matcher.js
var require_esnext_symbol_matcher = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.matcher.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("matcher");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.metadata.js
var require_esnext_symbol_metadata = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.metadata.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("metadata");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.observable.js
var require_esnext_symbol_observable = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.observable.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("observable");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js
var require_esnext_symbol_pattern_match = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("patternMatch");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.replace-all.js
var require_esnext_symbol_replace_all = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.replace-all.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("replaceAll");
  }
});

// node_modules/core-js-pure/features/symbol/index.js
var require_symbol4 = __commonJS({
  "node_modules/core-js-pure/features/symbol/index.js"(exports, module) {
    init_react();
    var parent = require_symbol3();
    require_esnext_symbol_async_dispose();
    require_esnext_symbol_dispose();
    require_esnext_symbol_matcher();
    require_esnext_symbol_metadata();
    require_esnext_symbol_observable();
    require_esnext_symbol_pattern_match();
    require_esnext_symbol_replace_all();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/symbol.js
var require_symbol5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/symbol.js"(exports, module) {
    init_react();
    module.exports = require_symbol4();
  }
});

// node_modules/core-js-pure/internals/string-multibyte.js
var require_string_multibyte = __commonJS({
  "node_modules/core-js-pure/internals/string-multibyte.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toString2 = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var charAt = uncurryThis("".charAt);
    var charCodeAt = uncurryThis("".charCodeAt);
    var stringSlice = uncurryThis("".slice);
    var createMethod = function(CONVERT_TO_STRING) {
      return function($this, pos) {
        var S2 = toString2(requireObjectCoercible($this));
        var position2 = toIntegerOrInfinity(pos);
        var size2 = S2.length;
        var first, second;
        if (position2 < 0 || position2 >= size2)
          return CONVERT_TO_STRING ? "" : void 0;
        first = charCodeAt(S2, position2);
        return first < 55296 || first > 56319 || position2 + 1 === size2 || (second = charCodeAt(S2, position2 + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S2, position2) : first : CONVERT_TO_STRING ? stringSlice(S2, position2, position2 + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
      };
    };
    module.exports = {
      codeAt: createMethod(false),
      charAt: createMethod(true)
    };
  }
});

// node_modules/core-js-pure/modules/es.string.iterator.js
var require_es_string_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.string.iterator.js"() {
    "use strict";
    init_react();
    var charAt = require_string_multibyte().charAt;
    var toString2 = require_to_string();
    var InternalStateModule = require_internal_state();
    var defineIterator = require_define_iterator();
    var STRING_ITERATOR = "String Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
    defineIterator(String, "String", function(iterated) {
      setInternalState(this, {
        type: STRING_ITERATOR,
        string: toString2(iterated),
        index: 0
      });
    }, function next2() {
      var state = getInternalState(this);
      var string = state.string;
      var index = state.index;
      var point;
      if (index >= string.length)
        return { value: void 0, done: true };
      point = charAt(string, index);
      state.index += point.length;
      return { value: point, done: false };
    });
  }
});

// node_modules/core-js-pure/es/symbol/iterator.js
var require_iterator = __commonJS({
  "node_modules/core-js-pure/es/symbol/iterator.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_object_to_string();
    require_es_string_iterator();
    require_es_symbol_iterator();
    var WrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    module.exports = WrappedWellKnownSymbolModule.f("iterator");
  }
});

// node_modules/core-js-pure/stable/symbol/iterator.js
var require_iterator2 = __commonJS({
  "node_modules/core-js-pure/stable/symbol/iterator.js"(exports, module) {
    init_react();
    var parent = require_iterator();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/symbol/iterator.js
var require_iterator3 = __commonJS({
  "node_modules/core-js-pure/actual/symbol/iterator.js"(exports, module) {
    init_react();
    var parent = require_iterator2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/symbol/iterator.js
var require_iterator4 = __commonJS({
  "node_modules/core-js-pure/features/symbol/iterator.js"(exports, module) {
    init_react();
    var parent = require_iterator3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/symbol/iterator.js
var require_iterator5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/symbol/iterator.js"(exports, module) {
    init_react();
    module.exports = require_iterator4();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/typeof.js"(exports, module) {
    init_react();
    var _Symbol = require_symbol5();
    var _Symbol$iterator = require_iterator5();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return module.exports = _typeof = typeof _Symbol == "function" && typeof _Symbol$iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof _Symbol == "function" && obj2.constructor === _Symbol && obj2 !== _Symbol.prototype ? "symbol" : typeof obj2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(obj);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/internals/function-bind.js
var require_function_bind = __commonJS({
  "node_modules/core-js-pure/internals/function-bind.js"(exports, module) {
    "use strict";
    init_react();
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var isObject = require_is_object();
    var hasOwn = require_has_own_property();
    var arraySlice = require_array_slice();
    var NATIVE_BIND = require_function_bind_native();
    var Function2 = global2.Function;
    var concat2 = uncurryThis([].concat);
    var join = uncurryThis([].join);
    var factories = {};
    var construct = function(C, argsLength, args) {
      if (!hasOwn(factories, argsLength)) {
        for (var list = [], i = 0; i < argsLength; i++)
          list[i] = "a[" + i + "]";
        factories[argsLength] = Function2("C,a", "return new C(" + join(list, ",") + ")");
      }
      return factories[argsLength](C, args);
    };
    module.exports = NATIVE_BIND ? Function2.bind : function bind(that) {
      var F2 = aCallable(this);
      var Prototype = F2.prototype;
      var partArgs = arraySlice(arguments, 1);
      var boundFunction = function bound() {
        var args = concat2(partArgs, arraySlice(arguments));
        return this instanceof boundFunction ? construct(F2, args.length, args) : F2.apply(that, args);
      };
      if (isObject(Prototype))
        boundFunction.prototype = Prototype;
      return boundFunction;
    };
  }
});

// node_modules/core-js-pure/internals/a-constructor.js
var require_a_constructor = __commonJS({
  "node_modules/core-js-pure/internals/a-constructor.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isConstructor = require_is_constructor();
    var tryToString = require_try_to_string();
    var TypeError2 = global2.TypeError;
    module.exports = function(argument) {
      if (isConstructor(argument))
        return argument;
      throw TypeError2(tryToString(argument) + " is not a constructor");
    };
  }
});

// node_modules/core-js-pure/modules/es.reflect.construct.js
var require_es_reflect_construct = __commonJS({
  "node_modules/core-js-pure/modules/es.reflect.construct.js"() {
    init_react();
    var $ = require_export();
    var getBuiltIn = require_get_built_in();
    var apply = require_function_apply();
    var bind = require_function_bind();
    var aConstructor = require_a_constructor();
    var anObject = require_an_object();
    var isObject = require_is_object();
    var create = require_object_create();
    var fails = require_fails();
    var nativeConstruct = getBuiltIn("Reflect", "construct");
    var ObjectPrototype = Object.prototype;
    var push = [].push;
    var NEW_TARGET_BUG = fails(function() {
      function F2() {
      }
      return !(nativeConstruct(function() {
      }, [], F2) instanceof F2);
    });
    var ARGS_BUG = !fails(function() {
      nativeConstruct(function() {
      });
    });
    var FORCED = NEW_TARGET_BUG || ARGS_BUG;
    $({ target: "Reflect", stat: true, forced: FORCED, sham: FORCED }, {
      construct: function construct(Target, args) {
        aConstructor(Target);
        anObject(args);
        var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
        if (ARGS_BUG && !NEW_TARGET_BUG)
          return nativeConstruct(Target, args, newTarget);
        if (Target == newTarget) {
          switch (args.length) {
            case 0:
              return new Target();
            case 1:
              return new Target(args[0]);
            case 2:
              return new Target(args[0], args[1]);
            case 3:
              return new Target(args[0], args[1], args[2]);
            case 4:
              return new Target(args[0], args[1], args[2], args[3]);
          }
          var $args = [null];
          apply(push, $args, args);
          return new (apply(bind, Target, $args))();
        }
        var proto = newTarget.prototype;
        var instance = create(isObject(proto) ? proto : ObjectPrototype);
        var result = apply(Target, instance, args);
        return isObject(result) ? result : instance;
      }
    });
  }
});

// node_modules/core-js-pure/es/reflect/construct.js
var require_construct = __commonJS({
  "node_modules/core-js-pure/es/reflect/construct.js"(exports, module) {
    init_react();
    require_es_reflect_construct();
    var path = require_path();
    module.exports = path.Reflect.construct;
  }
});

// node_modules/core-js-pure/stable/reflect/construct.js
var require_construct2 = __commonJS({
  "node_modules/core-js-pure/stable/reflect/construct.js"(exports, module) {
    init_react();
    var parent = require_construct();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/reflect/construct.js
var require_construct3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/reflect/construct.js"(exports, module) {
    init_react();
    module.exports = require_construct2();
  }
});

// node_modules/core-js-pure/internals/redefine-all.js
var require_redefine_all = __commonJS({
  "node_modules/core-js-pure/internals/redefine-all.js"(exports, module) {
    init_react();
    var redefine = require_redefine();
    module.exports = function(target, src, options) {
      for (var key in src) {
        if (options && options.unsafe && target[key])
          target[key] = src[key];
        else
          redefine(target, key, src[key], options);
      }
      return target;
    };
  }
});

// node_modules/core-js-pure/internals/array-buffer-non-extensible.js
var require_array_buffer_non_extensible = __commonJS({
  "node_modules/core-js-pure/internals/array-buffer-non-extensible.js"(exports, module) {
    init_react();
    var fails = require_fails();
    module.exports = fails(function() {
      if (typeof ArrayBuffer == "function") {
        var buffer = new ArrayBuffer(8);
        if (Object.isExtensible(buffer))
          Object.defineProperty(buffer, "a", { value: 8 });
      }
    });
  }
});

// node_modules/core-js-pure/internals/object-is-extensible.js
var require_object_is_extensible = __commonJS({
  "node_modules/core-js-pure/internals/object-is-extensible.js"(exports, module) {
    init_react();
    var fails = require_fails();
    var isObject = require_is_object();
    var classof = require_classof_raw();
    var ARRAY_BUFFER_NON_EXTENSIBLE = require_array_buffer_non_extensible();
    var $isExtensible = Object.isExtensible;
    var FAILS_ON_PRIMITIVES = fails(function() {
      $isExtensible(1);
    });
    module.exports = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it) {
      if (!isObject(it))
        return false;
      if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == "ArrayBuffer")
        return false;
      return $isExtensible ? $isExtensible(it) : true;
    } : $isExtensible;
  }
});

// node_modules/core-js-pure/internals/freezing.js
var require_freezing = __commonJS({
  "node_modules/core-js-pure/internals/freezing.js"(exports, module) {
    init_react();
    var fails = require_fails();
    module.exports = !fails(function() {
      return Object.isExtensible(Object.preventExtensions({}));
    });
  }
});

// node_modules/core-js-pure/internals/internal-metadata.js
var require_internal_metadata = __commonJS({
  "node_modules/core-js-pure/internals/internal-metadata.js"(exports, module) {
    init_react();
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var hiddenKeys = require_hidden_keys();
    var isObject = require_is_object();
    var hasOwn = require_has_own_property();
    var defineProperty = require_object_define_property().f;
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertyNamesExternalModule = require_object_get_own_property_names_external();
    var isExtensible = require_object_is_extensible();
    var uid = require_uid();
    var FREEZING = require_freezing();
    var REQUIRED = false;
    var METADATA = uid("meta");
    var id2 = 0;
    var setMetadata = function(it) {
      defineProperty(it, METADATA, { value: {
        objectID: "O" + id2++,
        weakData: {}
      } });
    };
    var fastKey = function(it, create) {
      if (!isObject(it))
        return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
      if (!hasOwn(it, METADATA)) {
        if (!isExtensible(it))
          return "F";
        if (!create)
          return "E";
        setMetadata(it);
      }
      return it[METADATA].objectID;
    };
    var getWeakData = function(it, create) {
      if (!hasOwn(it, METADATA)) {
        if (!isExtensible(it))
          return true;
        if (!create)
          return false;
        setMetadata(it);
      }
      return it[METADATA].weakData;
    };
    var onFreeze = function(it) {
      if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA))
        setMetadata(it);
      return it;
    };
    var enable = function() {
      meta.enable = function() {
      };
      REQUIRED = true;
      var getOwnPropertyNames = getOwnPropertyNamesModule.f;
      var splice = uncurryThis([].splice);
      var test = {};
      test[METADATA] = 1;
      if (getOwnPropertyNames(test).length) {
        getOwnPropertyNamesModule.f = function(it) {
          var result = getOwnPropertyNames(it);
          for (var i = 0, length2 = result.length; i < length2; i++) {
            if (result[i] === METADATA) {
              splice(result, i, 1);
              break;
            }
          }
          return result;
        };
        $({ target: "Object", stat: true, forced: true }, {
          getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
        });
      }
    };
    var meta = module.exports = {
      enable,
      fastKey,
      getWeakData,
      onFreeze
    };
    hiddenKeys[METADATA] = true;
  }
});

// node_modules/core-js-pure/internals/is-array-iterator-method.js
var require_is_array_iterator_method = __commonJS({
  "node_modules/core-js-pure/internals/is-array-iterator-method.js"(exports, module) {
    init_react();
    var wellKnownSymbol = require_well_known_symbol();
    var Iterators = require_iterators();
    var ITERATOR = wellKnownSymbol("iterator");
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
    };
  }
});

// node_modules/core-js-pure/internals/get-iterator-method.js
var require_get_iterator_method = __commonJS({
  "node_modules/core-js-pure/internals/get-iterator-method.js"(exports, module) {
    init_react();
    var classof = require_classof();
    var getMethod = require_get_method();
    var Iterators = require_iterators();
    var wellKnownSymbol = require_well_known_symbol();
    var ITERATOR = wellKnownSymbol("iterator");
    module.exports = function(it) {
      if (it != void 0)
        return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
    };
  }
});

// node_modules/core-js-pure/internals/get-iterator.js
var require_get_iterator = __commonJS({
  "node_modules/core-js-pure/internals/get-iterator.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var tryToString = require_try_to_string();
    var getIteratorMethod = require_get_iterator_method();
    var TypeError2 = global2.TypeError;
    module.exports = function(argument, usingIterator) {
      var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
      if (aCallable(iteratorMethod))
        return anObject(call(iteratorMethod, argument));
      throw TypeError2(tryToString(argument) + " is not iterable");
    };
  }
});

// node_modules/core-js-pure/internals/iterator-close.js
var require_iterator_close = __commonJS({
  "node_modules/core-js-pure/internals/iterator-close.js"(exports, module) {
    init_react();
    var call = require_function_call();
    var anObject = require_an_object();
    var getMethod = require_get_method();
    module.exports = function(iterator, kind, value) {
      var innerResult, innerError;
      anObject(iterator);
      try {
        innerResult = getMethod(iterator, "return");
        if (!innerResult) {
          if (kind === "throw")
            throw value;
          return value;
        }
        innerResult = call(innerResult, iterator);
      } catch (error) {
        innerError = true;
        innerResult = error;
      }
      if (kind === "throw")
        throw value;
      if (innerError)
        throw innerResult;
      anObject(innerResult);
      return value;
    };
  }
});

// node_modules/core-js-pure/internals/iterate.js
var require_iterate = __commonJS({
  "node_modules/core-js-pure/internals/iterate.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var anObject = require_an_object();
    var tryToString = require_try_to_string();
    var isArrayIteratorMethod = require_is_array_iterator_method();
    var lengthOfArrayLike = require_length_of_array_like();
    var isPrototypeOf = require_object_is_prototype_of();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var iteratorClose = require_iterator_close();
    var TypeError2 = global2.TypeError;
    var Result = function(stopped, result) {
      this.stopped = stopped;
      this.result = result;
    };
    var ResultPrototype = Result.prototype;
    module.exports = function(iterable, unboundFunction, options) {
      var that = options && options.that;
      var AS_ENTRIES = !!(options && options.AS_ENTRIES);
      var IS_ITERATOR = !!(options && options.IS_ITERATOR);
      var INTERRUPTED = !!(options && options.INTERRUPTED);
      var fn2 = bind(unboundFunction, that);
      var iterator, iterFn, index, length2, result, next2, step;
      var stop = function(condition) {
        if (iterator)
          iteratorClose(iterator, "normal", condition);
        return new Result(true, condition);
      };
      var callFn = function(value) {
        if (AS_ENTRIES) {
          anObject(value);
          return INTERRUPTED ? fn2(value[0], value[1], stop) : fn2(value[0], value[1]);
        }
        return INTERRUPTED ? fn2(value, stop) : fn2(value);
      };
      if (IS_ITERATOR) {
        iterator = iterable;
      } else {
        iterFn = getIteratorMethod(iterable);
        if (!iterFn)
          throw TypeError2(tryToString(iterable) + " is not iterable");
        if (isArrayIteratorMethod(iterFn)) {
          for (index = 0, length2 = lengthOfArrayLike(iterable); length2 > index; index++) {
            result = callFn(iterable[index]);
            if (result && isPrototypeOf(ResultPrototype, result))
              return result;
          }
          return new Result(false);
        }
        iterator = getIterator(iterable, iterFn);
      }
      next2 = iterator.next;
      while (!(step = call(next2, iterator)).done) {
        try {
          result = callFn(step.value);
        } catch (error) {
          iteratorClose(iterator, "throw", error);
        }
        if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result))
          return result;
      }
      return new Result(false);
    };
  }
});

// node_modules/core-js-pure/internals/an-instance.js
var require_an_instance = __commonJS({
  "node_modules/core-js-pure/internals/an-instance.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isPrototypeOf = require_object_is_prototype_of();
    var TypeError2 = global2.TypeError;
    module.exports = function(it, Prototype) {
      if (isPrototypeOf(Prototype, it))
        return it;
      throw TypeError2("Incorrect invocation");
    };
  }
});

// node_modules/core-js-pure/internals/collection.js
var require_collection = __commonJS({
  "node_modules/core-js-pure/internals/collection.js"(exports, module) {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var InternalMetadataModule = require_internal_metadata();
    var fails = require_fails();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var iterate = require_iterate();
    var anInstance = require_an_instance();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var setToStringTag = require_set_to_string_tag();
    var defineProperty = require_object_define_property().f;
    var forEach = require_array_iteration().forEach;
    var DESCRIPTORS = require_descriptors();
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    module.exports = function(CONSTRUCTOR_NAME, wrapper, common) {
      var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
      var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
      var ADDER = IS_MAP ? "set" : "add";
      var NativeConstructor = global2[CONSTRUCTOR_NAME];
      var NativePrototype = NativeConstructor && NativeConstructor.prototype;
      var exported = {};
      var Constructor;
      if (!DESCRIPTORS || !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
        new NativeConstructor().entries().next();
      }))) {
        Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
        InternalMetadataModule.enable();
      } else {
        Constructor = wrapper(function(target, iterable) {
          setInternalState(anInstance(target, Prototype), {
            type: CONSTRUCTOR_NAME,
            collection: new NativeConstructor()
          });
          if (iterable != void 0)
            iterate(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });
        });
        var Prototype = Constructor.prototype;
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
        forEach(["add", "clear", "delete", "forEach", "get", "has", "set", "keys", "values", "entries"], function(KEY) {
          var IS_ADDER = KEY == "add" || KEY == "set";
          if (KEY in NativePrototype && !(IS_WEAK && KEY == "clear")) {
            createNonEnumerableProperty(Prototype, KEY, function(a2, b2) {
              var collection = getInternalState(this).collection;
              if (!IS_ADDER && IS_WEAK && !isObject(a2))
                return KEY == "get" ? void 0 : false;
              var result = collection[KEY](a2 === 0 ? 0 : a2, b2);
              return IS_ADDER ? this : result;
            });
          }
        });
        IS_WEAK || defineProperty(Prototype, "size", {
          configurable: true,
          get: function() {
            return getInternalState(this).collection.size;
          }
        });
      }
      setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
      exported[CONSTRUCTOR_NAME] = Constructor;
      $({ global: true, forced: true }, exported);
      if (!IS_WEAK)
        common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
      return Constructor;
    };
  }
});

// node_modules/core-js-pure/internals/collection-weak.js
var require_collection_weak = __commonJS({
  "node_modules/core-js-pure/internals/collection-weak.js"(exports, module) {
    "use strict";
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var redefineAll = require_redefine_all();
    var getWeakData = require_internal_metadata().getWeakData;
    var anObject = require_an_object();
    var isObject = require_is_object();
    var anInstance = require_an_instance();
    var iterate = require_iterate();
    var ArrayIterationModule = require_array_iteration();
    var hasOwn = require_has_own_property();
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    var find = ArrayIterationModule.find;
    var findIndex = ArrayIterationModule.findIndex;
    var splice = uncurryThis([].splice);
    var id2 = 0;
    var uncaughtFrozenStore = function(store) {
      return store.frozen || (store.frozen = new UncaughtFrozenStore());
    };
    var UncaughtFrozenStore = function() {
      this.entries = [];
    };
    var findUncaughtFrozen = function(store, key) {
      return find(store.entries, function(it) {
        return it[0] === key;
      });
    };
    UncaughtFrozenStore.prototype = {
      get: function(key) {
        var entry = findUncaughtFrozen(this, key);
        if (entry)
          return entry[1];
      },
      has: function(key) {
        return !!findUncaughtFrozen(this, key);
      },
      set: function(key, value) {
        var entry = findUncaughtFrozen(this, key);
        if (entry)
          entry[1] = value;
        else
          this.entries.push([key, value]);
      },
      "delete": function(key) {
        var index = findIndex(this.entries, function(it) {
          return it[0] === key;
        });
        if (~index)
          splice(this.entries, index, 1);
        return !!~index;
      }
    };
    module.exports = {
      getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
        var Constructor = wrapper(function(that, iterable) {
          anInstance(that, Prototype);
          setInternalState(that, {
            type: CONSTRUCTOR_NAME,
            id: id2++,
            frozen: void 0
          });
          if (iterable != void 0)
            iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
        });
        var Prototype = Constructor.prototype;
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var define2 = function(that, key, value) {
          var state = getInternalState(that);
          var data = getWeakData(anObject(key), true);
          if (data === true)
            uncaughtFrozenStore(state).set(key, value);
          else
            data[state.id] = value;
          return that;
        };
        redefineAll(Prototype, {
          "delete": function(key) {
            var state = getInternalState(this);
            if (!isObject(key))
              return false;
            var data = getWeakData(key);
            if (data === true)
              return uncaughtFrozenStore(state)["delete"](key);
            return data && hasOwn(data, state.id) && delete data[state.id];
          },
          has: function has(key) {
            var state = getInternalState(this);
            if (!isObject(key))
              return false;
            var data = getWeakData(key);
            if (data === true)
              return uncaughtFrozenStore(state).has(key);
            return data && hasOwn(data, state.id);
          }
        });
        redefineAll(Prototype, IS_MAP ? {
          get: function get(key) {
            var state = getInternalState(this);
            if (isObject(key)) {
              var data = getWeakData(key);
              if (data === true)
                return uncaughtFrozenStore(state).get(key);
              return data ? data[state.id] : void 0;
            }
          },
          set: function set(key, value) {
            return define2(this, key, value);
          }
        } : {
          add: function add(value) {
            return define2(this, value, true);
          }
        });
        return Constructor;
      }
    };
  }
});

// node_modules/core-js-pure/modules/es.weak-map.js
var require_es_weak_map = __commonJS({
  "node_modules/core-js-pure/modules/es.weak-map.js"() {
    "use strict";
    init_react();
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    var redefineAll = require_redefine_all();
    var InternalMetadataModule = require_internal_metadata();
    var collection = require_collection();
    var collectionWeak = require_collection_weak();
    var isObject = require_is_object();
    var isExtensible = require_object_is_extensible();
    var enforceInternalState = require_internal_state().enforce;
    var NATIVE_WEAK_MAP = require_native_weak_map();
    var IS_IE11 = !global2.ActiveXObject && "ActiveXObject" in global2;
    var InternalWeakMap;
    var wrapper = function(init) {
      return function WeakMap2() {
        return init(this, arguments.length ? arguments[0] : void 0);
      };
    };
    var $WeakMap = collection("WeakMap", wrapper, collectionWeak);
    if (NATIVE_WEAK_MAP && IS_IE11) {
      InternalWeakMap = collectionWeak.getConstructor(wrapper, "WeakMap", true);
      InternalMetadataModule.enable();
      WeakMapPrototype = $WeakMap.prototype;
      nativeDelete = uncurryThis(WeakMapPrototype["delete"]);
      nativeHas = uncurryThis(WeakMapPrototype.has);
      nativeGet = uncurryThis(WeakMapPrototype.get);
      nativeSet = uncurryThis(WeakMapPrototype.set);
      redefineAll(WeakMapPrototype, {
        "delete": function(key) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap();
            return nativeDelete(this, key) || state.frozen["delete"](key);
          }
          return nativeDelete(this, key);
        },
        has: function has(key) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap();
            return nativeHas(this, key) || state.frozen.has(key);
          }
          return nativeHas(this, key);
        },
        get: function get(key) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap();
            return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
          }
          return nativeGet(this, key);
        },
        set: function set(key, value) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap();
            nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
          } else
            nativeSet(this, key, value);
          return this;
        }
      });
    }
    var WeakMapPrototype;
    var nativeDelete;
    var nativeHas;
    var nativeGet;
    var nativeSet;
  }
});

// node_modules/core-js-pure/es/weak-map/index.js
var require_weak_map = __commonJS({
  "node_modules/core-js-pure/es/weak-map/index.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_object_to_string();
    require_es_weak_map();
    var path = require_path();
    module.exports = path.WeakMap;
  }
});

// node_modules/core-js-pure/stable/weak-map/index.js
var require_weak_map2 = __commonJS({
  "node_modules/core-js-pure/stable/weak-map/index.js"(exports, module) {
    init_react();
    var parent = require_weak_map();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/weak-map.js
var require_weak_map3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/weak-map.js"(exports, module) {
    init_react();
    module.exports = require_weak_map2();
  }
});

// node_modules/core-js-pure/modules/es.object.define-property.js
var require_es_object_define_property = __commonJS({
  "node_modules/core-js-pure/modules/es.object.define-property.js"() {
    init_react();
    var $ = require_export();
    var DESCRIPTORS = require_descriptors();
    var defineProperty = require_object_define_property().f;
    $({ target: "Object", stat: true, forced: Object.defineProperty !== defineProperty, sham: !DESCRIPTORS }, {
      defineProperty
    });
  }
});

// node_modules/core-js-pure/es/object/define-property.js
var require_define_property = __commonJS({
  "node_modules/core-js-pure/es/object/define-property.js"(exports, module) {
    init_react();
    require_es_object_define_property();
    var path = require_path();
    var Object2 = path.Object;
    var defineProperty = module.exports = function defineProperty2(it, key, desc) {
      return Object2.defineProperty(it, key, desc);
    };
    if (Object2.defineProperty.sham)
      defineProperty.sham = true;
  }
});

// node_modules/core-js-pure/stable/object/define-property.js
var require_define_property2 = __commonJS({
  "node_modules/core-js-pure/stable/object/define-property.js"(exports, module) {
    init_react();
    var parent = require_define_property();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js
var require_define_property3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js"(exports, module) {
    init_react();
    module.exports = require_define_property2();
  }
});

// node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js
var require_es_object_get_own_property_descriptor = __commonJS({
  "node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js"() {
    init_react();
    var $ = require_export();
    var fails = require_fails();
    var toIndexedObject = require_to_indexed_object();
    var nativeGetOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var DESCRIPTORS = require_descriptors();
    var FAILS_ON_PRIMITIVES = fails(function() {
      nativeGetOwnPropertyDescriptor(1);
    });
    var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;
    $({ target: "Object", stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
        return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
      }
    });
  }
});

// node_modules/core-js-pure/es/object/get-own-property-descriptor.js
var require_get_own_property_descriptor = __commonJS({
  "node_modules/core-js-pure/es/object/get-own-property-descriptor.js"(exports, module) {
    init_react();
    require_es_object_get_own_property_descriptor();
    var path = require_path();
    var Object2 = path.Object;
    var getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor2(it, key) {
      return Object2.getOwnPropertyDescriptor(it, key);
    };
    if (Object2.getOwnPropertyDescriptor.sham)
      getOwnPropertyDescriptor.sham = true;
  }
});

// node_modules/core-js-pure/stable/object/get-own-property-descriptor.js
var require_get_own_property_descriptor2 = __commonJS({
  "node_modules/core-js-pure/stable/object/get-own-property-descriptor.js"(exports, module) {
    init_react();
    var parent = require_get_own_property_descriptor();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor.js
var require_get_own_property_descriptor3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor.js"(exports, module) {
    init_react();
    module.exports = require_get_own_property_descriptor2();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js"(exports, module) {
    init_react();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/internals/own-keys.js
var require_own_keys = __commonJS({
  "node_modules/core-js-pure/internals/own-keys.js"(exports, module) {
    init_react();
    var getBuiltIn = require_get_built_in();
    var uncurryThis = require_function_uncurry_this();
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var anObject = require_an_object();
    var concat2 = uncurryThis([].concat);
    module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys4(it) {
      var keys = getOwnPropertyNamesModule.f(anObject(it));
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      return getOwnPropertySymbols ? concat2(keys, getOwnPropertySymbols(it)) : keys;
    };
  }
});

// node_modules/core-js-pure/internals/copy-constructor-properties.js
var require_copy_constructor_properties = __commonJS({
  "node_modules/core-js-pure/internals/copy-constructor-properties.js"(exports, module) {
    init_react();
    var hasOwn = require_has_own_property();
    var ownKeys4 = require_own_keys();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var definePropertyModule = require_object_define_property();
    module.exports = function(target, source, exceptions) {
      var keys = ownKeys4(source);
      var defineProperty = definePropertyModule.f;
      var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
          defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
      }
    };
  }
});

// node_modules/core-js-pure/internals/clear-error-stack.js
var require_clear_error_stack = __commonJS({
  "node_modules/core-js-pure/internals/clear-error-stack.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var replace2 = uncurryThis("".replace);
    var TEST = function(arg) {
      return String(Error(arg).stack);
    }("zxcasd");
    var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
    var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
    module.exports = function(stack, dropEntries) {
      if (IS_V8_OR_CHAKRA_STACK && typeof stack == "string") {
        while (dropEntries--)
          stack = replace2(stack, V8_OR_CHAKRA_STACK_ENTRY, "");
      }
      return stack;
    };
  }
});

// node_modules/core-js-pure/internals/install-error-cause.js
var require_install_error_cause = __commonJS({
  "node_modules/core-js-pure/internals/install-error-cause.js"(exports, module) {
    init_react();
    var isObject = require_is_object();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    module.exports = function(O2, options) {
      if (isObject(options) && "cause" in options) {
        createNonEnumerableProperty(O2, "cause", options.cause);
      }
    };
  }
});

// node_modules/core-js-pure/internals/normalize-string-argument.js
var require_normalize_string_argument = __commonJS({
  "node_modules/core-js-pure/internals/normalize-string-argument.js"(exports, module) {
    init_react();
    var toString2 = require_to_string();
    module.exports = function(argument, $default) {
      return argument === void 0 ? arguments.length < 2 ? "" : $default : toString2(argument);
    };
  }
});

// node_modules/core-js-pure/internals/error-stack-installable.js
var require_error_stack_installable = __commonJS({
  "node_modules/core-js-pure/internals/error-stack-installable.js"(exports, module) {
    init_react();
    var fails = require_fails();
    var createPropertyDescriptor = require_create_property_descriptor();
    module.exports = !fails(function() {
      var error = Error("a");
      if (!("stack" in error))
        return true;
      Object.defineProperty(error, "stack", createPropertyDescriptor(1, 7));
      return error.stack !== 7;
    });
  }
});

// node_modules/core-js-pure/modules/es.aggregate-error.js
var require_es_aggregate_error = __commonJS({
  "node_modules/core-js-pure/modules/es.aggregate-error.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var isPrototypeOf = require_object_is_prototype_of();
    var getPrototypeOf = require_object_get_prototype_of();
    var setPrototypeOf = require_object_set_prototype_of();
    var copyConstructorProperties = require_copy_constructor_properties();
    var create = require_object_create();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    var clearErrorStack = require_clear_error_stack();
    var installErrorCause = require_install_error_cause();
    var iterate = require_iterate();
    var normalizeStringArgument = require_normalize_string_argument();
    var wellKnownSymbol = require_well_known_symbol();
    var ERROR_STACK_INSTALLABLE = require_error_stack_installable();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var Error2 = global2.Error;
    var push = [].push;
    var $AggregateError = function AggregateError(errors, message) {
      var options = arguments.length > 2 ? arguments[2] : void 0;
      var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
      var that;
      if (setPrototypeOf) {
        that = setPrototypeOf(new Error2(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
      } else {
        that = isInstance ? this : create(AggregateErrorPrototype);
        createNonEnumerableProperty(that, TO_STRING_TAG, "Error");
      }
      if (message !== void 0)
        createNonEnumerableProperty(that, "message", normalizeStringArgument(message));
      if (ERROR_STACK_INSTALLABLE)
        createNonEnumerableProperty(that, "stack", clearErrorStack(that.stack, 1));
      installErrorCause(that, options);
      var errorsArray = [];
      iterate(errors, push, { that: errorsArray });
      createNonEnumerableProperty(that, "errors", errorsArray);
      return that;
    };
    if (setPrototypeOf)
      setPrototypeOf($AggregateError, Error2);
    else
      copyConstructorProperties($AggregateError, Error2, { name: true });
    var AggregateErrorPrototype = $AggregateError.prototype = create(Error2.prototype, {
      constructor: createPropertyDescriptor(1, $AggregateError),
      message: createPropertyDescriptor(1, ""),
      name: createPropertyDescriptor(1, "AggregateError")
    });
    $({ global: true }, {
      AggregateError: $AggregateError
    });
  }
});

// node_modules/core-js-pure/internals/native-promise-constructor.js
var require_native_promise_constructor = __commonJS({
  "node_modules/core-js-pure/internals/native-promise-constructor.js"(exports, module) {
    init_react();
    var global2 = require_global();
    module.exports = global2.Promise;
  }
});

// node_modules/core-js-pure/internals/set-species.js
var require_set_species = __commonJS({
  "node_modules/core-js-pure/internals/set-species.js"(exports, module) {
    "use strict";
    init_react();
    var getBuiltIn = require_get_built_in();
    var definePropertyModule = require_object_define_property();
    var wellKnownSymbol = require_well_known_symbol();
    var DESCRIPTORS = require_descriptors();
    var SPECIES = wellKnownSymbol("species");
    module.exports = function(CONSTRUCTOR_NAME) {
      var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
      var defineProperty = definePropertyModule.f;
      if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
        defineProperty(Constructor, SPECIES, {
          configurable: true,
          get: function() {
            return this;
          }
        });
      }
    };
  }
});

// node_modules/core-js-pure/internals/check-correctness-of-iteration.js
var require_check_correctness_of_iteration = __commonJS({
  "node_modules/core-js-pure/internals/check-correctness-of-iteration.js"(exports, module) {
    init_react();
    var wellKnownSymbol = require_well_known_symbol();
    var ITERATOR = wellKnownSymbol("iterator");
    var SAFE_CLOSING = false;
    try {
      called = 0;
      iteratorWithReturn = {
        next: function() {
          return { done: !!called++ };
        },
        "return": function() {
          SAFE_CLOSING = true;
        }
      };
      iteratorWithReturn[ITERATOR] = function() {
        return this;
      };
      Array.from(iteratorWithReturn, function() {
        throw 2;
      });
    } catch (error) {
    }
    var called;
    var iteratorWithReturn;
    module.exports = function(exec, SKIP_CLOSING) {
      if (!SKIP_CLOSING && !SAFE_CLOSING)
        return false;
      var ITERATION_SUPPORT = false;
      try {
        var object = {};
        object[ITERATOR] = function() {
          return {
            next: function() {
              return { done: ITERATION_SUPPORT = true };
            }
          };
        };
        exec(object);
      } catch (error) {
      }
      return ITERATION_SUPPORT;
    };
  }
});

// node_modules/core-js-pure/internals/species-constructor.js
var require_species_constructor = __commonJS({
  "node_modules/core-js-pure/internals/species-constructor.js"(exports, module) {
    init_react();
    var anObject = require_an_object();
    var aConstructor = require_a_constructor();
    var wellKnownSymbol = require_well_known_symbol();
    var SPECIES = wellKnownSymbol("species");
    module.exports = function(O2, defaultConstructor) {
      var C = anObject(O2).constructor;
      var S2;
      return C === void 0 || (S2 = anObject(C)[SPECIES]) == void 0 ? defaultConstructor : aConstructor(S2);
    };
  }
});

// node_modules/core-js-pure/internals/validate-arguments-length.js
var require_validate_arguments_length = __commonJS({
  "node_modules/core-js-pure/internals/validate-arguments-length.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var TypeError2 = global2.TypeError;
    module.exports = function(passed, required) {
      if (passed < required)
        throw TypeError2("Not enough arguments");
      return passed;
    };
  }
});

// node_modules/core-js-pure/internals/engine-is-ios.js
var require_engine_is_ios = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-ios.js"(exports, module) {
    init_react();
    var userAgent = require_engine_user_agent();
    module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);
  }
});

// node_modules/core-js-pure/internals/engine-is-node.js
var require_engine_is_node = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-node.js"(exports, module) {
    init_react();
    var classof = require_classof_raw();
    var global2 = require_global();
    module.exports = classof(global2.process) == "process";
  }
});

// node_modules/core-js-pure/internals/task.js
var require_task = __commonJS({
  "node_modules/core-js-pure/internals/task.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var apply = require_function_apply();
    var bind = require_function_bind_context();
    var isCallable = require_is_callable();
    var hasOwn = require_has_own_property();
    var fails = require_fails();
    var html = require_html();
    var arraySlice = require_array_slice();
    var createElement3 = require_document_create_element();
    var validateArgumentsLength = require_validate_arguments_length();
    var IS_IOS = require_engine_is_ios();
    var IS_NODE = require_engine_is_node();
    var set = global2.setImmediate;
    var clear = global2.clearImmediate;
    var process2 = global2.process;
    var Dispatch = global2.Dispatch;
    var Function2 = global2.Function;
    var MessageChannel = global2.MessageChannel;
    var String2 = global2.String;
    var counter = 0;
    var queue = {};
    var ONREADYSTATECHANGE = "onreadystatechange";
    var location;
    var defer;
    var channel;
    var port;
    try {
      location = global2.location;
    } catch (error) {
    }
    var run = function(id2) {
      if (hasOwn(queue, id2)) {
        var fn2 = queue[id2];
        delete queue[id2];
        fn2();
      }
    };
    var runner = function(id2) {
      return function() {
        run(id2);
      };
    };
    var listener = function(event) {
      run(event.data);
    };
    var post = function(id2) {
      global2.postMessage(String2(id2), location.protocol + "//" + location.host);
    };
    if (!set || !clear) {
      set = function setImmediate2(handler) {
        validateArgumentsLength(arguments.length, 1);
        var fn2 = isCallable(handler) ? handler : Function2(handler);
        var args = arraySlice(arguments, 1);
        queue[++counter] = function() {
          apply(fn2, void 0, args);
        };
        defer(counter);
        return counter;
      };
      clear = function clearImmediate(id2) {
        delete queue[id2];
      };
      if (IS_NODE) {
        defer = function(id2) {
          process2.nextTick(runner(id2));
        };
      } else if (Dispatch && Dispatch.now) {
        defer = function(id2) {
          Dispatch.now(runner(id2));
        };
      } else if (MessageChannel && !IS_IOS) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = bind(port.postMessage, port);
      } else if (global2.addEventListener && isCallable(global2.postMessage) && !global2.importScripts && location && location.protocol !== "file:" && !fails(post)) {
        defer = post;
        global2.addEventListener("message", listener, false);
      } else if (ONREADYSTATECHANGE in createElement3("script")) {
        defer = function(id2) {
          html.appendChild(createElement3("script"))[ONREADYSTATECHANGE] = function() {
            html.removeChild(this);
            run(id2);
          };
        };
      } else {
        defer = function(id2) {
          setTimeout(runner(id2), 0);
        };
      }
    }
    module.exports = {
      set,
      clear
    };
  }
});

// node_modules/core-js-pure/internals/engine-is-ios-pebble.js
var require_engine_is_ios_pebble = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-ios-pebble.js"(exports, module) {
    init_react();
    var userAgent = require_engine_user_agent();
    var global2 = require_global();
    module.exports = /ipad|iphone|ipod/i.test(userAgent) && global2.Pebble !== void 0;
  }
});

// node_modules/core-js-pure/internals/engine-is-webos-webkit.js
var require_engine_is_webos_webkit = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-webos-webkit.js"(exports, module) {
    init_react();
    var userAgent = require_engine_user_agent();
    module.exports = /web0s(?!.*chrome)/i.test(userAgent);
  }
});

// node_modules/core-js-pure/internals/microtask.js
var require_microtask = __commonJS({
  "node_modules/core-js-pure/internals/microtask.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var bind = require_function_bind_context();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var macrotask = require_task().set;
    var IS_IOS = require_engine_is_ios();
    var IS_IOS_PEBBLE = require_engine_is_ios_pebble();
    var IS_WEBOS_WEBKIT = require_engine_is_webos_webkit();
    var IS_NODE = require_engine_is_node();
    var MutationObserver = global2.MutationObserver || global2.WebKitMutationObserver;
    var document2 = global2.document;
    var process2 = global2.process;
    var Promise2 = global2.Promise;
    var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global2, "queueMicrotask");
    var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
    var flush;
    var head;
    var last3;
    var notify;
    var toggle;
    var node2;
    var promise;
    var then;
    if (!queueMicrotask) {
      flush = function() {
        var parent, fn2;
        if (IS_NODE && (parent = process2.domain))
          parent.exit();
        while (head) {
          fn2 = head.fn;
          head = head.next;
          try {
            fn2();
          } catch (error) {
            if (head)
              notify();
            else
              last3 = void 0;
            throw error;
          }
        }
        last3 = void 0;
        if (parent)
          parent.enter();
      };
      if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document2) {
        toggle = true;
        node2 = document2.createTextNode("");
        new MutationObserver(flush).observe(node2, { characterData: true });
        notify = function() {
          node2.data = toggle = !toggle;
        };
      } else if (!IS_IOS_PEBBLE && Promise2 && Promise2.resolve) {
        promise = Promise2.resolve(void 0);
        promise.constructor = Promise2;
        then = bind(promise.then, promise);
        notify = function() {
          then(flush);
        };
      } else if (IS_NODE) {
        notify = function() {
          process2.nextTick(flush);
        };
      } else {
        macrotask = bind(macrotask, global2);
        notify = function() {
          macrotask(flush);
        };
      }
    }
    module.exports = queueMicrotask || function(fn2) {
      var task = { fn: fn2, next: void 0 };
      if (last3)
        last3.next = task;
      if (!head) {
        head = task;
        notify();
      }
      last3 = task;
    };
  }
});

// node_modules/core-js-pure/internals/new-promise-capability.js
var require_new_promise_capability = __commonJS({
  "node_modules/core-js-pure/internals/new-promise-capability.js"(exports, module) {
    "use strict";
    init_react();
    var aCallable = require_a_callable();
    var PromiseCapability = function(C) {
      var resolve, reject;
      this.promise = new C(function($$resolve, $$reject) {
        if (resolve !== void 0 || reject !== void 0)
          throw TypeError("Bad Promise constructor");
        resolve = $$resolve;
        reject = $$reject;
      });
      this.resolve = aCallable(resolve);
      this.reject = aCallable(reject);
    };
    module.exports.f = function(C) {
      return new PromiseCapability(C);
    };
  }
});

// node_modules/core-js-pure/internals/promise-resolve.js
var require_promise_resolve = __commonJS({
  "node_modules/core-js-pure/internals/promise-resolve.js"(exports, module) {
    init_react();
    var anObject = require_an_object();
    var isObject = require_is_object();
    var newPromiseCapability = require_new_promise_capability();
    module.exports = function(C, x2) {
      anObject(C);
      if (isObject(x2) && x2.constructor === C)
        return x2;
      var promiseCapability = newPromiseCapability.f(C);
      var resolve = promiseCapability.resolve;
      resolve(x2);
      return promiseCapability.promise;
    };
  }
});

// node_modules/core-js-pure/internals/host-report-errors.js
var require_host_report_errors = __commonJS({
  "node_modules/core-js-pure/internals/host-report-errors.js"(exports, module) {
    init_react();
    var global2 = require_global();
    module.exports = function(a2, b2) {
      var console2 = global2.console;
      if (console2 && console2.error) {
        arguments.length == 1 ? console2.error(a2) : console2.error(a2, b2);
      }
    };
  }
});

// node_modules/core-js-pure/internals/perform.js
var require_perform = __commonJS({
  "node_modules/core-js-pure/internals/perform.js"(exports, module) {
    init_react();
    module.exports = function(exec) {
      try {
        return { error: false, value: exec() };
      } catch (error) {
        return { error: true, value: error };
      }
    };
  }
});

// node_modules/core-js-pure/internals/queue.js
var require_queue = __commonJS({
  "node_modules/core-js-pure/internals/queue.js"(exports, module) {
    init_react();
    var Queue = function() {
      this.head = null;
      this.tail = null;
    };
    Queue.prototype = {
      add: function(item) {
        var entry = { item, next: null };
        if (this.head)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
      },
      get: function() {
        var entry = this.head;
        if (entry) {
          this.head = entry.next;
          if (this.tail === entry)
            this.tail = null;
          return entry.item;
        }
      }
    };
    module.exports = Queue;
  }
});

// node_modules/core-js-pure/internals/engine-is-browser.js
var require_engine_is_browser = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-browser.js"(exports, module) {
    init_react();
    module.exports = typeof window == "object";
  }
});

// node_modules/core-js-pure/modules/es.promise.js
var require_es_promise = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var IS_PURE = require_is_pure();
    var global2 = require_global();
    var getBuiltIn = require_get_built_in();
    var call = require_function_call();
    var NativePromise = require_native_promise_constructor();
    var redefine = require_redefine();
    var redefineAll = require_redefine_all();
    var setPrototypeOf = require_object_set_prototype_of();
    var setToStringTag = require_set_to_string_tag();
    var setSpecies = require_set_species();
    var aCallable = require_a_callable();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var anInstance = require_an_instance();
    var inspectSource = require_inspect_source();
    var iterate = require_iterate();
    var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
    var speciesConstructor = require_species_constructor();
    var task = require_task().set;
    var microtask = require_microtask();
    var promiseResolve = require_promise_resolve();
    var hostReportErrors = require_host_report_errors();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    var Queue = require_queue();
    var InternalStateModule = require_internal_state();
    var isForced = require_is_forced();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_BROWSER = require_engine_is_browser();
    var IS_NODE = require_engine_is_node();
    var V8_VERSION = require_engine_v8_version();
    var SPECIES = wellKnownSymbol("species");
    var PROMISE = "Promise";
    var getInternalState = InternalStateModule.getterFor(PROMISE);
    var setInternalState = InternalStateModule.set;
    var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
    var NativePromisePrototype = NativePromise && NativePromise.prototype;
    var PromiseConstructor = NativePromise;
    var PromisePrototype = NativePromisePrototype;
    var TypeError2 = global2.TypeError;
    var document2 = global2.document;
    var process2 = global2.process;
    var newPromiseCapability = newPromiseCapabilityModule.f;
    var newGenericPromiseCapability = newPromiseCapability;
    var DISPATCH_EVENT = !!(document2 && document2.createEvent && global2.dispatchEvent);
    var NATIVE_REJECTION_EVENT = isCallable(global2.PromiseRejectionEvent);
    var UNHANDLED_REJECTION = "unhandledrejection";
    var REJECTION_HANDLED = "rejectionhandled";
    var PENDING = 0;
    var FULFILLED = 1;
    var REJECTED = 2;
    var HANDLED = 1;
    var UNHANDLED = 2;
    var SUBCLASSING = false;
    var Internal;
    var OwnPromiseCapability;
    var PromiseWrapper;
    var nativeThen;
    var FORCED = isForced(PROMISE, function() {
      var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
      var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
      if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66)
        return true;
      if (IS_PURE && !PromisePrototype["finally"])
        return true;
      if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE))
        return false;
      var promise = new PromiseConstructor(function(resolve) {
        resolve(1);
      });
      var FakePromise = function(exec) {
        exec(function() {
        }, function() {
        });
      };
      var constructor = promise.constructor = {};
      constructor[SPECIES] = FakePromise;
      SUBCLASSING = promise.then(function() {
      }) instanceof FakePromise;
      if (!SUBCLASSING)
        return true;
      return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
    });
    var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function(iterable) {
      PromiseConstructor.all(iterable)["catch"](function() {
      });
    });
    var isThenable = function(it) {
      var then;
      return isObject(it) && isCallable(then = it.then) ? then : false;
    };
    var callReaction = function(reaction, state) {
      var value = state.value;
      var ok = state.state == FULFILLED;
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED)
              onHandleUnhandled(state);
            state.rejection = HANDLED;
          }
          if (handler === true)
            result = value;
          else {
            if (domain)
              domain.enter();
            result = handler(value);
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError2("Promise-chain cycle"));
          } else if (then = isThenable(result)) {
            call(then, result, resolve, reject);
          } else
            resolve(result);
        } else
          reject(value);
      } catch (error) {
        if (domain && !exited)
          domain.exit();
        reject(error);
      }
    };
    var notify = function(state, isReject) {
      if (state.notified)
        return;
      state.notified = true;
      microtask(function() {
        var reactions = state.reactions;
        var reaction;
        while (reaction = reactions.get()) {
          callReaction(reaction, state);
        }
        state.notified = false;
        if (isReject && !state.rejection)
          onUnhandled(state);
      });
    };
    var dispatchEvent = function(name2, promise, reason) {
      var event, handler;
      if (DISPATCH_EVENT) {
        event = document2.createEvent("Event");
        event.promise = promise;
        event.reason = reason;
        event.initEvent(name2, false, true);
        global2.dispatchEvent(event);
      } else
        event = { promise, reason };
      if (!NATIVE_REJECTION_EVENT && (handler = global2["on" + name2]))
        handler(event);
      else if (name2 === UNHANDLED_REJECTION)
        hostReportErrors("Unhandled promise rejection", reason);
    };
    var onUnhandled = function(state) {
      call(task, global2, function() {
        var promise = state.facade;
        var value = state.value;
        var IS_UNHANDLED = isUnhandled(state);
        var result;
        if (IS_UNHANDLED) {
          result = perform(function() {
            if (IS_NODE) {
              process2.emit("unhandledRejection", value, promise);
            } else
              dispatchEvent(UNHANDLED_REJECTION, promise, value);
          });
          state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
          if (result.error)
            throw result.value;
        }
      });
    };
    var isUnhandled = function(state) {
      return state.rejection !== HANDLED && !state.parent;
    };
    var onHandleUnhandled = function(state) {
      call(task, global2, function() {
        var promise = state.facade;
        if (IS_NODE) {
          process2.emit("rejectionHandled", promise);
        } else
          dispatchEvent(REJECTION_HANDLED, promise, state.value);
      });
    };
    var bind = function(fn2, state, unwrap) {
      return function(value) {
        fn2(state, value, unwrap);
      };
    };
    var internalReject = function(state, value, unwrap) {
      if (state.done)
        return;
      state.done = true;
      if (unwrap)
        state = unwrap;
      state.value = value;
      state.state = REJECTED;
      notify(state, true);
    };
    var internalResolve = function(state, value, unwrap) {
      if (state.done)
        return;
      state.done = true;
      if (unwrap)
        state = unwrap;
      try {
        if (state.facade === value)
          throw TypeError2("Promise can't be resolved itself");
        var then = isThenable(value);
        if (then) {
          microtask(function() {
            var wrapper = { done: false };
            try {
              call(then, value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
            } catch (error) {
              internalReject(wrapper, error, state);
            }
          });
        } else {
          state.value = value;
          state.state = FULFILLED;
          notify(state, false);
        }
      } catch (error) {
        internalReject({ done: false }, error, state);
      }
    };
    if (FORCED) {
      PromiseConstructor = function Promise2(executor) {
        anInstance(this, PromisePrototype);
        aCallable(executor);
        call(Internal, this);
        var state = getInternalState(this);
        try {
          executor(bind(internalResolve, state), bind(internalReject, state));
        } catch (error) {
          internalReject(state, error);
        }
      };
      PromisePrototype = PromiseConstructor.prototype;
      Internal = function Promise2(executor) {
        setInternalState(this, {
          type: PROMISE,
          done: false,
          notified: false,
          parent: false,
          reactions: new Queue(),
          rejection: false,
          state: PENDING,
          value: void 0
        });
      };
      Internal.prototype = redefineAll(PromisePrototype, {
        then: function then(onFulfilled, onRejected) {
          var state = getInternalPromiseState(this);
          var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
          state.parent = true;
          reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
          reaction.fail = isCallable(onRejected) && onRejected;
          reaction.domain = IS_NODE ? process2.domain : void 0;
          if (state.state == PENDING)
            state.reactions.add(reaction);
          else
            microtask(function() {
              callReaction(reaction, state);
            });
          return reaction.promise;
        },
        "catch": function(onRejected) {
          return this.then(void 0, onRejected);
        }
      });
      OwnPromiseCapability = function() {
        var promise = new Internal();
        var state = getInternalState(promise);
        this.promise = promise;
        this.resolve = bind(internalResolve, state);
        this.reject = bind(internalReject, state);
      };
      newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
        return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
      };
      if (!IS_PURE && isCallable(NativePromise) && NativePromisePrototype !== Object.prototype) {
        nativeThen = NativePromisePrototype.then;
        if (!SUBCLASSING) {
          redefine(NativePromisePrototype, "then", function then(onFulfilled, onRejected) {
            var that = this;
            return new PromiseConstructor(function(resolve, reject) {
              call(nativeThen, that, resolve, reject);
            }).then(onFulfilled, onRejected);
          }, { unsafe: true });
          redefine(NativePromisePrototype, "catch", PromisePrototype["catch"], { unsafe: true });
        }
        try {
          delete NativePromisePrototype.constructor;
        } catch (error) {
        }
        if (setPrototypeOf) {
          setPrototypeOf(NativePromisePrototype, PromisePrototype);
        }
      }
    }
    $({ global: true, wrap: true, forced: FORCED }, {
      Promise: PromiseConstructor
    });
    setToStringTag(PromiseConstructor, PROMISE, false, true);
    setSpecies(PROMISE);
    PromiseWrapper = getBuiltIn(PROMISE);
    $({ target: PROMISE, stat: true, forced: FORCED }, {
      reject: function reject(r2) {
        var capability = newPromiseCapability(this);
        call(capability.reject, void 0, r2);
        return capability.promise;
      }
    });
    $({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
      resolve: function resolve(x2) {
        return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x2);
      }
    });
    $({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
      all: function all(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
          var $promiseResolve = aCallable(C.resolve);
          var values = [];
          var counter = 0;
          var remaining = 1;
          iterate(iterable, function(promise) {
            var index = counter++;
            var alreadyCalled = false;
            remaining++;
            call($promiseResolve, C, promise).then(function(value) {
              if (alreadyCalled)
                return;
              alreadyCalled = true;
              values[index] = value;
              --remaining || resolve(values);
            }, reject);
          });
          --remaining || resolve(values);
        });
        if (result.error)
          reject(result.value);
        return capability.promise;
      },
      race: function race(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var reject = capability.reject;
        var result = perform(function() {
          var $promiseResolve = aCallable(C.resolve);
          iterate(iterable, function(promise) {
            call($promiseResolve, C, promise).then(capability.resolve, reject);
          });
        });
        if (result.error)
          reject(result.value);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.promise.all-settled.js
var require_es_promise_all_settled = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.all-settled.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    var iterate = require_iterate();
    $({ target: "Promise", stat: true }, {
      allSettled: function allSettled(iterable) {
        var C = this;
        var capability = newPromiseCapabilityModule.f(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
          var promiseResolve = aCallable(C.resolve);
          var values = [];
          var counter = 0;
          var remaining = 1;
          iterate(iterable, function(promise) {
            var index = counter++;
            var alreadyCalled = false;
            remaining++;
            call(promiseResolve, C, promise).then(function(value) {
              if (alreadyCalled)
                return;
              alreadyCalled = true;
              values[index] = { status: "fulfilled", value };
              --remaining || resolve(values);
            }, function(error) {
              if (alreadyCalled)
                return;
              alreadyCalled = true;
              values[index] = { status: "rejected", reason: error };
              --remaining || resolve(values);
            });
          });
          --remaining || resolve(values);
        });
        if (result.error)
          reject(result.value);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.promise.any.js
var require_es_promise_any = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.any.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var aCallable = require_a_callable();
    var getBuiltIn = require_get_built_in();
    var call = require_function_call();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    var iterate = require_iterate();
    var PROMISE_ANY_ERROR = "No one promise resolved";
    $({ target: "Promise", stat: true }, {
      any: function any(iterable) {
        var C = this;
        var AggregateError = getBuiltIn("AggregateError");
        var capability = newPromiseCapabilityModule.f(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
          var promiseResolve = aCallable(C.resolve);
          var errors = [];
          var counter = 0;
          var remaining = 1;
          var alreadyResolved = false;
          iterate(iterable, function(promise) {
            var index = counter++;
            var alreadyRejected = false;
            remaining++;
            call(promiseResolve, C, promise).then(function(value) {
              if (alreadyRejected || alreadyResolved)
                return;
              alreadyResolved = true;
              resolve(value);
            }, function(error) {
              if (alreadyRejected || alreadyResolved)
                return;
              alreadyRejected = true;
              errors[index] = error;
              --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
            });
          });
          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
        });
        if (result.error)
          reject(result.value);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.promise.finally.js
var require_es_promise_finally = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.finally.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var IS_PURE = require_is_pure();
    var NativePromise = require_native_promise_constructor();
    var fails = require_fails();
    var getBuiltIn = require_get_built_in();
    var isCallable = require_is_callable();
    var speciesConstructor = require_species_constructor();
    var promiseResolve = require_promise_resolve();
    var redefine = require_redefine();
    var NON_GENERIC = !!NativePromise && fails(function() {
      NativePromise.prototype["finally"].call({ then: function() {
      } }, function() {
      });
    });
    $({ target: "Promise", proto: true, real: true, forced: NON_GENERIC }, {
      "finally": function(onFinally) {
        var C = speciesConstructor(this, getBuiltIn("Promise"));
        var isFunction = isCallable(onFinally);
        return this.then(isFunction ? function(x2) {
          return promiseResolve(C, onFinally()).then(function() {
            return x2;
          });
        } : onFinally, isFunction ? function(e) {
          return promiseResolve(C, onFinally()).then(function() {
            throw e;
          });
        } : onFinally);
      }
    });
    if (!IS_PURE && isCallable(NativePromise)) {
      method = getBuiltIn("Promise").prototype["finally"];
      if (NativePromise.prototype["finally"] !== method) {
        redefine(NativePromise.prototype, "finally", method, { unsafe: true });
      }
    }
    var method;
  }
});

// node_modules/core-js-pure/es/promise/index.js
var require_promise = __commonJS({
  "node_modules/core-js-pure/es/promise/index.js"(exports, module) {
    init_react();
    require_es_aggregate_error();
    require_es_array_iterator();
    require_es_object_to_string();
    require_es_promise();
    require_es_promise_all_settled();
    require_es_promise_any();
    require_es_promise_finally();
    require_es_string_iterator();
    var path = require_path();
    module.exports = path.Promise;
  }
});

// node_modules/core-js-pure/stable/promise/index.js
var require_promise2 = __commonJS({
  "node_modules/core-js-pure/stable/promise/index.js"(exports, module) {
    init_react();
    var parent = require_promise();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/promise.js
var require_promise3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/promise.js"(exports, module) {
    init_react();
    module.exports = require_promise2();
  }
});

// node_modules/@babel/runtime-corejs3/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime-corejs3/regenerator/index.js"(exports, module) {
    init_react();
    module.exports = require_runtime();
  }
});

// node_modules/core-js-pure/actual/promise/index.js
var require_promise4 = __commonJS({
  "node_modules/core-js-pure/actual/promise/index.js"(exports, module) {
    init_react();
    var parent = require_promise2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/modules/esnext.aggregate-error.js
var require_esnext_aggregate_error = __commonJS({
  "node_modules/core-js-pure/modules/esnext.aggregate-error.js"() {
    init_react();
    require_es_aggregate_error();
  }
});

// node_modules/core-js-pure/modules/esnext.promise.all-settled.js
var require_esnext_promise_all_settled = __commonJS({
  "node_modules/core-js-pure/modules/esnext.promise.all-settled.js"() {
    init_react();
    require_es_promise_all_settled();
  }
});

// node_modules/core-js-pure/modules/esnext.promise.try.js
var require_esnext_promise_try = __commonJS({
  "node_modules/core-js-pure/modules/esnext.promise.try.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    $({ target: "Promise", stat: true, forced: true }, {
      "try": function(callbackfn) {
        var promiseCapability = newPromiseCapabilityModule.f(this);
        var result = perform(callbackfn);
        (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
        return promiseCapability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.promise.any.js
var require_esnext_promise_any = __commonJS({
  "node_modules/core-js-pure/modules/esnext.promise.any.js"() {
    init_react();
    require_es_promise_any();
  }
});

// node_modules/core-js-pure/features/promise/index.js
var require_promise5 = __commonJS({
  "node_modules/core-js-pure/features/promise/index.js"(exports, module) {
    init_react();
    var parent = require_promise4();
    require_esnext_aggregate_error();
    require_esnext_promise_all_settled();
    require_esnext_promise_try();
    require_esnext_promise_any();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/promise.js
var require_promise6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/promise.js"(exports, module) {
    init_react();
    module.exports = require_promise5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/asyncToGenerator.js
var require_asyncToGenerator = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/asyncToGenerator.js"(exports, module) {
    init_react();
    var _Promise = require_promise6();
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        _Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn2) {
      return function() {
        var self2 = this, args = arguments;
        return new _Promise(function(resolve, reject) {
          var gen = fn2.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/classCallCheck.js
var require_classCallCheck = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/classCallCheck.js"(exports, module) {
    init_react();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/actual/object/define-property.js
var require_define_property4 = __commonJS({
  "node_modules/core-js-pure/actual/object/define-property.js"(exports, module) {
    init_react();
    var parent = require_define_property2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/define-property.js
var require_define_property5 = __commonJS({
  "node_modules/core-js-pure/features/object/define-property.js"(exports, module) {
    init_react();
    var parent = require_define_property4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/define-property.js
var require_define_property6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/define-property.js"(exports, module) {
    init_react();
    module.exports = require_define_property5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/createClass.js
var require_createClass = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/createClass.js"(exports, module) {
    init_react();
    var _Object$defineProperty = require_define_property6();
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        _Object$defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      _Object$defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/modules/es.object.create.js
var require_es_object_create = __commonJS({
  "node_modules/core-js-pure/modules/es.object.create.js"() {
    init_react();
    var $ = require_export();
    var DESCRIPTORS = require_descriptors();
    var create = require_object_create();
    $({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
      create
    });
  }
});

// node_modules/core-js-pure/es/object/create.js
var require_create = __commonJS({
  "node_modules/core-js-pure/es/object/create.js"(exports, module) {
    init_react();
    require_es_object_create();
    var path = require_path();
    var Object2 = path.Object;
    module.exports = function create(P2, D2) {
      return Object2.create(P2, D2);
    };
  }
});

// node_modules/core-js-pure/stable/object/create.js
var require_create2 = __commonJS({
  "node_modules/core-js-pure/stable/object/create.js"(exports, module) {
    init_react();
    var parent = require_create();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/object/create.js
var require_create3 = __commonJS({
  "node_modules/core-js-pure/actual/object/create.js"(exports, module) {
    init_react();
    var parent = require_create2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/create.js
var require_create4 = __commonJS({
  "node_modules/core-js-pure/features/object/create.js"(exports, module) {
    init_react();
    var parent = require_create3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/create.js
var require_create5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/create.js"(exports, module) {
    init_react();
    module.exports = require_create4();
  }
});

// node_modules/core-js-pure/modules/es.object.set-prototype-of.js
var require_es_object_set_prototype_of = __commonJS({
  "node_modules/core-js-pure/modules/es.object.set-prototype-of.js"() {
    init_react();
    var $ = require_export();
    var setPrototypeOf = require_object_set_prototype_of();
    $({ target: "Object", stat: true }, {
      setPrototypeOf
    });
  }
});

// node_modules/core-js-pure/es/object/set-prototype-of.js
var require_set_prototype_of = __commonJS({
  "node_modules/core-js-pure/es/object/set-prototype-of.js"(exports, module) {
    init_react();
    require_es_object_set_prototype_of();
    var path = require_path();
    module.exports = path.Object.setPrototypeOf;
  }
});

// node_modules/core-js-pure/stable/object/set-prototype-of.js
var require_set_prototype_of2 = __commonJS({
  "node_modules/core-js-pure/stable/object/set-prototype-of.js"(exports, module) {
    init_react();
    var parent = require_set_prototype_of();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/object/set-prototype-of.js
var require_set_prototype_of3 = __commonJS({
  "node_modules/core-js-pure/actual/object/set-prototype-of.js"(exports, module) {
    init_react();
    var parent = require_set_prototype_of2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/set-prototype-of.js
var require_set_prototype_of4 = __commonJS({
  "node_modules/core-js-pure/features/object/set-prototype-of.js"(exports, module) {
    init_react();
    var parent = require_set_prototype_of3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/set-prototype-of.js
var require_set_prototype_of5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/set-prototype-of.js"(exports, module) {
    init_react();
    module.exports = require_set_prototype_of4();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/setPrototypeOf.js
var require_setPrototypeOf = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/setPrototypeOf.js"(exports, module) {
    init_react();
    var _Object$setPrototypeOf = require_set_prototype_of5();
    function _setPrototypeOf(o2, p2) {
      module.exports = _setPrototypeOf = _Object$setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _setPrototypeOf(o2, p2);
    }
    module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/inherits.js
var require_inherits = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/inherits.js"(exports, module) {
    init_react();
    var _Object$create = require_create5();
    var _Object$defineProperty = require_define_property6();
    var setPrototypeOf = require_setPrototypeOf();
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = _Object$create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      _Object$defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass)
        setPrototypeOf(subClass, superClass);
    }
    module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/assertThisInitialized.js
var require_assertThisInitialized = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/assertThisInitialized.js"(exports, module) {
    init_react();
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/possibleConstructorReturn.js
var require_possibleConstructorReturn = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/possibleConstructorReturn.js"(exports, module) {
    init_react();
    var _typeof = require_typeof()["default"];
    var assertThisInitialized = require_assertThisInitialized();
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return assertThisInitialized(self2);
    }
    module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/modules/es.object.get-prototype-of.js
var require_es_object_get_prototype_of = __commonJS({
  "node_modules/core-js-pure/modules/es.object.get-prototype-of.js"() {
    init_react();
    var $ = require_export();
    var fails = require_fails();
    var toObject = require_to_object();
    var nativeGetPrototypeOf = require_object_get_prototype_of();
    var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
    var FAILS_ON_PRIMITIVES = fails(function() {
      nativeGetPrototypeOf(1);
    });
    $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
      getPrototypeOf: function getPrototypeOf(it) {
        return nativeGetPrototypeOf(toObject(it));
      }
    });
  }
});

// node_modules/core-js-pure/es/object/get-prototype-of.js
var require_get_prototype_of = __commonJS({
  "node_modules/core-js-pure/es/object/get-prototype-of.js"(exports, module) {
    init_react();
    require_es_object_get_prototype_of();
    var path = require_path();
    module.exports = path.Object.getPrototypeOf;
  }
});

// node_modules/core-js-pure/stable/object/get-prototype-of.js
var require_get_prototype_of2 = __commonJS({
  "node_modules/core-js-pure/stable/object/get-prototype-of.js"(exports, module) {
    init_react();
    var parent = require_get_prototype_of();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/object/get-prototype-of.js
var require_get_prototype_of3 = __commonJS({
  "node_modules/core-js-pure/actual/object/get-prototype-of.js"(exports, module) {
    init_react();
    var parent = require_get_prototype_of2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/get-prototype-of.js
var require_get_prototype_of4 = __commonJS({
  "node_modules/core-js-pure/features/object/get-prototype-of.js"(exports, module) {
    init_react();
    var parent = require_get_prototype_of3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/get-prototype-of.js
var require_get_prototype_of5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/get-prototype-of.js"(exports, module) {
    init_react();
    module.exports = require_get_prototype_of4();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/getPrototypeOf.js
var require_getPrototypeOf = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/getPrototypeOf.js"(exports, module) {
    init_react();
    var _Object$setPrototypeOf = require_set_prototype_of5();
    var _Object$getPrototypeOf = require_get_prototype_of5();
    function _getPrototypeOf(o2) {
      module.exports = _getPrototypeOf = _Object$setPrototypeOf ? _Object$getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || _Object$getPrototypeOf(o3);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _getPrototypeOf(o2);
    }
    module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/modules/es.array.is-array.js
var require_es_array_is_array = __commonJS({
  "node_modules/core-js-pure/modules/es.array.is-array.js"() {
    init_react();
    var $ = require_export();
    var isArray = require_is_array();
    $({ target: "Array", stat: true }, {
      isArray
    });
  }
});

// node_modules/core-js-pure/es/array/is-array.js
var require_is_array2 = __commonJS({
  "node_modules/core-js-pure/es/array/is-array.js"(exports, module) {
    init_react();
    require_es_array_is_array();
    var path = require_path();
    module.exports = path.Array.isArray;
  }
});

// node_modules/core-js-pure/stable/array/is-array.js
var require_is_array3 = __commonJS({
  "node_modules/core-js-pure/stable/array/is-array.js"(exports, module) {
    init_react();
    var parent = require_is_array2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js
var require_is_array4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js"(exports, module) {
    init_react();
    module.exports = require_is_array3();
  }
});

// node_modules/core-js-pure/internals/array-method-is-strict.js
var require_array_method_is_strict = __commonJS({
  "node_modules/core-js-pure/internals/array-method-is-strict.js"(exports, module) {
    "use strict";
    init_react();
    var fails = require_fails();
    module.exports = function(METHOD_NAME, argument) {
      var method = [][METHOD_NAME];
      return !!method && fails(function() {
        method.call(null, argument || function() {
          return 1;
        }, 1);
      });
    };
  }
});

// node_modules/core-js-pure/internals/array-for-each.js
var require_array_for_each = __commonJS({
  "node_modules/core-js-pure/internals/array-for-each.js"(exports, module) {
    "use strict";
    init_react();
    var $forEach = require_array_iteration().forEach;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var STRICT_METHOD = arrayMethodIsStrict("forEach");
    module.exports = !STRICT_METHOD ? function forEach(callbackfn) {
      return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    } : [].forEach;
  }
});

// node_modules/core-js-pure/modules/es.array.for-each.js
var require_es_array_for_each = __commonJS({
  "node_modules/core-js-pure/modules/es.array.for-each.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var forEach = require_array_for_each();
    $({ target: "Array", proto: true, forced: [].forEach != forEach }, {
      forEach
    });
  }
});

// node_modules/core-js-pure/internals/entry-virtual.js
var require_entry_virtual = __commonJS({
  "node_modules/core-js-pure/internals/entry-virtual.js"(exports, module) {
    init_react();
    var path = require_path();
    module.exports = function(CONSTRUCTOR) {
      return path[CONSTRUCTOR + "Prototype"];
    };
  }
});

// node_modules/core-js-pure/es/array/virtual/for-each.js
var require_for_each = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/for-each.js"(exports, module) {
    init_react();
    require_es_array_for_each();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").forEach;
  }
});

// node_modules/core-js-pure/stable/array/virtual/for-each.js
var require_for_each2 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/for-each.js"(exports, module) {
    init_react();
    var parent = require_for_each();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/for-each.js
var require_for_each3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/for-each.js"(exports, module) {
    init_react();
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_for_each2();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module.exports = function(it) {
      var own = it.forEach;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.forEach || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js
var require_for_each4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js"(exports, module) {
    init_react();
    module.exports = require_for_each3();
  }
});

// node_modules/core-js-pure/modules/es.object.keys.js
var require_es_object_keys = __commonJS({
  "node_modules/core-js-pure/modules/es.object.keys.js"() {
    init_react();
    var $ = require_export();
    var toObject = require_to_object();
    var nativeKeys = require_object_keys();
    var fails = require_fails();
    var FAILS_ON_PRIMITIVES = fails(function() {
      nativeKeys(1);
    });
    $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES }, {
      keys: function keys(it) {
        return nativeKeys(toObject(it));
      }
    });
  }
});

// node_modules/core-js-pure/es/object/keys.js
var require_keys = __commonJS({
  "node_modules/core-js-pure/es/object/keys.js"(exports, module) {
    init_react();
    require_es_object_keys();
    var path = require_path();
    module.exports = path.Object.keys;
  }
});

// node_modules/core-js-pure/stable/object/keys.js
var require_keys2 = __commonJS({
  "node_modules/core-js-pure/stable/object/keys.js"(exports, module) {
    init_react();
    var parent = require_keys();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/keys.js
var require_keys3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/keys.js"(exports, module) {
    init_react();
    module.exports = require_keys2();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/defineProperty.js"(exports, module) {
    init_react();
    var _Object$defineProperty = require_define_property6();
    function _defineProperty2(obj, key, value) {
      if (key in obj) {
        _Object$defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    module.exports = _defineProperty2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/internals/is-data-descriptor.js
var require_is_data_descriptor = __commonJS({
  "node_modules/core-js-pure/internals/is-data-descriptor.js"(exports, module) {
    init_react();
    var hasOwn = require_has_own_property();
    module.exports = function(descriptor) {
      return descriptor !== void 0 && (hasOwn(descriptor, "value") || hasOwn(descriptor, "writable"));
    };
  }
});

// node_modules/core-js-pure/modules/es.reflect.get.js
var require_es_reflect_get = __commonJS({
  "node_modules/core-js-pure/modules/es.reflect.get.js"() {
    init_react();
    var $ = require_export();
    var call = require_function_call();
    var isObject = require_is_object();
    var anObject = require_an_object();
    var isDataDescriptor = require_is_data_descriptor();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var getPrototypeOf = require_object_get_prototype_of();
    function get(target, propertyKey) {
      var receiver = arguments.length < 3 ? target : arguments[2];
      var descriptor, prototype;
      if (anObject(target) === receiver)
        return target[propertyKey];
      descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey);
      if (descriptor)
        return isDataDescriptor(descriptor) ? descriptor.value : descriptor.get === void 0 ? void 0 : call(descriptor.get, receiver);
      if (isObject(prototype = getPrototypeOf(target)))
        return get(prototype, propertyKey, receiver);
    }
    $({ target: "Reflect", stat: true }, {
      get
    });
  }
});

// node_modules/core-js-pure/es/reflect/get.js
var require_get = __commonJS({
  "node_modules/core-js-pure/es/reflect/get.js"(exports, module) {
    init_react();
    require_es_reflect_get();
    var path = require_path();
    module.exports = path.Reflect.get;
  }
});

// node_modules/core-js-pure/stable/reflect/get.js
var require_get2 = __commonJS({
  "node_modules/core-js-pure/stable/reflect/get.js"(exports, module) {
    init_react();
    var parent = require_get();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/reflect/get.js
var require_get3 = __commonJS({
  "node_modules/core-js-pure/actual/reflect/get.js"(exports, module) {
    init_react();
    var parent = require_get2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/reflect/get.js
var require_get4 = __commonJS({
  "node_modules/core-js-pure/features/reflect/get.js"(exports, module) {
    init_react();
    var parent = require_get3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/reflect/get.js
var require_get5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/reflect/get.js"(exports, module) {
    init_react();
    module.exports = require_get4();
  }
});

// node_modules/core-js-pure/actual/object/get-own-property-descriptor.js
var require_get_own_property_descriptor4 = __commonJS({
  "node_modules/core-js-pure/actual/object/get-own-property-descriptor.js"(exports, module) {
    init_react();
    var parent = require_get_own_property_descriptor2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/get-own-property-descriptor.js
var require_get_own_property_descriptor5 = __commonJS({
  "node_modules/core-js-pure/features/object/get-own-property-descriptor.js"(exports, module) {
    init_react();
    var parent = require_get_own_property_descriptor4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-descriptor.js
var require_get_own_property_descriptor6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-descriptor.js"(exports, module) {
    init_react();
    module.exports = require_get_own_property_descriptor5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/superPropBase.js
var require_superPropBase = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/superPropBase.js"(exports, module) {
    init_react();
    var getPrototypeOf = require_getPrototypeOf();
    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = getPrototypeOf(object);
        if (object === null)
          break;
      }
      return object;
    }
    module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/get.js
var require_get6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/get.js"(exports, module) {
    init_react();
    var _Reflect$get = require_get5();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor6();
    var superPropBase = require_superPropBase();
    function _get() {
      if (typeof Reflect !== "undefined" && _Reflect$get) {
        module.exports = _get = _Reflect$get, module.exports.__esModule = true, module.exports["default"] = module.exports;
      } else {
        module.exports = _get = function _get2(target, property, receiver) {
          var base = superPropBase(target, property);
          if (!base)
            return;
          var desc = _Object$getOwnPropertyDescriptor(base, property);
          if (desc.get) {
            return desc.get.call(arguments.length < 3 ? target : receiver);
          }
          return desc.value;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      }
      return _get.apply(this, arguments);
    }
    module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/es/array/virtual/concat.js
var require_concat = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/concat.js"(exports, module) {
    init_react();
    require_es_array_concat();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").concat;
  }
});

// node_modules/core-js-pure/es/instance/concat.js
var require_concat2 = __commonJS({
  "node_modules/core-js-pure/es/instance/concat.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_concat();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.concat;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.concat ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/concat.js
var require_concat3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/concat.js"(exports, module) {
    init_react();
    var parent = require_concat2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js
var require_concat4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js"(exports, module) {
    init_react();
    module.exports = require_concat3();
  }
});

// node_modules/core-js-pure/internals/collection-strong.js
var require_collection_strong = __commonJS({
  "node_modules/core-js-pure/internals/collection-strong.js"(exports, module) {
    "use strict";
    init_react();
    var defineProperty = require_object_define_property().f;
    var create = require_object_create();
    var redefineAll = require_redefine_all();
    var bind = require_function_bind_context();
    var anInstance = require_an_instance();
    var iterate = require_iterate();
    var defineIterator = require_define_iterator();
    var setSpecies = require_set_species();
    var DESCRIPTORS = require_descriptors();
    var fastKey = require_internal_metadata().fastKey;
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    module.exports = {
      getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
        var Constructor = wrapper(function(that, iterable) {
          anInstance(that, Prototype);
          setInternalState(that, {
            type: CONSTRUCTOR_NAME,
            index: create(null),
            first: void 0,
            last: void 0,
            size: 0
          });
          if (!DESCRIPTORS)
            that.size = 0;
          if (iterable != void 0)
            iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
        });
        var Prototype = Constructor.prototype;
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var define2 = function(that, key, value) {
          var state = getInternalState(that);
          var entry = getEntry(that, key);
          var previous, index;
          if (entry) {
            entry.value = value;
          } else {
            state.last = entry = {
              index: index = fastKey(key, true),
              key,
              value,
              previous: previous = state.last,
              next: void 0,
              removed: false
            };
            if (!state.first)
              state.first = entry;
            if (previous)
              previous.next = entry;
            if (DESCRIPTORS)
              state.size++;
            else
              that.size++;
            if (index !== "F")
              state.index[index] = entry;
          }
          return that;
        };
        var getEntry = function(that, key) {
          var state = getInternalState(that);
          var index = fastKey(key);
          var entry;
          if (index !== "F")
            return state.index[index];
          for (entry = state.first; entry; entry = entry.next) {
            if (entry.key == key)
              return entry;
          }
        };
        redefineAll(Prototype, {
          clear: function clear() {
            var that = this;
            var state = getInternalState(that);
            var data = state.index;
            var entry = state.first;
            while (entry) {
              entry.removed = true;
              if (entry.previous)
                entry.previous = entry.previous.next = void 0;
              delete data[entry.index];
              entry = entry.next;
            }
            state.first = state.last = void 0;
            if (DESCRIPTORS)
              state.size = 0;
            else
              that.size = 0;
          },
          "delete": function(key) {
            var that = this;
            var state = getInternalState(that);
            var entry = getEntry(that, key);
            if (entry) {
              var next2 = entry.next;
              var prev2 = entry.previous;
              delete state.index[entry.index];
              entry.removed = true;
              if (prev2)
                prev2.next = next2;
              if (next2)
                next2.previous = prev2;
              if (state.first == entry)
                state.first = next2;
              if (state.last == entry)
                state.last = prev2;
              if (DESCRIPTORS)
                state.size--;
              else
                that.size--;
            }
            return !!entry;
          },
          forEach: function forEach(callbackfn) {
            var state = getInternalState(this);
            var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
            var entry;
            while (entry = entry ? entry.next : state.first) {
              boundFunction(entry.value, entry.key, this);
              while (entry && entry.removed)
                entry = entry.previous;
            }
          },
          has: function has(key) {
            return !!getEntry(this, key);
          }
        });
        redefineAll(Prototype, IS_MAP ? {
          get: function get(key) {
            var entry = getEntry(this, key);
            return entry && entry.value;
          },
          set: function set(key, value) {
            return define2(this, key === 0 ? 0 : key, value);
          }
        } : {
          add: function add(value) {
            return define2(this, value = value === 0 ? 0 : value, value);
          }
        });
        if (DESCRIPTORS)
          defineProperty(Prototype, "size", {
            get: function() {
              return getInternalState(this).size;
            }
          });
        return Constructor;
      },
      setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
        var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
        var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
        defineIterator(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
          setInternalState(this, {
            type: ITERATOR_NAME,
            target: iterated,
            state: getInternalCollectionState(iterated),
            kind,
            last: void 0
          });
        }, function() {
          var state = getInternalIteratorState(this);
          var kind = state.kind;
          var entry = state.last;
          while (entry && entry.removed)
            entry = entry.previous;
          if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
            state.target = void 0;
            return { value: void 0, done: true };
          }
          if (kind == "keys")
            return { value: entry.key, done: false };
          if (kind == "values")
            return { value: entry.value, done: false };
          return { value: [entry.key, entry.value], done: false };
        }, IS_MAP ? "entries" : "values", !IS_MAP, true);
        setSpecies(CONSTRUCTOR_NAME);
      }
    };
  }
});

// node_modules/core-js-pure/modules/es.map.js
var require_es_map = __commonJS({
  "node_modules/core-js-pure/modules/es.map.js"() {
    "use strict";
    init_react();
    var collection = require_collection();
    var collectionStrong = require_collection_strong();
    collection("Map", function(init) {
      return function Map2() {
        return init(this, arguments.length ? arguments[0] : void 0);
      };
    }, collectionStrong);
  }
});

// node_modules/core-js-pure/es/map/index.js
var require_map = __commonJS({
  "node_modules/core-js-pure/es/map/index.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_map();
    require_es_object_to_string();
    require_es_string_iterator();
    var path = require_path();
    module.exports = path.Map;
  }
});

// node_modules/core-js-pure/stable/map/index.js
var require_map2 = __commonJS({
  "node_modules/core-js-pure/stable/map/index.js"(exports, module) {
    init_react();
    var parent = require_map();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/map/index.js
var require_map3 = __commonJS({
  "node_modules/core-js-pure/actual/map/index.js"(exports, module) {
    init_react();
    var parent = require_map2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/internals/collection-from.js
var require_collection_from = __commonJS({
  "node_modules/core-js-pure/internals/collection-from.js"(exports, module) {
    "use strict";
    init_react();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var aConstructor = require_a_constructor();
    var iterate = require_iterate();
    var push = [].push;
    module.exports = function from2(source) {
      var length2 = arguments.length;
      var mapFn = length2 > 1 ? arguments[1] : void 0;
      var mapping, array, n2, boundFunction;
      aConstructor(this);
      mapping = mapFn !== void 0;
      if (mapping)
        aCallable(mapFn);
      if (source == void 0)
        return new this();
      array = [];
      if (mapping) {
        n2 = 0;
        boundFunction = bind(mapFn, length2 > 2 ? arguments[2] : void 0);
        iterate(source, function(nextItem) {
          call(push, array, boundFunction(nextItem, n2++));
        });
      } else {
        iterate(source, push, { that: array });
      }
      return new this(array);
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.from.js
var require_esnext_map_from = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.from.js"() {
    init_react();
    var $ = require_export();
    var from2 = require_collection_from();
    $({ target: "Map", stat: true, forced: true }, {
      from: from2
    });
  }
});

// node_modules/core-js-pure/internals/collection-of.js
var require_collection_of = __commonJS({
  "node_modules/core-js-pure/internals/collection-of.js"(exports, module) {
    "use strict";
    init_react();
    var arraySlice = require_array_slice();
    module.exports = function of() {
      return new this(arraySlice(arguments));
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.of.js
var require_esnext_map_of = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.of.js"() {
    init_react();
    var $ = require_export();
    var of = require_collection_of();
    $({ target: "Map", stat: true, forced: true }, {
      of
    });
  }
});

// node_modules/core-js-pure/internals/collection-delete-all.js
var require_collection_delete_all = __commonJS({
  "node_modules/core-js-pure/internals/collection-delete-all.js"(exports, module) {
    "use strict";
    init_react();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    module.exports = function deleteAll() {
      var collection = anObject(this);
      var remover = aCallable(collection["delete"]);
      var allDeleted = true;
      var wasDeleted;
      for (var k2 = 0, len = arguments.length; k2 < len; k2++) {
        wasDeleted = call(remover, collection, arguments[k2]);
        allDeleted = allDeleted && wasDeleted;
      }
      return !!allDeleted;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.delete-all.js
var require_esnext_map_delete_all = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.delete-all.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var deleteAll = require_collection_delete_all();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      deleteAll
    });
  }
});

// node_modules/core-js-pure/internals/map-emplace.js
var require_map_emplace = __commonJS({
  "node_modules/core-js-pure/internals/map-emplace.js"(exports, module) {
    "use strict";
    init_react();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    module.exports = function emplace(key, handler) {
      var map = anObject(this);
      var get = aCallable(map.get);
      var has = aCallable(map.has);
      var set = aCallable(map.set);
      var value = call(has, map, key) && "update" in handler ? handler.update(call(get, map, key), key, map) : handler.insert(key, map);
      call(set, map, key, value);
      return value;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.emplace.js
var require_esnext_map_emplace = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.emplace.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var emplace = require_map_emplace();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      emplace
    });
  }
});

// node_modules/core-js-pure/internals/get-map-iterator.js
var require_get_map_iterator = __commonJS({
  "node_modules/core-js-pure/internals/get-map-iterator.js"(exports, module) {
    init_react();
    var getIterator = require_get_iterator();
    module.exports = getIterator;
  }
});

// node_modules/core-js-pure/modules/esnext.map.every.js
var require_esnext_map_every = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.every.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var anObject = require_an_object();
    var bind = require_function_bind_context();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      every: function every(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return !iterate(iterator, function(key, value, stop) {
          if (!boundFunction(value, key, map))
            return stop();
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.filter.js
var require_esnext_map_filter = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.filter.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var getBuiltIn = require_get_built_in();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var speciesConstructor = require_species_constructor();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      filter: function filter(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var newMap = new (speciesConstructor(map, getBuiltIn("Map")))();
        var setter = aCallable(newMap.set);
        iterate(iterator, function(key, value) {
          if (boundFunction(value, key, map))
            call(setter, newMap, key, value);
        }, { AS_ENTRIES: true, IS_ITERATOR: true });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.find.js
var require_esnext_map_find = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.find.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var anObject = require_an_object();
    var bind = require_function_bind_context();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      find: function find(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(iterator, function(key, value, stop) {
          if (boundFunction(value, key, map))
            return stop(value);
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.find-key.js
var require_esnext_map_find_key = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.find-key.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var anObject = require_an_object();
    var bind = require_function_bind_context();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      findKey: function findKey(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(iterator, function(key, value, stop) {
          if (boundFunction(value, key, map))
            return stop(key);
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.group-by.js
var require_esnext_map_group_by = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.group-by.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var getIterator = require_get_iterator();
    var iterate = require_iterate();
    var push = uncurryThis([].push);
    $({ target: "Map", stat: true, forced: true }, {
      groupBy: function groupBy(iterable, keyDerivative) {
        aCallable(keyDerivative);
        var iterator = getIterator(iterable);
        var newMap = new this();
        var has = aCallable(newMap.has);
        var get = aCallable(newMap.get);
        var set = aCallable(newMap.set);
        iterate(iterator, function(element) {
          var derivedKey = keyDerivative(element);
          if (!call(has, newMap, derivedKey))
            call(set, newMap, derivedKey, [element]);
          else
            push(call(get, newMap, derivedKey), element);
        }, { IS_ITERATOR: true });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/internals/same-value-zero.js
var require_same_value_zero = __commonJS({
  "node_modules/core-js-pure/internals/same-value-zero.js"(exports, module) {
    init_react();
    module.exports = function(x2, y2) {
      return x2 === y2 || x2 != x2 && y2 != y2;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.includes.js
var require_esnext_map_includes = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.includes.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var anObject = require_an_object();
    var getMapIterator = require_get_map_iterator();
    var sameValueZero = require_same_value_zero();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      includes: function includes(searchElement) {
        return iterate(getMapIterator(anObject(this)), function(key, value, stop) {
          if (sameValueZero(value, searchElement))
            return stop();
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.key-by.js
var require_esnext_map_key_by = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.key-by.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var call = require_function_call();
    var iterate = require_iterate();
    var aCallable = require_a_callable();
    $({ target: "Map", stat: true, forced: true }, {
      keyBy: function keyBy(iterable, keyDerivative) {
        var newMap = new this();
        aCallable(keyDerivative);
        var setter = aCallable(newMap.set);
        iterate(iterable, function(element) {
          call(setter, newMap, keyDerivative(element), element);
        });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.key-of.js
var require_esnext_map_key_of = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.key-of.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var anObject = require_an_object();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      keyOf: function keyOf(searchElement) {
        return iterate(getMapIterator(anObject(this)), function(key, value, stop) {
          if (value === searchElement)
            return stop(key);
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.map-keys.js
var require_esnext_map_map_keys = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.map-keys.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var getBuiltIn = require_get_built_in();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var speciesConstructor = require_species_constructor();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      mapKeys: function mapKeys(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var newMap = new (speciesConstructor(map, getBuiltIn("Map")))();
        var setter = aCallable(newMap.set);
        iterate(iterator, function(key, value) {
          call(setter, newMap, boundFunction(value, key, map), value);
        }, { AS_ENTRIES: true, IS_ITERATOR: true });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.map-values.js
var require_esnext_map_map_values = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.map-values.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var getBuiltIn = require_get_built_in();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var speciesConstructor = require_species_constructor();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      mapValues: function mapValues(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var newMap = new (speciesConstructor(map, getBuiltIn("Map")))();
        var setter = aCallable(newMap.set);
        iterate(iterator, function(key, value) {
          call(setter, newMap, key, boundFunction(value, key, map));
        }, { AS_ENTRIES: true, IS_ITERATOR: true });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.merge.js
var require_esnext_map_merge = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.merge.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      merge: function merge2(iterable) {
        var map = anObject(this);
        var setter = aCallable(map.set);
        var argumentsLength = arguments.length;
        var i = 0;
        while (i < argumentsLength) {
          iterate(arguments[i++], setter, { that: map, AS_ENTRIES: true });
        }
        return map;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.reduce.js
var require_esnext_map_reduce = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.reduce.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var anObject = require_an_object();
    var aCallable = require_a_callable();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    var TypeError2 = global2.TypeError;
    $({ target: "Map", proto: true, real: true, forced: true }, {
      reduce: function reduce(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var noInitial = arguments.length < 2;
        var accumulator = noInitial ? void 0 : arguments[1];
        aCallable(callbackfn);
        iterate(iterator, function(key, value) {
          if (noInitial) {
            noInitial = false;
            accumulator = value;
          } else {
            accumulator = callbackfn(accumulator, value, key, map);
          }
        }, { AS_ENTRIES: true, IS_ITERATOR: true });
        if (noInitial)
          throw TypeError2("Reduce of empty map with no initial value");
        return accumulator;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.some.js
var require_esnext_map_some = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.some.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var anObject = require_an_object();
    var bind = require_function_bind_context();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      some: function some(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(iterator, function(key, value, stop) {
          if (boundFunction(value, key, map))
            return stop();
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.update.js
var require_esnext_map_update = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.update.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var call = require_function_call();
    var anObject = require_an_object();
    var aCallable = require_a_callable();
    var TypeError2 = global2.TypeError;
    $({ target: "Map", proto: true, real: true, forced: true }, {
      update: function update(key, callback) {
        var map = anObject(this);
        var get = aCallable(map.get);
        var has = aCallable(map.has);
        var set = aCallable(map.set);
        var length2 = arguments.length;
        aCallable(callback);
        var isPresentInMap = call(has, map, key);
        if (!isPresentInMap && length2 < 3) {
          throw TypeError2("Updating absent value");
        }
        var value = isPresentInMap ? call(get, map, key) : aCallable(length2 > 2 ? arguments[2] : void 0)(key, map);
        call(set, map, key, callback(value, key, map));
        return map;
      }
    });
  }
});

// node_modules/core-js-pure/internals/map-upsert.js
var require_map_upsert = __commonJS({
  "node_modules/core-js-pure/internals/map-upsert.js"(exports, module) {
    "use strict";
    init_react();
    var global2 = require_global();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var isCallable = require_is_callable();
    var anObject = require_an_object();
    var TypeError2 = global2.TypeError;
    module.exports = function upsert(key, updateFn) {
      var map = anObject(this);
      var get = aCallable(map.get);
      var has = aCallable(map.has);
      var set = aCallable(map.set);
      var insertFn = arguments.length > 2 ? arguments[2] : void 0;
      var value;
      if (!isCallable(updateFn) && !isCallable(insertFn)) {
        throw TypeError2("At least one callback required");
      }
      if (call(has, map, key)) {
        value = call(get, map, key);
        if (isCallable(updateFn)) {
          value = updateFn(value);
          call(set, map, key, value);
        }
      } else if (isCallable(insertFn)) {
        value = insertFn();
        call(set, map, key, value);
      }
      return value;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.upsert.js
var require_esnext_map_upsert = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.upsert.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var upsert = require_map_upsert();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      upsert
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.update-or-insert.js
var require_esnext_map_update_or_insert = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.update-or-insert.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var upsert = require_map_upsert();
    $({ target: "Map", proto: true, real: true, name: "upsert", forced: true }, {
      updateOrInsert: upsert
    });
  }
});

// node_modules/core-js-pure/features/map/index.js
var require_map4 = __commonJS({
  "node_modules/core-js-pure/features/map/index.js"(exports, module) {
    init_react();
    var parent = require_map3();
    require_esnext_map_from();
    require_esnext_map_of();
    require_esnext_map_delete_all();
    require_esnext_map_emplace();
    require_esnext_map_every();
    require_esnext_map_filter();
    require_esnext_map_find();
    require_esnext_map_find_key();
    require_esnext_map_group_by();
    require_esnext_map_includes();
    require_esnext_map_key_by();
    require_esnext_map_key_of();
    require_esnext_map_map_keys();
    require_esnext_map_map_values();
    require_esnext_map_merge();
    require_esnext_map_reduce();
    require_esnext_map_some();
    require_esnext_map_update();
    require_esnext_map_upsert();
    require_esnext_map_update_or_insert();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/map.js
var require_map5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/map.js"(exports, module) {
    init_react();
    module.exports = require_map4();
  }
});

// node_modules/core-js-pure/modules/es.array.index-of.js
var require_es_array_index_of = __commonJS({
  "node_modules/core-js-pure/modules/es.array.index-of.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var $IndexOf = require_array_includes().indexOf;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var un$IndexOf = uncurryThis([].indexOf);
    var NEGATIVE_ZERO = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
    var STRICT_METHOD = arrayMethodIsStrict("indexOf");
    $({ target: "Array", proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD }, {
      indexOf: function indexOf(searchElement) {
        var fromIndex = arguments.length > 1 ? arguments[1] : void 0;
        return NEGATIVE_ZERO ? un$IndexOf(this, searchElement, fromIndex) || 0 : $IndexOf(this, searchElement, fromIndex);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/index-of.js
var require_index_of = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/index-of.js"(exports, module) {
    init_react();
    require_es_array_index_of();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").indexOf;
  }
});

// node_modules/core-js-pure/es/instance/index-of.js
var require_index_of2 = __commonJS({
  "node_modules/core-js-pure/es/instance/index-of.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_index_of();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.indexOf;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.indexOf ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/index-of.js
var require_index_of3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/index-of.js"(exports, module) {
    init_react();
    var parent = require_index_of2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/instance/index-of.js
var require_index_of4 = __commonJS({
  "node_modules/core-js-pure/actual/instance/index-of.js"(exports, module) {
    init_react();
    var parent = require_index_of3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/instance/index-of.js
var require_index_of5 = __commonJS({
  "node_modules/core-js-pure/features/instance/index-of.js"(exports, module) {
    init_react();
    var parent = require_index_of4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/instance/index-of.js
var require_index_of6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/instance/index-of.js"(exports, module) {
    init_react();
    module.exports = require_index_of5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/isNativeFunction.js
var require_isNativeFunction = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/isNativeFunction.js"(exports, module) {
    init_react();
    var _indexOfInstanceProperty = require_index_of6();
    function _isNativeFunction(fn2) {
      var _context;
      return _indexOfInstanceProperty(_context = Function.toString.call(fn2)).call(_context, "[native code]") !== -1;
    }
    module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/actual/reflect/construct.js
var require_construct4 = __commonJS({
  "node_modules/core-js-pure/actual/reflect/construct.js"(exports, module) {
    init_react();
    var parent = require_construct2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/reflect/construct.js
var require_construct5 = __commonJS({
  "node_modules/core-js-pure/features/reflect/construct.js"(exports, module) {
    init_react();
    var parent = require_construct4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/reflect/construct.js
var require_construct6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/reflect/construct.js"(exports, module) {
    init_react();
    module.exports = require_construct5();
  }
});

// node_modules/core-js-pure/modules/es.function.bind.js
var require_es_function_bind = __commonJS({
  "node_modules/core-js-pure/modules/es.function.bind.js"() {
    init_react();
    var $ = require_export();
    var bind = require_function_bind();
    $({ target: "Function", proto: true, forced: Function.bind !== bind }, {
      bind
    });
  }
});

// node_modules/core-js-pure/es/function/virtual/bind.js
var require_bind = __commonJS({
  "node_modules/core-js-pure/es/function/virtual/bind.js"(exports, module) {
    init_react();
    require_es_function_bind();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Function").bind;
  }
});

// node_modules/core-js-pure/es/instance/bind.js
var require_bind2 = __commonJS({
  "node_modules/core-js-pure/es/instance/bind.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_bind();
    var FunctionPrototype = Function.prototype;
    module.exports = function(it) {
      var own = it.bind;
      return it === FunctionPrototype || isPrototypeOf(FunctionPrototype, it) && own === FunctionPrototype.bind ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/bind.js
var require_bind3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/bind.js"(exports, module) {
    init_react();
    var parent = require_bind2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/instance/bind.js
var require_bind4 = __commonJS({
  "node_modules/core-js-pure/actual/instance/bind.js"(exports, module) {
    init_react();
    var parent = require_bind3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/instance/bind.js
var require_bind5 = __commonJS({
  "node_modules/core-js-pure/features/instance/bind.js"(exports, module) {
    init_react();
    var parent = require_bind4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/instance/bind.js
var require_bind6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/instance/bind.js"(exports, module) {
    init_react();
    module.exports = require_bind5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/isNativeReflectConstruct.js
var require_isNativeReflectConstruct = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/isNativeReflectConstruct.js"(exports, module) {
    init_react();
    var _Reflect$construct = require_construct6();
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/construct.js
var require_construct7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/construct.js"(exports, module) {
    init_react();
    var _Reflect$construct = require_construct6();
    var _bindInstanceProperty = require_bind6();
    var setPrototypeOf = require_setPrototypeOf();
    var isNativeReflectConstruct = require_isNativeReflectConstruct();
    function _construct(Parent, args, Class) {
      if (isNativeReflectConstruct()) {
        module.exports = _construct = _Reflect$construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
      } else {
        module.exports = _construct = function _construct2(Parent2, args2, Class2) {
          var a2 = [null];
          a2.push.apply(a2, args2);
          var Constructor = _bindInstanceProperty(Function).apply(Parent2, a2);
          var instance = new Constructor();
          if (Class2)
            setPrototypeOf(instance, Class2.prototype);
          return instance;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      }
      return _construct.apply(null, arguments);
    }
    module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/wrapNativeSuper.js
var require_wrapNativeSuper = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/wrapNativeSuper.js"(exports, module) {
    init_react();
    var _Map = require_map5();
    var _Object$create = require_create5();
    var getPrototypeOf = require_getPrototypeOf();
    var setPrototypeOf = require_setPrototypeOf();
    var isNativeFunction = require_isNativeFunction();
    var construct = require_construct7();
    function _wrapNativeSuper(Class) {
      var _cache = typeof _Map === "function" ? new _Map() : void 0;
      module.exports = _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !isNativeFunction(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return construct(Class2, arguments, getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = _Object$create(Class2.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return setPrototypeOf(Wrapper, Class2);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _wrapNativeSuper(Class);
    }
    module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/moralis/lib/browser/ParseError.js
var require_ParseError = __commonJS({
  "node_modules/moralis/lib/browser/ParseError.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty2 = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty2(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty2 = _interopRequireDefault(require_define_property3());
    var _concat = _interopRequireDefault(require_concat4());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _wrapNativeSuper2 = _interopRequireDefault(require_wrapNativeSuper());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var ParseError = /* @__PURE__ */ function(_Error) {
      (0, _inherits2.default)(ParseError2, _Error);
      var _super = _createSuper(ParseError2);
      function ParseError2(code, message) {
        var _this;
        (0, _classCallCheck2.default)(this, ParseError2);
        _this = _super.call(this, message);
        _this.code = code;
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "message", {
          enumerable: true,
          value: message
        });
        return _this;
      }
      (0, _createClass2.default)(ParseError2, [{
        key: "toString",
        value: function() {
          var _context;
          return (0, _concat.default)(_context = "ParseError: ".concat(this.code, " ")).call(_context, this.message);
        }
      }]);
      return ParseError2;
    }(/* @__PURE__ */ (0, _wrapNativeSuper2.default)(Error));
    ParseError.OTHER_CAUSE = -1;
    ParseError.INTERNAL_SERVER_ERROR = 1;
    ParseError.CONNECTION_FAILED = 100;
    ParseError.OBJECT_NOT_FOUND = 101;
    ParseError.INVALID_QUERY = 102;
    ParseError.INVALID_CLASS_NAME = 103;
    ParseError.MISSING_OBJECT_ID = 104;
    ParseError.INVALID_KEY_NAME = 105;
    ParseError.INVALID_POINTER = 106;
    ParseError.INVALID_JSON = 107;
    ParseError.COMMAND_UNAVAILABLE = 108;
    ParseError.NOT_INITIALIZED = 109;
    ParseError.INCORRECT_TYPE = 111;
    ParseError.INVALID_CHANNEL_NAME = 112;
    ParseError.PUSH_MISCONFIGURED = 115;
    ParseError.OBJECT_TOO_LARGE = 116;
    ParseError.OPERATION_FORBIDDEN = 119;
    ParseError.CACHE_MISS = 120;
    ParseError.INVALID_NESTED_KEY = 121;
    ParseError.INVALID_FILE_NAME = 122;
    ParseError.INVALID_ACL = 123;
    ParseError.TIMEOUT = 124;
    ParseError.INVALID_EMAIL_ADDRESS = 125;
    ParseError.MISSING_CONTENT_TYPE = 126;
    ParseError.MISSING_CONTENT_LENGTH = 127;
    ParseError.INVALID_CONTENT_LENGTH = 128;
    ParseError.FILE_TOO_LARGE = 129;
    ParseError.FILE_SAVE_ERROR = 130;
    ParseError.DUPLICATE_VALUE = 137;
    ParseError.INVALID_ROLE_NAME = 139;
    ParseError.EXCEEDED_QUOTA = 140;
    ParseError.SCRIPT_FAILED = 141;
    ParseError.VALIDATION_ERROR = 142;
    ParseError.INVALID_IMAGE_DATA = 143;
    ParseError.UNSAVED_FILE_ERROR = 151;
    ParseError.INVALID_PUSH_TIME_ERROR = 152;
    ParseError.FILE_DELETE_ERROR = 153;
    ParseError.FILE_DELETE_UNNAMED_ERROR = 161;
    ParseError.REQUEST_LIMIT_EXCEEDED = 155;
    ParseError.DUPLICATE_REQUEST = 159;
    ParseError.INVALID_EVENT_NAME = 160;
    ParseError.USERNAME_MISSING = 200;
    ParseError.PASSWORD_MISSING = 201;
    ParseError.USERNAME_TAKEN = 202;
    ParseError.EMAIL_TAKEN = 203;
    ParseError.EMAIL_MISSING = 204;
    ParseError.EMAIL_NOT_FOUND = 205;
    ParseError.SESSION_MISSING = 206;
    ParseError.MUST_CREATE_USER_THROUGH_SIGNUP = 207;
    ParseError.ACCOUNT_ALREADY_LINKED = 208;
    ParseError.INVALID_SESSION_TOKEN = 209;
    ParseError.MFA_ERROR = 210;
    ParseError.MFA_TOKEN_REQUIRED = 211;
    ParseError.LINKED_ID_MISSING = 250;
    ParseError.INVALID_LINKED_SESSION = 251;
    ParseError.UNSUPPORTED_SERVICE = 252;
    ParseError.INVALID_SCHEMA_OPERATION = 255;
    ParseError.AGGREGATE_ERROR = 600;
    ParseError.FILE_READ_ERROR = 601;
    ParseError.X_DOMAIN_REQUEST = 602;
    var _default = ParseError;
    exports.default = _default;
  }
});

// node_modules/core-js-pure/es/object/get-own-property-symbols.js
var require_get_own_property_symbols = __commonJS({
  "node_modules/core-js-pure/es/object/get-own-property-symbols.js"(exports, module) {
    init_react();
    require_es_symbol();
    var path = require_path();
    module.exports = path.Object.getOwnPropertySymbols;
  }
});

// node_modules/core-js-pure/stable/object/get-own-property-symbols.js
var require_get_own_property_symbols2 = __commonJS({
  "node_modules/core-js-pure/stable/object/get-own-property-symbols.js"(exports, module) {
    init_react();
    var parent = require_get_own_property_symbols();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols.js
var require_get_own_property_symbols3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols.js"(exports, module) {
    init_react();
    module.exports = require_get_own_property_symbols2();
  }
});

// node_modules/core-js-pure/modules/es.array.filter.js
var require_es_array_filter = __commonJS({
  "node_modules/core-js-pure/modules/es.array.filter.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $filter = require_array_iteration().filter;
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
    $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      filter: function filter(callbackfn) {
        return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/filter.js
var require_filter = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/filter.js"(exports, module) {
    init_react();
    require_es_array_filter();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").filter;
  }
});

// node_modules/core-js-pure/es/instance/filter.js
var require_filter2 = __commonJS({
  "node_modules/core-js-pure/es/instance/filter.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_filter();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.filter;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.filter ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/filter.js
var require_filter3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/filter.js"(exports, module) {
    init_react();
    var parent = require_filter2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/filter.js
var require_filter4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/filter.js"(exports, module) {
    init_react();
    module.exports = require_filter3();
  }
});

// node_modules/core-js-pure/modules/es.object.get-own-property-descriptors.js
var require_es_object_get_own_property_descriptors = __commonJS({
  "node_modules/core-js-pure/modules/es.object.get-own-property-descriptors.js"() {
    init_react();
    var $ = require_export();
    var DESCRIPTORS = require_descriptors();
    var ownKeys4 = require_own_keys();
    var toIndexedObject = require_to_indexed_object();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var createProperty = require_create_property();
    $({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
      getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
        var O2 = toIndexedObject(object);
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        var keys = ownKeys4(O2);
        var result = {};
        var index = 0;
        var key, descriptor;
        while (keys.length > index) {
          descriptor = getOwnPropertyDescriptor(O2, key = keys[index++]);
          if (descriptor !== void 0)
            createProperty(result, key, descriptor);
        }
        return result;
      }
    });
  }
});

// node_modules/core-js-pure/es/object/get-own-property-descriptors.js
var require_get_own_property_descriptors = __commonJS({
  "node_modules/core-js-pure/es/object/get-own-property-descriptors.js"(exports, module) {
    init_react();
    require_es_object_get_own_property_descriptors();
    var path = require_path();
    module.exports = path.Object.getOwnPropertyDescriptors;
  }
});

// node_modules/core-js-pure/stable/object/get-own-property-descriptors.js
var require_get_own_property_descriptors2 = __commonJS({
  "node_modules/core-js-pure/stable/object/get-own-property-descriptors.js"(exports, module) {
    init_react();
    var parent = require_get_own_property_descriptors();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors.js
var require_get_own_property_descriptors3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors.js"(exports, module) {
    init_react();
    module.exports = require_get_own_property_descriptors2();
  }
});

// node_modules/core-js-pure/modules/es.object.define-properties.js
var require_es_object_define_properties = __commonJS({
  "node_modules/core-js-pure/modules/es.object.define-properties.js"() {
    init_react();
    var $ = require_export();
    var DESCRIPTORS = require_descriptors();
    var defineProperties = require_object_define_properties().f;
    $({ target: "Object", stat: true, forced: Object.defineProperties !== defineProperties, sham: !DESCRIPTORS }, {
      defineProperties
    });
  }
});

// node_modules/core-js-pure/es/object/define-properties.js
var require_define_properties = __commonJS({
  "node_modules/core-js-pure/es/object/define-properties.js"(exports, module) {
    init_react();
    require_es_object_define_properties();
    var path = require_path();
    var Object2 = path.Object;
    var defineProperties = module.exports = function defineProperties2(T, D2) {
      return Object2.defineProperties(T, D2);
    };
    if (Object2.defineProperties.sham)
      defineProperties.sham = true;
  }
});

// node_modules/core-js-pure/stable/object/define-properties.js
var require_define_properties2 = __commonJS({
  "node_modules/core-js-pure/stable/object/define-properties.js"(exports, module) {
    init_react();
    var parent = require_define_properties();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/define-properties.js
var require_define_properties3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/define-properties.js"(exports, module) {
    init_react();
    module.exports = require_define_properties2();
  }
});

// node_modules/core-js-pure/modules/es.array.slice.js
var require_es_array_slice = __commonJS({
  "node_modules/core-js-pure/modules/es.array.slice.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var isArray = require_is_array();
    var isConstructor = require_is_constructor();
    var isObject = require_is_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var toIndexedObject = require_to_indexed_object();
    var createProperty = require_create_property();
    var wellKnownSymbol = require_well_known_symbol();
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var un$Slice = require_array_slice();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
    var SPECIES = wellKnownSymbol("species");
    var Array2 = global2.Array;
    var max = Math.max;
    $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      slice: function slice2(start, end) {
        var O2 = toIndexedObject(this);
        var length2 = lengthOfArrayLike(O2);
        var k2 = toAbsoluteIndex(start, length2);
        var fin = toAbsoluteIndex(end === void 0 ? length2 : end, length2);
        var Constructor, result, n2;
        if (isArray(O2)) {
          Constructor = O2.constructor;
          if (isConstructor(Constructor) && (Constructor === Array2 || isArray(Constructor.prototype))) {
            Constructor = void 0;
          } else if (isObject(Constructor)) {
            Constructor = Constructor[SPECIES];
            if (Constructor === null)
              Constructor = void 0;
          }
          if (Constructor === Array2 || Constructor === void 0) {
            return un$Slice(O2, k2, fin);
          }
        }
        result = new (Constructor === void 0 ? Array2 : Constructor)(max(fin - k2, 0));
        for (n2 = 0; k2 < fin; k2++, n2++)
          if (k2 in O2)
            createProperty(result, n2, O2[k2]);
        result.length = n2;
        return result;
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/slice.js
var require_slice = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/slice.js"(exports, module) {
    init_react();
    require_es_array_slice();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").slice;
  }
});

// node_modules/core-js-pure/es/instance/slice.js
var require_slice2 = __commonJS({
  "node_modules/core-js-pure/es/instance/slice.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_slice();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.slice;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.slice ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/slice.js
var require_slice3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/slice.js"(exports, module) {
    init_react();
    var parent = require_slice2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js
var require_slice4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js"(exports, module) {
    init_react();
    module.exports = require_slice3();
  }
});

// node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js
var require_call_with_safe_iteration_closing = __commonJS({
  "node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js"(exports, module) {
    init_react();
    var anObject = require_an_object();
    var iteratorClose = require_iterator_close();
    module.exports = function(iterator, fn2, value, ENTRIES) {
      try {
        return ENTRIES ? fn2(anObject(value)[0], value[1]) : fn2(value);
      } catch (error) {
        iteratorClose(iterator, "throw", error);
      }
    };
  }
});

// node_modules/core-js-pure/internals/array-from.js
var require_array_from = __commonJS({
  "node_modules/core-js-pure/internals/array-from.js"(exports, module) {
    "use strict";
    init_react();
    var global2 = require_global();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var toObject = require_to_object();
    var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
    var isArrayIteratorMethod = require_is_array_iterator_method();
    var isConstructor = require_is_constructor();
    var lengthOfArrayLike = require_length_of_array_like();
    var createProperty = require_create_property();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var Array2 = global2.Array;
    module.exports = function from2(arrayLike) {
      var O2 = toObject(arrayLike);
      var IS_CONSTRUCTOR = isConstructor(this);
      var argumentsLength = arguments.length;
      var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
      var mapping = mapfn !== void 0;
      if (mapping)
        mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
      var iteratorMethod = getIteratorMethod(O2);
      var index = 0;
      var length2, result, step, iterator, next2, value;
      if (iteratorMethod && !(this == Array2 && isArrayIteratorMethod(iteratorMethod))) {
        iterator = getIterator(O2, iteratorMethod);
        next2 = iterator.next;
        result = IS_CONSTRUCTOR ? new this() : [];
        for (; !(step = call(next2, iterator)).done; index++) {
          value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
          createProperty(result, index, value);
        }
      } else {
        length2 = lengthOfArrayLike(O2);
        result = IS_CONSTRUCTOR ? new this(length2) : Array2(length2);
        for (; length2 > index; index++) {
          value = mapping ? mapfn(O2[index], index) : O2[index];
          createProperty(result, index, value);
        }
      }
      result.length = index;
      return result;
    };
  }
});

// node_modules/core-js-pure/modules/es.array.from.js
var require_es_array_from = __commonJS({
  "node_modules/core-js-pure/modules/es.array.from.js"() {
    init_react();
    var $ = require_export();
    var from2 = require_array_from();
    var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
    var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
      Array.from(iterable);
    });
    $({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
      from: from2
    });
  }
});

// node_modules/core-js-pure/es/array/from.js
var require_from = __commonJS({
  "node_modules/core-js-pure/es/array/from.js"(exports, module) {
    init_react();
    require_es_string_iterator();
    require_es_array_from();
    var path = require_path();
    module.exports = path.Array.from;
  }
});

// node_modules/core-js-pure/stable/array/from.js
var require_from2 = __commonJS({
  "node_modules/core-js-pure/stable/array/from.js"(exports, module) {
    init_react();
    var parent = require_from();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/array/from.js
var require_from3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/array/from.js"(exports, module) {
    init_react();
    module.exports = require_from2();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/symbol.js
var require_symbol6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/symbol.js"(exports, module) {
    init_react();
    module.exports = require_symbol2();
  }
});

// node_modules/core-js-pure/es/get-iterator-method.js
var require_get_iterator_method2 = __commonJS({
  "node_modules/core-js-pure/es/get-iterator-method.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_string_iterator();
    var getIteratorMethod = require_get_iterator_method();
    module.exports = getIteratorMethod;
  }
});

// node_modules/core-js-pure/stable/get-iterator-method.js
var require_get_iterator_method3 = __commonJS({
  "node_modules/core-js-pure/stable/get-iterator-method.js"(exports, module) {
    init_react();
    var parent = require_get_iterator_method2();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/get-iterator-method.js
var require_get_iterator_method4 = __commonJS({
  "node_modules/core-js-pure/actual/get-iterator-method.js"(exports, module) {
    init_react();
    var parent = require_get_iterator_method3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/get-iterator-method.js
var require_get_iterator_method5 = __commonJS({
  "node_modules/core-js-pure/features/get-iterator-method.js"(exports, module) {
    init_react();
    var parent = require_get_iterator_method4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js
var require_get_iterator_method6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js"(exports, module) {
    init_react();
    module.exports = require_get_iterator_method5();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js
var require_index_of7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js"(exports, module) {
    init_react();
    module.exports = require_index_of3();
  }
});

// node_modules/core-js-pure/modules/es.object.freeze.js
var require_es_object_freeze = __commonJS({
  "node_modules/core-js-pure/modules/es.object.freeze.js"() {
    init_react();
    var $ = require_export();
    var FREEZING = require_freezing();
    var fails = require_fails();
    var isObject = require_is_object();
    var onFreeze = require_internal_metadata().onFreeze;
    var $freeze = Object.freeze;
    var FAILS_ON_PRIMITIVES = fails(function() {
      $freeze(1);
    });
    $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
      freeze: function freeze(it) {
        return $freeze && isObject(it) ? $freeze(onFreeze(it)) : it;
      }
    });
  }
});

// node_modules/core-js-pure/es/object/freeze.js
var require_freeze = __commonJS({
  "node_modules/core-js-pure/es/object/freeze.js"(exports, module) {
    init_react();
    require_es_object_freeze();
    var path = require_path();
    module.exports = path.Object.freeze;
  }
});

// node_modules/core-js-pure/stable/object/freeze.js
var require_freeze2 = __commonJS({
  "node_modules/core-js-pure/stable/object/freeze.js"(exports, module) {
    init_react();
    var parent = require_freeze();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/freeze.js
var require_freeze3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/freeze.js"(exports, module) {
    init_react();
    module.exports = require_freeze2();
  }
});

// node_modules/core-js-pure/modules/es.json.stringify.js
var require_es_json_stringify = __commonJS({
  "node_modules/core-js-pure/modules/es.json.stringify.js"() {
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var getBuiltIn = require_get_built_in();
    var apply = require_function_apply();
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var Array2 = global2.Array;
    var $stringify = getBuiltIn("JSON", "stringify");
    var exec = uncurryThis(/./.exec);
    var charAt = uncurryThis("".charAt);
    var charCodeAt = uncurryThis("".charCodeAt);
    var replace2 = uncurryThis("".replace);
    var numberToString = uncurryThis(1 .toString);
    var tester = /[\uD800-\uDFFF]/g;
    var low = /^[\uD800-\uDBFF]$/;
    var hi = /^[\uDC00-\uDFFF]$/;
    var fix = function(match2, offset, string) {
      var prev2 = charAt(string, offset - 1);
      var next2 = charAt(string, offset + 1);
      if (exec(low, match2) && !exec(hi, next2) || exec(hi, match2) && !exec(low, prev2)) {
        return "\\u" + numberToString(charCodeAt(match2, 0), 16);
      }
      return match2;
    };
    var FORCED = fails(function() {
      return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
    });
    if ($stringify) {
      $({ target: "JSON", stat: true, forced: FORCED }, {
        stringify: function stringify2(it, replacer, space) {
          for (var i = 0, l2 = arguments.length, args = Array2(l2); i < l2; i++)
            args[i] = arguments[i];
          var result = apply($stringify, null, args);
          return typeof result == "string" ? replace2(result, tester, fix) : result;
        }
      });
    }
  }
});

// node_modules/core-js-pure/es/json/stringify.js
var require_stringify = __commonJS({
  "node_modules/core-js-pure/es/json/stringify.js"(exports, module) {
    init_react();
    require_es_json_stringify();
    var path = require_path();
    var apply = require_function_apply();
    if (!path.JSON)
      path.JSON = { stringify: JSON.stringify };
    module.exports = function stringify2(it, replacer, space) {
      return apply(path.JSON.stringify, null, arguments);
    };
  }
});

// node_modules/core-js-pure/stable/json/stringify.js
var require_stringify2 = __commonJS({
  "node_modules/core-js-pure/stable/json/stringify.js"(exports, module) {
    init_react();
    var parent = require_stringify();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/json/stringify.js
var require_stringify3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/json/stringify.js"(exports, module) {
    init_react();
    module.exports = require_stringify2();
  }
});

// node_modules/core-js-pure/modules/es.array.includes.js
var require_es_array_includes = __commonJS({
  "node_modules/core-js-pure/modules/es.array.includes.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $includes = require_array_includes().includes;
    var addToUnscopables = require_add_to_unscopables();
    $({ target: "Array", proto: true }, {
      includes: function includes(el) {
        return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
    addToUnscopables("includes");
  }
});

// node_modules/core-js-pure/es/array/virtual/includes.js
var require_includes = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/includes.js"(exports, module) {
    init_react();
    require_es_array_includes();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").includes;
  }
});

// node_modules/core-js-pure/internals/is-regexp.js
var require_is_regexp = __commonJS({
  "node_modules/core-js-pure/internals/is-regexp.js"(exports, module) {
    init_react();
    var isObject = require_is_object();
    var classof = require_classof_raw();
    var wellKnownSymbol = require_well_known_symbol();
    var MATCH = wellKnownSymbol("match");
    module.exports = function(it) {
      var isRegExp;
      return isObject(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) == "RegExp");
    };
  }
});

// node_modules/core-js-pure/internals/not-a-regexp.js
var require_not_a_regexp = __commonJS({
  "node_modules/core-js-pure/internals/not-a-regexp.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isRegExp = require_is_regexp();
    var TypeError2 = global2.TypeError;
    module.exports = function(it) {
      if (isRegExp(it)) {
        throw TypeError2("The method doesn't accept regular expressions");
      }
      return it;
    };
  }
});

// node_modules/core-js-pure/internals/correct-is-regexp-logic.js
var require_correct_is_regexp_logic = __commonJS({
  "node_modules/core-js-pure/internals/correct-is-regexp-logic.js"(exports, module) {
    init_react();
    var wellKnownSymbol = require_well_known_symbol();
    var MATCH = wellKnownSymbol("match");
    module.exports = function(METHOD_NAME) {
      var regexp = /./;
      try {
        "/./"[METHOD_NAME](regexp);
      } catch (error1) {
        try {
          regexp[MATCH] = false;
          return "/./"[METHOD_NAME](regexp);
        } catch (error2) {
        }
      }
      return false;
    };
  }
});

// node_modules/core-js-pure/modules/es.string.includes.js
var require_es_string_includes = __commonJS({
  "node_modules/core-js-pure/modules/es.string.includes.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var notARegExp = require_not_a_regexp();
    var requireObjectCoercible = require_require_object_coercible();
    var toString2 = require_to_string();
    var correctIsRegExpLogic = require_correct_is_regexp_logic();
    var stringIndexOf = uncurryThis("".indexOf);
    $({ target: "String", proto: true, forced: !correctIsRegExpLogic("includes") }, {
      includes: function includes(searchString) {
        return !!~stringIndexOf(toString2(requireObjectCoercible(this)), toString2(notARegExp(searchString)), arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/string/virtual/includes.js
var require_includes2 = __commonJS({
  "node_modules/core-js-pure/es/string/virtual/includes.js"(exports, module) {
    init_react();
    require_es_string_includes();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("String").includes;
  }
});

// node_modules/core-js-pure/es/instance/includes.js
var require_includes3 = __commonJS({
  "node_modules/core-js-pure/es/instance/includes.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var arrayMethod = require_includes();
    var stringMethod = require_includes2();
    var ArrayPrototype = Array.prototype;
    var StringPrototype = String.prototype;
    module.exports = function(it) {
      var own = it.includes;
      if (it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.includes)
        return arrayMethod;
      if (typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.includes) {
        return stringMethod;
      }
      return own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/includes.js
var require_includes4 = __commonJS({
  "node_modules/core-js-pure/stable/instance/includes.js"(exports, module) {
    init_react();
    var parent = require_includes3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/includes.js
var require_includes5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/includes.js"(exports, module) {
    init_react();
    module.exports = require_includes4();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/get-prototype-of.js
var require_get_prototype_of6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/get-prototype-of.js"(exports, module) {
    init_react();
    module.exports = require_get_prototype_of2();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js
var require_create6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js"(exports, module) {
    init_react();
    module.exports = require_create2();
  }
});

// node_modules/core-js-pure/modules/es.array.find.js
var require_es_array_find = __commonJS({
  "node_modules/core-js-pure/modules/es.array.find.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $find = require_array_iteration().find;
    var addToUnscopables = require_add_to_unscopables();
    var FIND = "find";
    var SKIPS_HOLES = true;
    if (FIND in [])
      Array(1)[FIND](function() {
        SKIPS_HOLES = false;
      });
    $({ target: "Array", proto: true, forced: SKIPS_HOLES }, {
      find: function find(callbackfn) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
    addToUnscopables(FIND);
  }
});

// node_modules/core-js-pure/es/array/virtual/find.js
var require_find = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/find.js"(exports, module) {
    init_react();
    require_es_array_find();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").find;
  }
});

// node_modules/core-js-pure/es/instance/find.js
var require_find2 = __commonJS({
  "node_modules/core-js-pure/es/instance/find.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_find();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.find;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.find ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/find.js
var require_find3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/find.js"(exports, module) {
    init_react();
    var parent = require_find2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/find.js
var require_find4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/find.js"(exports, module) {
    init_react();
    module.exports = require_find3();
  }
});

// node_modules/core-js-pure/modules/es.array.map.js
var require_es_array_map = __commonJS({
  "node_modules/core-js-pure/modules/es.array.map.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $map = require_array_iteration().map;
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
    $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      map: function map(callbackfn) {
        return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/map.js
var require_map6 = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/map.js"(exports, module) {
    init_react();
    require_es_array_map();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").map;
  }
});

// node_modules/core-js-pure/es/instance/map.js
var require_map7 = __commonJS({
  "node_modules/core-js-pure/es/instance/map.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_map6();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.map;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.map ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/map.js
var require_map8 = __commonJS({
  "node_modules/core-js-pure/stable/instance/map.js"(exports, module) {
    init_react();
    var parent = require_map7();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js
var require_map9 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js"(exports, module) {
    init_react();
    module.exports = require_map8();
  }
});

// node_modules/moralis/lib/browser/CoreManager.js
var require_CoreManager = __commonJS({
  "node_modules/moralis/lib/browser/CoreManager.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _forEach = _interopRequireDefault(require_for_each4());
    var _concat = _interopRequireDefault(require_concat4());
    var config = {
      IS_NODE: typeof process !== "undefined" && !!process.versions && !!process.versions.node && !process.versions.electron,
      REQUEST_ATTEMPT_LIMIT: 5,
      REQUEST_BATCH_SIZE: 20,
      REQUEST_HEADERS: {},
      SERVER_URL: "https://api.parse.com/1",
      SERVER_AUTH_TYPE: null,
      SERVER_AUTH_TOKEN: null,
      LIVEQUERY_SERVER_URL: null,
      ENCRYPTED_KEY: null,
      VERSION: "js".concat("1.3.5"),
      APPLICATION_ID: null,
      JAVASCRIPT_KEY: null,
      MASTER_KEY: null,
      USE_MASTER_KEY: false,
      PERFORM_USER_REWRITE: true,
      FORCE_REVOCABLE_SESSION: false,
      ENCRYPTED_USER: false,
      IDEMPOTENCY: false
    };
    function requireMethods(name2, methods, controller) {
      (0, _forEach.default)(methods).call(methods, function(func) {
        if (typeof controller[func] !== "function") {
          var _context;
          throw new Error((0, _concat.default)(_context = "".concat(name2, " must implement ")).call(_context, func, "()"));
        }
      });
    }
    module.exports = {
      get: function(key) {
        if (config.hasOwnProperty(key)) {
          return config[key];
        }
        throw new Error("Configuration key not found: ".concat(key));
      },
      set: function(key, value) {
        config[key] = value;
      },
      setAnalyticsController: function(controller) {
        requireMethods("AnalyticsController", ["track"], controller);
        config.AnalyticsController = controller;
      },
      getAnalyticsController: function() {
        return config.AnalyticsController;
      },
      setCloudController: function(controller) {
        requireMethods("CloudController", ["run", "getJobsData", "startJob"], controller);
        config.CloudController = controller;
      },
      getCloudController: function() {
        return config.CloudController;
      },
      setConfigController: function(controller) {
        requireMethods("ConfigController", ["current", "get", "save"], controller);
        config.ConfigController = controller;
      },
      getConfigController: function() {
        return config.ConfigController;
      },
      setCryptoController: function(controller) {
        requireMethods("CryptoController", ["encrypt", "decrypt"], controller);
        config.CryptoController = controller;
      },
      getCryptoController: function() {
        return config.CryptoController;
      },
      setFileController: function(controller) {
        requireMethods("FileController", ["saveFile", "saveBase64"], controller);
        config.FileController = controller;
      },
      getFileController: function() {
        return config.FileController;
      },
      setInstallationController: function(controller) {
        requireMethods("InstallationController", ["currentInstallationId"], controller);
        config.InstallationController = controller;
      },
      getInstallationController: function() {
        return config.InstallationController;
      },
      setObjectController: function(controller) {
        requireMethods("ObjectController", ["save", "fetch", "destroy"], controller);
        config.ObjectController = controller;
      },
      getObjectController: function() {
        return config.ObjectController;
      },
      setObjectStateController: function(controller) {
        requireMethods("ObjectStateController", ["getState", "initializeState", "removeState", "getServerData", "setServerData", "getPendingOps", "setPendingOp", "pushPendingState", "popPendingState", "mergeFirstPendingState", "getObjectCache", "estimateAttribute", "estimateAttributes", "commitServerChanges", "enqueueTask", "clearAllState"], controller);
        config.ObjectStateController = controller;
      },
      getObjectStateController: function() {
        return config.ObjectStateController;
      },
      setPushController: function(controller) {
        requireMethods("PushController", ["send"], controller);
        config.PushController = controller;
      },
      getPushController: function() {
        return config.PushController;
      },
      setQueryController: function(controller) {
        requireMethods("QueryController", ["find", "aggregate"], controller);
        config.QueryController = controller;
      },
      getQueryController: function() {
        return config.QueryController;
      },
      setRESTController: function(controller) {
        requireMethods("RESTController", ["request", "ajax"], controller);
        config.RESTController = controller;
      },
      getRESTController: function() {
        return config.RESTController;
      },
      setSchemaController: function(controller) {
        requireMethods("SchemaController", ["get", "create", "update", "delete", "send", "purge"], controller);
        config.SchemaController = controller;
      },
      getSchemaController: function() {
        return config.SchemaController;
      },
      setSessionController: function(controller) {
        requireMethods("SessionController", ["getSession"], controller);
        config.SessionController = controller;
      },
      getSessionController: function() {
        return config.SessionController;
      },
      setStorageController: function(controller) {
        if (controller.async) {
          requireMethods("An async StorageController", ["getItemAsync", "setItemAsync", "removeItemAsync", "getAllKeysAsync"], controller);
        } else {
          requireMethods("A synchronous StorageController", ["getItem", "setItem", "removeItem", "getAllKeys"], controller);
        }
        config.StorageController = controller;
      },
      setLocalDatastoreController: function(controller) {
        requireMethods("LocalDatastoreController", ["pinWithName", "fromPinWithName", "unPinWithName", "getAllContents", "clear"], controller);
        config.LocalDatastoreController = controller;
      },
      getLocalDatastoreController: function() {
        return config.LocalDatastoreController;
      },
      setLocalDatastore: function(store) {
        config.LocalDatastore = store;
      },
      getLocalDatastore: function() {
        return config.LocalDatastore;
      },
      getStorageController: function() {
        return config.StorageController;
      },
      setAsyncStorage: function(storage) {
        config.AsyncStorage = storage;
      },
      getAsyncStorage: function() {
        return config.AsyncStorage;
      },
      setWebSocketController: function(controller) {
        config.WebSocketController = controller;
      },
      getWebSocketController: function() {
        return config.WebSocketController;
      },
      setUserController: function(controller) {
        requireMethods("UserController", ["setCurrentUser", "currentUser", "currentUserAsync", "signUp", "logIn", "become", "logOut", "me", "requestPasswordReset", "upgradeToRevocableSession", "requestEmailVerification", "verifyPassword", "linkWith"], controller);
        config.UserController = controller;
      },
      getUserController: function() {
        return config.UserController;
      },
      setLiveQueryController: function(controller) {
        requireMethods("LiveQueryController", ["setDefaultLiveQueryClient", "getDefaultLiveQueryClient", "_clearCachedDefaultClient"], controller);
        config.LiveQueryController = controller;
      },
      getLiveQueryController: function() {
        return config.LiveQueryController;
      },
      setHooksController: function(controller) {
        requireMethods("HooksController", ["create", "get", "update", "remove"], controller);
        config.HooksController = controller;
      },
      getHooksController: function() {
        return config.HooksController;
      }
    };
  }
});

// node_modules/moralis/lib/browser/ParseFileEncode.js
var require_ParseFileEncode = __commonJS({
  "node_modules/moralis/lib/browser/ParseFileEncode.js"(exports, module) {
    "use strict";
    init_react();
    function b64Digit(number) {
      if (number < 26) {
        return String.fromCharCode(65 + number);
      }
      if (number < 52) {
        return String.fromCharCode(97 + (number - 26));
      }
      if (number < 62) {
        return String.fromCharCode(48 + (number - 52));
      }
      if (number === 62) {
        return "+";
      }
      if (number === 63) {
        return "/";
      }
      throw new TypeError("Tried to encode large digit ".concat(number, " in base64."));
    }
    function encodeBase64(bytes) {
      var chunks = [];
      chunks.length = Math.ceil(bytes.length / 3);
      for (var i = 0; i < chunks.length; i++) {
        var b1 = bytes[i * 3];
        var b2 = bytes[i * 3 + 1] || 0;
        var b3 = bytes[i * 3 + 2] || 0;
        var has2 = i * 3 + 1 < bytes.length;
        var has3 = i * 3 + 2 < bytes.length;
        chunks[i] = [b64Digit(b1 >> 2 & 63), b64Digit(b1 << 4 & 48 | b2 >> 4 & 15), has2 ? b64Digit(b2 << 2 & 60 | b3 >> 6 & 3) : "=", has3 ? b64Digit(b3 & 63) : "="].join("");
      }
      return chunks.join("");
    }
    module.exports = {
      encodeBase64,
      b64Digit
    };
  }
});

// node_modules/core-js-pure/actual/array/is-array.js
var require_is_array5 = __commonJS({
  "node_modules/core-js-pure/actual/array/is-array.js"(exports, module) {
    init_react();
    var parent = require_is_array3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/array/is-array.js
var require_is_array6 = __commonJS({
  "node_modules/core-js-pure/features/array/is-array.js"(exports, module) {
    init_react();
    var parent = require_is_array5();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/array/is-array.js
var require_is_array7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/array/is-array.js"(exports, module) {
    init_react();
    module.exports = require_is_array6();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js
var require_arrayWithHoles = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js"(exports, module) {
    init_react();
    var _Array$isArray = require_is_array7();
    function _arrayWithHoles(arr) {
      if (_Array$isArray(arr))
        return arr;
    }
    module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js
var require_iterableToArrayLimit = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js"(exports, module) {
    init_react();
    var _Symbol = require_symbol5();
    var _getIteratorMethod = require_get_iterator_method6();
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof _Symbol !== "undefined" && _getIteratorMethod(arr) || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/actual/instance/slice.js
var require_slice5 = __commonJS({
  "node_modules/core-js-pure/actual/instance/slice.js"(exports, module) {
    init_react();
    var parent = require_slice3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/instance/slice.js
var require_slice6 = __commonJS({
  "node_modules/core-js-pure/features/instance/slice.js"(exports, module) {
    init_react();
    var parent = require_slice5();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/instance/slice.js
var require_slice7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/instance/slice.js"(exports, module) {
    init_react();
    module.exports = require_slice6();
  }
});

// node_modules/core-js-pure/actual/array/from.js
var require_from4 = __commonJS({
  "node_modules/core-js-pure/actual/array/from.js"(exports, module) {
    init_react();
    var parent = require_from2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/array/from.js
var require_from5 = __commonJS({
  "node_modules/core-js-pure/features/array/from.js"(exports, module) {
    init_react();
    var parent = require_from4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/array/from.js
var require_from6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/array/from.js"(exports, module) {
    init_react();
    module.exports = require_from5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js
var require_arrayLikeToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js"(exports, module) {
    init_react();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js
var require_unsupportedIterableToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js"(exports, module) {
    init_react();
    var _sliceInstanceProperty = require_slice7();
    var _Array$from = require_from6();
    var arrayLikeToArray = require_arrayLikeToArray();
    function _unsupportedIterableToArray(o2, minLen) {
      var _context;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty(_context = Object.prototype.toString.call(o2)).call(_context, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return arrayLikeToArray(o2, minLen);
    }
    module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js
var require_nonIterableRest = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js"(exports, module) {
    init_react();
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js
var require_slicedToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js"(exports, module) {
    init_react();
    var arrayWithHoles = require_arrayWithHoles();
    var iterableToArrayLimit = require_iterableToArrayLimit();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableRest = require_nonIterableRest();
    function _slicedToArray(arr, i) {
      return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
    }
    module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/moralis/lib/browser/ParseFileController.default.js
var require_ParseFileController_default = __commonJS({
  "node_modules/moralis/lib/browser/ParseFileController.default.js"(exports, module) {
    "use strict";
    init_react();
    var _Object$keys = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _promise = _interopRequireDefault(require_promise3());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseFileEncode = require_ParseFileEncode();
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var _context2, _context3;
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? _forEachInstanceProperty(_context2 = ownKeys4(Object(source), true)).call(_context2, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context3 = ownKeys4(Object(source))).call(_context3, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var XHR = null;
    if (typeof XMLHttpRequest !== "undefined") {
      XHR = XMLHttpRequest;
    }
    var DefaultController = {
      saveFile: function() {
        var _saveFile = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name2, source, options) {
          var base64Data, _base64Data$split, _base64Data$split2, first, second, data, newSource;
          return _regenerator.default.wrap(function(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(source.format !== "file")) {
                    _context.next = 2;
                    break;
                  }
                  throw new Error("saveFile can only be used with File-type sources.");
                case 2:
                  _context.next = 4;
                  return new _promise.default(function(res, rej) {
                    var reader = new FileReader();
                    reader.onload = function() {
                      return res(reader.result);
                    };
                    reader.onerror = function(error) {
                      return rej(error);
                    };
                    reader.readAsDataURL(source.file);
                  });
                case 4:
                  base64Data = _context.sent;
                  _base64Data$split = base64Data.split(","), _base64Data$split2 = (0, _slicedToArray2.default)(_base64Data$split, 2), first = _base64Data$split2[0], second = _base64Data$split2[1];
                  data = second ? second : first;
                  newSource = {
                    format: "base64",
                    base64: data,
                    type: source.type || (source.file ? source.file.type : null)
                  };
                  _context.next = 10;
                  return DefaultController.saveBase64(name2, newSource, options);
                case 10:
                  return _context.abrupt("return", _context.sent);
                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return function() {
          return _saveFile.apply(this, arguments);
        };
      }(),
      saveBase64: function(name2, source, options) {
        if (source.format !== "base64") {
          throw new Error("saveBase64 can only be used with Base64-type sources.");
        }
        var data = {
          base64: source.base64,
          fileData: {
            ipfs: options.ipfs,
            metadata: _objectSpread4({}, options.metadata),
            tags: _objectSpread4({}, options.tags)
          }
        };
        delete options.metadata;
        delete options.tags;
        if (source.type) {
          data._ContentType = source.type;
        }
        var path = "files/".concat(name2);
        return _CoreManager.default.getRESTController().request("POST", path, data, options);
      },
      download: function(uri, options) {
        if (XHR) {
          return this.downloadAjax(uri, options);
        }
        return _promise.default.reject("Cannot make a request: No definition of XMLHttpRequest was found.");
      },
      downloadAjax: function(uri, options) {
        return new _promise.default(function(resolve, reject) {
          var xhr = new XHR();
          xhr.open("GET", uri, true);
          xhr.responseType = "arraybuffer";
          xhr.onerror = function(e) {
            reject(e);
          };
          xhr.onreadystatechange = function() {
            if (xhr.readyState !== xhr.DONE) {
              return;
            }
            if (!this.response) {
              return resolve({});
            }
            var bytes = new Uint8Array(this.response);
            resolve({
              base64: (0, _ParseFileEncode.encodeBase64)(bytes),
              contentType: xhr.getResponseHeader("content-type")
            });
          };
          options.requestTask(xhr);
          xhr.send();
        });
      },
      deleteFile: function(name2, options) {
        var headers = {
          "X-Parse-Application-ID": _CoreManager.default.get("APPLICATION_ID")
        };
        if (options.useMasterKey) {
          headers["X-Parse-Master-Key"] = _CoreManager.default.get("MASTER_KEY");
        }
        var url = _CoreManager.default.get("SERVER_URL");
        if (url[url.length - 1] !== "/") {
          url += "/";
        }
        url += "files/".concat(name2);
        return _CoreManager.default.getRESTController().ajax("DELETE", url, "", headers).catch(function(response) {
          if (!response || response === "SyntaxError: Unexpected end of JSON input") {
            return _promise.default.resolve();
          }
          return _CoreManager.default.getRESTController().handleError(response);
        });
      },
      _setXHR: function(xhr) {
        XHR = xhr;
      },
      _getXHR: function() {
        return XHR;
      }
    };
    module.exports = DefaultController;
  }
});

// node_modules/moralis/lib/browser/ParseFile.js
var require_ParseFile = __commonJS({
  "node_modules/moralis/lib/browser/ParseFile.js"(exports) {
    "use strict";
    init_react();
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty2 = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _slice = _interopRequireDefault(require_slice4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseFileEncode = require_ParseFileEncode();
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var _context4, _context5;
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? _forEachInstanceProperty2(_context4 = ownKeys4(Object(source), true)).call(_context4, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context5 = ownKeys4(Object(source))).call(_context5, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var ParseError = require_ParseError().default;
    var dataUriRegexp = /^data:([a-zA-Z]+\/[-a-zA-Z0-9+.]+)(;charset=[a-zA-Z0-9\-/]*)?;base64,/;
    var ParseFile = /* @__PURE__ */ function() {
      function ParseFile2(name2, data, type, metadata, tags) {
        (0, _classCallCheck2.default)(this, ParseFile2);
        (0, _defineProperty2.default)(this, "_name", void 0);
        (0, _defineProperty2.default)(this, "_url", void 0);
        (0, _defineProperty2.default)(this, "_hash", void 0);
        (0, _defineProperty2.default)(this, "_ipfs", void 0);
        (0, _defineProperty2.default)(this, "_source", void 0);
        (0, _defineProperty2.default)(this, "_previousSave", void 0);
        (0, _defineProperty2.default)(this, "_data", void 0);
        (0, _defineProperty2.default)(this, "_requestTask", void 0);
        (0, _defineProperty2.default)(this, "_metadata", void 0);
        (0, _defineProperty2.default)(this, "_tags", void 0);
        var specifiedType = type || "";
        this._name = name2;
        this._metadata = metadata || {};
        this._tags = tags || {};
        if (data !== void 0) {
          if ((0, _isArray.default)(data)) {
            this._data = ParseFile2.encodeBase64(data);
            this._source = {
              format: "base64",
              base64: this._data,
              type: specifiedType
            };
          } else if (typeof Blob !== "undefined" && data instanceof Blob) {
            this._source = {
              format: "file",
              file: data,
              type: specifiedType
            };
          } else if (data && typeof data.uri === "string" && data.uri !== void 0) {
            this._source = {
              format: "uri",
              uri: data.uri,
              type: specifiedType
            };
          } else if (data && typeof data.base64 === "string") {
            var base64 = data.base64;
            var commaIndex = (0, _indexOf.default)(base64).call(base64, ",");
            if (commaIndex !== -1) {
              var matches = dataUriRegexp.exec((0, _slice.default)(base64).call(base64, 0, commaIndex + 1));
              this._data = (0, _slice.default)(base64).call(base64, commaIndex + 1);
              this._source = {
                format: "base64",
                base64: this._data,
                type: matches[1]
              };
            } else {
              this._data = base64;
              this._source = {
                format: "base64",
                base64,
                type: specifiedType
              };
            }
          } else {
            throw new TypeError("Cannot create a Parse.File with that data.");
          }
        }
      }
      (0, _createClass2.default)(ParseFile2, [{
        key: "getData",
        value: function() {
          var _getData = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
            var _this = this;
            var options, controller, result;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!this._data) {
                      _context.next = 2;
                      break;
                    }
                    return _context.abrupt("return", this._data);
                  case 2:
                    if (this._url) {
                      _context.next = 4;
                      break;
                    }
                    throw new Error("Cannot retrieve data for unsaved ParseFile.");
                  case 4:
                    options = {
                      requestTask: function(task) {
                        return _this._requestTask = task;
                      }
                    };
                    controller = _CoreManager.default.getFileController();
                    _context.next = 8;
                    return controller.download(this._url, options);
                  case 8:
                    result = _context.sent;
                    this._data = result.base64;
                    return _context.abrupt("return", this._data);
                  case 11:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _getData.apply(this, arguments);
          };
        }()
      }, {
        key: "name",
        value: function() {
          return this._name;
        }
      }, {
        key: "url",
        value: function(options) {
          options = options || {};
          if (!this._url) {
            return;
          }
          if (options.forceSecure) {
            return this._url.replace(/^http:\/\//i, "https://");
          }
          return this._url;
        }
      }, {
        key: "ipfs",
        value: function() {
          return this._ipfs;
        }
      }, {
        key: "hash",
        value: function() {
          return this._hash;
        }
      }, {
        key: "metadata",
        value: function() {
          return this._metadata;
        }
      }, {
        key: "tags",
        value: function() {
          return this._tags;
        }
      }, {
        key: "save",
        value: function(options) {
          var _this2 = this;
          options = options || {};
          options.requestTask = function(task) {
            return _this2._requestTask = task;
          };
          options.metadata = this._metadata;
          options.tags = this._tags;
          var controller = _CoreManager.default.getFileController();
          if (!this._previousSave) {
            if (this._source.format === "file") {
              this._previousSave = controller.saveFile(this._name, this._source, options).then(function(res) {
                _this2._name = res.name;
                _this2._url = res.url;
                _this2._hash = res.hash;
                _this2._ipfs = res.ipfs;
                _this2._data = null;
                _this2._requestTask = null;
                return _this2;
              });
            } else if (this._source.format === "uri") {
              this._previousSave = controller.download(this._source.uri, options).then(function(result) {
                if (!(result && result.base64)) {
                  return {};
                }
                var newSource = {
                  format: "base64",
                  base64: result.base64,
                  type: result.contentType
                };
                _this2._data = result.base64;
                _this2._requestTask = null;
                return controller.saveBase64(_this2._name, newSource, options);
              }).then(function(res) {
                _this2._name = res.name;
                _this2._url = res.url;
                _this2._hash = res.hash;
                _this2._ipfs = res.ipfs;
                _this2._requestTask = null;
                return _this2;
              });
            } else {
              this._previousSave = controller.saveBase64(this._name, this._source, options).then(function(res) {
                _this2._name = res.name;
                _this2._url = res.url;
                _this2._hash = res.hash;
                _this2._ipfs = res.ipfs;
                _this2._requestTask = null;
                return _this2;
              });
            }
          }
          if (this._previousSave) {
            return this._previousSave;
          }
        }
      }, {
        key: "saveIPFS",
        value: function(options) {
          return this.save(_objectSpread4(_objectSpread4({}, options), {}, {
            ipfs: true
          }));
        }
      }, {
        key: "cancel",
        value: function() {
          if (this._requestTask && typeof this._requestTask.abort === "function") {
            this._requestTask.abort();
          }
          this._requestTask = null;
        }
      }, {
        key: "destroy",
        value: function() {
          var _this3 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          if (!this._name) {
            throw new ParseError(ParseError.FILE_DELETE_UNNAMED_ERROR, "Cannot delete an unnamed file.");
          }
          var destroyOptions = {
            useMasterKey: true
          };
          if (options.hasOwnProperty("useMasterKey")) {
            destroyOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getFileController();
          return controller.deleteFile(this._name, destroyOptions).then(function() {
            _this3._data = null;
            _this3._requestTask = null;
            return _this3;
          });
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __type: "File",
            name: this._name,
            url: this._url,
            ipfs: this._ipfs,
            hash: this._hash
          };
        }
      }, {
        key: "equals",
        value: function(other) {
          if (this === other) {
            return true;
          }
          return other instanceof ParseFile2 && this.name() === other.name() && this.url() === other.url() && typeof this.url() !== "undefined";
        }
      }, {
        key: "setMetadata",
        value: function(metadata) {
          var _this4 = this;
          if (metadata && (0, _typeof2.default)(metadata) === "object") {
            var _context2;
            (0, _forEach.default)(_context2 = (0, _keys.default)(metadata)).call(_context2, function(key) {
              _this4.addMetadata(key, metadata[key]);
            });
          }
        }
      }, {
        key: "addMetadata",
        value: function(key, value) {
          if (typeof key === "string") {
            this._metadata[key] = value;
          }
        }
      }, {
        key: "setTags",
        value: function(tags) {
          var _this5 = this;
          if (tags && (0, _typeof2.default)(tags) === "object") {
            var _context3;
            (0, _forEach.default)(_context3 = (0, _keys.default)(tags)).call(_context3, function(key) {
              _this5.addTag(key, tags[key]);
            });
          }
        }
      }, {
        key: "addTag",
        value: function(key, value) {
          if (typeof key === "string") {
            this._tags[key] = value;
          }
        }
      }], [{
        key: "fromJSON",
        value: function(obj) {
          if (obj.__type !== "File") {
            throw new TypeError("JSON object does not represent a ParseFile");
          }
          var file = new ParseFile2(obj.name);
          file._url = obj.url;
          file._hash = obj.hash;
          file._ipfs = obj.ipfs;
          return file;
        }
      }, {
        key: "encodeBase64",
        value: function(bytes) {
          return (0, _ParseFileEncode.encodeBase64)(bytes);
        }
      }]);
      return ParseFile2;
    }();
    _CoreManager.default.setFileController(require_ParseFileController_default());
    var _default = ParseFile;
    exports.default = _default;
    exports.b64Digit = _ParseFileEncode.b64Digit;
  }
});

// node_modules/core-js-pure/modules/es.array.splice.js
var require_es_array_splice = __commonJS({
  "node_modules/core-js-pure/modules/es.array.splice.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var toAbsoluteIndex = require_to_absolute_index();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var lengthOfArrayLike = require_length_of_array_like();
    var toObject = require_to_object();
    var arraySpeciesCreate = require_array_species_create();
    var createProperty = require_create_property();
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");
    var TypeError2 = global2.TypeError;
    var max = Math.max;
    var min = Math.min;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = "Maximum allowed length exceeded";
    $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      splice: function splice(start, deleteCount) {
        var O2 = toObject(this);
        var len = lengthOfArrayLike(O2);
        var actualStart = toAbsoluteIndex(start, len);
        var argumentsLength = arguments.length;
        var insertCount, actualDeleteCount, A2, k2, from2, to;
        if (argumentsLength === 0) {
          insertCount = actualDeleteCount = 0;
        } else if (argumentsLength === 1) {
          insertCount = 0;
          actualDeleteCount = len - actualStart;
        } else {
          insertCount = argumentsLength - 2;
          actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
        }
        if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
          throw TypeError2(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
        }
        A2 = arraySpeciesCreate(O2, actualDeleteCount);
        for (k2 = 0; k2 < actualDeleteCount; k2++) {
          from2 = actualStart + k2;
          if (from2 in O2)
            createProperty(A2, k2, O2[from2]);
        }
        A2.length = actualDeleteCount;
        if (insertCount < actualDeleteCount) {
          for (k2 = actualStart; k2 < len - actualDeleteCount; k2++) {
            from2 = k2 + actualDeleteCount;
            to = k2 + insertCount;
            if (from2 in O2)
              O2[to] = O2[from2];
            else
              delete O2[to];
          }
          for (k2 = len; k2 > len - actualDeleteCount + insertCount; k2--)
            delete O2[k2 - 1];
        } else if (insertCount > actualDeleteCount) {
          for (k2 = len - actualDeleteCount; k2 > actualStart; k2--) {
            from2 = k2 + actualDeleteCount - 1;
            to = k2 + insertCount - 1;
            if (from2 in O2)
              O2[to] = O2[from2];
            else
              delete O2[to];
          }
        }
        for (k2 = 0; k2 < insertCount; k2++) {
          O2[k2 + actualStart] = arguments[k2 + 2];
        }
        O2.length = len - actualDeleteCount + insertCount;
        return A2;
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/splice.js
var require_splice = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/splice.js"(exports, module) {
    init_react();
    require_es_array_splice();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").splice;
  }
});

// node_modules/core-js-pure/es/instance/splice.js
var require_splice2 = __commonJS({
  "node_modules/core-js-pure/es/instance/splice.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_splice();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.splice;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.splice ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/splice.js
var require_splice3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/splice.js"(exports, module) {
    init_react();
    var parent = require_splice2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/splice.js
var require_splice4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/splice.js"(exports, module) {
    init_react();
    module.exports = require_splice3();
  }
});

// node_modules/moralis/lib/browser/arrayContainsObject.js
var require_arrayContainsObject = __commonJS({
  "node_modules/moralis/lib/browser/arrayContainsObject.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = arrayContainsObject;
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    function arrayContainsObject(array, object) {
      if ((0, _indexOf.default)(array).call(array, object) > -1) {
        return true;
      }
      for (var i = 0; i < array.length; i++) {
        if (array[i] instanceof _ParseObject.default && array[i].className === object.className && array[i]._getId() === object._getId()) {
          return true;
        }
      }
      return false;
    }
  }
});

// node_modules/core-js-pure/modules/es.string.starts-with.js
var require_es_string_starts_with = __commonJS({
  "node_modules/core-js-pure/modules/es.string.starts-with.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var toLength = require_to_length();
    var toString2 = require_to_string();
    var notARegExp = require_not_a_regexp();
    var requireObjectCoercible = require_require_object_coercible();
    var correctIsRegExpLogic = require_correct_is_regexp_logic();
    var IS_PURE = require_is_pure();
    var un$StartsWith = uncurryThis("".startsWith);
    var stringSlice = uncurryThis("".slice);
    var min = Math.min;
    var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("startsWith");
    var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
      var descriptor = getOwnPropertyDescriptor(String.prototype, "startsWith");
      return descriptor && !descriptor.writable;
    }();
    $({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
      startsWith: function startsWith(searchString) {
        var that = toString2(requireObjectCoercible(this));
        notARegExp(searchString);
        var index = toLength(min(arguments.length > 1 ? arguments[1] : void 0, that.length));
        var search = toString2(searchString);
        return un$StartsWith ? un$StartsWith(that, search, index) : stringSlice(that, index, index + search.length) === search;
      }
    });
  }
});

// node_modules/core-js-pure/es/string/virtual/starts-with.js
var require_starts_with = __commonJS({
  "node_modules/core-js-pure/es/string/virtual/starts-with.js"(exports, module) {
    init_react();
    require_es_string_starts_with();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("String").startsWith;
  }
});

// node_modules/core-js-pure/es/instance/starts-with.js
var require_starts_with2 = __commonJS({
  "node_modules/core-js-pure/es/instance/starts-with.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_starts_with();
    var StringPrototype = String.prototype;
    module.exports = function(it) {
      var own = it.startsWith;
      return typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.startsWith ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/starts-with.js
var require_starts_with3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/starts-with.js"(exports, module) {
    init_react();
    var parent = require_starts_with2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/starts-with.js
var require_starts_with4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/starts-with.js"(exports, module) {
    init_react();
    module.exports = require_starts_with3();
  }
});

// node_modules/moralis/lib/browser/ParseGeoPoint.js
var require_ParseGeoPoint = __commonJS({
  "node_modules/moralis/lib/browser/ParseGeoPoint.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var ParseGeoPoint = /* @__PURE__ */ function() {
      function ParseGeoPoint2(arg1, arg2) {
        (0, _classCallCheck2.default)(this, ParseGeoPoint2);
        (0, _defineProperty2.default)(this, "_latitude", void 0);
        (0, _defineProperty2.default)(this, "_longitude", void 0);
        if ((0, _isArray.default)(arg1)) {
          ParseGeoPoint2._validate(arg1[0], arg1[1]);
          this._latitude = arg1[0];
          this._longitude = arg1[1];
        } else if ((0, _typeof2.default)(arg1) === "object") {
          ParseGeoPoint2._validate(arg1.latitude, arg1.longitude);
          this._latitude = arg1.latitude;
          this._longitude = arg1.longitude;
        } else if (arg1 !== void 0 && arg2 !== void 0) {
          ParseGeoPoint2._validate(arg1, arg2);
          this._latitude = arg1;
          this._longitude = arg2;
        } else {
          this._latitude = 0;
          this._longitude = 0;
        }
      }
      (0, _createClass2.default)(ParseGeoPoint2, [{
        key: "latitude",
        get: function() {
          return this._latitude;
        },
        set: function(val) {
          ParseGeoPoint2._validate(val, this.longitude);
          this._latitude = val;
        }
      }, {
        key: "longitude",
        get: function() {
          return this._longitude;
        },
        set: function(val) {
          ParseGeoPoint2._validate(this.latitude, val);
          this._longitude = val;
        }
      }, {
        key: "toJSON",
        value: function() {
          ParseGeoPoint2._validate(this._latitude, this._longitude);
          return {
            __type: "GeoPoint",
            latitude: this._latitude,
            longitude: this._longitude
          };
        }
      }, {
        key: "equals",
        value: function(other) {
          return other instanceof ParseGeoPoint2 && this.latitude === other.latitude && this.longitude === other.longitude;
        }
      }, {
        key: "radiansTo",
        value: function(point) {
          var d2r = Math.PI / 180;
          var lat1rad = this.latitude * d2r;
          var long1rad = this.longitude * d2r;
          var lat2rad = point.latitude * d2r;
          var long2rad = point.longitude * d2r;
          var sinDeltaLatDiv2 = Math.sin((lat1rad - lat2rad) / 2);
          var sinDeltaLongDiv2 = Math.sin((long1rad - long2rad) / 2);
          var a2 = sinDeltaLatDiv2 * sinDeltaLatDiv2 + Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2;
          a2 = Math.min(1, a2);
          return 2 * Math.asin(Math.sqrt(a2));
        }
      }, {
        key: "kilometersTo",
        value: function(point) {
          return this.radiansTo(point) * 6371;
        }
      }, {
        key: "milesTo",
        value: function(point) {
          return this.radiansTo(point) * 3958.8;
        }
      }], [{
        key: "_validate",
        value: function(latitude, longitude) {
          if (isNaN(latitude) || isNaN(longitude) || typeof latitude !== "number" || typeof longitude !== "number") {
            throw new TypeError("GeoPoint latitude and longitude must be valid numbers");
          }
          if (latitude < -90) {
            throw new TypeError("GeoPoint latitude out of bounds: ".concat(latitude, " < -90.0."));
          }
          if (latitude > 90) {
            throw new TypeError("GeoPoint latitude out of bounds: ".concat(latitude, " > 90.0."));
          }
          if (longitude < -180) {
            throw new TypeError("GeoPoint longitude out of bounds: ".concat(longitude, " < -180.0."));
          }
          if (longitude > 180) {
            throw new TypeError("GeoPoint longitude out of bounds: ".concat(longitude, " > 180.0."));
          }
        }
      }, {
        key: "current",
        value: function() {
          return navigator.geolocation.getCurrentPosition(function(location) {
            return new ParseGeoPoint2(location.coords.latitude, location.coords.longitude);
          });
        }
      }]);
      return ParseGeoPoint2;
    }();
    var _default = ParseGeoPoint;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParsePolygon.js
var require_ParsePolygon = __commonJS({
  "node_modules/moralis/lib/browser/ParsePolygon.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var ParsePolygon = /* @__PURE__ */ function() {
      function ParsePolygon2(coordinates) {
        (0, _classCallCheck2.default)(this, ParsePolygon2);
        (0, _defineProperty2.default)(this, "_coordinates", void 0);
        this._coordinates = ParsePolygon2._validate(coordinates);
      }
      (0, _createClass2.default)(ParsePolygon2, [{
        key: "coordinates",
        get: function() {
          return this._coordinates;
        },
        set: function(coords) {
          this._coordinates = ParsePolygon2._validate(coords);
        }
      }, {
        key: "toJSON",
        value: function() {
          ParsePolygon2._validate(this._coordinates);
          return {
            __type: "Polygon",
            coordinates: this._coordinates
          };
        }
      }, {
        key: "equals",
        value: function(other) {
          if (!(other instanceof ParsePolygon2) || this.coordinates.length !== other.coordinates.length) {
            return false;
          }
          var isEqual = true;
          for (var i = 1; i < this._coordinates.length; i += 1) {
            if (this._coordinates[i][0] !== other.coordinates[i][0] || this._coordinates[i][1] !== other.coordinates[i][1]) {
              isEqual = false;
              break;
            }
          }
          return isEqual;
        }
      }, {
        key: "containsPoint",
        value: function(point) {
          var minX = this._coordinates[0][0];
          var maxX = this._coordinates[0][0];
          var minY = this._coordinates[0][1];
          var maxY = this._coordinates[0][1];
          for (var i = 1; i < this._coordinates.length; i += 1) {
            var p2 = this._coordinates[i];
            minX = Math.min(p2[0], minX);
            maxX = Math.max(p2[0], maxX);
            minY = Math.min(p2[1], minY);
            maxY = Math.max(p2[1], maxY);
          }
          var outside = point.latitude < minX || point.latitude > maxX || point.longitude < minY || point.longitude > maxY;
          if (outside) {
            return false;
          }
          var inside = false;
          for (var _i = 0, j2 = this._coordinates.length - 1; _i < this._coordinates.length; j2 = _i++) {
            var startX = this._coordinates[_i][0];
            var startY = this._coordinates[_i][1];
            var endX = this._coordinates[j2][0];
            var endY = this._coordinates[j2][1];
            var intersect = startY > point.longitude !== endY > point.longitude && point.latitude < (endX - startX) * (point.longitude - startY) / (endY - startY) + startX;
            if (intersect) {
              inside = !inside;
            }
          }
          return inside;
        }
      }], [{
        key: "_validate",
        value: function(coords) {
          if (!(0, _isArray.default)(coords)) {
            throw new TypeError("Coordinates must be an Array");
          }
          if (coords.length < 3) {
            throw new TypeError("Polygon must have at least 3 GeoPoints or Points");
          }
          var points = [];
          for (var i = 0; i < coords.length; i += 1) {
            var coord = coords[i];
            var geoPoint = void 0;
            if (coord instanceof _ParseGeoPoint.default) {
              geoPoint = coord;
            } else if ((0, _isArray.default)(coord) && coord.length === 2) {
              geoPoint = new _ParseGeoPoint.default(coord[0], coord[1]);
            } else {
              throw new TypeError("Coordinates must be an Array of GeoPoints or Points");
            }
            points.push([geoPoint.latitude, geoPoint.longitude]);
          }
          return points;
        }
      }]);
      return ParsePolygon2;
    }();
    var _default = ParsePolygon;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/encode.js
var require_encode = __commonJS({
  "node_modules/moralis/lib/browser/encode.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _concat = _interopRequireDefault(require_concat4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _keys = _interopRequireDefault(require_keys3());
    var _startsWith = _interopRequireDefault(require_starts_with4());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _map = _interopRequireDefault(require_map9());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var _ParsePolygon = _interopRequireDefault(require_ParsePolygon());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseOp = require_ParseOp();
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    function encode2(value, disallowObjects, forcePointers, seen, offline) {
      if (value instanceof _ParseObject.default) {
        var _context;
        if (disallowObjects) {
          throw new Error("Parse Objects not allowed here");
        }
        var seenEntry = value.id ? (0, _concat.default)(_context = "".concat(value.className, ":")).call(_context, value.id) : value;
        if (forcePointers || !seen || (0, _indexOf.default)(seen).call(seen, seenEntry) > -1 || value.dirty() || (0, _keys.default)(value._getServerData()).length < 1) {
          var _context2;
          if (offline && (0, _startsWith.default)(_context2 = value._getId()).call(_context2, "local")) {
            return value.toOfflinePointer();
          }
          return value.toPointer();
        }
        seen = (0, _concat.default)(seen).call(seen, seenEntry);
        return value._toFullJSON(seen, offline);
      }
      if (value instanceof _ParseOp.Op || value instanceof _ParseACL.default || value instanceof _ParseGeoPoint.default || value instanceof _ParsePolygon.default || value instanceof _ParseRelation.default) {
        return value.toJSON();
      }
      if (value instanceof _ParseFile.default) {
        if (!value.url()) {
          throw new Error("Tried to encode an unsaved file.");
        }
        return value.toJSON();
      }
      if (Object.prototype.toString.call(value) === "[object Date]") {
        if (isNaN(value)) {
          throw new Error("Tried to encode an invalid date.");
        }
        return {
          __type: "Date",
          iso: value.toJSON()
        };
      }
      if (Object.prototype.toString.call(value) === "[object RegExp]" && typeof value.source === "string") {
        return value.source;
      }
      if ((0, _isArray.default)(value)) {
        return (0, _map.default)(value).call(value, function(v2) {
          return encode2(v2, disallowObjects, forcePointers, seen, offline);
        });
      }
      if (value && (0, _typeof2.default)(value) === "object") {
        var output = {};
        for (var k2 in value) {
          output[k2] = encode2(value[k2], disallowObjects, forcePointers, seen, offline);
        }
        return output;
      }
      return value;
    }
    function _default(value, disallowObjects, forcePointers, seen, offline) {
      return encode2(value, !!disallowObjects, !!forcePointers, seen || [], offline);
    }
  }
});

// node_modules/moralis/lib/browser/unique.js
var require_unique = __commonJS({
  "node_modules/moralis/lib/browser/unique.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = unique;
    var _forEach = _interopRequireDefault(require_for_each4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _arrayContainsObject = _interopRequireDefault(require_arrayContainsObject());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    function unique(arr) {
      var uniques = [];
      (0, _forEach.default)(arr).call(arr, function(value) {
        if (value instanceof _ParseObject.default) {
          if (!(0, _arrayContainsObject.default)(uniques, value)) {
            uniques.push(value);
          }
        } else {
          if ((0, _indexOf.default)(uniques).call(uniques, value) < 0) {
            uniques.push(value);
          }
        }
      });
      return uniques;
    }
  }
});

// node_modules/moralis/lib/browser/ParseOp.js
var require_ParseOp = __commonJS({
  "node_modules/moralis/lib/browser/ParseOp.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UnsetOp = exports.SetOp = exports.RemoveOp = exports.RelationOp = exports.Op = exports.IncrementOp = exports.AddUniqueOp = exports.AddOp = void 0;
    exports.opFromJSON = opFromJSON;
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _concat = _interopRequireDefault(require_concat4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _splice = _interopRequireDefault(require_splice4());
    var _map = _interopRequireDefault(require_map9());
    var _arrayContainsObject = _interopRequireDefault(require_arrayContainsObject());
    var _decode = _interopRequireDefault(require_decode());
    var _encode = _interopRequireDefault(require_encode());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    var _unique = _interopRequireDefault(require_unique());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function opFromJSON(json) {
      if (!json || !json.__op) {
        return null;
      }
      switch (json.__op) {
        case "Delete":
          return new UnsetOp();
        case "Increment":
          return new IncrementOp(json.amount);
        case "Add":
          return new AddOp((0, _decode.default)(json.objects));
        case "AddUnique":
          return new AddUniqueOp((0, _decode.default)(json.objects));
        case "Remove":
          return new RemoveOp((0, _decode.default)(json.objects));
        case "AddRelation": {
          var toAdd = (0, _decode.default)(json.objects);
          if (!(0, _isArray.default)(toAdd)) {
            return new RelationOp([], []);
          }
          return new RelationOp(toAdd, []);
        }
        case "RemoveRelation": {
          var toRemove = (0, _decode.default)(json.objects);
          if (!(0, _isArray.default)(toRemove)) {
            return new RelationOp([], []);
          }
          return new RelationOp([], toRemove);
        }
        case "Batch": {
          var _toAdd = [];
          var _toRemove = [];
          for (var i = 0; i < json.ops.length; i++) {
            if (json.ops[i].__op === "AddRelation") {
              _toAdd = (0, _concat.default)(_toAdd).call(_toAdd, (0, _decode.default)(json.ops[i].objects));
            } else if (json.ops[i].__op === "RemoveRelation") {
              _toRemove = (0, _concat.default)(_toRemove).call(_toRemove, (0, _decode.default)(json.ops[i].objects));
            }
          }
          return new RelationOp(_toAdd, _toRemove);
        }
        default:
          return null;
      }
    }
    var Op = /* @__PURE__ */ function() {
      function Op2() {
        (0, _classCallCheck2.default)(this, Op2);
      }
      (0, _createClass2.default)(Op2, [{
        key: "applyTo",
        value: function() {
        }
      }, {
        key: "mergeWith",
        value: function() {
        }
      }, {
        key: "toJSON",
        value: function() {
        }
      }]);
      return Op2;
    }();
    exports.Op = Op;
    var SetOp = /* @__PURE__ */ function(_Op) {
      (0, _inherits2.default)(SetOp2, _Op);
      var _super = _createSuper(SetOp2);
      function SetOp2(value) {
        var _this;
        (0, _classCallCheck2.default)(this, SetOp2);
        _this = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_value", void 0);
        _this._value = value;
        return _this;
      }
      (0, _createClass2.default)(SetOp2, [{
        key: "applyTo",
        value: function() {
          return this._value;
        }
      }, {
        key: "mergeWith",
        value: function() {
          return new SetOp2(this._value);
        }
      }, {
        key: "toJSON",
        value: function(offline) {
          return (0, _encode.default)(this._value, false, true, void 0, offline);
        }
      }]);
      return SetOp2;
    }(Op);
    exports.SetOp = SetOp;
    var UnsetOp = /* @__PURE__ */ function(_Op2) {
      (0, _inherits2.default)(UnsetOp2, _Op2);
      var _super2 = _createSuper(UnsetOp2);
      function UnsetOp2() {
        (0, _classCallCheck2.default)(this, UnsetOp2);
        return _super2.apply(this, arguments);
      }
      (0, _createClass2.default)(UnsetOp2, [{
        key: "applyTo",
        value: function() {
          return void 0;
        }
      }, {
        key: "mergeWith",
        value: function() {
          return new UnsetOp2();
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "Delete"
          };
        }
      }]);
      return UnsetOp2;
    }(Op);
    exports.UnsetOp = UnsetOp;
    var IncrementOp = /* @__PURE__ */ function(_Op3) {
      (0, _inherits2.default)(IncrementOp2, _Op3);
      var _super3 = _createSuper(IncrementOp2);
      function IncrementOp2(amount) {
        var _this2;
        (0, _classCallCheck2.default)(this, IncrementOp2);
        _this2 = _super3.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "_amount", void 0);
        if (typeof amount !== "number") {
          throw new TypeError("Increment Op must be initialized with a numeric amount.");
        }
        _this2._amount = amount;
        return _this2;
      }
      (0, _createClass2.default)(IncrementOp2, [{
        key: "applyTo",
        value: function(value) {
          if (typeof value === "undefined") {
            return this._amount;
          }
          if (typeof value !== "number") {
            throw new TypeError("Cannot increment a non-numeric value.");
          }
          return this._amount + value;
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof SetOp) {
            return new SetOp(this.applyTo(previous._value));
          }
          if (previous instanceof UnsetOp) {
            return new SetOp(this._amount);
          }
          if (previous instanceof IncrementOp2) {
            return new IncrementOp2(this.applyTo(previous._amount));
          }
          throw new Error("Cannot merge Increment Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "Increment",
            amount: this._amount
          };
        }
      }]);
      return IncrementOp2;
    }(Op);
    exports.IncrementOp = IncrementOp;
    var AddOp = /* @__PURE__ */ function(_Op4) {
      (0, _inherits2.default)(AddOp2, _Op4);
      var _super4 = _createSuper(AddOp2);
      function AddOp2(value) {
        var _this3;
        (0, _classCallCheck2.default)(this, AddOp2);
        _this3 = _super4.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "_value", void 0);
        _this3._value = (0, _isArray.default)(value) ? value : [value];
        return _this3;
      }
      (0, _createClass2.default)(AddOp2, [{
        key: "applyTo",
        value: function(value) {
          if (value == null) {
            return this._value;
          }
          if ((0, _isArray.default)(value)) {
            return (0, _concat.default)(value).call(value, this._value);
          }
          throw new Error("Cannot add elements to a non-array value");
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof SetOp) {
            return new SetOp(this.applyTo(previous._value));
          }
          if (previous instanceof UnsetOp) {
            return new SetOp(this._value);
          }
          if (previous instanceof AddOp2) {
            return new AddOp2(this.applyTo(previous._value));
          }
          throw new Error("Cannot merge Add Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "Add",
            objects: (0, _encode.default)(this._value, false, true)
          };
        }
      }]);
      return AddOp2;
    }(Op);
    exports.AddOp = AddOp;
    var AddUniqueOp = /* @__PURE__ */ function(_Op5) {
      (0, _inherits2.default)(AddUniqueOp2, _Op5);
      var _super5 = _createSuper(AddUniqueOp2);
      function AddUniqueOp2(value) {
        var _this4;
        (0, _classCallCheck2.default)(this, AddUniqueOp2);
        _this4 = _super5.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this4), "_value", void 0);
        _this4._value = (0, _unique.default)((0, _isArray.default)(value) ? value : [value]);
        return _this4;
      }
      (0, _createClass2.default)(AddUniqueOp2, [{
        key: "applyTo",
        value: function(value) {
          if (value == null) {
            return this._value || [];
          }
          if ((0, _isArray.default)(value)) {
            var _context;
            var toAdd = [];
            (0, _forEach.default)(_context = this._value).call(_context, function(v2) {
              if (v2 instanceof _ParseObject.default) {
                if (!(0, _arrayContainsObject.default)(value, v2)) {
                  toAdd.push(v2);
                }
              } else {
                if ((0, _indexOf.default)(value).call(value, v2) < 0) {
                  toAdd.push(v2);
                }
              }
            });
            return (0, _concat.default)(value).call(value, toAdd);
          }
          throw new Error("Cannot add elements to a non-array value");
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof SetOp) {
            return new SetOp(this.applyTo(previous._value));
          }
          if (previous instanceof UnsetOp) {
            return new SetOp(this._value);
          }
          if (previous instanceof AddUniqueOp2) {
            return new AddUniqueOp2(this.applyTo(previous._value));
          }
          throw new Error("Cannot merge AddUnique Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "AddUnique",
            objects: (0, _encode.default)(this._value, false, true)
          };
        }
      }]);
      return AddUniqueOp2;
    }(Op);
    exports.AddUniqueOp = AddUniqueOp;
    var RemoveOp = /* @__PURE__ */ function(_Op6) {
      (0, _inherits2.default)(RemoveOp2, _Op6);
      var _super6 = _createSuper(RemoveOp2);
      function RemoveOp2(value) {
        var _this5;
        (0, _classCallCheck2.default)(this, RemoveOp2);
        _this5 = _super6.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this5), "_value", void 0);
        _this5._value = (0, _unique.default)((0, _isArray.default)(value) ? value : [value]);
        return _this5;
      }
      (0, _createClass2.default)(RemoveOp2, [{
        key: "applyTo",
        value: function(value) {
          if (value == null) {
            return [];
          }
          if ((0, _isArray.default)(value)) {
            var removed = (0, _concat.default)(value).call(value, []);
            for (var i = 0; i < this._value.length; i++) {
              var index = (0, _indexOf.default)(removed).call(removed, this._value[i]);
              while (index > -1) {
                (0, _splice.default)(removed).call(removed, index, 1);
                index = (0, _indexOf.default)(removed).call(removed, this._value[i]);
              }
              if (this._value[i] instanceof _ParseObject.default && this._value[i].id) {
                for (var j2 = 0; j2 < removed.length; j2++) {
                  if (removed[j2] instanceof _ParseObject.default && this._value[i].id === removed[j2].id) {
                    (0, _splice.default)(removed).call(removed, j2, 1);
                    j2--;
                  }
                }
              }
            }
            return removed;
          }
          throw new Error("Cannot remove elements from a non-array value");
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof SetOp) {
            return new SetOp(this.applyTo(previous._value));
          }
          if (previous instanceof UnsetOp) {
            return new UnsetOp();
          }
          if (previous instanceof RemoveOp2) {
            var _context2;
            var uniques = (0, _concat.default)(_context2 = previous._value).call(_context2, []);
            for (var i = 0; i < this._value.length; i++) {
              if (this._value[i] instanceof _ParseObject.default) {
                if (!(0, _arrayContainsObject.default)(uniques, this._value[i])) {
                  uniques.push(this._value[i]);
                }
              } else {
                if ((0, _indexOf.default)(uniques).call(uniques, this._value[i]) < 0) {
                  uniques.push(this._value[i]);
                }
              }
            }
            return new RemoveOp2(uniques);
          }
          throw new Error("Cannot merge Remove Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "Remove",
            objects: (0, _encode.default)(this._value, false, true)
          };
        }
      }]);
      return RemoveOp2;
    }(Op);
    exports.RemoveOp = RemoveOp;
    var RelationOp = /* @__PURE__ */ function(_Op7) {
      (0, _inherits2.default)(RelationOp2, _Op7);
      var _super7 = _createSuper(RelationOp2);
      function RelationOp2(adds, removes) {
        var _this6;
        (0, _classCallCheck2.default)(this, RelationOp2);
        _this6 = _super7.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "_targetClassName", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "relationsToAdd", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "relationsToRemove", void 0);
        _this6._targetClassName = null;
        if ((0, _isArray.default)(adds)) {
          _this6.relationsToAdd = (0, _unique.default)((0, _map.default)(adds).call(adds, _this6._extractId, (0, _assertThisInitialized2.default)(_this6)));
        }
        if ((0, _isArray.default)(removes)) {
          _this6.relationsToRemove = (0, _unique.default)((0, _map.default)(removes).call(removes, _this6._extractId, (0, _assertThisInitialized2.default)(_this6)));
        }
        return _this6;
      }
      (0, _createClass2.default)(RelationOp2, [{
        key: "_extractId",
        value: function(obj) {
          if (typeof obj === "string") {
            return obj;
          }
          if (!obj.id) {
            throw new Error("You cannot add or remove an unsaved Parse Object from a relation");
          }
          if (!this._targetClassName) {
            this._targetClassName = obj.className;
          }
          if (this._targetClassName !== obj.className) {
            var _context3;
            throw new Error((0, _concat.default)(_context3 = "Tried to create a Relation with 2 different object types: ".concat(this._targetClassName, " and ")).call(_context3, obj.className, "."));
          }
          return obj.id;
        }
      }, {
        key: "applyTo",
        value: function(value, object, key) {
          if (!value) {
            var _context4;
            if (!object || !key) {
              throw new Error("Cannot apply a RelationOp without either a previous value, or an object and a key");
            }
            var parent = new _ParseObject.default(object.className);
            if (object.id && (0, _indexOf.default)(_context4 = object.id).call(_context4, "local") === 0) {
              parent._localId = object.id;
            } else if (object.id) {
              parent.id = object.id;
            }
            var relation = new _ParseRelation.default(parent, key);
            relation.targetClassName = this._targetClassName;
            return relation;
          }
          if (value instanceof _ParseRelation.default) {
            if (this._targetClassName) {
              if (value.targetClassName) {
                if (this._targetClassName !== value.targetClassName) {
                  var _context5;
                  throw new Error((0, _concat.default)(_context5 = "Related object must be a ".concat(value.targetClassName, ", but a ")).call(_context5, this._targetClassName, " was passed in."));
                }
              } else {
                value.targetClassName = this._targetClassName;
              }
            }
            return value;
          }
          throw new Error("Relation cannot be applied to a non-relation field");
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof UnsetOp) {
            throw new Error("You cannot modify a relation after deleting it.");
          }
          if (previous instanceof SetOp && previous._value instanceof _ParseRelation.default) {
            return this;
          }
          if (previous instanceof RelationOp2) {
            var _context7, _context8, _context9, _context10, _context11, _context12;
            if (previous._targetClassName && previous._targetClassName !== this._targetClassName) {
              var _context6;
              throw new Error((0, _concat.default)(_context6 = "Related object must be of class ".concat(previous._targetClassName, ", but ")).call(_context6, this._targetClassName || "null", " was passed in."));
            }
            var newAdd = (0, _concat.default)(_context7 = previous.relationsToAdd).call(_context7, []);
            (0, _forEach.default)(_context8 = this.relationsToRemove).call(_context8, function(r2) {
              var index = (0, _indexOf.default)(newAdd).call(newAdd, r2);
              if (index > -1) {
                (0, _splice.default)(newAdd).call(newAdd, index, 1);
              }
            });
            (0, _forEach.default)(_context9 = this.relationsToAdd).call(_context9, function(r2) {
              var index = (0, _indexOf.default)(newAdd).call(newAdd, r2);
              if (index < 0) {
                newAdd.push(r2);
              }
            });
            var newRemove = (0, _concat.default)(_context10 = previous.relationsToRemove).call(_context10, []);
            (0, _forEach.default)(_context11 = this.relationsToAdd).call(_context11, function(r2) {
              var index = (0, _indexOf.default)(newRemove).call(newRemove, r2);
              if (index > -1) {
                (0, _splice.default)(newRemove).call(newRemove, index, 1);
              }
            });
            (0, _forEach.default)(_context12 = this.relationsToRemove).call(_context12, function(r2) {
              var index = (0, _indexOf.default)(newRemove).call(newRemove, r2);
              if (index < 0) {
                newRemove.push(r2);
              }
            });
            var newRelation = new RelationOp2(newAdd, newRemove);
            newRelation._targetClassName = this._targetClassName;
            return newRelation;
          }
          throw new Error("Cannot merge Relation Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          var _this7 = this;
          var idToPointer = function(id2) {
            return {
              __type: "Pointer",
              className: _this7._targetClassName,
              objectId: id2
            };
          };
          var adds = null;
          var removes = null;
          var pointers = null;
          if (this.relationsToAdd.length > 0) {
            var _context13;
            pointers = (0, _map.default)(_context13 = this.relationsToAdd).call(_context13, idToPointer);
            adds = {
              __op: "AddRelation",
              objects: pointers
            };
          }
          if (this.relationsToRemove.length > 0) {
            var _context14;
            pointers = (0, _map.default)(_context14 = this.relationsToRemove).call(_context14, idToPointer);
            removes = {
              __op: "RemoveRelation",
              objects: pointers
            };
          }
          if (adds && removes) {
            return {
              __op: "Batch",
              ops: [adds, removes]
            };
          }
          return adds || removes || {};
        }
      }]);
      return RelationOp2;
    }(Op);
    exports.RelationOp = RelationOp;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/arrayWithoutHoles.js
var require_arrayWithoutHoles = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/arrayWithoutHoles.js"(exports, module) {
    init_react();
    var _Array$isArray = require_is_array7();
    var arrayLikeToArray = require_arrayLikeToArray();
    function _arrayWithoutHoles(arr) {
      if (_Array$isArray(arr))
        return arrayLikeToArray(arr);
    }
    module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/iterableToArray.js
var require_iterableToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/iterableToArray.js"(exports, module) {
    init_react();
    var _Symbol = require_symbol5();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$from = require_from6();
    function _iterableToArray(iter) {
      if (typeof _Symbol !== "undefined" && _getIteratorMethod(iter) != null || iter["@@iterator"] != null)
        return _Array$from(iter);
    }
    module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/nonIterableSpread.js
var require_nonIterableSpread = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/nonIterableSpread.js"(exports, module) {
    init_react();
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/toConsumableArray.js
var require_toConsumableArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/toConsumableArray.js"(exports, module) {
    init_react();
    var arrayWithoutHoles = require_arrayWithoutHoles();
    var iterableToArray = require_iterableToArray();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableSpread = require_nonIterableSpread();
    function _toConsumableArray(arr) {
      return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
    }
    module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/es/array/virtual/keys.js
var require_keys4 = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/keys.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_object_to_string();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").keys;
  }
});

// node_modules/core-js-pure/stable/array/virtual/keys.js
var require_keys5 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/keys.js"(exports, module) {
    init_react();
    var parent = require_keys4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/keys.js
var require_keys6 = __commonJS({
  "node_modules/core-js-pure/stable/instance/keys.js"(exports, module) {
    init_react();
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_keys5();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module.exports = function(it) {
      var own = it.keys;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.keys || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/keys.js
var require_keys7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/keys.js"(exports, module) {
    init_react();
    module.exports = require_keys6();
  }
});

// node_modules/core-js-pure/internals/array-sort.js
var require_array_sort = __commonJS({
  "node_modules/core-js-pure/internals/array-sort.js"(exports, module) {
    init_react();
    var arraySlice = require_array_slice_simple();
    var floor = Math.floor;
    var mergeSort = function(array, comparefn) {
      var length2 = array.length;
      var middle = floor(length2 / 2);
      return length2 < 8 ? insertionSort(array, comparefn) : merge2(array, mergeSort(arraySlice(array, 0, middle), comparefn), mergeSort(arraySlice(array, middle), comparefn), comparefn);
    };
    var insertionSort = function(array, comparefn) {
      var length2 = array.length;
      var i = 1;
      var element, j2;
      while (i < length2) {
        j2 = i;
        element = array[i];
        while (j2 && comparefn(array[j2 - 1], element) > 0) {
          array[j2] = array[--j2];
        }
        if (j2 !== i++)
          array[j2] = element;
      }
      return array;
    };
    var merge2 = function(array, left, right, comparefn) {
      var llength = left.length;
      var rlength = right.length;
      var lindex = 0;
      var rindex = 0;
      while (lindex < llength || rindex < rlength) {
        array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
      }
      return array;
    };
    module.exports = mergeSort;
  }
});

// node_modules/core-js-pure/internals/engine-ff-version.js
var require_engine_ff_version = __commonJS({
  "node_modules/core-js-pure/internals/engine-ff-version.js"(exports, module) {
    init_react();
    var userAgent = require_engine_user_agent();
    var firefox = userAgent.match(/firefox\/(\d+)/i);
    module.exports = !!firefox && +firefox[1];
  }
});

// node_modules/core-js-pure/internals/engine-is-ie-or-edge.js
var require_engine_is_ie_or_edge = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-ie-or-edge.js"(exports, module) {
    init_react();
    var UA = require_engine_user_agent();
    module.exports = /MSIE|Trident/.test(UA);
  }
});

// node_modules/core-js-pure/internals/engine-webkit-version.js
var require_engine_webkit_version = __commonJS({
  "node_modules/core-js-pure/internals/engine-webkit-version.js"(exports, module) {
    init_react();
    var userAgent = require_engine_user_agent();
    var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
    module.exports = !!webkit && +webkit[1];
  }
});

// node_modules/core-js-pure/modules/es.array.sort.js
var require_es_array_sort = __commonJS({
  "node_modules/core-js-pure/modules/es.array.sort.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var toString2 = require_to_string();
    var fails = require_fails();
    var internalSort = require_array_sort();
    var arrayMethodIsStrict = require_array_method_is_strict();
    var FF = require_engine_ff_version();
    var IE_OR_EDGE = require_engine_is_ie_or_edge();
    var V8 = require_engine_v8_version();
    var WEBKIT2 = require_engine_webkit_version();
    var test = [];
    var un$Sort = uncurryThis(test.sort);
    var push = uncurryThis(test.push);
    var FAILS_ON_UNDEFINED = fails(function() {
      test.sort(void 0);
    });
    var FAILS_ON_NULL = fails(function() {
      test.sort(null);
    });
    var STRICT_METHOD = arrayMethodIsStrict("sort");
    var STABLE_SORT = !fails(function() {
      if (V8)
        return V8 < 70;
      if (FF && FF > 3)
        return;
      if (IE_OR_EDGE)
        return true;
      if (WEBKIT2)
        return WEBKIT2 < 603;
      var result = "";
      var code, chr, value, index;
      for (code = 65; code < 76; code++) {
        chr = String.fromCharCode(code);
        switch (code) {
          case 66:
          case 69:
          case 70:
          case 72:
            value = 3;
            break;
          case 68:
          case 71:
            value = 4;
            break;
          default:
            value = 2;
        }
        for (index = 0; index < 47; index++) {
          test.push({ k: chr + index, v: value });
        }
      }
      test.sort(function(a2, b2) {
        return b2.v - a2.v;
      });
      for (index = 0; index < test.length; index++) {
        chr = test[index].k.charAt(0);
        if (result.charAt(result.length - 1) !== chr)
          result += chr;
      }
      return result !== "DGBEFHACIJK";
    });
    var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
    var getSortCompare = function(comparefn) {
      return function(x2, y2) {
        if (y2 === void 0)
          return -1;
        if (x2 === void 0)
          return 1;
        if (comparefn !== void 0)
          return +comparefn(x2, y2) || 0;
        return toString2(x2) > toString2(y2) ? 1 : -1;
      };
    };
    $({ target: "Array", proto: true, forced: FORCED }, {
      sort: function sort(comparefn) {
        if (comparefn !== void 0)
          aCallable(comparefn);
        var array = toObject(this);
        if (STABLE_SORT)
          return comparefn === void 0 ? un$Sort(array) : un$Sort(array, comparefn);
        var items = [];
        var arrayLength = lengthOfArrayLike(array);
        var itemsLength, index;
        for (index = 0; index < arrayLength; index++) {
          if (index in array)
            push(items, array[index]);
        }
        internalSort(items, getSortCompare(comparefn));
        itemsLength = items.length;
        index = 0;
        while (index < itemsLength)
          array[index] = items[index++];
        while (index < arrayLength)
          delete array[index++];
        return array;
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/sort.js
var require_sort = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/sort.js"(exports, module) {
    init_react();
    require_es_array_sort();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").sort;
  }
});

// node_modules/core-js-pure/es/instance/sort.js
var require_sort2 = __commonJS({
  "node_modules/core-js-pure/es/instance/sort.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_sort();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.sort;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.sort ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/sort.js
var require_sort3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/sort.js"(exports, module) {
    init_react();
    var parent = require_sort2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js
var require_sort4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js"(exports, module) {
    init_react();
    module.exports = require_sort3();
  }
});

// node_modules/core-js-pure/internals/object-to-array.js
var require_object_to_array = __commonJS({
  "node_modules/core-js-pure/internals/object-to-array.js"(exports, module) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var uncurryThis = require_function_uncurry_this();
    var objectKeys = require_object_keys();
    var toIndexedObject = require_to_indexed_object();
    var $propertyIsEnumerable = require_object_property_is_enumerable().f;
    var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);
    var push = uncurryThis([].push);
    var createMethod = function(TO_ENTRIES) {
      return function(it) {
        var O2 = toIndexedObject(it);
        var keys = objectKeys(O2);
        var length2 = keys.length;
        var i = 0;
        var result = [];
        var key;
        while (length2 > i) {
          key = keys[i++];
          if (!DESCRIPTORS || propertyIsEnumerable(O2, key)) {
            push(result, TO_ENTRIES ? [key, O2[key]] : O2[key]);
          }
        }
        return result;
      };
    };
    module.exports = {
      entries: createMethod(true),
      values: createMethod(false)
    };
  }
});

// node_modules/core-js-pure/modules/es.object.entries.js
var require_es_object_entries = __commonJS({
  "node_modules/core-js-pure/modules/es.object.entries.js"() {
    init_react();
    var $ = require_export();
    var $entries = require_object_to_array().entries;
    $({ target: "Object", stat: true }, {
      entries: function entries(O2) {
        return $entries(O2);
      }
    });
  }
});

// node_modules/core-js-pure/es/object/entries.js
var require_entries = __commonJS({
  "node_modules/core-js-pure/es/object/entries.js"(exports, module) {
    init_react();
    require_es_object_entries();
    var path = require_path();
    module.exports = path.Object.entries;
  }
});

// node_modules/core-js-pure/stable/object/entries.js
var require_entries2 = __commonJS({
  "node_modules/core-js-pure/stable/object/entries.js"(exports, module) {
    init_react();
    var parent = require_entries();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/entries.js
var require_entries3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/entries.js"(exports, module) {
    init_react();
    module.exports = require_entries2();
  }
});

// node_modules/moralis/lib/browser/promiseUtils.js
var require_promiseUtils = __commonJS({
  "node_modules/moralis/lib/browser/promiseUtils.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.continueWhile = continueWhile;
    exports.resolvingPromise = resolvingPromise;
    exports.when = when;
    var _promise = _interopRequireDefault(require_promise3());
    var _isArray = _interopRequireDefault(require_is_array4());
    function resolvingPromise() {
      var res;
      var rej;
      var promise = new _promise.default(function(resolve, reject) {
        res = resolve;
        rej = reject;
      });
      promise.resolve = res;
      promise.reject = rej;
      return promise;
    }
    function when(promises) {
      var objects;
      var arrayArgument = (0, _isArray.default)(promises);
      if (arrayArgument) {
        objects = promises;
      } else {
        objects = arguments;
      }
      var total = objects.length;
      var hadError = false;
      var results = [];
      var returnValue = arrayArgument ? [results] : results;
      var errors = [];
      results.length = objects.length;
      errors.length = objects.length;
      if (total === 0) {
        return _promise.default.resolve(returnValue);
      }
      var promise = new resolvingPromise();
      var resolveOne = function() {
        total--;
        if (total <= 0) {
          if (hadError) {
            promise.reject(errors);
          } else {
            promise.resolve(returnValue);
          }
        }
      };
      var chain = function(object, index) {
        if (object && typeof object.then === "function") {
          object.then(function(result) {
            results[index] = result;
            resolveOne();
          }, function(error) {
            errors[index] = error;
            hadError = true;
            resolveOne();
          });
        } else {
          results[index] = object;
          resolveOne();
        }
      };
      for (var i = 0; i < objects.length; i++) {
        chain(objects[i], i);
      }
      return promise;
    }
    function continueWhile(test, emitter) {
      if (test()) {
        return emitter().then(function() {
          return continueWhile(test, emitter);
        });
      }
      return _promise.default.resolve();
    }
  }
});

// node_modules/moralis/lib/browser/equals.js
var require_equals = __commonJS({
  "node_modules/moralis/lib/browser/equals.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = equals;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _keys = _interopRequireDefault(require_keys3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    function equals(a2, b2) {
      var toString2 = Object.prototype.toString;
      if (toString2.call(a2) === "[object Date]" || toString2.call(b2) === "[object Date]") {
        var dateA = new Date(a2);
        var dateB = new Date(b2);
        return +dateA === +dateB;
      }
      if ((0, _typeof2.default)(a2) !== (0, _typeof2.default)(b2)) {
        return false;
      }
      if (!a2 || (0, _typeof2.default)(a2) !== "object") {
        return a2 === b2;
      }
      if ((0, _isArray.default)(a2) || (0, _isArray.default)(b2)) {
        if (!(0, _isArray.default)(a2) || !(0, _isArray.default)(b2)) {
          return false;
        }
        if (a2.length !== b2.length) {
          return false;
        }
        for (var i = a2.length; i--; ) {
          if (!equals(a2[i], b2[i])) {
            return false;
          }
        }
        return true;
      }
      if (a2 instanceof _ParseACL.default || a2 instanceof _ParseFile.default || a2 instanceof _ParseGeoPoint.default || a2 instanceof _ParseObject.default) {
        return a2.equals(b2);
      }
      if (b2 instanceof _ParseObject.default) {
        if (a2.__type === "Object" || a2.__type === "Pointer") {
          return a2.objectId === b2.id && a2.className === b2.className;
        }
      }
      if ((0, _keys.default)(a2).length !== (0, _keys.default)(b2).length) {
        return false;
      }
      for (var k2 in a2) {
        if (!equals(a2[k2], b2[k2])) {
          return false;
        }
      }
      return true;
    }
  }
});

// node_modules/moralis/lib/browser/OfflineQuery.js
var require_OfflineQuery = __commonJS({
  "node_modules/moralis/lib/browser/OfflineQuery.js"(exports, module) {
    "use strict";
    init_react();
    var _sliceInstanceProperty2 = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray2 = require_is_array4();
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _slice = _interopRequireDefault(require_slice4());
    var _filter = _interopRequireDefault(require_filter4());
    var _map = _interopRequireDefault(require_map9());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray2(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context5;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty2(_context5 = Object.prototype.toString.call(o2)).call(_context5, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var equalObjects = require_equals().default;
    var decode2 = require_decode().default;
    var ParseError = require_ParseError().default;
    var ParsePolygon = require_ParsePolygon().default;
    var ParseGeoPoint = require_ParseGeoPoint().default;
    function contains(haystack, needle) {
      if (needle && needle.__type && (needle.__type === "Pointer" || needle.__type === "Object")) {
        for (var i in haystack) {
          var ptr = haystack[i];
          if (typeof ptr === "string" && ptr === needle.objectId) {
            return true;
          }
          if (ptr.className === needle.className && ptr.objectId === needle.objectId) {
            return true;
          }
        }
        return false;
      }
      return (0, _indexOf.default)(haystack).call(haystack, needle) > -1;
    }
    function transformObject(object) {
      if (object._toFullJSON) {
        return object._toFullJSON();
      }
      return object;
    }
    function matchesQuery(className, object, objects, query) {
      if (object.className !== className) {
        return false;
      }
      var obj = object;
      var q2 = query;
      if (object.toJSON) {
        obj = object.toJSON();
      }
      if (query.toJSON) {
        q2 = query.toJSON().where;
      }
      obj.className = className;
      for (var field in q2) {
        if (!matchesKeyConstraints(className, obj, objects, field, q2[field])) {
          return false;
        }
      }
      return true;
    }
    function equalObjectsGeneric(obj, compareTo, eqlFn) {
      if ((0, _isArray.default)(obj)) {
        for (var i = 0; i < obj.length; i++) {
          if (eqlFn(obj[i], compareTo)) {
            return true;
          }
        }
        return false;
      }
      return eqlFn(obj, compareTo);
    }
    function matchesKeyConstraints(className, object, objects, key, constraints) {
      if (constraints === null) {
        return false;
      }
      if ((0, _indexOf.default)(key).call(key, ".") >= 0) {
        var keyComponents = key.split(".");
        var subObjectKey = keyComponents[0];
        var keyRemainder = (0, _slice.default)(keyComponents).call(keyComponents, 1).join(".");
        return matchesKeyConstraints(className, object[subObjectKey] || {}, objects, keyRemainder, constraints);
      }
      var i;
      if (key === "$or") {
        for (i = 0; i < constraints.length; i++) {
          if (matchesQuery(className, object, objects, constraints[i])) {
            return true;
          }
        }
        return false;
      }
      if (key === "$and") {
        for (i = 0; i < constraints.length; i++) {
          if (!matchesQuery(className, object, objects, constraints[i])) {
            return false;
          }
        }
        return true;
      }
      if (key === "$nor") {
        for (i = 0; i < constraints.length; i++) {
          if (matchesQuery(className, object, objects, constraints[i])) {
            return false;
          }
        }
        return true;
      }
      if (key === "$relatedTo") {
        return false;
      }
      if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(key)) {
        throw new ParseError(ParseError.INVALID_KEY_NAME, "Invalid Key: ".concat(key));
      }
      if ((0, _typeof2.default)(constraints) !== "object") {
        if ((0, _isArray.default)(object[key])) {
          var _context;
          return (0, _indexOf.default)(_context = object[key]).call(_context, constraints) > -1;
        }
        return object[key] === constraints;
      }
      var compareTo;
      if (constraints.__type) {
        if (constraints.__type === "Pointer") {
          return equalObjectsGeneric(object[key], constraints, function(obj, ptr) {
            return typeof obj !== "undefined" && ptr.className === obj.className && ptr.objectId === obj.objectId;
          });
        }
        return equalObjectsGeneric(decode2(object[key]), decode2(constraints), equalObjects);
      }
      for (var condition in constraints) {
        compareTo = constraints[condition];
        if (compareTo.__type) {
          compareTo = decode2(compareTo);
        }
        if (toString.call(compareTo) === "[object Date]" || typeof compareTo === "string" && new Date(compareTo) !== "Invalid Date" && !isNaN(new Date(compareTo))) {
          object[key] = new Date(object[key].iso ? object[key].iso : object[key]);
        }
        switch (condition) {
          case "$lt":
            if (object[key] >= compareTo) {
              return false;
            }
            break;
          case "$lte":
            if (object[key] > compareTo) {
              return false;
            }
            break;
          case "$gt":
            if (object[key] <= compareTo) {
              return false;
            }
            break;
          case "$gte":
            if (object[key] < compareTo) {
              return false;
            }
            break;
          case "$ne":
            if (equalObjects(object[key], compareTo)) {
              return false;
            }
            break;
          case "$in":
            if (!contains(compareTo, object[key])) {
              return false;
            }
            break;
          case "$nin":
            if (contains(compareTo, object[key])) {
              return false;
            }
            break;
          case "$all":
            for (i = 0; i < compareTo.length; i++) {
              var _context2;
              if ((0, _indexOf.default)(_context2 = object[key]).call(_context2, compareTo[i]) < 0) {
                return false;
              }
            }
            break;
          case "$exists": {
            var propertyExists = typeof object[key] !== "undefined";
            var existenceIsRequired = constraints.$exists;
            if (typeof constraints.$exists !== "boolean") {
              break;
            }
            if (!propertyExists && existenceIsRequired || propertyExists && !existenceIsRequired) {
              return false;
            }
            break;
          }
          case "$regex": {
            if ((0, _typeof2.default)(compareTo) === "object") {
              return compareTo.test(object[key]);
            }
            var expString = "";
            var escapeEnd = -2;
            var escapeStart = (0, _indexOf.default)(compareTo).call(compareTo, "\\Q");
            while (escapeStart > -1) {
              expString += compareTo.substring(escapeEnd + 2, escapeStart);
              escapeEnd = (0, _indexOf.default)(compareTo).call(compareTo, "\\E", escapeStart);
              if (escapeEnd > -1) {
                expString += compareTo.substring(escapeStart + 2, escapeEnd).replace(/\\\\\\\\E/g, "\\E").replace(/\W/g, "\\$&");
              }
              escapeStart = (0, _indexOf.default)(compareTo).call(compareTo, "\\Q", escapeEnd);
            }
            expString += compareTo.substring(Math.max(escapeStart, escapeEnd + 2));
            var modifiers = constraints.$options || "";
            modifiers = modifiers.replace("x", "").replace("s", "");
            var exp = new RegExp(expString, modifiers);
            if (!exp.test(object[key])) {
              return false;
            }
            break;
          }
          case "$nearSphere": {
            if (!compareTo || !object[key]) {
              return false;
            }
            var distance = compareTo.radiansTo(object[key]);
            var max = constraints.$maxDistance || Infinity;
            return distance <= max;
          }
          case "$within": {
            if (!compareTo || !object[key]) {
              return false;
            }
            var southWest = compareTo.$box[0];
            var northEast = compareTo.$box[1];
            if (southWest.latitude > northEast.latitude || southWest.longitude > northEast.longitude) {
              return false;
            }
            return object[key].latitude > southWest.latitude && object[key].latitude < northEast.latitude && object[key].longitude > southWest.longitude && object[key].longitude < northEast.longitude;
          }
          case "$options":
            break;
          case "$maxDistance":
            break;
          case "$select": {
            var subQueryObjects = (0, _filter.default)(objects).call(objects, function(obj, index, arr) {
              return matchesQuery(compareTo.query.className, obj, arr, compareTo.query.where);
            });
            for (var _i = 0; _i < subQueryObjects.length; _i += 1) {
              var subObject = transformObject(subQueryObjects[_i]);
              return equalObjects(object[key], subObject[compareTo.key]);
            }
            return false;
          }
          case "$dontSelect": {
            var _subQueryObjects = (0, _filter.default)(objects).call(objects, function(obj, index, arr) {
              return matchesQuery(compareTo.query.className, obj, arr, compareTo.query.where);
            });
            for (var _i2 = 0; _i2 < _subQueryObjects.length; _i2 += 1) {
              var _subObject = transformObject(_subQueryObjects[_i2]);
              return !equalObjects(object[key], _subObject[compareTo.key]);
            }
            return false;
          }
          case "$inQuery": {
            var _subQueryObjects2 = (0, _filter.default)(objects).call(objects, function(obj, index, arr) {
              return matchesQuery(compareTo.className, obj, arr, compareTo.where);
            });
            for (var _i3 = 0; _i3 < _subQueryObjects2.length; _i3 += 1) {
              var _subObject2 = transformObject(_subQueryObjects2[_i3]);
              if (object[key].className === _subObject2.className && object[key].objectId === _subObject2.objectId) {
                return true;
              }
            }
            return false;
          }
          case "$notInQuery": {
            var _subQueryObjects3 = (0, _filter.default)(objects).call(objects, function(obj, index, arr) {
              return matchesQuery(compareTo.className, obj, arr, compareTo.where);
            });
            for (var _i4 = 0; _i4 < _subQueryObjects3.length; _i4 += 1) {
              var _subObject3 = transformObject(_subQueryObjects3[_i4]);
              if (object[key].className === _subObject3.className && object[key].objectId === _subObject3.objectId) {
                return false;
              }
            }
            return true;
          }
          case "$containedBy": {
            var _iterator = _createForOfIteratorHelper(object[key]), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var value = _step.value;
                if (!contains(compareTo, value)) {
                  return false;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            return true;
          }
          case "$geoWithin": {
            var _context3;
            var points = (0, _map.default)(_context3 = compareTo.$polygon).call(_context3, function(geoPoint) {
              return [geoPoint.latitude, geoPoint.longitude];
            });
            var polygon = new ParsePolygon(points);
            return polygon.containsPoint(object[key]);
          }
          case "$geoIntersects": {
            var _polygon = new ParsePolygon(object[key].coordinates);
            var point = new ParseGeoPoint(compareTo.$point);
            return _polygon.containsPoint(point);
          }
          default:
            return false;
        }
      }
      return true;
    }
    function validateQuery(query) {
      var _context4;
      var q2 = query;
      if (query.toJSON) {
        q2 = query.toJSON().where;
      }
      var specialQuerykeys = ["$and", "$or", "$nor", "_rperm", "_wperm", "_perishable_token", "_email_verify_token", "_email_verify_token_expires_at", "_account_lockout_expires_at", "_failed_login_count"];
      (0, _forEach.default)(_context4 = (0, _keys.default)(q2)).call(_context4, function(key) {
        if (q2 && q2[key] && q2[key].$regex) {
          if (typeof q2[key].$options === "string") {
            if (!q2[key].$options.match(/^[imxs]+$/)) {
              throw new ParseError(ParseError.INVALID_QUERY, "Bad $options value for query: ".concat(q2[key].$options));
            }
          }
        }
        if ((0, _indexOf.default)(specialQuerykeys).call(specialQuerykeys, key) < 0 && !key.match(/^[a-zA-Z][a-zA-Z0-9_.]*$/)) {
          throw new ParseError(ParseError.INVALID_KEY_NAME, "Invalid key name: ".concat(key));
        }
      });
    }
    var OfflineQuery = {
      matchesQuery,
      validateQuery
    };
    module.exports = OfflineQuery;
  }
});

// node_modules/moralis/lib/browser/LocalDatastoreUtils.js
var require_LocalDatastoreUtils = __commonJS({
  "node_modules/moralis/lib/browser/LocalDatastoreUtils.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PIN_PREFIX = exports.OBJECT_PREFIX = exports.DEFAULT_PIN = void 0;
    exports.isLocalDatastoreKey = isLocalDatastoreKey;
    var _startsWith = _interopRequireDefault(require_starts_with4());
    var DEFAULT_PIN = "_default";
    exports.DEFAULT_PIN = DEFAULT_PIN;
    var PIN_PREFIX = "parsePin_";
    exports.PIN_PREFIX = PIN_PREFIX;
    var OBJECT_PREFIX = "Parse_LDS_";
    exports.OBJECT_PREFIX = OBJECT_PREFIX;
    function isLocalDatastoreKey(key) {
      return !!(key && (key === DEFAULT_PIN || (0, _startsWith.default)(key).call(key, PIN_PREFIX) || (0, _startsWith.default)(key).call(key, OBJECT_PREFIX)));
    }
  }
});

// node_modules/moralis/lib/browser/ParseQuery.js
var require_ParseQuery = __commonJS({
  "node_modules/moralis/lib/browser/ParseQuery.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _keys = _interopRequireDefault(require_keys3());
    var _slice = _interopRequireDefault(require_slice4());
    var _map2 = _interopRequireDefault(require_map9());
    var _filter2 = _interopRequireDefault(require_filter4());
    var _keys2 = _interopRequireDefault(require_keys7());
    var _concat = _interopRequireDefault(require_concat4());
    var _includes = _interopRequireDefault(require_includes5());
    var _sort = _interopRequireDefault(require_sort4());
    var _splice = _interopRequireDefault(require_splice4());
    var _promise = _interopRequireDefault(require_promise3());
    var _find = _interopRequireDefault(require_find4());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _entries = _interopRequireDefault(require_entries3());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _encode = _interopRequireDefault(require_encode());
    var _promiseUtils = require_promiseUtils();
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _OfflineQuery = _interopRequireDefault(require_OfflineQuery());
    var _LocalDatastoreUtils = require_LocalDatastoreUtils();
    function quote(s2) {
      return "\\Q".concat(s2.replace("\\E", "\\E\\\\E\\Q"), "\\E");
    }
    function _getClassNameFromQueries(queries) {
      var className = null;
      (0, _forEach.default)(queries).call(queries, function(q2) {
        if (!className) {
          className = q2.className;
        }
        if (className !== q2.className) {
          throw new Error("All queries must be for the same class.");
        }
      });
      return className;
    }
    function handleSelectResult(data, select) {
      var serverDataMask = {};
      (0, _forEach.default)(select).call(select, function(field) {
        var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, ".") !== -1;
        if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {
          data[field] = void 0;
        } else if (hasSubObjectSelect) {
          var pathComponents = field.split(".");
          var _obj = data;
          var serverMask = serverDataMask;
          (0, _forEach.default)(pathComponents).call(pathComponents, function(component, index, arr) {
            if (_obj && !_obj.hasOwnProperty(component)) {
              _obj[component] = void 0;
            }
            if (_obj && (0, _typeof2.default)(_obj) === "object") {
              _obj = _obj[component];
            }
            if (index < arr.length - 1) {
              if (!serverMask[component]) {
                serverMask[component] = {};
              }
              serverMask = serverMask[component];
            }
          });
        }
      });
      if ((0, _keys.default)(serverDataMask).length > 0) {
        var serverData = _CoreManager.default.getObjectStateController().getServerData({
          id: data.objectId,
          className: data.className
        });
        copyMissingDataWithMask(serverData, data, serverDataMask, false);
      }
    }
    function copyMissingDataWithMask(src, dest, mask, copyThisLevel) {
      if (copyThisLevel) {
        for (var _key in src) {
          if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {
            dest[_key] = src[_key];
          }
        }
      }
      for (var _key2 in mask) {
        if (dest[_key2] !== void 0 && dest[_key2] !== null && src !== void 0 && src !== null) {
          copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);
        }
      }
    }
    function handleOfflineSort(a2, b2, sorts) {
      var order = sorts[0];
      var operator = (0, _slice.default)(order).call(order, 0, 1);
      var isDescending = operator === "-";
      if (isDescending) {
        order = order.substring(1);
      }
      if (order === "_created_at") {
        order = "createdAt";
      }
      if (order === "_updated_at") {
        order = "updatedAt";
      }
      if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === "password") {
        throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, "Invalid Key: ".concat(order));
      }
      var field1 = a2.get(order);
      var field2 = b2.get(order);
      if (field1 < field2) {
        return isDescending ? 1 : -1;
      }
      if (field1 > field2) {
        return isDescending ? -1 : 1;
      }
      if (sorts.length > 1) {
        var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);
        return handleOfflineSort(a2, b2, remainingSorts);
      }
      return 0;
    }
    var ParseQuery = /* @__PURE__ */ function() {
      function ParseQuery2(objectClass) {
        (0, _classCallCheck2.default)(this, ParseQuery2);
        (0, _defineProperty2.default)(this, "className", void 0);
        (0, _defineProperty2.default)(this, "_where", void 0);
        (0, _defineProperty2.default)(this, "_include", void 0);
        (0, _defineProperty2.default)(this, "_exclude", void 0);
        (0, _defineProperty2.default)(this, "_select", void 0);
        (0, _defineProperty2.default)(this, "_limit", void 0);
        (0, _defineProperty2.default)(this, "_skip", void 0);
        (0, _defineProperty2.default)(this, "_count", void 0);
        (0, _defineProperty2.default)(this, "_order", void 0);
        (0, _defineProperty2.default)(this, "_readPreference", void 0);
        (0, _defineProperty2.default)(this, "_includeReadPreference", void 0);
        (0, _defineProperty2.default)(this, "_subqueryReadPreference", void 0);
        (0, _defineProperty2.default)(this, "_queriesLocalDatastore", void 0);
        (0, _defineProperty2.default)(this, "_localDatastorePinName", void 0);
        (0, _defineProperty2.default)(this, "_extraOptions", void 0);
        (0, _defineProperty2.default)(this, "_hint", void 0);
        (0, _defineProperty2.default)(this, "_explain", void 0);
        (0, _defineProperty2.default)(this, "_xhrRequest", void 0);
        if (typeof objectClass === "string") {
          if (objectClass === "User" && _CoreManager.default.get("PERFORM_USER_REWRITE")) {
            this.className = "_User";
          } else {
            this.className = objectClass;
          }
        } else if (objectClass instanceof _ParseObject.default) {
          this.className = objectClass.className;
        } else if (typeof objectClass === "function") {
          if (typeof objectClass.className === "string") {
            this.className = objectClass.className;
          } else {
            var _obj2 = new objectClass();
            this.className = _obj2.className;
          }
        } else {
          throw new TypeError("A ParseQuery must be constructed with a ParseObject or class name.");
        }
        this._where = {};
        this._include = [];
        this._exclude = [];
        this._count = false;
        this._limit = -1;
        this._skip = 0;
        this._readPreference = null;
        this._includeReadPreference = null;
        this._subqueryReadPreference = null;
        this._queriesLocalDatastore = false;
        this._localDatastorePinName = null;
        this._extraOptions = {};
        this._xhrRequest = {
          task: null,
          onchange: function() {
          }
        };
      }
      (0, _createClass2.default)(ParseQuery2, [{
        key: "_orQuery",
        value: function(queries) {
          var queryJSON = (0, _map2.default)(queries).call(queries, function(q2) {
            return q2.toJSON().where;
          });
          this._where.$or = queryJSON;
          return this;
        }
      }, {
        key: "_andQuery",
        value: function(queries) {
          var queryJSON = (0, _map2.default)(queries).call(queries, function(q2) {
            return q2.toJSON().where;
          });
          this._where.$and = queryJSON;
          return this;
        }
      }, {
        key: "_norQuery",
        value: function(queries) {
          var queryJSON = (0, _map2.default)(queries).call(queries, function(q2) {
            return q2.toJSON().where;
          });
          this._where.$nor = queryJSON;
          return this;
        }
      }, {
        key: "_addCondition",
        value: function(key, condition, value) {
          if (!this._where[key] || typeof this._where[key] === "string") {
            this._where[key] = {};
          }
          this._where[key][condition] = (0, _encode.default)(value, false, true);
          return this;
        }
      }, {
        key: "_regexStartWith",
        value: function(string) {
          return "^".concat(quote(string));
        }
      }, {
        key: "_handleOfflineQuery",
        value: function() {
          var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(params) {
            var _context, _this2 = this;
            var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _OfflineQuery.default.validateQuery(this);
                    localDatastore = _CoreManager.default.getLocalDatastore();
                    _context3.next = 4;
                    return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);
                  case 4:
                    objects = _context3.sent;
                    results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function(json, index, arr) {
                      var object = _ParseObject.default.fromJSON(json, false);
                      if (json._localId && !json.objectId) {
                        object._localId = json._localId;
                      }
                      if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {
                        return null;
                      }
                      return object;
                    })).call(_context, function(object) {
                      return object !== null;
                    });
                    if ((0, _keys2.default)(params)) {
                      keys = (0, _keys2.default)(params).split(",");
                      alwaysSelectedKeys = ["className", "objectId", "createdAt", "updatedAt", "ACL"];
                      keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);
                      results = (0, _map2.default)(results).call(results, function(object) {
                        var _context2;
                        var json = object._toFullJSON();
                        (0, _forEach.default)(_context2 = (0, _keys.default)(json)).call(_context2, function(key) {
                          if (!(0, _includes.default)(keys).call(keys, key)) {
                            delete json[key];
                          }
                        });
                        return _ParseObject.default.fromJSON(json, false);
                      });
                    }
                    if (params.order) {
                      sorts = params.order.split(",");
                      (0, _sort.default)(results).call(results, function(a2, b2) {
                        return handleOfflineSort(a2, b2, sorts);
                      });
                    }
                    if (params.count) {
                      count = results.length;
                    }
                    if (params.skip) {
                      if (params.skip >= results.length) {
                        results = [];
                      } else {
                        results = (0, _splice.default)(results).call(results, params.skip, results.length);
                      }
                    }
                    limit = results.length;
                    if (params.limit !== 0 && params.limit < results.length) {
                      limit = params.limit;
                    }
                    results = (0, _splice.default)(results).call(results, 0, limit);
                    if (!(typeof count === "number")) {
                      _context3.next = 15;
                      break;
                    }
                    return _context3.abrupt("return", {
                      results,
                      count
                    });
                  case 15:
                    return _context3.abrupt("return", results);
                  case 16:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _handleOfflineQuery2.apply(this, arguments);
          };
        }()
      }, {
        key: "toJSON",
        value: function() {
          var params = {
            where: this._where
          };
          if (this._include.length) {
            params.include = this._include.join(",");
          }
          if (this._exclude.length) {
            params.excludeKeys = this._exclude.join(",");
          }
          if (this._select) {
            params.keys = this._select.join(",");
          }
          if (this._count) {
            params.count = 1;
          }
          if (this._limit >= 0) {
            params.limit = this._limit;
          }
          if (this._skip > 0) {
            params.skip = this._skip;
          }
          if (this._order) {
            params.order = this._order.join(",");
          }
          if (this._readPreference) {
            params.readPreference = this._readPreference;
          }
          if (this._includeReadPreference) {
            params.includeReadPreference = this._includeReadPreference;
          }
          if (this._subqueryReadPreference) {
            params.subqueryReadPreference = this._subqueryReadPreference;
          }
          if (this._hint) {
            params.hint = this._hint;
          }
          if (this._explain) {
            params.explain = true;
          }
          for (var _key3 in this._extraOptions) {
            params[_key3] = this._extraOptions[_key3];
          }
          return params;
        }
      }, {
        key: "withJSON",
        value: function(json) {
          if (json.where) {
            this._where = json.where;
          }
          if (json.include) {
            this._include = json.include.split(",");
          }
          if ((0, _keys2.default)(json)) {
            this._select = (0, _keys2.default)(json).split(",");
          }
          if (json.excludeKeys) {
            this._exclude = json.excludeKeys.split(",");
          }
          if (json.count) {
            this._count = json.count === 1;
          }
          if (json.limit) {
            this._limit = json.limit;
          }
          if (json.skip) {
            this._skip = json.skip;
          }
          if (json.order) {
            this._order = json.order.split(",");
          }
          if (json.readPreference) {
            this._readPreference = json.readPreference;
          }
          if (json.includeReadPreference) {
            this._includeReadPreference = json.includeReadPreference;
          }
          if (json.subqueryReadPreference) {
            this._subqueryReadPreference = json.subqueryReadPreference;
          }
          if (json.hint) {
            this._hint = json.hint;
          }
          if (json.explain) {
            this._explain = !!json.explain;
          }
          for (var _key4 in json) {
            if (json.hasOwnProperty(_key4)) {
              var _context4;
              if ((0, _indexOf.default)(_context4 = ["where", "include", "keys", "count", "limit", "skip", "order", "readPreference", "includeReadPreference", "subqueryReadPreference", "hint", "explain"]).call(_context4, _key4) === -1) {
                this._extraOptions[_key4] = json[_key4];
              }
            }
          }
          return this;
        }
      }, {
        key: "get",
        value: function(objectId, options) {
          this.equalTo("objectId", objectId);
          var firstOptions = {};
          if (options && options.hasOwnProperty("useMasterKey")) {
            firstOptions.useMasterKey = options.useMasterKey;
          }
          if (options && options.hasOwnProperty("sessionToken")) {
            firstOptions.sessionToken = options.sessionToken;
          }
          if (options && options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            firstOptions.context = options.context;
          }
          return this.first(firstOptions).then(function(response) {
            if (response) {
              return response;
            }
            var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, "Object not found.");
            return _promise.default.reject(errorObject);
          });
        }
      }, {
        key: "find",
        value: function(options) {
          var _this3 = this;
          options = options || {};
          var findOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            findOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            findOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            findOptions.context = options.context;
          }
          this._setRequestTask(findOptions);
          var controller = _CoreManager.default.getQueryController();
          var select = this._select;
          if (this._queriesLocalDatastore) {
            return this._handleOfflineQuery(this.toJSON());
          }
          return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function(response) {
            var _context5;
            if (_this3._explain) {
              return response.results;
            }
            var results = (0, _map2.default)(_context5 = response.results).call(_context5, function(data) {
              var override = response.className || _this3.className;
              if (!data.className) {
                data.className = override;
              }
              if (select) {
                handleSelectResult(data, select);
              }
              return _ParseObject.default.fromJSON(data, !select);
            });
            var count = response.count;
            if (typeof count === "number") {
              return {
                results,
                count
              };
            }
            return results;
          });
        }
      }, {
        key: "findAll",
        value: function() {
          var _findAll = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(options) {
            var result;
            return _regenerator.default.wrap(function(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    result = [];
                    _context7.next = 3;
                    return this.eachBatch(function(objects) {
                      var _context6;
                      result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));
                    }, options);
                  case 3:
                    return _context7.abrupt("return", result);
                  case 4:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _findAll.apply(this, arguments);
          };
        }()
      }, {
        key: "count",
        value: function(options) {
          options = options || {};
          var findOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            findOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            findOptions.sessionToken = options.sessionToken;
          }
          this._setRequestTask(findOptions);
          var controller = _CoreManager.default.getQueryController();
          var params = this.toJSON();
          params.limit = 0;
          params.count = 1;
          return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function(result) {
            return result.count;
          });
        }
      }, {
        key: "distinct",
        value: function(key, options) {
          options = options || {};
          var distinctOptions = {};
          distinctOptions.useMasterKey = true;
          if (options.hasOwnProperty("sessionToken")) {
            distinctOptions.sessionToken = options.sessionToken;
          }
          this._setRequestTask(distinctOptions);
          var controller = _CoreManager.default.getQueryController();
          var params = {
            distinct: key,
            where: this._where,
            hint: this._hint
          };
          return controller.aggregate(this.className, params, distinctOptions).then(function(results) {
            return results.results;
          });
        }
      }, {
        key: "aggregate",
        value: function(pipeline, options) {
          options = options || {};
          var aggregateOptions = {};
          aggregateOptions.useMasterKey = true;
          if (options.hasOwnProperty("sessionToken")) {
            aggregateOptions.sessionToken = options.sessionToken;
          }
          this._setRequestTask(aggregateOptions);
          var controller = _CoreManager.default.getQueryController();
          if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== "object") {
            throw new Error("Invalid pipeline must be Array or Object");
          }
          if ((0, _keys.default)(this._where || {}).length) {
            if (!(0, _isArray.default)(pipeline)) {
              pipeline = [pipeline];
            }
            pipeline.unshift({
              match: this._where
            });
          }
          var params = {
            pipeline,
            hint: this._hint,
            explain: this._explain,
            readPreference: this._readPreference
          };
          return controller.aggregate(this.className, params, aggregateOptions).then(function(results) {
            return results.results;
          });
        }
      }, {
        key: "first",
        value: function(options) {
          var _this4 = this;
          options = options || {};
          var findOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            findOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            findOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            findOptions.context = options.context;
          }
          this._setRequestTask(findOptions);
          var controller = _CoreManager.default.getQueryController();
          var params = this.toJSON();
          params.limit = 1;
          var select = this._select;
          if (this._queriesLocalDatastore) {
            return this._handleOfflineQuery(params).then(function(objects) {
              if (!objects[0]) {
                return void 0;
              }
              return objects[0];
            });
          }
          return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function(response) {
            var objects = response.results;
            if (!objects[0]) {
              return void 0;
            }
            if (!objects[0].className) {
              objects[0].className = _this4.className;
            }
            if (select) {
              handleSelectResult(objects[0], select);
            }
            return _ParseObject.default.fromJSON(objects[0], !select);
          });
        }
      }, {
        key: "eachBatch",
        value: function(callback, options) {
          var _context8;
          options = options || {};
          if (this._order || this._skip || this._limit >= 0) {
            return _promise.default.reject("Cannot iterate on a query with sort, skip, or limit.");
          }
          var query = new ParseQuery2(this.className);
          query._limit = options.batchSize || 100;
          query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function(i) {
            return i;
          });
          if (this._select) {
            var _context9;
            query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function(s2) {
              return s2;
            });
          }
          query._hint = this._hint;
          query._where = {};
          for (var _attr in this._where) {
            var val = this._where[_attr];
            if ((0, _isArray.default)(val)) {
              query._where[_attr] = (0, _map2.default)(val).call(val, function(v2) {
                return v2;
              });
            } else if (val && (0, _typeof2.default)(val) === "object") {
              var conditionMap = {};
              query._where[_attr] = conditionMap;
              for (var cond in val) {
                conditionMap[cond] = val[cond];
              }
            } else {
              query._where[_attr] = val;
            }
          }
          query.ascending("objectId");
          var findOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            findOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            findOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            findOptions.context = options.context;
          }
          var finished = false;
          var previousResults = [];
          return (0, _promiseUtils.continueWhile)(function() {
            return !finished;
          }, /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
            var _yield$Promise$all, _yield$Promise$all2, results;
            return _regenerator.default.wrap(function(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    _context10.next = 2;
                    return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);
                  case 2:
                    _yield$Promise$all = _context10.sent;
                    _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);
                    results = _yield$Promise$all2[0];
                    if (!(results.length >= query._limit)) {
                      _context10.next = 10;
                      break;
                    }
                    query.greaterThan("objectId", results[results.length - 1].id);
                    previousResults = results;
                    _context10.next = 17;
                    break;
                  case 10:
                    if (!(results.length > 0)) {
                      _context10.next = 16;
                      break;
                    }
                    _context10.next = 13;
                    return _promise.default.resolve(callback(results));
                  case 13:
                    finished = true;
                    _context10.next = 17;
                    break;
                  case 16:
                    finished = true;
                  case 17:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee3);
          })));
        }
      }, {
        key: "each",
        value: function(callback, options) {
          return this.eachBatch(function(results) {
            var callbacksDone = _promise.default.resolve();
            (0, _forEach.default)(results).call(results, function(result) {
              callbacksDone = callbacksDone.then(function() {
                return callback(result);
              });
            });
            return callbacksDone;
          }, options);
        }
      }, {
        key: "hint",
        value: function(value) {
          if (typeof value === "undefined") {
            delete this._hint;
          }
          this._hint = value;
          return this;
        }
      }, {
        key: "explain",
        value: function() {
          var _explain = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
          if (typeof _explain !== "boolean") {
            throw new Error("You can only set explain to a boolean value");
          }
          this._explain = _explain;
          return this;
        }
      }, {
        key: "map",
        value: function() {
          var _map = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(callback, options) {
            var _this5 = this;
            var array, index;
            return _regenerator.default.wrap(function(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    array = [];
                    index = 0;
                    _context11.next = 4;
                    return this.each(function(object) {
                      return _promise.default.resolve(callback(object, index, _this5)).then(function(result) {
                        array.push(result);
                        index += 1;
                      });
                    }, options);
                  case 4:
                    return _context11.abrupt("return", array);
                  case 5:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee4, this);
          }));
          return function() {
            return _map.apply(this, arguments);
          };
        }()
      }, {
        key: "reduce",
        value: function() {
          var _reduce = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(callback, initialValue, options) {
            var accumulator, index;
            return _regenerator.default.wrap(function(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    accumulator = initialValue;
                    index = 0;
                    _context12.next = 4;
                    return this.each(function(object) {
                      if (index === 0 && initialValue === void 0) {
                        accumulator = object;
                        index += 1;
                        return;
                      }
                      return _promise.default.resolve(callback(accumulator, object, index)).then(function(result) {
                        accumulator = result;
                        index += 1;
                      });
                    }, options);
                  case 4:
                    if (!(index === 0 && initialValue === void 0)) {
                      _context12.next = 6;
                      break;
                    }
                    throw new TypeError("Reducing empty query result set with no initial value");
                  case 6:
                    return _context12.abrupt("return", accumulator);
                  case 7:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee5, this);
          }));
          return function() {
            return _reduce.apply(this, arguments);
          };
        }()
      }, {
        key: "filter",
        value: function() {
          var _filter = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6(callback, options) {
            var _this6 = this;
            var array, index;
            return _regenerator.default.wrap(function(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    array = [];
                    index = 0;
                    _context13.next = 4;
                    return this.each(function(object) {
                      return _promise.default.resolve(callback(object, index, _this6)).then(function(flag) {
                        if (flag) {
                          array.push(object);
                        }
                        index += 1;
                      });
                    }, options);
                  case 4:
                    return _context13.abrupt("return", array);
                  case 5:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee6, this);
          }));
          return function() {
            return _filter.apply(this, arguments);
          };
        }()
      }, {
        key: "equalTo",
        value: function(key, value) {
          var _this7 = this;
          if (key && (0, _typeof2.default)(key) === "object") {
            var _context14;
            (0, _forEach.default)(_context14 = (0, _entries.default)(key)).call(_context14, function(_ref2) {
              var _ref3 = (0, _slicedToArray2.default)(_ref2, 2), k2 = _ref3[0], val = _ref3[1];
              return _this7.equalTo(k2, val);
            });
            return this;
          }
          if (typeof value === "undefined") {
            return this.doesNotExist(key);
          }
          this._where[key] = (0, _encode.default)(value, false, true);
          return this;
        }
      }, {
        key: "notEqualTo",
        value: function(key, value) {
          var _this8 = this;
          if (key && (0, _typeof2.default)(key) === "object") {
            var _context15;
            (0, _forEach.default)(_context15 = (0, _entries.default)(key)).call(_context15, function(_ref4) {
              var _ref5 = (0, _slicedToArray2.default)(_ref4, 2), k2 = _ref5[0], val = _ref5[1];
              return _this8.notEqualTo(k2, val);
            });
            return this;
          }
          return this._addCondition(key, "$ne", value);
        }
      }, {
        key: "lessThan",
        value: function(key, value) {
          return this._addCondition(key, "$lt", value);
        }
      }, {
        key: "greaterThan",
        value: function(key, value) {
          return this._addCondition(key, "$gt", value);
        }
      }, {
        key: "lessThanOrEqualTo",
        value: function(key, value) {
          return this._addCondition(key, "$lte", value);
        }
      }, {
        key: "greaterThanOrEqualTo",
        value: function(key, value) {
          return this._addCondition(key, "$gte", value);
        }
      }, {
        key: "containedIn",
        value: function(key, value) {
          return this._addCondition(key, "$in", value);
        }
      }, {
        key: "notContainedIn",
        value: function(key, value) {
          return this._addCondition(key, "$nin", value);
        }
      }, {
        key: "containedBy",
        value: function(key, values) {
          return this._addCondition(key, "$containedBy", values);
        }
      }, {
        key: "containsAll",
        value: function(key, values) {
          return this._addCondition(key, "$all", values);
        }
      }, {
        key: "containsAllStartingWith",
        value: function(key, values) {
          var _this = this;
          if (!(0, _isArray.default)(values)) {
            values = [values];
          }
          var regexObject = (0, _map2.default)(values).call(values, function(value) {
            return {
              $regex: _this._regexStartWith(value)
            };
          });
          return this.containsAll(key, regexObject);
        }
      }, {
        key: "exists",
        value: function(key) {
          return this._addCondition(key, "$exists", true);
        }
      }, {
        key: "doesNotExist",
        value: function(key) {
          return this._addCondition(key, "$exists", false);
        }
      }, {
        key: "matches",
        value: function(key, regex, modifiers) {
          this._addCondition(key, "$regex", regex);
          if (!modifiers) {
            modifiers = "";
          }
          if (regex.ignoreCase) {
            modifiers += "i";
          }
          if (regex.multiline) {
            modifiers += "m";
          }
          if (modifiers.length) {
            this._addCondition(key, "$options", modifiers);
          }
          return this;
        }
      }, {
        key: "matchesQuery",
        value: function(key, query) {
          var queryJSON = query.toJSON();
          queryJSON.className = query.className;
          return this._addCondition(key, "$inQuery", queryJSON);
        }
      }, {
        key: "doesNotMatchQuery",
        value: function(key, query) {
          var queryJSON = query.toJSON();
          queryJSON.className = query.className;
          return this._addCondition(key, "$notInQuery", queryJSON);
        }
      }, {
        key: "matchesKeyInQuery",
        value: function(key, queryKey, query) {
          var queryJSON = query.toJSON();
          queryJSON.className = query.className;
          return this._addCondition(key, "$select", {
            key: queryKey,
            query: queryJSON
          });
        }
      }, {
        key: "doesNotMatchKeyInQuery",
        value: function(key, queryKey, query) {
          var queryJSON = query.toJSON();
          queryJSON.className = query.className;
          return this._addCondition(key, "$dontSelect", {
            key: queryKey,
            query: queryJSON
          });
        }
      }, {
        key: "contains",
        value: function(key, substring) {
          if (typeof substring !== "string") {
            throw new Error("The value being searched for must be a string.");
          }
          return this._addCondition(key, "$regex", quote(substring));
        }
      }, {
        key: "fullText",
        value: function(key, value, options) {
          options = options || {};
          if (!key) {
            throw new Error("A key is required.");
          }
          if (!value) {
            throw new Error("A search term is required");
          }
          if (typeof value !== "string") {
            throw new Error("The value being searched for must be a string.");
          }
          var fullOptions = {};
          fullOptions.$term = value;
          for (var option in options) {
            switch (option) {
              case "language":
                fullOptions.$language = options[option];
                break;
              case "caseSensitive":
                fullOptions.$caseSensitive = options[option];
                break;
              case "diacriticSensitive":
                fullOptions.$diacriticSensitive = options[option];
                break;
              default:
                throw new Error("Unknown option: ".concat(option));
            }
          }
          return this._addCondition(key, "$text", {
            $search: fullOptions
          });
        }
      }, {
        key: "sortByTextScore",
        value: function() {
          this.ascending("$score");
          this.select(["$score"]);
          return this;
        }
      }, {
        key: "startsWith",
        value: function(key, prefix2) {
          if (typeof prefix2 !== "string") {
            throw new Error("The value being searched for must be a string.");
          }
          return this._addCondition(key, "$regex", this._regexStartWith(prefix2));
        }
      }, {
        key: "endsWith",
        value: function(key, suffix) {
          if (typeof suffix !== "string") {
            throw new Error("The value being searched for must be a string.");
          }
          return this._addCondition(key, "$regex", "".concat(quote(suffix), "$"));
        }
      }, {
        key: "near",
        value: function(key, point) {
          if (!(point instanceof _ParseGeoPoint.default)) {
            point = new _ParseGeoPoint.default(point);
          }
          return this._addCondition(key, "$nearSphere", point);
        }
      }, {
        key: "withinRadians",
        value: function(key, point, maxDistance, sorted) {
          if (sorted || sorted === void 0) {
            this.near(key, point);
            return this._addCondition(key, "$maxDistance", maxDistance);
          }
          return this._addCondition(key, "$geoWithin", {
            $centerSphere: [[point.longitude, point.latitude], maxDistance]
          });
        }
      }, {
        key: "withinMiles",
        value: function(key, point, maxDistance, sorted) {
          return this.withinRadians(key, point, maxDistance / 3958.8, sorted);
        }
      }, {
        key: "withinKilometers",
        value: function(key, point, maxDistance, sorted) {
          return this.withinRadians(key, point, maxDistance / 6371, sorted);
        }
      }, {
        key: "withinGeoBox",
        value: function(key, southwest, northeast) {
          if (!(southwest instanceof _ParseGeoPoint.default)) {
            southwest = new _ParseGeoPoint.default(southwest);
          }
          if (!(northeast instanceof _ParseGeoPoint.default)) {
            northeast = new _ParseGeoPoint.default(northeast);
          }
          this._addCondition(key, "$within", {
            $box: [southwest, northeast]
          });
          return this;
        }
      }, {
        key: "withinPolygon",
        value: function(key, points) {
          return this._addCondition(key, "$geoWithin", {
            $polygon: points
          });
        }
      }, {
        key: "polygonContains",
        value: function(key, point) {
          return this._addCondition(key, "$geoIntersects", {
            $point: point
          });
        }
      }, {
        key: "ascending",
        value: function() {
          this._order = [];
          for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {
            keys[_key5] = arguments[_key5];
          }
          return this.addAscending.apply(this, keys);
        }
      }, {
        key: "addAscending",
        value: function() {
          var _this9 = this;
          if (!this._order) {
            this._order = [];
          }
          for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {
            keys[_key6] = arguments[_key6];
          }
          (0, _forEach.default)(keys).call(keys, function(key) {
            var _context16;
            if ((0, _isArray.default)(key)) {
              key = key.join();
            }
            _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key.replace(/\s/g, "").split(","));
          });
          return this;
        }
      }, {
        key: "descending",
        value: function() {
          this._order = [];
          for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {
            keys[_key7] = arguments[_key7];
          }
          return this.addDescending.apply(this, keys);
        }
      }, {
        key: "addDescending",
        value: function() {
          var _this10 = this;
          if (!this._order) {
            this._order = [];
          }
          for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {
            keys[_key8] = arguments[_key8];
          }
          (0, _forEach.default)(keys).call(keys, function(key) {
            var _context17, _context18;
            if ((0, _isArray.default)(key)) {
              key = key.join();
            }
            _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key.replace(/\s/g, "").split(",")).call(_context18, function(k2) {
              return "-".concat(k2);
            }));
          });
          return this;
        }
      }, {
        key: "skip",
        value: function(n2) {
          if (typeof n2 !== "number" || n2 < 0) {
            throw new Error("You can only skip by a positive number");
          }
          this._skip = n2;
          return this;
        }
      }, {
        key: "limit",
        value: function(n2) {
          if (typeof n2 !== "number") {
            throw new Error("You can only set the limit to a numeric value");
          }
          this._limit = n2;
          return this;
        }
      }, {
        key: "withCount",
        value: function() {
          var includeCount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
          if (typeof includeCount !== "boolean") {
            throw new Error("You can only set withCount to a boolean value");
          }
          this._count = includeCount;
          return this;
        }
      }, {
        key: "include",
        value: function() {
          var _this11 = this;
          for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {
            keys[_key9] = arguments[_key9];
          }
          (0, _forEach.default)(keys).call(keys, function(key) {
            if ((0, _isArray.default)(key)) {
              var _context19;
              _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key);
            } else {
              _this11._include.push(key);
            }
          });
          return this;
        }
      }, {
        key: "includeAll",
        value: function() {
          return this.include("*");
        }
      }, {
        key: "select",
        value: function() {
          var _this12 = this;
          if (!this._select) {
            this._select = [];
          }
          for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {
            keys[_key10] = arguments[_key10];
          }
          (0, _forEach.default)(keys).call(keys, function(key) {
            if ((0, _isArray.default)(key)) {
              var _context20;
              _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key);
            } else {
              _this12._select.push(key);
            }
          });
          return this;
        }
      }, {
        key: "exclude",
        value: function() {
          var _this13 = this;
          for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {
            keys[_key11] = arguments[_key11];
          }
          (0, _forEach.default)(keys).call(keys, function(key) {
            if ((0, _isArray.default)(key)) {
              var _context21;
              _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key);
            } else {
              _this13._exclude.push(key);
            }
          });
          return this;
        }
      }, {
        key: "readPreference",
        value: function(_readPreference, includeReadPreference, subqueryReadPreference) {
          this._readPreference = _readPreference;
          this._includeReadPreference = includeReadPreference;
          this._subqueryReadPreference = subqueryReadPreference;
          return this;
        }
      }, {
        key: "onChange",
        value: function(onUpdate, onError) {
          var sub = null;
          this.subscribe().then(function(subscription) {
            sub = subscription;
            subscription.on("create", function(object) {
              onUpdate(object);
            });
            subscription.on("update", function(object) {
              onUpdate(object);
            });
            subscription.on("error", function(err) {
              if (onError) {
                onError(err);
              } else {
                console.warn("Subscription error", err);
              }
            });
          }).catch(function(err) {
            if (onError) {
              onError(err);
            } else {
              console.warn("Subscription connection error", err);
            }
          });
          return function() {
            if (sub) {
              sub.unsubscribe();
            }
          };
        }
      }, {
        key: "subscribe",
        value: function() {
          var _subscribe = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7(sessionToken) {
            var currentUser, liveQueryClient, subscription;
            return _regenerator.default.wrap(function(_context22) {
              while (1) {
                switch (_context22.prev = _context22.next) {
                  case 0:
                    _context22.next = 2;
                    return _CoreManager.default.getUserController().currentUserAsync();
                  case 2:
                    currentUser = _context22.sent;
                    if (!sessionToken) {
                      sessionToken = currentUser ? currentUser.getSessionToken() : void 0;
                    }
                    _context22.next = 6;
                    return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();
                  case 6:
                    liveQueryClient = _context22.sent;
                    if (liveQueryClient.shouldOpen()) {
                      liveQueryClient.open();
                    }
                    subscription = liveQueryClient.subscribe(this, sessionToken);
                    return _context22.abrupt("return", subscription.subscribePromise.then(function() {
                      return subscription;
                    }));
                  case 10:
                  case "end":
                    return _context22.stop();
                }
              }
            }, _callee7, this);
          }));
          return function() {
            return _subscribe.apply(this, arguments);
          };
        }()
      }, {
        key: "fromNetwork",
        value: function() {
          this._queriesLocalDatastore = false;
          this._localDatastorePinName = null;
          return this;
        }
      }, {
        key: "fromLocalDatastore",
        value: function() {
          return this.fromPinWithName(null);
        }
      }, {
        key: "fromPin",
        value: function() {
          return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);
        }
      }, {
        key: "fromPinWithName",
        value: function(name2) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (localDatastore.checkIfEnabled()) {
            this._queriesLocalDatastore = true;
            this._localDatastorePinName = name2;
          }
          return this;
        }
      }, {
        key: "cancel",
        value: function() {
          var _this14 = this;
          if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === "function") {
            this._xhrRequest.task._aborted = true;
            this._xhrRequest.task.abort();
            this._xhrRequest.task = null;
            this._xhrRequest.onchange = function() {
            };
            return this;
          }
          return this._xhrRequest.onchange = function() {
            return _this14.cancel();
          };
        }
      }, {
        key: "_setRequestTask",
        value: function(options) {
          var _this15 = this;
          options.requestTask = function(task) {
            _this15._xhrRequest.task = task;
            _this15._xhrRequest.onchange();
          };
        }
      }], [{
        key: "fromJSON",
        value: function(className, json) {
          var query = new ParseQuery2(className);
          return query.withJSON(json);
        }
      }, {
        key: "or",
        value: function() {
          for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {
            queries[_key12] = arguments[_key12];
          }
          var className = _getClassNameFromQueries(queries);
          var query = new ParseQuery2(className);
          query._orQuery(queries);
          return query;
        }
      }, {
        key: "and",
        value: function() {
          for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {
            queries[_key13] = arguments[_key13];
          }
          var className = _getClassNameFromQueries(queries);
          var query = new ParseQuery2(className);
          query._andQuery(queries);
          return query;
        }
      }, {
        key: "nor",
        value: function() {
          for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {
            queries[_key14] = arguments[_key14];
          }
          var className = _getClassNameFromQueries(queries);
          var query = new ParseQuery2(className);
          query._norQuery(queries);
          return query;
        }
      }]);
      return ParseQuery2;
    }();
    var DefaultController = {
      find: function(className, params, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "classes/".concat(className), params, options);
      },
      aggregate: function(className, params, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "aggregate/".concat(className), params, options);
      }
    };
    _CoreManager.default.setQueryController(DefaultController);
    var _default = ParseQuery;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseRelation.js
var require_ParseRelation = __commonJS({
  "node_modules/moralis/lib/browser/ParseRelation.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ParseOp = require_ParseOp();
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var ParseRelation = /* @__PURE__ */ function() {
      function ParseRelation2(parent, key) {
        (0, _classCallCheck2.default)(this, ParseRelation2);
        (0, _defineProperty2.default)(this, "parent", void 0);
        (0, _defineProperty2.default)(this, "key", void 0);
        (0, _defineProperty2.default)(this, "targetClassName", void 0);
        this.parent = parent;
        this.key = key;
        this.targetClassName = null;
      }
      (0, _createClass2.default)(ParseRelation2, [{
        key: "_ensureParentAndKey",
        value: function(parent, key) {
          this.key = this.key || key;
          if (this.key !== key) {
            throw new Error("Internal Error. Relation retrieved from two different keys.");
          }
          if (this.parent) {
            if (this.parent.className !== parent.className) {
              throw new Error("Internal Error. Relation retrieved from two different Objects.");
            }
            if (this.parent.id) {
              if (this.parent.id !== parent.id) {
                throw new Error("Internal Error. Relation retrieved from two different Objects.");
              }
            } else if (parent.id) {
              this.parent = parent;
            }
          } else {
            this.parent = parent;
          }
        }
      }, {
        key: "add",
        value: function(objects) {
          if (!(0, _isArray.default)(objects)) {
            objects = [objects];
          }
          var change = new _ParseOp.RelationOp(objects, []);
          var parent = this.parent;
          if (!parent) {
            throw new Error("Cannot add to a Relation without a parent");
          }
          if (objects.length === 0) {
            return parent;
          }
          parent.set(this.key, change);
          this.targetClassName = change._targetClassName;
          return parent;
        }
      }, {
        key: "remove",
        value: function(objects) {
          if (!(0, _isArray.default)(objects)) {
            objects = [objects];
          }
          var change = new _ParseOp.RelationOp([], objects);
          if (!this.parent) {
            throw new Error("Cannot remove from a Relation without a parent");
          }
          if (objects.length === 0) {
            return;
          }
          this.parent.set(this.key, change);
          this.targetClassName = change._targetClassName;
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __type: "Relation",
            className: this.targetClassName
          };
        }
      }, {
        key: "query",
        value: function query() {
          var query2;
          var parent = this.parent;
          if (!parent) {
            throw new Error("Cannot construct a query for a Relation without a parent");
          }
          if (!this.targetClassName) {
            query2 = new _ParseQuery.default(parent.className);
            query2._extraOptions.redirectClassNameForKey = this.key;
          } else {
            query2 = new _ParseQuery.default(this.targetClassName);
          }
          query2._addCondition("$relatedTo", "object", {
            __type: "Pointer",
            className: parent.className,
            objectId: parent.id
          });
          query2._addCondition("$relatedTo", "key", this.key);
          return query2;
        }
      }]);
      return ParseRelation2;
    }();
    var _default = ParseRelation;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/canBeSerialized.js
var require_canBeSerialized = __commonJS({
  "node_modules/moralis/lib/browser/canBeSerialized.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = canBeSerialized;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    function canBeSerialized(obj) {
      if (!(obj instanceof _ParseObject.default)) {
        return true;
      }
      var attributes = obj.attributes;
      for (var attr in attributes) {
        var val = attributes[attr];
        if (!canBeSerializedHelper(val)) {
          return false;
        }
      }
      return true;
    }
    function canBeSerializedHelper(value) {
      if ((0, _typeof2.default)(value) !== "object") {
        return true;
      }
      if (value instanceof _ParseRelation.default) {
        return true;
      }
      if (value instanceof _ParseObject.default) {
        return !!value.id;
      }
      if (value instanceof _ParseFile.default) {
        if (value.url()) {
          return true;
        }
        return false;
      }
      if ((0, _isArray.default)(value)) {
        for (var i = 0; i < value.length; i++) {
          if (!canBeSerializedHelper(value[i])) {
            return false;
          }
        }
        return true;
      }
      for (var k2 in value) {
        if (!canBeSerializedHelper(value[k2])) {
          return false;
        }
      }
      return true;
    }
  }
});

// node_modules/moralis/lib/browser/escape.js
var require_escape = __commonJS({
  "node_modules/moralis/lib/browser/escape.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = escape2;
    var encoded = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      "/": "&#x2F;",
      "'": "&#x27;",
      '"': "&quot;"
    };
    function escape2(str) {
      return str.replace(/[&<>/'"]/g, function(char2) {
        return encoded[char2];
      });
    }
  }
});

// node_modules/core-js-pure/internals/whitespaces.js
var require_whitespaces = __commonJS({
  "node_modules/core-js-pure/internals/whitespaces.js"(exports, module) {
    init_react();
    module.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
  }
});

// node_modules/core-js-pure/internals/string-trim.js
var require_string_trim = __commonJS({
  "node_modules/core-js-pure/internals/string-trim.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var requireObjectCoercible = require_require_object_coercible();
    var toString2 = require_to_string();
    var whitespaces = require_whitespaces();
    var replace2 = uncurryThis("".replace);
    var whitespace2 = "[" + whitespaces + "]";
    var ltrim = RegExp("^" + whitespace2 + whitespace2 + "*");
    var rtrim = RegExp(whitespace2 + whitespace2 + "*$");
    var createMethod = function(TYPE) {
      return function($this) {
        var string = toString2(requireObjectCoercible($this));
        if (TYPE & 1)
          string = replace2(string, ltrim, "");
        if (TYPE & 2)
          string = replace2(string, rtrim, "");
        return string;
      };
    };
    module.exports = {
      start: createMethod(1),
      end: createMethod(2),
      trim: createMethod(3)
    };
  }
});

// node_modules/core-js-pure/internals/number-parse-int.js
var require_number_parse_int = __commonJS({
  "node_modules/core-js-pure/internals/number-parse-int.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var fails = require_fails();
    var uncurryThis = require_function_uncurry_this();
    var toString2 = require_to_string();
    var trim2 = require_string_trim().trim;
    var whitespaces = require_whitespaces();
    var $parseInt = global2.parseInt;
    var Symbol2 = global2.Symbol;
    var ITERATOR = Symbol2 && Symbol2.iterator;
    var hex = /^[+-]?0x/i;
    var exec = uncurryThis(hex.exec);
    var FORCED = $parseInt(whitespaces + "08") !== 8 || $parseInt(whitespaces + "0x16") !== 22 || ITERATOR && !fails(function() {
      $parseInt(Object(ITERATOR));
    });
    module.exports = FORCED ? function parseInt2(string, radix) {
      var S2 = trim2(toString2(string));
      return $parseInt(S2, radix >>> 0 || (exec(hex, S2) ? 16 : 10));
    } : $parseInt;
  }
});

// node_modules/core-js-pure/modules/es.parse-int.js
var require_es_parse_int = __commonJS({
  "node_modules/core-js-pure/modules/es.parse-int.js"() {
    init_react();
    var $ = require_export();
    var $parseInt = require_number_parse_int();
    $({ global: true, forced: parseInt != $parseInt }, {
      parseInt: $parseInt
    });
  }
});

// node_modules/core-js-pure/es/parse-int.js
var require_parse_int = __commonJS({
  "node_modules/core-js-pure/es/parse-int.js"(exports, module) {
    init_react();
    require_es_parse_int();
    var path = require_path();
    module.exports = path.parseInt;
  }
});

// node_modules/core-js-pure/stable/parse-int.js
var require_parse_int2 = __commonJS({
  "node_modules/core-js-pure/stable/parse-int.js"(exports, module) {
    init_react();
    var parent = require_parse_int();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/parse-int.js
var require_parse_int3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/parse-int.js"(exports, module) {
    init_react();
    module.exports = require_parse_int2();
  }
});

// node_modules/moralis/lib/browser/parseDate.js
var require_parseDate = __commonJS({
  "node_modules/moralis/lib/browser/parseDate.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = parseDate;
    var _parseInt2 = _interopRequireDefault(require_parse_int3());
    function parseDate(iso8601) {
      var regexp = new RegExp("^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2})T([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})(.([0-9]+))?Z$");
      var match2 = regexp.exec(iso8601);
      if (!match2) {
        return null;
      }
      var year = (0, _parseInt2.default)(match2[1]) || 0;
      var month = ((0, _parseInt2.default)(match2[2]) || 1) - 1;
      var day = (0, _parseInt2.default)(match2[3]) || 0;
      var hour = (0, _parseInt2.default)(match2[4]) || 0;
      var minute = (0, _parseInt2.default)(match2[5]) || 0;
      var second = (0, _parseInt2.default)(match2[6]) || 0;
      var milli = (0, _parseInt2.default)(match2[8]) || 0;
      return new Date(Date.UTC(year, month, day, hour, minute, second, milli));
    }
  }
});

// node_modules/moralis/lib/browser/TaskQueue.js
var require_TaskQueue = __commonJS({
  "node_modules/moralis/lib/browser/TaskQueue.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _promiseUtils = require_promiseUtils();
    var TaskQueue = /* @__PURE__ */ function() {
      function TaskQueue2() {
        (0, _classCallCheck2.default)(this, TaskQueue2);
        (0, _defineProperty2.default)(this, "queue", void 0);
        this.queue = [];
      }
      (0, _createClass2.default)(TaskQueue2, [{
        key: "enqueue",
        value: function(task) {
          var _this = this;
          var taskComplete = new _promiseUtils.resolvingPromise();
          this.queue.push({
            task,
            _completion: taskComplete
          });
          if (this.queue.length === 1) {
            task().then(function() {
              _this._dequeue();
              taskComplete.resolve();
            }, function(error) {
              _this._dequeue();
              taskComplete.reject(error);
            });
          }
          return taskComplete;
        }
      }, {
        key: "_dequeue",
        value: function() {
          var _this2 = this;
          this.queue.shift();
          if (this.queue.length) {
            var next2 = this.queue[0];
            next2.task().then(function() {
              _this2._dequeue();
              next2._completion.resolve();
            }, function(error) {
              _this2._dequeue();
              next2._completion.reject(error);
            });
          }
        }
      }]);
      return TaskQueue2;
    }();
    module.exports = TaskQueue;
  }
});

// node_modules/moralis/lib/browser/ObjectStateMutations.js
var require_ObjectStateMutations = __commonJS({
  "node_modules/moralis/lib/browser/ObjectStateMutations.js"(exports) {
    "use strict";
    init_react();
    var _Object$keys = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.commitServerChanges = commitServerChanges;
    exports.defaultState = defaultState;
    exports.estimateAttribute = estimateAttribute;
    exports.estimateAttributes = estimateAttributes;
    exports.mergeFirstPendingState = mergeFirstPendingState;
    exports.popPendingState = popPendingState;
    exports.pushPendingState = pushPendingState;
    exports.setPendingOp = setPendingOp;
    exports.setServerData = setServerData;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _includes = _interopRequireDefault(require_includes5());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _encode = _interopRequireDefault(require_encode());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    var _TaskQueue = _interopRequireDefault(require_TaskQueue());
    var _ParseOp = require_ParseOp();
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var _context, _context2;
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? _forEachInstanceProperty(_context = ownKeys4(Object(source), true)).call(_context, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys4(Object(source))).call(_context2, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function defaultState() {
      return {
        serverData: {},
        pendingOps: [{}],
        objectCache: {},
        tasks: new _TaskQueue.default(),
        existed: false
      };
    }
    function setServerData(serverData, attributes) {
      for (var _attr in attributes) {
        if (typeof attributes[_attr] !== "undefined") {
          serverData[_attr] = attributes[_attr];
        } else {
          delete serverData[_attr];
        }
      }
    }
    function setPendingOp(pendingOps, attr, op) {
      var last3 = pendingOps.length - 1;
      if (op) {
        pendingOps[last3][attr] = op;
      } else {
        delete pendingOps[last3][attr];
      }
    }
    function pushPendingState(pendingOps) {
      pendingOps.push({});
    }
    function popPendingState(pendingOps) {
      var first = pendingOps.shift();
      if (!pendingOps.length) {
        pendingOps[0] = {};
      }
      return first;
    }
    function mergeFirstPendingState(pendingOps) {
      var first = popPendingState(pendingOps);
      var next2 = pendingOps[0];
      for (var _attr2 in first) {
        if (next2[_attr2] && first[_attr2]) {
          var merged = next2[_attr2].mergeWith(first[_attr2]);
          if (merged) {
            next2[_attr2] = merged;
          }
        } else {
          next2[_attr2] = first[_attr2];
        }
      }
    }
    function estimateAttribute(serverData, pendingOps, className, id2, attr) {
      var value = serverData[attr];
      for (var i = 0; i < pendingOps.length; i++) {
        if (pendingOps[i][attr]) {
          if (pendingOps[i][attr] instanceof _ParseOp.RelationOp) {
            if (id2) {
              value = pendingOps[i][attr].applyTo(value, {
                className,
                id: id2
              }, attr);
            }
          } else {
            value = pendingOps[i][attr].applyTo(value);
          }
        }
      }
      return value;
    }
    function estimateAttributes(serverData, pendingOps, className, id2) {
      var data = {};
      for (var attr in serverData) {
        data[attr] = serverData[attr];
      }
      for (var i = 0; i < pendingOps.length; i++) {
        for (attr in pendingOps[i]) {
          if (pendingOps[i][attr] instanceof _ParseOp.RelationOp) {
            if (id2) {
              data[attr] = pendingOps[i][attr].applyTo(data[attr], {
                className,
                id: id2
              }, attr);
            }
          } else {
            if ((0, _includes.default)(attr).call(attr, ".")) {
              var fields = attr.split(".");
              var first = fields[0];
              var last3 = fields[fields.length - 1];
              data[first] = _objectSpread4({}, serverData[first]);
              var object = _objectSpread4({}, data);
              for (var _i = 0; _i < fields.length - 1; _i++) {
                object = object[fields[_i]];
              }
              object[last3] = pendingOps[i][attr].applyTo(object[last3]);
            } else {
              data[attr] = pendingOps[i][attr].applyTo(data[attr]);
            }
          }
        }
      }
      return data;
    }
    function commitServerChanges(serverData, objectCache, changes) {
      for (var _attr3 in changes) {
        var val = changes[_attr3];
        serverData[_attr3] = val;
        if (val && (0, _typeof2.default)(val) === "object" && !(val instanceof _ParseObject.default) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {
          var json = (0, _encode.default)(val, false, true);
          objectCache[_attr3] = (0, _stringify.default)(json);
        }
      }
    }
  }
});

// node_modules/moralis/lib/browser/SingleInstanceStateController.js
var require_SingleInstanceStateController = __commonJS({
  "node_modules/moralis/lib/browser/SingleInstanceStateController.js"(exports) {
    "use strict";
    init_react();
    var _typeof = require_typeof();
    var _WeakMap = require_weak_map3();
    var _Object$defineProperty = require_define_property3();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.clearAllState = clearAllState;
    exports.commitServerChanges = commitServerChanges;
    exports.duplicateState = duplicateState;
    exports.enqueueTask = enqueueTask;
    exports.estimateAttribute = estimateAttribute;
    exports.estimateAttributes = estimateAttributes;
    exports.getObjectCache = getObjectCache;
    exports.getPendingOps = getPendingOps;
    exports.getServerData = getServerData;
    exports.getState = getState;
    exports.initializeState = initializeState;
    exports.mergeFirstPendingState = mergeFirstPendingState;
    exports.popPendingState = popPendingState;
    exports.pushPendingState = pushPendingState;
    exports.removeState = removeState;
    exports.setPendingOp = setPendingOp;
    exports.setServerData = setServerData;
    var ObjectStateMutations = _interopRequireWildcard(require_ObjectStateMutations());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap();
      var cacheNodeInterop = new _WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var objectState = {};
    function getState(obj) {
      var classData = objectState[obj.className];
      if (classData) {
        return classData[obj.id] || null;
      }
      return null;
    }
    function initializeState(obj, initial) {
      var state = getState(obj);
      if (state) {
        return state;
      }
      if (!objectState[obj.className]) {
        objectState[obj.className] = {};
      }
      if (!initial) {
        initial = ObjectStateMutations.defaultState();
      }
      state = objectState[obj.className][obj.id] = initial;
      return state;
    }
    function removeState(obj) {
      var state = getState(obj);
      if (state === null) {
        return null;
      }
      delete objectState[obj.className][obj.id];
      return state;
    }
    function getServerData(obj) {
      var state = getState(obj);
      if (state) {
        return state.serverData;
      }
      return {};
    }
    function setServerData(obj, attributes) {
      var _initializeState = initializeState(obj), serverData = _initializeState.serverData;
      ObjectStateMutations.setServerData(serverData, attributes);
    }
    function getPendingOps(obj) {
      var state = getState(obj);
      if (state) {
        return state.pendingOps;
      }
      return [{}];
    }
    function setPendingOp(obj, attr, op) {
      var _initializeState2 = initializeState(obj), pendingOps = _initializeState2.pendingOps;
      ObjectStateMutations.setPendingOp(pendingOps, attr, op);
    }
    function pushPendingState(obj) {
      var _initializeState3 = initializeState(obj), pendingOps = _initializeState3.pendingOps;
      ObjectStateMutations.pushPendingState(pendingOps);
    }
    function popPendingState(obj) {
      var _initializeState4 = initializeState(obj), pendingOps = _initializeState4.pendingOps;
      return ObjectStateMutations.popPendingState(pendingOps);
    }
    function mergeFirstPendingState(obj) {
      var pendingOps = getPendingOps(obj);
      ObjectStateMutations.mergeFirstPendingState(pendingOps);
    }
    function getObjectCache(obj) {
      var state = getState(obj);
      if (state) {
        return state.objectCache;
      }
      return {};
    }
    function estimateAttribute(obj, attr) {
      var serverData = getServerData(obj);
      var pendingOps = getPendingOps(obj);
      return ObjectStateMutations.estimateAttribute(serverData, pendingOps, obj.className, obj.id, attr);
    }
    function estimateAttributes(obj) {
      var serverData = getServerData(obj);
      var pendingOps = getPendingOps(obj);
      return ObjectStateMutations.estimateAttributes(serverData, pendingOps, obj.className, obj.id);
    }
    function commitServerChanges(obj, changes) {
      var state = initializeState(obj);
      ObjectStateMutations.commitServerChanges(state.serverData, state.objectCache, changes);
    }
    function enqueueTask(obj, task) {
      var state = initializeState(obj);
      return state.tasks.enqueue(task);
    }
    function clearAllState() {
      objectState = {};
    }
    function duplicateState(source, dest) {
      dest.id = source.id;
    }
  }
});

// node_modules/moralis/lib/browser/UniqueInstanceStateController.js
var require_UniqueInstanceStateController = __commonJS({
  "node_modules/moralis/lib/browser/UniqueInstanceStateController.js"(exports) {
    "use strict";
    init_react();
    var _typeof = require_typeof();
    var _WeakMap2 = require_weak_map3();
    var _Object$defineProperty = require_define_property3();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.clearAllState = clearAllState;
    exports.commitServerChanges = commitServerChanges;
    exports.duplicateState = duplicateState;
    exports.enqueueTask = enqueueTask;
    exports.estimateAttribute = estimateAttribute;
    exports.estimateAttributes = estimateAttributes;
    exports.getObjectCache = getObjectCache;
    exports.getPendingOps = getPendingOps;
    exports.getServerData = getServerData;
    exports.getState = getState;
    exports.initializeState = initializeState;
    exports.mergeFirstPendingState = mergeFirstPendingState;
    exports.popPendingState = popPendingState;
    exports.pushPendingState = pushPendingState;
    exports.removeState = removeState;
    exports.setPendingOp = setPendingOp;
    exports.setServerData = setServerData;
    var _weakMap = _interopRequireDefault(require_weak_map3());
    var ObjectStateMutations = _interopRequireWildcard(require_ObjectStateMutations());
    var _TaskQueue = _interopRequireDefault(require_TaskQueue());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap2 !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap2();
      var cacheNodeInterop = new _WeakMap2();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var objectState = new _weakMap.default();
    function getState(obj) {
      var classData = objectState.get(obj);
      return classData || null;
    }
    function initializeState(obj, initial) {
      var state = getState(obj);
      if (state) {
        return state;
      }
      if (!initial) {
        initial = {
          serverData: {},
          pendingOps: [{}],
          objectCache: {},
          tasks: new _TaskQueue.default(),
          existed: false
        };
      }
      state = initial;
      objectState.set(obj, state);
      return state;
    }
    function removeState(obj) {
      var state = getState(obj);
      if (state === null) {
        return null;
      }
      objectState.delete(obj);
      return state;
    }
    function getServerData(obj) {
      var state = getState(obj);
      if (state) {
        return state.serverData;
      }
      return {};
    }
    function setServerData(obj, attributes) {
      var _initializeState = initializeState(obj), serverData = _initializeState.serverData;
      ObjectStateMutations.setServerData(serverData, attributes);
    }
    function getPendingOps(obj) {
      var state = getState(obj);
      if (state) {
        return state.pendingOps;
      }
      return [{}];
    }
    function setPendingOp(obj, attr, op) {
      var _initializeState2 = initializeState(obj), pendingOps = _initializeState2.pendingOps;
      ObjectStateMutations.setPendingOp(pendingOps, attr, op);
    }
    function pushPendingState(obj) {
      var _initializeState3 = initializeState(obj), pendingOps = _initializeState3.pendingOps;
      ObjectStateMutations.pushPendingState(pendingOps);
    }
    function popPendingState(obj) {
      var _initializeState4 = initializeState(obj), pendingOps = _initializeState4.pendingOps;
      return ObjectStateMutations.popPendingState(pendingOps);
    }
    function mergeFirstPendingState(obj) {
      var pendingOps = getPendingOps(obj);
      ObjectStateMutations.mergeFirstPendingState(pendingOps);
    }
    function getObjectCache(obj) {
      var state = getState(obj);
      if (state) {
        return state.objectCache;
      }
      return {};
    }
    function estimateAttribute(obj, attr) {
      var serverData = getServerData(obj);
      var pendingOps = getPendingOps(obj);
      return ObjectStateMutations.estimateAttribute(serverData, pendingOps, obj.className, obj.id, attr);
    }
    function estimateAttributes(obj) {
      var serverData = getServerData(obj);
      var pendingOps = getPendingOps(obj);
      return ObjectStateMutations.estimateAttributes(serverData, pendingOps, obj.className, obj.id);
    }
    function commitServerChanges(obj, changes) {
      var state = initializeState(obj);
      ObjectStateMutations.commitServerChanges(state.serverData, state.objectCache, changes);
    }
    function enqueueTask(obj, task) {
      var state = initializeState(obj);
      return state.tasks.enqueue(task);
    }
    function duplicateState(source, dest) {
      var oldState = initializeState(source);
      var newState = initializeState(dest);
      for (var key in oldState.serverData) {
        newState.serverData[key] = oldState.serverData[key];
      }
      for (var index = 0; index < oldState.pendingOps.length; index++) {
        for (var _key in oldState.pendingOps[index]) {
          newState.pendingOps[index][_key] = oldState.pendingOps[index][_key];
        }
      }
      for (var _key2 in oldState.objectCache) {
        newState.objectCache[_key2] = oldState.objectCache[_key2];
      }
      newState.existed = oldState.existed;
    }
    function clearAllState() {
      objectState = new _weakMap.default();
    }
  }
});

// node_modules/moralis/lib/browser/unsavedChildren.js
var require_unsavedChildren = __commonJS({
  "node_modules/moralis/lib/browser/unsavedChildren.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = unsavedChildren;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _concat = _interopRequireDefault(require_concat4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    function unsavedChildren(obj, allowDeepUnsaved) {
      var _context;
      var encountered = {
        objects: {},
        files: []
      };
      var identifier2 = (0, _concat.default)(_context = "".concat(obj.className, ":")).call(_context, obj._getId());
      encountered.objects[identifier2] = obj.dirty() ? obj : true;
      var attributes = obj.attributes;
      for (var attr in attributes) {
        if ((0, _typeof2.default)(attributes[attr]) === "object") {
          traverse(attributes[attr], encountered, false, !!allowDeepUnsaved);
        }
      }
      var unsaved = [];
      for (var id2 in encountered.objects) {
        if (id2 !== identifier2 && encountered.objects[id2] !== true) {
          unsaved.push(encountered.objects[id2]);
        }
      }
      return (0, _concat.default)(unsaved).call(unsaved, encountered.files);
    }
    function traverse(obj, encountered, shouldThrow, allowDeepUnsaved) {
      if (obj instanceof _ParseObject.default) {
        var _context2;
        if (!obj.id && shouldThrow) {
          throw new Error("Cannot create a pointer to an unsaved Object.");
        }
        var _identifier = (0, _concat.default)(_context2 = "".concat(obj.className, ":")).call(_context2, obj._getId());
        if (!encountered.objects[_identifier]) {
          encountered.objects[_identifier] = obj.dirty() ? obj : true;
          var attributes = obj.attributes;
          for (var attr in attributes) {
            if ((0, _typeof2.default)(attributes[attr]) === "object") {
              traverse(attributes[attr], encountered, !allowDeepUnsaved, allowDeepUnsaved);
            }
          }
        }
        return;
      }
      if (obj instanceof _ParseFile.default) {
        var _context3;
        if (!obj.url() && (0, _indexOf.default)(_context3 = encountered.files).call(_context3, obj) < 0) {
          encountered.files.push(obj);
        }
        return;
      }
      if (obj instanceof _ParseRelation.default) {
        return;
      }
      if ((0, _isArray.default)(obj)) {
        (0, _forEach.default)(obj).call(obj, function(el) {
          if ((0, _typeof2.default)(el) === "object") {
            traverse(el, encountered, shouldThrow, allowDeepUnsaved);
          }
        });
      }
      for (var k2 in obj) {
        if ((0, _typeof2.default)(obj[k2]) === "object") {
          traverse(obj[k2], encountered, shouldThrow, allowDeepUnsaved);
        }
      }
    }
  }
});

// node_modules/moralis/lib/browser/ParseObject.js
var require_ParseObject = __commonJS({
  "node_modules/moralis/lib/browser/ParseObject.js"(exports) {
    "use strict";
    init_react();
    var _typeof3 = require_typeof();
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty2 = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty2 = require_define_property3();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray2 = require_is_array4();
    var _WeakMap = require_weak_map3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty2(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _keys = _interopRequireDefault(require_keys3());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _includes = _interopRequireDefault(require_includes5());
    var _getPrototypeOf = _interopRequireDefault(require_get_prototype_of6());
    var _concat = _interopRequireDefault(require_concat4());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _promise = _interopRequireDefault(require_promise3());
    var _create = _interopRequireDefault(require_create6());
    var _defineProperty3 = _interopRequireDefault(require_define_property3());
    var _find = _interopRequireDefault(require_find4());
    var _map = _interopRequireDefault(require_map9());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _canBeSerialized = _interopRequireDefault(require_canBeSerialized());
    var _decode = _interopRequireDefault(require_decode());
    var _encode = _interopRequireDefault(require_encode());
    var _escape2 = _interopRequireDefault(require_escape());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _parseDate = _interopRequireDefault(require_parseDate());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _promiseUtils = require_promiseUtils();
    var _LocalDatastoreUtils = require_LocalDatastoreUtils();
    var _ParseOp = require_ParseOp();
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    var SingleInstanceStateController = _interopRequireWildcard(require_SingleInstanceStateController());
    var _unique = _interopRequireDefault(require_unique());
    var UniqueInstanceStateController = _interopRequireWildcard(require_UniqueInstanceStateController());
    var _unsavedChildren = _interopRequireDefault(require_unsavedChildren());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap();
      var cacheNodeInterop = new _WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = _Object$defineProperty2 && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty2(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray2(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context21;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty(_context21 = Object.prototype.toString.call(o2)).call(_context21, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var _context19, _context20;
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? _forEachInstanceProperty2(_context19 = ownKeys4(Object(source), true)).call(_context19, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context20 = ownKeys4(Object(source))).call(_context20, function(key) {
          _Object$defineProperty2(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var _require = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var uuidv4 = _require.v4;
    var classMap = {};
    var objectCount = 0;
    var singleInstance = !_CoreManager.default.get("IS_NODE");
    if (singleInstance) {
      _CoreManager.default.setObjectStateController(SingleInstanceStateController);
    } else {
      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);
    }
    function getServerUrlPath() {
      var serverUrl = _CoreManager.default.get("SERVER_URL");
      if (serverUrl[serverUrl.length - 1] !== "/") {
        serverUrl += "/";
      }
      var url = serverUrl.replace(/https?:\/\//, "");
      return url.substr((0, _indexOf.default)(url).call(url, "/"));
    }
    var ParseObject = /* @__PURE__ */ function() {
      function ParseObject2(className, attributes, options) {
        (0, _classCallCheck2.default)(this, ParseObject2);
        (0, _defineProperty2.default)(this, "id", void 0);
        (0, _defineProperty2.default)(this, "_localId", void 0);
        (0, _defineProperty2.default)(this, "_objCount", void 0);
        (0, _defineProperty2.default)(this, "className", void 0);
        if (typeof this.initialize === "function") {
          this.initialize.apply(this, arguments);
        }
        var toSet = null;
        this._objCount = objectCount++;
        if (typeof className === "string") {
          this.className = className;
          if (attributes && (0, _typeof2.default)(attributes) === "object") {
            toSet = attributes;
          }
        } else if (className && (0, _typeof2.default)(className) === "object") {
          this.className = className.className;
          toSet = {};
          for (var _attr in className) {
            if (_attr !== "className") {
              toSet[_attr] = className[_attr];
            }
          }
          if (attributes && (0, _typeof2.default)(attributes) === "object") {
            options = attributes;
          }
        }
        if (toSet && !this.set(toSet, options)) {
          throw new Error("Can't create an invalid Parse Object");
        }
      }
      (0, _createClass2.default)(ParseObject2, [{
        key: "attributes",
        get: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));
        }
      }, {
        key: "createdAt",
        get: function() {
          return this._getServerData().createdAt;
        }
      }, {
        key: "updatedAt",
        get: function() {
          return this._getServerData().updatedAt;
        }
      }, {
        key: "_getId",
        value: function() {
          if (typeof this.id === "string") {
            return this.id;
          }
          if (typeof this._localId === "string") {
            return this._localId;
          }
          var localId = "local".concat(uuidv4());
          this._localId = localId;
          return localId;
        }
      }, {
        key: "_getStateIdentifier",
        value: function() {
          if (singleInstance) {
            var id2 = this.id;
            if (!id2) {
              id2 = this._getId();
            }
            return {
              id: id2,
              className: this.className
            };
          }
          return this;
        }
      }, {
        key: "_getServerData",
        value: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          return stateController.getServerData(this._getStateIdentifier());
        }
      }, {
        key: "_clearServerData",
        value: function() {
          var serverData = this._getServerData();
          var unset = {};
          for (var _attr2 in serverData) {
            unset[_attr2] = void 0;
          }
          var stateController = _CoreManager.default.getObjectStateController();
          stateController.setServerData(this._getStateIdentifier(), unset);
        }
      }, {
        key: "_getPendingOps",
        value: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          return stateController.getPendingOps(this._getStateIdentifier());
        }
      }, {
        key: "_clearPendingOps",
        value: function(keysToClear) {
          var pending = this._getPendingOps();
          var latest = pending[pending.length - 1];
          var keys = keysToClear || (0, _keys.default)(latest);
          (0, _forEach.default)(keys).call(keys, function(key) {
            delete latest[key];
          });
        }
      }, {
        key: "_getDirtyObjectAttributes",
        value: function() {
          var attributes = this.attributes;
          var stateController = _CoreManager.default.getObjectStateController();
          var objectCache = stateController.getObjectCache(this._getStateIdentifier());
          var dirty = {};
          for (var _attr3 in attributes) {
            var val = attributes[_attr3];
            if (val && (0, _typeof2.default)(val) === "object" && !(val instanceof ParseObject2) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {
              try {
                var json = (0, _encode.default)(val, false, true);
                var stringified = (0, _stringify.default)(json);
                if (objectCache[_attr3] !== stringified) {
                  dirty[_attr3] = val;
                }
              } catch (e) {
                dirty[_attr3] = val;
              }
            }
          }
          return dirty;
        }
      }, {
        key: "_toFullJSON",
        value: function(seen, offline) {
          var json = this.toJSON(seen, offline);
          json.__type = "Object";
          json.className = this.className;
          return json;
        }
      }, {
        key: "_getSaveJSON",
        value: function() {
          var pending = this._getPendingOps();
          var dirtyObjects = this._getDirtyObjectAttributes();
          var json = {};
          for (var attr in dirtyObjects) {
            var isDotNotation = false;
            for (var i = 0; i < pending.length; i += 1) {
              for (var field in pending[i]) {
                if ((0, _includes.default)(field).call(field, ".")) {
                  var fieldName = field.split(".")[0];
                  if (fieldName === attr) {
                    isDotNotation = true;
                    break;
                  }
                }
              }
            }
            if (!isDotNotation) {
              json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();
            }
          }
          for (attr in pending[0]) {
            json[attr] = pending[0][attr].toJSON();
          }
          return json;
        }
      }, {
        key: "_getSaveParams",
        value: function() {
          var method = this.id ? "PUT" : "POST";
          var body = this._getSaveJSON();
          var path = "classes/".concat(this.className);
          if (this.id) {
            path += "/".concat(this.id);
          } else if (this.className === "_User") {
            path = "users";
          }
          return {
            method,
            body,
            path
          };
        }
      }, {
        key: "_finishFetch",
        value: function(serverData) {
          if (!this.id && serverData.objectId) {
            this.id = serverData.objectId;
          }
          var stateController = _CoreManager.default.getObjectStateController();
          stateController.initializeState(this._getStateIdentifier());
          var decoded = {};
          for (var _attr4 in serverData) {
            if (_attr4 === "ACL") {
              decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);
            } else if (_attr4 !== "objectId") {
              decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);
              if (decoded[_attr4] instanceof _ParseRelation.default) {
                decoded[_attr4]._ensureParentAndKey(this, _attr4);
              }
            }
          }
          if (decoded.createdAt && typeof decoded.createdAt === "string") {
            decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);
          }
          if (decoded.updatedAt && typeof decoded.updatedAt === "string") {
            decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);
          }
          if (!decoded.updatedAt && decoded.createdAt) {
            decoded.updatedAt = decoded.createdAt;
          }
          stateController.commitServerChanges(this._getStateIdentifier(), decoded);
        }
      }, {
        key: "_setExisted",
        value: function(existed) {
          var stateController = _CoreManager.default.getObjectStateController();
          var state = stateController.getState(this._getStateIdentifier());
          if (state) {
            state.existed = existed;
          }
        }
      }, {
        key: "_migrateId",
        value: function(serverId) {
          if (this._localId && serverId) {
            if (singleInstance) {
              var stateController = _CoreManager.default.getObjectStateController();
              var oldState = stateController.removeState(this._getStateIdentifier());
              this.id = serverId;
              delete this._localId;
              if (oldState) {
                stateController.initializeState(this._getStateIdentifier(), oldState);
              }
            } else {
              this.id = serverId;
              delete this._localId;
            }
          }
        }
      }, {
        key: "_handleSaveResponse",
        value: function(response, status) {
          var changes = {};
          var stateController = _CoreManager.default.getObjectStateController();
          var pending = stateController.popPendingState(this._getStateIdentifier());
          for (var attr in pending) {
            if (pending[attr] instanceof _ParseOp.RelationOp) {
              changes[attr] = pending[attr].applyTo(void 0, this, attr);
            } else if (!(attr in response) && !(0, _includes.default)(attr).call(attr, ".")) {
              changes[attr] = pending[attr].applyTo(void 0);
            }
          }
          for (attr in response) {
            if ((attr === "createdAt" || attr === "updatedAt") && typeof response[attr] === "string") {
              changes[attr] = (0, _parseDate.default)(response[attr]);
            } else if (attr === "ACL") {
              changes[attr] = new _ParseACL.default(response[attr]);
            } else if (attr !== "objectId") {
              var val = (0, _decode.default)(response[attr]);
              if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {
                changes[attr] = _objectSpread4(_objectSpread4({}, this.attributes[attr]), val);
              } else {
                changes[attr] = val;
              }
              if (changes[attr] instanceof _ParseOp.UnsetOp) {
                changes[attr] = void 0;
              }
            }
          }
          if (changes.createdAt && !changes.updatedAt) {
            changes.updatedAt = changes.createdAt;
          }
          this._migrateId(response.objectId);
          if (status !== 201) {
            this._setExisted(true);
          }
          stateController.commitServerChanges(this._getStateIdentifier(), changes);
        }
      }, {
        key: "_handleSaveError",
        value: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          stateController.mergeFirstPendingState(this._getStateIdentifier());
        }
      }, {
        key: "initialize",
        value: function() {
        }
      }, {
        key: "toJSON",
        value: function(seen, offline) {
          var _context;
          var seenEntry = this.id ? (0, _concat.default)(_context = "".concat(this.className, ":")).call(_context, this.id) : this;
          seen = seen || [seenEntry];
          var json = {};
          var attrs = this.attributes;
          for (var _attr5 in attrs) {
            if ((_attr5 === "createdAt" || _attr5 === "updatedAt") && attrs[_attr5].toJSON) {
              json[_attr5] = attrs[_attr5].toJSON();
            } else {
              json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);
            }
          }
          var pending = this._getPendingOps();
          for (var _attr6 in pending[0]) {
            json[_attr6] = pending[0][_attr6].toJSON(offline);
          }
          if (this.id) {
            json.objectId = this.id;
          }
          return json;
        }
      }, {
        key: "equals",
        value: function(other) {
          if (this === other) {
            return true;
          }
          return other instanceof ParseObject2 && this.className === other.className && this.id === other.id && typeof this.id !== "undefined";
        }
      }, {
        key: "dirty",
        value: function(attr) {
          if (!this.id) {
            return true;
          }
          var pendingOps = this._getPendingOps();
          var dirtyObjects = this._getDirtyObjectAttributes();
          if (attr) {
            if (dirtyObjects.hasOwnProperty(attr)) {
              return true;
            }
            for (var i = 0; i < pendingOps.length; i++) {
              if (pendingOps[i].hasOwnProperty(attr)) {
                return true;
              }
            }
            return false;
          }
          if ((0, _keys.default)(pendingOps[0]).length !== 0) {
            return true;
          }
          if ((0, _keys.default)(dirtyObjects).length !== 0) {
            return true;
          }
          return false;
        }
      }, {
        key: "dirtyKeys",
        value: function() {
          var pendingOps = this._getPendingOps();
          var keys = {};
          for (var i = 0; i < pendingOps.length; i++) {
            for (var _attr7 in pendingOps[i]) {
              keys[_attr7] = true;
            }
          }
          var dirtyObjects = this._getDirtyObjectAttributes();
          for (var _attr8 in dirtyObjects) {
            keys[_attr8] = true;
          }
          return (0, _keys.default)(keys);
        }
      }, {
        key: "isDataAvailable",
        value: function() {
          var serverData = this._getServerData();
          return !!(0, _keys.default)(serverData).length;
        }
      }, {
        key: "toPointer",
        value: function() {
          if (!this.id) {
            throw new Error("Cannot create a pointer to an unsaved ParseObject");
          }
          return {
            __type: "Pointer",
            className: this.className,
            objectId: this.id
          };
        }
      }, {
        key: "toOfflinePointer",
        value: function() {
          if (!this._localId) {
            throw new Error("Cannot create a offline pointer to a saved ParseObject");
          }
          return {
            __type: "Object",
            className: this.className,
            _localId: this._localId
          };
        }
      }, {
        key: "get",
        value: function(attr) {
          return this.attributes[attr];
        }
      }, {
        key: "relation",
        value: function(attr) {
          var value = this.get(attr);
          if (value) {
            if (!(value instanceof _ParseRelation.default)) {
              throw new Error("Called relation() on non-relation field ".concat(attr));
            }
            value._ensureParentAndKey(this, attr);
            return value;
          }
          return new _ParseRelation.default(this, attr);
        }
      }, {
        key: "escape",
        value: function(attr) {
          var val = this.attributes[attr];
          if (val == null) {
            return "";
          }
          if (typeof val !== "string") {
            if (typeof val.toString !== "function") {
              return "";
            }
            val = val.toString();
          }
          return (0, _escape2.default)(val);
        }
      }, {
        key: "has",
        value: function(attr) {
          var attributes = this.attributes;
          if (attributes.hasOwnProperty(attr)) {
            return attributes[attr] != null;
          }
          return false;
        }
      }, {
        key: "set",
        value: function(key, value, options) {
          var changes = {};
          var newOps = {};
          if (key && (0, _typeof2.default)(key) === "object") {
            changes = key;
            options = value;
          } else if (typeof key === "string") {
            changes[key] = value;
          } else {
            return this;
          }
          options = options || {};
          var readonly = [];
          if (typeof this.constructor.readOnlyAttributes === "function") {
            readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());
          }
          for (var k2 in changes) {
            if (k2 === "createdAt" || k2 === "updatedAt") {
              continue;
            }
            if ((0, _indexOf.default)(readonly).call(readonly, k2) > -1) {
              throw new Error("Cannot modify readonly attribute: ".concat(k2));
            }
            if (options.unset) {
              newOps[k2] = new _ParseOp.UnsetOp();
            } else if (changes[k2] instanceof _ParseOp.Op) {
              newOps[k2] = changes[k2];
            } else if (changes[k2] && (0, _typeof2.default)(changes[k2]) === "object" && typeof changes[k2].__op === "string") {
              newOps[k2] = (0, _ParseOp.opFromJSON)(changes[k2]);
            } else if (k2 === "objectId" || k2 === "id") {
              if (typeof changes[k2] === "string") {
                this.id = changes[k2];
              }
            } else if (k2 === "ACL" && (0, _typeof2.default)(changes[k2]) === "object" && !(changes[k2] instanceof _ParseACL.default)) {
              newOps[k2] = new _ParseOp.SetOp(new _ParseACL.default(changes[k2]));
            } else if (changes[k2] instanceof _ParseRelation.default) {
              var relation = new _ParseRelation.default(this, k2);
              relation.targetClassName = changes[k2].targetClassName;
              newOps[k2] = new _ParseOp.SetOp(relation);
            } else {
              newOps[k2] = new _ParseOp.SetOp(changes[k2]);
            }
          }
          var currentAttributes = this.attributes;
          var serverData = this._getServerData();
          if (typeof key === "string" && (0, _includes.default)(key).call(key, ".")) {
            var field = key.split(".")[0];
            if (!serverData[field]) {
              return this;
            }
          }
          var newValues = {};
          for (var _attr9 in newOps) {
            if (newOps[_attr9] instanceof _ParseOp.RelationOp) {
              newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);
            } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {
              newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);
            }
          }
          if (!options.ignoreValidation) {
            var validation = this.validate(newValues);
            if (validation) {
              if (typeof options.error === "function") {
                options.error(this, validation);
              }
              return false;
            }
          }
          var pendingOps = this._getPendingOps();
          var last3 = pendingOps.length - 1;
          var stateController = _CoreManager.default.getObjectStateController();
          for (var _attr10 in newOps) {
            var nextOp = newOps[_attr10].mergeWith(pendingOps[last3][_attr10]);
            stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);
          }
          return this;
        }
      }, {
        key: "unset",
        value: function(attr, options) {
          options = options || {};
          options.unset = true;
          return this.set(attr, null, options);
        }
      }, {
        key: "increment",
        value: function(attr, amount) {
          if (typeof amount === "undefined") {
            amount = 1;
          }
          if (typeof amount !== "number") {
            throw new Error("Cannot increment by a non-numeric amount.");
          }
          return this.set(attr, new _ParseOp.IncrementOp(amount));
        }
      }, {
        key: "decrement",
        value: function(attr, amount) {
          if (typeof amount === "undefined") {
            amount = 1;
          }
          if (typeof amount !== "number") {
            throw new Error("Cannot decrement by a non-numeric amount.");
          }
          return this.set(attr, new _ParseOp.IncrementOp(amount * -1));
        }
      }, {
        key: "add",
        value: function(attr, item) {
          return this.set(attr, new _ParseOp.AddOp([item]));
        }
      }, {
        key: "addAll",
        value: function(attr, items) {
          return this.set(attr, new _ParseOp.AddOp(items));
        }
      }, {
        key: "addUnique",
        value: function(attr, item) {
          return this.set(attr, new _ParseOp.AddUniqueOp([item]));
        }
      }, {
        key: "addAllUnique",
        value: function(attr, items) {
          return this.set(attr, new _ParseOp.AddUniqueOp(items));
        }
      }, {
        key: "remove",
        value: function(attr, item) {
          return this.set(attr, new _ParseOp.RemoveOp([item]));
        }
      }, {
        key: "removeAll",
        value: function(attr, items) {
          return this.set(attr, new _ParseOp.RemoveOp(items));
        }
      }, {
        key: "op",
        value: function(attr) {
          var pending = this._getPendingOps();
          for (var i = pending.length; i--; ) {
            if (pending[i][attr]) {
              return pending[i][attr];
            }
          }
        }
      }, {
        key: "clone",
        value: function clone() {
          var clone2 = new this.constructor();
          if (!clone2.className) {
            clone2.className = this.className;
          }
          var attributes = this.attributes;
          if (typeof this.constructor.readOnlyAttributes === "function") {
            var readonly = this.constructor.readOnlyAttributes() || [];
            var copy2 = {};
            for (var a2 in attributes) {
              if ((0, _indexOf.default)(readonly).call(readonly, a2) < 0) {
                copy2[a2] = attributes[a2];
              }
            }
            attributes = copy2;
          }
          if (clone2.set) {
            clone2.set(attributes);
          }
          return clone2;
        }
      }, {
        key: "newInstance",
        value: function() {
          var clone = new this.constructor();
          if (!clone.className) {
            clone.className = this.className;
          }
          clone.id = this.id;
          if (singleInstance) {
            return clone;
          }
          var stateController = _CoreManager.default.getObjectStateController();
          if (stateController) {
            stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());
          }
          return clone;
        }
      }, {
        key: "isNew",
        value: function() {
          return !this.id;
        }
      }, {
        key: "existed",
        value: function() {
          if (!this.id) {
            return false;
          }
          var stateController = _CoreManager.default.getObjectStateController();
          var state = stateController.getState(this._getStateIdentifier());
          if (state) {
            return state.existed;
          }
          return false;
        }
      }, {
        key: "exists",
        value: function() {
          var _exists = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(options) {
            var query;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (this.id) {
                      _context2.next = 2;
                      break;
                    }
                    return _context2.abrupt("return", false);
                  case 2:
                    _context2.prev = 2;
                    query = new _ParseQuery.default(this.className);
                    _context2.next = 6;
                    return query.get(this.id, options);
                  case 6:
                    return _context2.abrupt("return", true);
                  case 9:
                    _context2.prev = 9;
                    _context2.t0 = _context2["catch"](2);
                    if (!(_context2.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {
                      _context2.next = 13;
                      break;
                    }
                    return _context2.abrupt("return", false);
                  case 13:
                    throw _context2.t0;
                  case 14:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this, [[2, 9]]);
          }));
          return function() {
            return _exists.apply(this, arguments);
          };
        }()
      }, {
        key: "isValid",
        value: function() {
          return !this.validate(this.attributes);
        }
      }, {
        key: "validate",
        value: function(attrs) {
          if (attrs.hasOwnProperty("ACL") && !(attrs.ACL instanceof _ParseACL.default)) {
            return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "ACL must be a Parse ACL.");
          }
          for (var _key in attrs) {
            if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {
              return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);
            }
          }
          return false;
        }
      }, {
        key: "getACL",
        value: function() {
          var acl = this.get("ACL");
          if (acl instanceof _ParseACL.default) {
            return acl;
          }
          return null;
        }
      }, {
        key: "setACL",
        value: function(acl, options) {
          return this.set("ACL", acl, options);
        }
      }, {
        key: "revert",
        value: function() {
          var keysToRevert;
          for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            keys[_key2] = arguments[_key2];
          }
          if (keys.length) {
            keysToRevert = [];
            var _iterator = _createForOfIteratorHelper(keys), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var _key3 = _step.value;
                if (typeof _key3 === "string") {
                  keysToRevert.push(_key3);
                } else {
                  throw new Error("Parse.Object#revert expects either no, or a list of string, arguments.");
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
          this._clearPendingOps(keysToRevert);
        }
      }, {
        key: "clear",
        value: function() {
          var attributes = this.attributes;
          var erasable = {};
          var readonly = ["createdAt", "updatedAt"];
          if (typeof this.constructor.readOnlyAttributes === "function") {
            readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());
          }
          for (var _attr11 in attributes) {
            if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {
              erasable[_attr11] = true;
            }
          }
          return this.set(erasable, {
            unset: true
          });
        }
      }, {
        key: "fetch",
        value: function(options) {
          options = options || {};
          var fetchOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            fetchOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            fetchOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            fetchOptions.context = options.context;
          }
          if (options.hasOwnProperty("include")) {
            fetchOptions.include = [];
            if ((0, _isArray.default)(options.include)) {
              var _context3;
              (0, _forEach.default)(_context3 = options.include).call(_context3, function(key) {
                if ((0, _isArray.default)(key)) {
                  var _context4;
                  fetchOptions.include = (0, _concat.default)(_context4 = fetchOptions.include).call(_context4, key);
                } else {
                  fetchOptions.include.push(key);
                }
              });
            } else {
              fetchOptions.include.push(options.include);
            }
          }
          var controller = _CoreManager.default.getObjectController();
          return controller.fetch(this, true, fetchOptions);
        }
      }, {
        key: "fetchWithInclude",
        value: function(keys, options) {
          options = options || {};
          options.include = keys;
          return this.fetch(options);
        }
      }, {
        key: "save",
        value: function(arg1, arg2, arg3) {
          var _this = this;
          var attrs;
          var options;
          if ((0, _typeof2.default)(arg1) === "object" || typeof arg1 === "undefined") {
            attrs = arg1;
            if ((0, _typeof2.default)(arg2) === "object") {
              options = arg2;
            }
          } else {
            attrs = {};
            attrs[arg1] = arg2;
            options = arg3;
          }
          if (attrs) {
            var validation = this.validate(attrs);
            if (validation) {
              return _promise.default.reject(validation);
            }
            this.set(attrs, options);
          }
          options = options || {};
          var saveOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            saveOptions.useMasterKey = !!options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken") && typeof options.sessionToken === "string") {
            saveOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("installationId") && typeof options.installationId === "string") {
            saveOptions.installationId = options.installationId;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            saveOptions.context = options.context;
          }
          var controller = _CoreManager.default.getObjectController();
          var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;
          return controller.save(unsaved, saveOptions).then(function() {
            return controller.save(_this, saveOptions);
          });
        }
      }, {
        key: "destroy",
        value: function(options) {
          options = options || {};
          var destroyOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            destroyOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            destroyOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            destroyOptions.context = options.context;
          }
          if (!this.id) {
            return _promise.default.resolve();
          }
          return _CoreManager.default.getObjectController().destroy(this, destroyOptions);
        }
      }, {
        key: "pin",
        value: function() {
          return ParseObject2.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);
        }
      }, {
        key: "unPin",
        value: function() {
          return ParseObject2.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);
        }
      }, {
        key: "isPinned",
        value: function() {
          var _isPinned = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            var localDatastore, objectKey, pin;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    localDatastore = _CoreManager.default.getLocalDatastore();
                    if (localDatastore.isEnabled) {
                      _context5.next = 3;
                      break;
                    }
                    return _context5.abrupt("return", _promise.default.reject("Parse.enableLocalDatastore() must be called first"));
                  case 3:
                    objectKey = localDatastore.getKeyForObject(this);
                    _context5.next = 6;
                    return localDatastore.fromPinWithName(objectKey);
                  case 6:
                    pin = _context5.sent;
                    return _context5.abrupt("return", pin.length > 0);
                  case 8:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _isPinned.apply(this, arguments);
          };
        }()
      }, {
        key: "pinWithName",
        value: function(name2) {
          return ParseObject2.pinAllWithName(name2, [this]);
        }
      }, {
        key: "unPinWithName",
        value: function(name2) {
          return ParseObject2.unPinAllWithName(name2, [this]);
        }
      }, {
        key: "fetchFromLocalDatastore",
        value: function() {
          var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
            var localDatastore, objectKey, pinned, result;
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    localDatastore = _CoreManager.default.getLocalDatastore();
                    if (localDatastore.isEnabled) {
                      _context6.next = 3;
                      break;
                    }
                    throw new Error("Parse.enableLocalDatastore() must be called first");
                  case 3:
                    objectKey = localDatastore.getKeyForObject(this);
                    _context6.next = 6;
                    return localDatastore._serializeObject(objectKey);
                  case 6:
                    pinned = _context6.sent;
                    if (pinned) {
                      _context6.next = 9;
                      break;
                    }
                    throw new Error("Cannot fetch an unsaved ParseObject");
                  case 9:
                    result = ParseObject2.fromJSON(pinned);
                    this._finishFetch(result.toJSON());
                    return _context6.abrupt("return", this);
                  case 12:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee3, this);
          }));
          return function() {
            return _fetchFromLocalDatastore.apply(this, arguments);
          };
        }()
      }], [{
        key: "_clearAllState",
        value: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          stateController.clearAllState();
        }
      }, {
        key: "fetchAll",
        value: function(list) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var queryOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            queryOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            queryOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("include")) {
            queryOptions.include = ParseObject2.handleIncludeOptions(options);
          }
          return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);
        }
      }, {
        key: "fetchAllWithInclude",
        value: function(list, keys, options) {
          options = options || {};
          options.include = keys;
          return ParseObject2.fetchAll(list, options);
        }
      }, {
        key: "fetchAllIfNeededWithInclude",
        value: function(list, keys, options) {
          options = options || {};
          options.include = keys;
          return ParseObject2.fetchAllIfNeeded(list, options);
        }
      }, {
        key: "fetchAllIfNeeded",
        value: function(list, options) {
          options = options || {};
          var queryOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            queryOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            queryOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("include")) {
            queryOptions.include = ParseObject2.handleIncludeOptions(options);
          }
          return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);
        }
      }, {
        key: "handleIncludeOptions",
        value: function(options) {
          var include = [];
          if ((0, _isArray.default)(options.include)) {
            var _context7;
            (0, _forEach.default)(_context7 = options.include).call(_context7, function(key) {
              if ((0, _isArray.default)(key)) {
                include = (0, _concat.default)(include).call(include, key);
              } else {
                include.push(key);
              }
            });
          } else {
            include.push(options.include);
          }
          return include;
        }
      }, {
        key: "destroyAll",
        value: function(list) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var destroyOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            destroyOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            destroyOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("batchSize") && typeof options.batchSize === "number") {
            destroyOptions.batchSize = options.batchSize;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            destroyOptions.context = options.context;
          }
          return _CoreManager.default.getObjectController().destroy(list, destroyOptions);
        }
      }, {
        key: "saveAll",
        value: function(list) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var saveOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            saveOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            saveOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("batchSize") && typeof options.batchSize === "number") {
            saveOptions.batchSize = options.batchSize;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            saveOptions.context = options.context;
          }
          return _CoreManager.default.getObjectController().save(list, saveOptions);
        }
      }, {
        key: "createWithoutData",
        value: function(id2) {
          var obj = new this();
          obj.id = id2;
          return obj;
        }
      }, {
        key: "fromJSON",
        value: function(json, override) {
          if (!json.className) {
            throw new Error("Cannot create an object without a className");
          }
          var constructor = classMap[json.className];
          var o2 = constructor ? new constructor() : new ParseObject2(json.className);
          var otherAttributes = {};
          for (var _attr12 in json) {
            if (_attr12 !== "className" && _attr12 !== "__type") {
              otherAttributes[_attr12] = json[_attr12];
            }
          }
          if (override) {
            if (otherAttributes.objectId) {
              o2.id = otherAttributes.objectId;
            }
            var preserved = null;
            if (typeof o2._preserveFieldsOnFetch === "function") {
              preserved = o2._preserveFieldsOnFetch();
            }
            o2._clearServerData();
            if (preserved) {
              o2._finishFetch(preserved);
            }
          }
          o2._finishFetch(otherAttributes);
          if (json.objectId) {
            o2._setExisted(true);
          }
          return o2;
        }
      }, {
        key: "registerSubclass",
        value: function(className, constructor) {
          if (typeof className !== "string") {
            throw new TypeError("The first argument must be a valid class name.");
          }
          if (typeof constructor === "undefined") {
            throw new TypeError("You must supply a subclass constructor.");
          }
          if (typeof constructor !== "function") {
            throw new TypeError("You must register the subclass constructor. Did you attempt to register an instance of the subclass?");
          }
          classMap[className] = constructor;
          if (!constructor.className) {
            constructor.className = className;
          }
        }
      }, {
        key: "extend",
        value: function(className, protoProps, classProps) {
          if (typeof className !== "string") {
            if (className && typeof className.className === "string") {
              return ParseObject2.extend(className.className, className, protoProps);
            }
            throw new Error("Parse.Object.extend's first argument should be the className.");
          }
          var adjustedClassName = className;
          if (adjustedClassName === "User" && _CoreManager.default.get("PERFORM_USER_REWRITE")) {
            adjustedClassName = "_User";
          }
          var parentProto = ParseObject2.prototype;
          if (this.hasOwnProperty("__super__") && this.__super__) {
            parentProto = this.prototype;
          } else if (classMap[adjustedClassName]) {
            parentProto = classMap[adjustedClassName].prototype;
          }
          var ParseObjectSubclass = function(attributes, options) {
            this.className = adjustedClassName;
            this._objCount = objectCount++;
            if (typeof this.initialize === "function") {
              this.initialize.apply(this, arguments);
            }
            if (attributes && (0, _typeof2.default)(attributes) === "object") {
              if (!this.set(attributes || {}, options)) {
                throw new Error("Can't create an invalid Parse Object");
              }
            }
          };
          ParseObjectSubclass.className = adjustedClassName;
          ParseObjectSubclass.__super__ = parentProto;
          ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {
            constructor: {
              value: ParseObjectSubclass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (protoProps) {
            for (var prop in protoProps) {
              if (prop !== "className") {
                (0, _defineProperty3.default)(ParseObjectSubclass.prototype, prop, {
                  value: protoProps[prop],
                  enumerable: false,
                  writable: true,
                  configurable: true
                });
              }
            }
          }
          if (classProps) {
            for (var _prop in classProps) {
              if (_prop !== "className") {
                (0, _defineProperty3.default)(ParseObjectSubclass, _prop, {
                  value: classProps[_prop],
                  enumerable: false,
                  writable: true,
                  configurable: true
                });
              }
            }
          }
          ParseObjectSubclass.extend = function(name2, protoProps2, classProps2) {
            if (typeof name2 === "string") {
              return ParseObject2.extend.call(ParseObjectSubclass, name2, protoProps2, classProps2);
            }
            return ParseObject2.extend.call(ParseObjectSubclass, adjustedClassName, name2, protoProps2);
          };
          ParseObjectSubclass.createWithoutData = ParseObject2.createWithoutData;
          classMap[adjustedClassName] = ParseObjectSubclass;
          return ParseObjectSubclass;
        }
      }, {
        key: "enableSingleInstance",
        value: function() {
          singleInstance = true;
          _CoreManager.default.setObjectStateController(SingleInstanceStateController);
        }
      }, {
        key: "disableSingleInstance",
        value: function() {
          singleInstance = false;
          _CoreManager.default.setObjectStateController(UniqueInstanceStateController);
        }
      }, {
        key: "pinAll",
        value: function(objects) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return ParseObject2.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);
        }
      }, {
        key: "pinAllWithName",
        value: function(name2, objects) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return localDatastore._handlePinAllWithName(name2, objects);
        }
      }, {
        key: "unPinAll",
        value: function(objects) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return ParseObject2.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);
        }
      }, {
        key: "unPinAllWithName",
        value: function(name2, objects) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return localDatastore._handleUnPinAllWithName(name2, objects);
        }
      }, {
        key: "unPinAllObjects",
        value: function() {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);
        }
      }, {
        key: "unPinAllObjectsWithName",
        value: function(name2) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name2);
        }
      }]);
      return ParseObject2;
    }();
    var DefaultController = {
      fetch: function(target, forceFetch, options) {
        var localDatastore = _CoreManager.default.getLocalDatastore();
        if ((0, _isArray.default)(target)) {
          if (target.length < 1) {
            return _promise.default.resolve([]);
          }
          var objs = [];
          var ids = [];
          var className = null;
          var results = [];
          var error = null;
          (0, _forEach.default)(target).call(target, function(el) {
            if (error) {
              return;
            }
            if (!className) {
              className = el.className;
            }
            if (className !== el.className) {
              error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, "All objects should be of the same class");
            }
            if (!el.id) {
              error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, "All objects must have an ID");
            }
            if (forceFetch || !el.isDataAvailable()) {
              ids.push(el.id);
              objs.push(el);
            }
            results.push(el);
          });
          if (error) {
            return _promise.default.reject(error);
          }
          var query = new _ParseQuery.default(className);
          query.containedIn("objectId", ids);
          if (options && options.include) {
            query.include(options.include);
          }
          query._limit = ids.length;
          return (0, _find.default)(query).call(query, options).then(/* @__PURE__ */ function() {
            var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(objects) {
              var idMap, i, obj, _i, _obj, id2, _iterator2, _step2, object;
              return _regenerator.default.wrap(function(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      idMap = {};
                      (0, _forEach.default)(objects).call(objects, function(o2) {
                        idMap[o2.id] = o2;
                      });
                      i = 0;
                    case 3:
                      if (!(i < objs.length)) {
                        _context8.next = 11;
                        break;
                      }
                      obj = objs[i];
                      if (!(!obj || !obj.id || !idMap[obj.id])) {
                        _context8.next = 8;
                        break;
                      }
                      if (!forceFetch) {
                        _context8.next = 8;
                        break;
                      }
                      return _context8.abrupt("return", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, "All objects must exist on the server.")));
                    case 8:
                      i++;
                      _context8.next = 3;
                      break;
                    case 11:
                      if (!singleInstance) {
                        for (_i = 0; _i < results.length; _i++) {
                          _obj = results[_i];
                          if (_obj && _obj.id && idMap[_obj.id]) {
                            id2 = _obj.id;
                            _obj._finishFetch(idMap[id2].toJSON());
                            results[_i] = idMap[id2];
                          }
                        }
                      }
                      _iterator2 = _createForOfIteratorHelper(results);
                      _context8.prev = 13;
                      _iterator2.s();
                    case 15:
                      if ((_step2 = _iterator2.n()).done) {
                        _context8.next = 21;
                        break;
                      }
                      object = _step2.value;
                      _context8.next = 19;
                      return localDatastore._updateObjectIfPinned(object);
                    case 19:
                      _context8.next = 15;
                      break;
                    case 21:
                      _context8.next = 26;
                      break;
                    case 23:
                      _context8.prev = 23;
                      _context8.t0 = _context8["catch"](13);
                      _iterator2.e(_context8.t0);
                    case 26:
                      _context8.prev = 26;
                      _iterator2.f();
                      return _context8.finish(26);
                    case 29:
                      return _context8.abrupt("return", _promise.default.resolve(results));
                    case 30:
                    case "end":
                      return _context8.stop();
                  }
                }
              }, _callee4, null, [[13, 23, 26, 29]]);
            }));
            return function() {
              return _ref.apply(this, arguments);
            };
          }());
        }
        if (target instanceof ParseObject) {
          var _context9;
          if (!target.id) {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, "Object does not have an ID"));
          }
          var RESTController = _CoreManager.default.getRESTController();
          var params = {};
          if (options && options.include) {
            params.include = options.include.join();
          }
          return RESTController.request("GET", (0, _concat.default)(_context9 = "classes/".concat(target.className, "/")).call(_context9, target._getId()), params, options).then(/* @__PURE__ */ function() {
            var _ref2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(response) {
              return _regenerator.default.wrap(function(_context10) {
                while (1) {
                  switch (_context10.prev = _context10.next) {
                    case 0:
                      target._clearPendingOps();
                      target._clearServerData();
                      target._finishFetch(response);
                      _context10.next = 5;
                      return localDatastore._updateObjectIfPinned(target);
                    case 5:
                      return _context10.abrupt("return", target);
                    case 6:
                    case "end":
                      return _context10.stop();
                  }
                }
              }, _callee5);
            }));
            return function() {
              return _ref2.apply(this, arguments);
            };
          }());
        }
        return _promise.default.resolve();
      },
      destroy: function(target, options) {
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee8() {
          var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors, _context14;
          return _regenerator.default.wrap(function(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get("REQUEST_BATCH_SIZE");
                  localDatastore = _CoreManager.default.getLocalDatastore();
                  RESTController = _CoreManager.default.getRESTController();
                  if (!(0, _isArray.default)(target)) {
                    _context16.next = 13;
                    break;
                  }
                  if (!(target.length < 1)) {
                    _context16.next = 6;
                    break;
                  }
                  return _context16.abrupt("return", _promise.default.resolve([]));
                case 6:
                  batches = [[]];
                  (0, _forEach.default)(target).call(target, function(obj) {
                    if (!obj.id) {
                      return;
                    }
                    batches[batches.length - 1].push(obj);
                    if (batches[batches.length - 1].length >= batchSize) {
                      batches.push([]);
                    }
                  });
                  if (batches[batches.length - 1].length === 0) {
                    batches.pop();
                  }
                  deleteCompleted = _promise.default.resolve();
                  errors = [];
                  (0, _forEach.default)(batches).call(batches, function(batch) {
                    deleteCompleted = deleteCompleted.then(function() {
                      return RESTController.request("POST", "batch", {
                        requests: (0, _map.default)(batch).call(batch, function(obj) {
                          var _context11, _context12;
                          return {
                            method: "DELETE",
                            path: (0, _concat.default)(_context11 = (0, _concat.default)(_context12 = "".concat(getServerUrlPath(), "classes/")).call(_context12, obj.className, "/")).call(_context11, obj._getId()),
                            body: {}
                          };
                        })
                      }, options).then(function(results) {
                        for (var i = 0; i < results.length; i++) {
                          if (results[i] && results[i].hasOwnProperty("error")) {
                            var err = new _ParseError.default(results[i].error.code, results[i].error.error);
                            err.object = batch[i];
                            errors.push(err);
                          }
                        }
                      });
                    });
                  });
                  return _context16.abrupt("return", deleteCompleted.then(/* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6() {
                    var aggregate, _iterator3, _step3, object;
                    return _regenerator.default.wrap(function(_context13) {
                      while (1) {
                        switch (_context13.prev = _context13.next) {
                          case 0:
                            if (!errors.length) {
                              _context13.next = 4;
                              break;
                            }
                            aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);
                            aggregate.errors = errors;
                            return _context13.abrupt("return", _promise.default.reject(aggregate));
                          case 4:
                            _iterator3 = _createForOfIteratorHelper(target);
                            _context13.prev = 5;
                            _iterator3.s();
                          case 7:
                            if ((_step3 = _iterator3.n()).done) {
                              _context13.next = 13;
                              break;
                            }
                            object = _step3.value;
                            _context13.next = 11;
                            return localDatastore._destroyObjectIfPinned(object);
                          case 11:
                            _context13.next = 7;
                            break;
                          case 13:
                            _context13.next = 18;
                            break;
                          case 15:
                            _context13.prev = 15;
                            _context13.t0 = _context13["catch"](5);
                            _iterator3.e(_context13.t0);
                          case 18:
                            _context13.prev = 18;
                            _iterator3.f();
                            return _context13.finish(18);
                          case 21:
                            return _context13.abrupt("return", _promise.default.resolve(target));
                          case 22:
                          case "end":
                            return _context13.stop();
                        }
                      }
                    }, _callee6, null, [[5, 15, 18, 21]]);
                  }))));
                case 13:
                  if (!(target instanceof ParseObject)) {
                    _context16.next = 15;
                    break;
                  }
                  return _context16.abrupt("return", RESTController.request("DELETE", (0, _concat.default)(_context14 = "classes/".concat(target.className, "/")).call(_context14, target._getId()), {}, options).then(/* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7() {
                    return _regenerator.default.wrap(function(_context15) {
                      while (1) {
                        switch (_context15.prev = _context15.next) {
                          case 0:
                            _context15.next = 2;
                            return localDatastore._destroyObjectIfPinned(target);
                          case 2:
                            return _context15.abrupt("return", _promise.default.resolve(target));
                          case 3:
                          case "end":
                            return _context15.stop();
                        }
                      }
                    }, _callee7);
                  }))));
                case 15:
                  return _context16.abrupt("return", _promise.default.resolve(target));
                case 16:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee8);
        }))();
      },
      save: function(target, options) {
        var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get("REQUEST_BATCH_SIZE");
        var localDatastore = _CoreManager.default.getLocalDatastore();
        var mapIdForPin = {};
        var RESTController = _CoreManager.default.getRESTController();
        var stateController = _CoreManager.default.getObjectStateController();
        options = options || {};
        options.returnStatus = options.returnStatus || true;
        if ((0, _isArray.default)(target)) {
          if (target.length < 1) {
            return _promise.default.resolve([]);
          }
          var unsaved = (0, _concat.default)(target).call(target);
          for (var i = 0; i < target.length; i++) {
            if (target[i] instanceof ParseObject) {
              unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));
            }
          }
          unsaved = (0, _unique.default)(unsaved);
          var filesSaved = [];
          var pending = [];
          (0, _forEach.default)(unsaved).call(unsaved, function(el) {
            if (el instanceof _ParseFile.default) {
              filesSaved.push(el.save(options));
            } else if (el instanceof ParseObject) {
              pending.push(el);
            }
          });
          return _promise.default.all(filesSaved).then(function() {
            var objectError = null;
            return (0, _promiseUtils.continueWhile)(function() {
              return pending.length > 0;
            }, function() {
              var batch = [];
              var nextPending = [];
              (0, _forEach.default)(pending).call(pending, function(el) {
                if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {
                  batch.push(el);
                } else {
                  nextPending.push(el);
                }
              });
              pending = nextPending;
              if (batch.length < 1) {
                return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Tried to save a batch with a cycle."));
              }
              var batchReturned = new _promiseUtils.resolvingPromise();
              var batchReady = [];
              var batchTasks = [];
              (0, _forEach.default)(batch).call(batch, function(obj, index) {
                var ready = new _promiseUtils.resolvingPromise();
                batchReady.push(ready);
                stateController.pushPendingState(obj._getStateIdentifier());
                batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function() {
                  ready.resolve();
                  return batchReturned.then(function(responses) {
                    if (responses[index].hasOwnProperty("success")) {
                      var objectId = responses[index].success.objectId;
                      var status = responses[index]._status;
                      delete responses[index]._status;
                      mapIdForPin[objectId] = obj._localId;
                      obj._handleSaveResponse(responses[index].success, status);
                    } else {
                      if (!objectError && responses[index].hasOwnProperty("error")) {
                        var serverError = responses[index].error;
                        objectError = new _ParseError.default(serverError.code, serverError.error);
                        pending = [];
                      }
                      obj._handleSaveError();
                    }
                  });
                }));
              });
              (0, _promiseUtils.when)(batchReady).then(function() {
                return RESTController.request("POST", "batch", {
                  requests: (0, _map.default)(batch).call(batch, function(obj) {
                    var params = obj._getSaveParams();
                    params.path = getServerUrlPath() + params.path;
                    return params;
                  })
                }, options);
              }).then(batchReturned.resolve, function(error) {
                batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));
              });
              return (0, _promiseUtils.when)(batchTasks);
            }).then(/* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee9() {
              var _iterator4, _step4, object;
              return _regenerator.default.wrap(function(_context17) {
                while (1) {
                  switch (_context17.prev = _context17.next) {
                    case 0:
                      if (!objectError) {
                        _context17.next = 2;
                        break;
                      }
                      return _context17.abrupt("return", _promise.default.reject(objectError));
                    case 2:
                      _iterator4 = _createForOfIteratorHelper(target);
                      _context17.prev = 3;
                      _iterator4.s();
                    case 5:
                      if ((_step4 = _iterator4.n()).done) {
                        _context17.next = 13;
                        break;
                      }
                      object = _step4.value;
                      _context17.next = 9;
                      return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);
                    case 9:
                      _context17.next = 11;
                      return localDatastore._updateObjectIfPinned(object);
                    case 11:
                      _context17.next = 5;
                      break;
                    case 13:
                      _context17.next = 18;
                      break;
                    case 15:
                      _context17.prev = 15;
                      _context17.t0 = _context17["catch"](3);
                      _iterator4.e(_context17.t0);
                    case 18:
                      _context17.prev = 18;
                      _iterator4.f();
                      return _context17.finish(18);
                    case 21:
                      return _context17.abrupt("return", _promise.default.resolve(target));
                    case 22:
                    case "end":
                      return _context17.stop();
                  }
                }
              }, _callee9, null, [[3, 15, 18, 21]]);
            })));
          });
        }
        if (target instanceof ParseObject) {
          target._getId();
          var localId = target._localId;
          var targetCopy = target;
          var task = function() {
            var params = targetCopy._getSaveParams();
            return RESTController.request(params.method, params.path, params.body, options).then(function(response) {
              var status = response._status;
              delete response._status;
              targetCopy._handleSaveResponse(response, status);
            }, function(error) {
              targetCopy._handleSaveError();
              return _promise.default.reject(error);
            });
          };
          stateController.pushPendingState(target._getStateIdentifier());
          return stateController.enqueueTask(target._getStateIdentifier(), task).then(/* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee10() {
            return _regenerator.default.wrap(function(_context18) {
              while (1) {
                switch (_context18.prev = _context18.next) {
                  case 0:
                    _context18.next = 2;
                    return localDatastore._updateLocalIdForObject(localId, target);
                  case 2:
                    _context18.next = 4;
                    return localDatastore._updateObjectIfPinned(target);
                  case 4:
                    return _context18.abrupt("return", target);
                  case 5:
                  case "end":
                    return _context18.stop();
                }
              }
            }, _callee10);
          })), function(error) {
            return _promise.default.reject(error);
          });
        }
        return _promise.default.resolve();
      }
    };
    _CoreManager.default.setObjectController(DefaultController);
    var _default = ParseObject;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseRole.js
var require_ParseRole = __commonJS({
  "node_modules/moralis/lib/browser/ParseRole.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _get2 = _interopRequireDefault(require_get6());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseObject2 = _interopRequireDefault(require_ParseObject());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var ParseRole = /* @__PURE__ */ function(_ParseObject) {
      (0, _inherits2.default)(ParseRole2, _ParseObject);
      var _super = _createSuper(ParseRole2);
      function ParseRole2(name2, acl) {
        var _this;
        (0, _classCallCheck2.default)(this, ParseRole2);
        _this = _super.call(this, "_Role");
        if (typeof name2 === "string" && acl instanceof _ParseACL.default) {
          _this.setName(name2);
          _this.setACL(acl);
        }
        return _this;
      }
      (0, _createClass2.default)(ParseRole2, [{
        key: "getName",
        value: function() {
          var name2 = this.get("name");
          if (name2 == null || typeof name2 === "string") {
            return name2;
          }
          return "";
        }
      }, {
        key: "setName",
        value: function(name2, options) {
          return this.set("name", name2, options);
        }
      }, {
        key: "getUsers",
        value: function() {
          return this.relation("users");
        }
      }, {
        key: "getRoles",
        value: function() {
          return this.relation("roles");
        }
      }, {
        key: "validate",
        value: function(attrs, options) {
          var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole2.prototype), "validate", this).call(this, attrs, options);
          if (isInvalid) {
            return isInvalid;
          }
          if ("name" in attrs && attrs.name !== this.getName()) {
            var newName = attrs.name;
            if (this.id && this.id !== attrs.objectId) {
              return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "A role's name can only be set before it has been saved.");
            }
            if (typeof newName !== "string") {
              return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "A role's name must be a String.");
            }
            if (!/^[0-9a-zA-Z\-_ ]+$/.test(newName)) {
              return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "A role's name can be only contain alphanumeric characters, _, -, and spaces.");
            }
          }
          return false;
        }
      }]);
      return ParseRole2;
    }(_ParseObject2.default);
    _ParseObject2.default.registerSubclass("_Role", ParseRole);
    var _default = ParseRole;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/AnonymousUtils.js
var require_AnonymousUtils = __commonJS({
  "node_modules/moralis/lib/browser/AnonymousUtils.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _require = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var uuidv4 = _require.v4;
    var registered = false;
    var AnonymousUtils = {
      isLinked: function(user) {
        var provider = this._getAuthProvider();
        return user._isLinked(provider.getAuthType());
      },
      logIn: function(options) {
        var provider = this._getAuthProvider();
        return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);
      },
      link: function(user, options) {
        var provider = this._getAuthProvider();
        return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);
      },
      _getAuthProvider: function() {
        var provider = {
          restoreAuthentication: function() {
            return true;
          },
          getAuthType: function() {
            return "anonymous";
          },
          getAuthData: function() {
            return {
              authData: {
                id: uuidv4()
              }
            };
          }
        };
        if (!registered) {
          _ParseUser.default._registerAuthenticationProvider(provider);
          registered = true;
        }
        return provider;
      }
    };
    var _default = AnonymousUtils;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/isRevocableSession.js
var require_isRevocableSession = __commonJS({
  "node_modules/moralis/lib/browser/isRevocableSession.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isRevocableSession;
    var _indexOf = _interopRequireDefault(require_index_of7());
    function isRevocableSession(token2) {
      return (0, _indexOf.default)(token2).call(token2, "r:") > -1;
    }
  }
});

// node_modules/moralis/lib/browser/ParseSession.js
var require_ParseSession = __commonJS({
  "node_modules/moralis/lib/browser/ParseSession.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _promise = _interopRequireDefault(require_promise3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _isRevocableSession = _interopRequireDefault(require_isRevocableSession());
    var _ParseObject2 = _interopRequireDefault(require_ParseObject());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var ParseSession = /* @__PURE__ */ function(_ParseObject) {
      (0, _inherits2.default)(ParseSession2, _ParseObject);
      var _super = _createSuper(ParseSession2);
      function ParseSession2(attributes) {
        var _this;
        (0, _classCallCheck2.default)(this, ParseSession2);
        _this = _super.call(this, "_Session");
        if (attributes && (0, _typeof2.default)(attributes) === "object") {
          if (!_this.set(attributes || {})) {
            throw new Error("Can't create an invalid Session");
          }
        }
        return _this;
      }
      (0, _createClass2.default)(ParseSession2, [{
        key: "getSessionToken",
        value: function() {
          var token2 = this.get("sessionToken");
          if (typeof token2 === "string") {
            return token2;
          }
          return "";
        }
      }], [{
        key: "readOnlyAttributes",
        value: function() {
          return ["createdWith", "expiresAt", "installationId", "restricted", "sessionToken", "user"];
        }
      }, {
        key: "current",
        value: function(options) {
          options = options || {};
          var controller = _CoreManager.default.getSessionController();
          var sessionOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            sessionOptions.useMasterKey = options.useMasterKey;
          }
          return _ParseUser.default.currentAsync().then(function(user) {
            if (!user) {
              return _promise.default.reject("There is no current user.");
            }
            sessionOptions.sessionToken = user.getSessionToken();
            return controller.getSession(sessionOptions);
          });
        }
      }, {
        key: "isCurrentSessionRevocable",
        value: function() {
          var currentUser = _ParseUser.default.current();
          if (currentUser) {
            return (0, _isRevocableSession.default)(currentUser.getSessionToken() || "");
          }
          return false;
        }
      }]);
      return ParseSession2;
    }(_ParseObject2.default);
    _ParseObject2.default.registerSubclass("_Session", ParseSession);
    var DefaultController = {
      getSession: function(options) {
        var RESTController = _CoreManager.default.getRESTController();
        var session = new ParseSession();
        return RESTController.request("GET", "sessions/me", {}, options).then(function(sessionData) {
          session._finishFetch(sessionData);
          session._setExisted(true);
          return session;
        });
      }
    };
    _CoreManager.default.setSessionController(DefaultController);
    var _default = ParseSession;
    exports.default = _default;
  }
});

// node_modules/core-js-pure/internals/string-trim-forced.js
var require_string_trim_forced = __commonJS({
  "node_modules/core-js-pure/internals/string-trim-forced.js"(exports, module) {
    init_react();
    var PROPER_FUNCTION_NAME = require_function_name().PROPER;
    var fails = require_fails();
    var whitespaces = require_whitespaces();
    var non = "\u200B\x85\u180E";
    module.exports = function(METHOD_NAME) {
      return fails(function() {
        return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME;
      });
    };
  }
});

// node_modules/core-js-pure/modules/es.string.trim.js
var require_es_string_trim = __commonJS({
  "node_modules/core-js-pure/modules/es.string.trim.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $trim = require_string_trim().trim;
    var forcedStringTrimMethod = require_string_trim_forced();
    $({ target: "String", proto: true, forced: forcedStringTrimMethod("trim") }, {
      trim: function trim2() {
        return $trim(this);
      }
    });
  }
});

// node_modules/core-js-pure/es/string/virtual/trim.js
var require_trim = __commonJS({
  "node_modules/core-js-pure/es/string/virtual/trim.js"(exports, module) {
    init_react();
    require_es_string_trim();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("String").trim;
  }
});

// node_modules/core-js-pure/es/instance/trim.js
var require_trim2 = __commonJS({
  "node_modules/core-js-pure/es/instance/trim.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_trim();
    var StringPrototype = String.prototype;
    module.exports = function(it) {
      var own = it.trim;
      return typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.trim ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/trim.js
var require_trim3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/trim.js"(exports, module) {
    init_react();
    var parent = require_trim2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/trim.js
var require_trim4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/trim.js"(exports, module) {
    init_react();
    module.exports = require_trim3();
  }
});

// node_modules/core-js-pure/modules/es.array.every.js
var require_es_array_every = __commonJS({
  "node_modules/core-js-pure/modules/es.array.every.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $every = require_array_iteration().every;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var STRICT_METHOD = arrayMethodIsStrict("every");
    $({ target: "Array", proto: true, forced: !STRICT_METHOD }, {
      every: function every(callbackfn) {
        return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/every.js
var require_every = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/every.js"(exports, module) {
    init_react();
    require_es_array_every();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").every;
  }
});

// node_modules/core-js-pure/es/instance/every.js
var require_every2 = __commonJS({
  "node_modules/core-js-pure/es/instance/every.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_every();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.every;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.every ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/every.js
var require_every3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/every.js"(exports, module) {
    init_react();
    var parent = require_every2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/every.js
var require_every4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/every.js"(exports, module) {
    init_react();
    module.exports = require_every3();
  }
});

// node_modules/core-js-pure/modules/es.object.values.js
var require_es_object_values = __commonJS({
  "node_modules/core-js-pure/modules/es.object.values.js"() {
    init_react();
    var $ = require_export();
    var $values = require_object_to_array().values;
    $({ target: "Object", stat: true }, {
      values: function values(O2) {
        return $values(O2);
      }
    });
  }
});

// node_modules/core-js-pure/es/object/values.js
var require_values = __commonJS({
  "node_modules/core-js-pure/es/object/values.js"(exports, module) {
    init_react();
    require_es_object_values();
    var path = require_path();
    module.exports = path.Object.values;
  }
});

// node_modules/core-js-pure/stable/object/values.js
var require_values2 = __commonJS({
  "node_modules/core-js-pure/stable/object/values.js"(exports, module) {
    init_react();
    var parent = require_values();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/values.js
var require_values3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/values.js"(exports, module) {
    init_react();
    module.exports = require_values2();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/bind.js
var require_bind7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/bind.js"(exports, module) {
    init_react();
    module.exports = require_bind3();
  }
});

// node_modules/@ethersproject/abi/lib.esm/_version.js
var version;
var init_version = __esm({
  "node_modules/@ethersproject/abi/lib.esm/_version.js"() {
    init_react();
    version = "abi/5.5.0";
  }
});

// node_modules/@ethersproject/abi/lib.esm/fragments.js
function checkModifier(type, name2) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes[name2]) {
      return true;
    }
  } else if (type === "address") {
    if (name2 === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest[name2]) {
      return true;
    }
  }
  if (ModifiersBytes[name2] || name2 === "payable") {
    logger.throwArgumentError("invalid modifier", "name", name2);
  }
  return false;
}
function parseParamType(param, allowIndexed) {
  let originalParam = param;
  function throwError(i) {
    logger.throwArgumentError(`unexpected character at position ${i}`, "param", param);
  }
  param = param.replace(/\s/g, " ");
  function newNode(parent2) {
    let node3 = { type: "", name: "", parent: parent2, state: { allowType: true } };
    if (allowIndexed) {
      node3.indexed = false;
    }
    return node3;
  }
  let parent = { type: "", name: "", state: { allowType: true } };
  let node2 = parent;
  for (let i = 0; i < param.length; i++) {
    let c2 = param[i];
    switch (c2) {
      case "(":
        if (node2.state.allowType && node2.type === "") {
          node2.type = "tuple";
        } else if (!node2.state.allowParams) {
          throwError(i);
        }
        node2.state.allowType = false;
        node2.type = verifyType(node2.type);
        node2.components = [newNode(node2)];
        node2 = node2.components[0];
        break;
      case ")":
        delete node2.state;
        if (node2.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node2.indexed = true;
          node2.name = "";
        }
        if (checkModifier(node2.type, node2.name)) {
          node2.name = "";
        }
        node2.type = verifyType(node2.type);
        let child = node2;
        node2 = node2.parent;
        if (!node2) {
          throwError(i);
        }
        delete child.parent;
        node2.state.allowParams = false;
        node2.state.allowName = true;
        node2.state.allowArray = true;
        break;
      case ",":
        delete node2.state;
        if (node2.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node2.indexed = true;
          node2.name = "";
        }
        if (checkModifier(node2.type, node2.name)) {
          node2.name = "";
        }
        node2.type = verifyType(node2.type);
        let sibling = newNode(node2.parent);
        node2.parent.components.push(sibling);
        delete node2.parent;
        node2 = sibling;
        break;
      case " ":
        if (node2.state.allowType) {
          if (node2.type !== "") {
            node2.type = verifyType(node2.type);
            delete node2.state.allowType;
            node2.state.allowName = true;
            node2.state.allowParams = true;
          }
        }
        if (node2.state.allowName) {
          if (node2.name !== "") {
            if (node2.name === "indexed") {
              if (!allowIndexed) {
                throwError(i);
              }
              if (node2.indexed) {
                throwError(i);
              }
              node2.indexed = true;
              node2.name = "";
            } else if (checkModifier(node2.type, node2.name)) {
              node2.name = "";
            } else {
              node2.state.allowName = false;
            }
          }
        }
        break;
      case "[":
        if (!node2.state.allowArray) {
          throwError(i);
        }
        node2.type += c2;
        node2.state.allowArray = false;
        node2.state.allowName = false;
        node2.state.readArray = true;
        break;
      case "]":
        if (!node2.state.readArray) {
          throwError(i);
        }
        node2.type += c2;
        node2.state.readArray = false;
        node2.state.allowArray = true;
        node2.state.allowName = true;
        break;
      default:
        if (node2.state.allowType) {
          node2.type += c2;
          node2.state.allowParams = true;
          node2.state.allowArray = true;
        } else if (node2.state.allowName) {
          node2.name += c2;
          delete node2.state.allowArray;
        } else if (node2.state.readArray) {
          node2.type += c2;
        } else {
          throwError(i);
        }
    }
  }
  if (node2.parent) {
    logger.throwArgumentError("unexpected eof", "param", param);
  }
  delete parent.state;
  if (node2.name === "indexed") {
    if (!allowIndexed) {
      throwError(originalParam.length - 7);
    }
    if (node2.indexed) {
      throwError(originalParam.length - 7);
    }
    node2.indexed = true;
    node2.name = "";
  } else if (checkModifier(node2.type, node2.name)) {
    node2.name = "";
  }
  parent.type = verifyType(parent.type);
  return parent;
}
function populate(object, params) {
  for (let key in params) {
    defineReadOnly(object, key, params[key]);
  }
}
function parseParams(value, allowIndex) {
  return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
}
function parseGas(value, params) {
  params.gas = null;
  let comps = value.split("@");
  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
    }
    if (!comps[1].match(/^[0-9]+$/)) {
      logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    }
    params.gas = BigNumber.from(comps[1]);
    return comps[0];
  }
  return value;
}
function parseModifiers(value, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value.split(" ").forEach((modifier) => {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;
      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;
      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;
      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;
      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}
function verifyState(value) {
  let result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };
  if (value.stateMutability != null) {
    result.stateMutability = value.stateMutability;
    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
    if (value.constant != null) {
      if (!!value.constant !== result.constant) {
        logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
      }
    }
    result.payable = result.stateMutability === "payable";
    if (value.payable != null) {
      if (!!value.payable !== result.payable) {
        logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
      }
    }
  } else if (value.payable != null) {
    result.payable = !!value.payable;
    if (value.constant == null && !result.payable && value.type !== "constructor") {
      logger.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    result.constant = !!value.constant;
    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }
    if (result.payable && result.constant) {
      logger.throwArgumentError("cannot have constant payable function", "value", value);
    }
  } else if (value.constant != null) {
    result.constant = !!value.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value.type !== "constructor") {
    logger.throwArgumentError("unable to determine stateMutability", "value", value);
  }
  return result;
}
function checkForbidden(fragment) {
  const sig = fragment.format();
  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
  }
  return fragment;
}
function verifyType(type) {
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  }
  return type;
}
function verifyIdentifier(value) {
  if (!value || !value.match(regexIdentifier)) {
    logger.throwArgumentError(`invalid identifier "${value}"`, "value", value);
  }
  return value;
}
function splitNesting(value) {
  value = value.trim();
  let result = [];
  let accum = "";
  let depth = 0;
  for (let offset = 0; offset < value.length; offset++) {
    let c2 = value[offset];
    if (c2 === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c2;
      if (c2 === "(") {
        depth++;
      } else if (c2 === ")") {
        depth--;
        if (depth === -1) {
          logger.throwArgumentError("unbalanced parenthesis", "value", value);
        }
      }
    }
  }
  if (accum) {
    result.push(accum);
  }
  return result;
}
var logger, _constructorGuard, ModifiersBytes, ModifiersNest, FormatTypes, paramTypeArray, ParamType, Fragment, EventFragment, ConstructorFragment, FunctionFragment, ErrorFragment, regexIdentifier, regexParen;
var init_fragments = __esm({
  "node_modules/@ethersproject/abi/lib.esm/fragments.js"() {
    "use strict";
    init_react();
    init_lib3();
    init_lib4();
    init_lib();
    init_version();
    logger = new Logger(version);
    _constructorGuard = {};
    ModifiersBytes = { calldata: true, memory: true, storage: true };
    ModifiersNest = { calldata: true, memory: true };
    FormatTypes = Object.freeze({
      sighash: "sighash",
      minimal: "minimal",
      full: "full",
      json: "json"
    });
    paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    ParamType = class {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard) {
          logger.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new ParamType()"
          });
        }
        populate(this, params);
        let match2 = this.type.match(paramTypeArray);
        if (match2) {
          populate(this, {
            arrayLength: parseInt(match2[2] || "-1"),
            arrayChildren: ParamType.fromObject({
              type: match2[1],
              components: this.components
            }),
            baseType: "array"
          });
        } else {
          populate(this, {
            arrayLength: null,
            arrayChildren: null,
            baseType: this.components != null ? "tuple" : this.type
          });
        }
        this._isParamType = true;
        Object.freeze(this);
      }
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          let result2 = {
            type: this.baseType === "tuple" ? "tuple" : this.type,
            name: this.name || void 0
          };
          if (typeof this.indexed === "boolean") {
            result2.indexed = this.indexed;
          }
          if (this.components) {
            result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
          }
          return JSON.stringify(result2);
        }
        let result = "";
        if (this.baseType === "array") {
          result += this.arrayChildren.format(format);
          result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
        } else {
          if (this.baseType === "tuple") {
            if (format !== FormatTypes.sighash) {
              result += this.type;
            }
            result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
          } else {
            result += this.type;
          }
        }
        if (format !== FormatTypes.sighash) {
          if (this.indexed === true) {
            result += " indexed";
          }
          if (format === FormatTypes.full && this.name) {
            result += " " + this.name;
          }
        }
        return result;
      }
      static from(value, allowIndexed) {
        if (typeof value === "string") {
          return ParamType.fromString(value, allowIndexed);
        }
        return ParamType.fromObject(value);
      }
      static fromObject(value) {
        if (ParamType.isParamType(value)) {
          return value;
        }
        return new ParamType(_constructorGuard, {
          name: value.name || null,
          type: verifyType(value.type),
          indexed: value.indexed == null ? null : !!value.indexed,
          components: value.components ? value.components.map(ParamType.fromObject) : null
        });
      }
      static fromString(value, allowIndexed) {
        function ParamTypify(node2) {
          return ParamType.fromObject({
            name: node2.name,
            type: node2.type,
            indexed: node2.indexed,
            components: node2.components
          });
        }
        return ParamTypify(parseParamType(value, !!allowIndexed));
      }
      static isParamType(value) {
        return !!(value != null && value._isParamType);
      }
    };
    Fragment = class {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard) {
          logger.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new Fragment()"
          });
        }
        populate(this, params);
        this._isFragment = true;
        Object.freeze(this);
      }
      static from(value) {
        if (Fragment.isFragment(value)) {
          return value;
        }
        if (typeof value === "string") {
          return Fragment.fromString(value);
        }
        return Fragment.fromObject(value);
      }
      static fromObject(value) {
        if (Fragment.isFragment(value)) {
          return value;
        }
        switch (value.type) {
          case "function":
            return FunctionFragment.fromObject(value);
          case "event":
            return EventFragment.fromObject(value);
          case "constructor":
            return ConstructorFragment.fromObject(value);
          case "error":
            return ErrorFragment.fromObject(value);
          case "fallback":
          case "receive":
            return null;
        }
        return logger.throwArgumentError("invalid fragment object", "value", value);
      }
      static fromString(value) {
        value = value.replace(/\s/g, " ");
        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
        value = value.trim();
        if (value.split(" ")[0] === "event") {
          return EventFragment.fromString(value.substring(5).trim());
        } else if (value.split(" ")[0] === "function") {
          return FunctionFragment.fromString(value.substring(8).trim());
        } else if (value.split("(")[0].trim() === "constructor") {
          return ConstructorFragment.fromString(value.trim());
        } else if (value.split(" ")[0] === "error") {
          return ErrorFragment.fromString(value.substring(5).trim());
        }
        return logger.throwArgumentError("unsupported fragment", "value", value);
      }
      static isFragment(value) {
        return !!(value && value._isFragment);
      }
    };
    EventFragment = class extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "event ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.anonymous) {
            result += "anonymous ";
          }
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return EventFragment.fromString(value);
        }
        return EventFragment.fromObject(value);
      }
      static fromObject(value) {
        if (EventFragment.isEventFragment(value)) {
          return value;
        }
        if (value.type !== "event") {
          logger.throwArgumentError("invalid event object", "value", value);
        }
        const params = {
          name: verifyIdentifier(value.name),
          anonymous: value.anonymous,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          type: "event"
        };
        return new EventFragment(_constructorGuard, params);
      }
      static fromString(value) {
        let match2 = value.match(regexParen);
        if (!match2) {
          logger.throwArgumentError("invalid event string", "value", value);
        }
        let anonymous = false;
        match2[3].split(" ").forEach((modifier) => {
          switch (modifier.trim()) {
            case "anonymous":
              anonymous = true;
              break;
            case "":
              break;
            default:
              logger.warn("unknown modifier: " + modifier);
          }
        });
        return EventFragment.fromObject({
          name: match2[1].trim(),
          anonymous,
          inputs: parseParams(match2[2], true),
          type: "event"
        });
      }
      static isEventFragment(value) {
        return value && value._isFragment && value.type === "event";
      }
    };
    ConstructorFragment = class extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "constructor",
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        if (format === FormatTypes.sighash) {
          logger.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "format(sighash)"
          });
        }
        let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (this.stateMutability && this.stateMutability !== "nonpayable") {
          result += this.stateMutability + " ";
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return ConstructorFragment.fromString(value);
        }
        return ConstructorFragment.fromObject(value);
      }
      static fromObject(value) {
        if (ConstructorFragment.isConstructorFragment(value)) {
          return value;
        }
        if (value.type !== "constructor") {
          logger.throwArgumentError("invalid constructor object", "value", value);
        }
        let state = verifyState(value);
        if (state.constant) {
          logger.throwArgumentError("constructor cannot be constant", "value", value);
        }
        const params = {
          name: null,
          type: value.type,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new ConstructorFragment(_constructorGuard, params);
      }
      static fromString(value) {
        let params = { type: "constructor" };
        value = parseGas(value, params);
        let parens = value.match(regexParen);
        if (!parens || parens[1].trim() !== "constructor") {
          logger.throwArgumentError("invalid constructor string", "value", value);
        }
        params.inputs = parseParams(parens[2].trim(), false);
        parseModifiers(parens[3].trim(), params);
        return ConstructorFragment.fromObject(params);
      }
      static isConstructorFragment(value) {
        return value && value._isFragment && value.type === "constructor";
      }
    };
    FunctionFragment = class extends ConstructorFragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
            outputs: this.outputs.map((output) => JSON.parse(output.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "function ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.stateMutability) {
            if (this.stateMutability !== "nonpayable") {
              result += this.stateMutability + " ";
            }
          } else if (this.constant) {
            result += "view ";
          }
          if (this.outputs && this.outputs.length) {
            result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
          }
          if (this.gas != null) {
            result += "@" + this.gas.toString() + " ";
          }
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return FunctionFragment.fromString(value);
        }
        return FunctionFragment.fromObject(value);
      }
      static fromObject(value) {
        if (FunctionFragment.isFunctionFragment(value)) {
          return value;
        }
        if (value.type !== "function") {
          logger.throwArgumentError("invalid function object", "value", value);
        }
        let state = verifyState(value);
        const params = {
          type: value.type,
          name: verifyIdentifier(value.name),
          constant: state.constant,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new FunctionFragment(_constructorGuard, params);
      }
      static fromString(value) {
        let params = { type: "function" };
        value = parseGas(value, params);
        let comps = value.split(" returns ");
        if (comps.length > 2) {
          logger.throwArgumentError("invalid function string", "value", value);
        }
        let parens = comps[0].match(regexParen);
        if (!parens) {
          logger.throwArgumentError("invalid function signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        parseModifiers(parens[3].trim(), params);
        if (comps.length > 1) {
          let returns = comps[1].match(regexParen);
          if (returns[1].trim() != "" || returns[3].trim() != "") {
            logger.throwArgumentError("unexpected tokens", "value", value);
          }
          params.outputs = parseParams(returns[2], false);
        } else {
          params.outputs = [];
        }
        return FunctionFragment.fromObject(params);
      }
      static isFunctionFragment(value) {
        return value && value._isFragment && value.type === "function";
      }
    };
    ErrorFragment = class extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "error ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return ErrorFragment.fromString(value);
        }
        return ErrorFragment.fromObject(value);
      }
      static fromObject(value) {
        if (ErrorFragment.isErrorFragment(value)) {
          return value;
        }
        if (value.type !== "error") {
          logger.throwArgumentError("invalid error object", "value", value);
        }
        const params = {
          type: value.type,
          name: verifyIdentifier(value.name),
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
        };
        return checkForbidden(new ErrorFragment(_constructorGuard, params));
      }
      static fromString(value) {
        let params = { type: "error" };
        let parens = value.match(regexParen);
        if (!parens) {
          logger.throwArgumentError("invalid error signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        return checkForbidden(ErrorFragment.fromObject(params));
      }
      static isErrorFragment(value) {
        return value && value._isFragment && value.type === "error";
      }
    };
    regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
function checkResultErrors(result) {
  const errors = [];
  const checkErrors = function(path, object) {
    if (!Array.isArray(object)) {
      return;
    }
    for (let key in object) {
      const childPath = path.slice();
      childPath.push(key);
      try {
        checkErrors(childPath, object[key]);
      } catch (error) {
        errors.push({ path: childPath, error });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
var logger2, Coder, Writer, Reader;
var init_abstract_coder = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"() {
    "use strict";
    init_react();
    init_lib2();
    init_lib3();
    init_lib4();
    init_lib();
    init_version();
    logger2 = new Logger(version);
    Coder = class {
      constructor(name2, type, localName, dynamic) {
        this.name = name2;
        this.type = type;
        this.localName = localName;
        this.dynamic = dynamic;
      }
      _throwError(message, value) {
        logger2.throwArgumentError(message, this.localName, value);
      }
    };
    Writer = class {
      constructor(wordSize) {
        defineReadOnly(this, "wordSize", wordSize || 32);
        this._data = [];
        this._dataLength = 0;
        this._padding = new Uint8Array(wordSize);
      }
      get data() {
        return hexConcat(this._data);
      }
      get length() {
        return this._dataLength;
      }
      _writeData(data) {
        this._data.push(data);
        this._dataLength += data.length;
        return data.length;
      }
      appendWriter(writer) {
        return this._writeData(concat(writer._data));
      }
      writeBytes(value) {
        let bytes = arrayify(value);
        const paddingOffset = bytes.length % this.wordSize;
        if (paddingOffset) {
          bytes = concat([bytes, this._padding.slice(paddingOffset)]);
        }
        return this._writeData(bytes);
      }
      _getValue(value) {
        let bytes = arrayify(BigNumber.from(value));
        if (bytes.length > this.wordSize) {
          logger2.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
            length: this.wordSize,
            offset: bytes.length
          });
        }
        if (bytes.length % this.wordSize) {
          bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
        }
        return bytes;
      }
      writeValue(value) {
        return this._writeData(this._getValue(value));
      }
      writeUpdatableValue() {
        const offset = this._data.length;
        this._data.push(this._padding);
        this._dataLength += this.wordSize;
        return (value) => {
          this._data[offset] = this._getValue(value);
        };
      }
    };
    Reader = class {
      constructor(data, wordSize, coerceFunc, allowLoose) {
        defineReadOnly(this, "_data", arrayify(data));
        defineReadOnly(this, "wordSize", wordSize || 32);
        defineReadOnly(this, "_coerceFunc", coerceFunc);
        defineReadOnly(this, "allowLoose", allowLoose);
        this._offset = 0;
      }
      get data() {
        return hexlify(this._data);
      }
      get consumed() {
        return this._offset;
      }
      static coerce(name2, value) {
        let match2 = name2.match("^u?int([0-9]+)$");
        if (match2 && parseInt(match2[1]) <= 48) {
          value = value.toNumber();
        }
        return value;
      }
      coerce(name2, value) {
        if (this._coerceFunc) {
          return this._coerceFunc(name2, value);
        }
        return Reader.coerce(name2, value);
      }
      _peekBytes(offset, length2, loose) {
        let alignedLength = Math.ceil(length2 / this.wordSize) * this.wordSize;
        if (this._offset + alignedLength > this._data.length) {
          if (this.allowLoose && loose && this._offset + length2 <= this._data.length) {
            alignedLength = length2;
          } else {
            logger2.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
              length: this._data.length,
              offset: this._offset + alignedLength
            });
          }
        }
        return this._data.slice(this._offset, this._offset + alignedLength);
      }
      subReader(offset) {
        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
      }
      readBytes(length2, loose) {
        let bytes = this._peekBytes(0, length2, !!loose);
        this._offset += bytes.length;
        return bytes.slice(0, length2);
      }
      readValue() {
        return BigNumber.from(this.readBytes(this.wordSize));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/address.js
var AddressCoder;
var init_address = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/address.js"() {
    "use strict";
    init_react();
    init_lib7();
    init_lib2();
    init_abstract_coder();
    AddressCoder = class extends Coder {
      constructor(localName) {
        super("address", "address", localName, false);
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, value) {
        try {
          value = getAddress(value);
        } catch (error) {
          this._throwError(error.message, value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
var AnonymousCoder;
var init_anonymous = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js"() {
    "use strict";
    init_react();
    init_abstract_coder();
    AnonymousCoder = class extends Coder {
      constructor(coder) {
        super(coder.name, coder.type, void 0, coder.dynamic);
        this.coder = coder;
      }
      defaultValue() {
        return this.coder.defaultValue();
      }
      encode(writer, value) {
        return this.coder.encode(writer, value);
      }
      decode(reader) {
        return this.coder.decode(reader);
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/array.js
function pack(writer, coders, values) {
  let arrayValues = null;
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name2 = coder.localName;
      if (!name2) {
        logger3.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      if (unique[name2]) {
        logger3.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      unique[name2] = true;
      return values[name2];
    });
  } else {
    logger3.throwArgumentError("invalid tuple value", "tuple", values);
  }
  if (coders.length !== arrayValues.length) {
    logger3.throwArgumentError("types/value length mismatch", "tuple", values);
  }
  let staticWriter = new Writer(writer.wordSize);
  let dynamicWriter = new Writer(writer.wordSize);
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length2 = writer.appendWriter(staticWriter);
  length2 += writer.appendWriter(dynamicWriter);
  return length2;
}
function unpack(reader, coders) {
  let values = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readValue();
      let offsetReader = baseReader.subReader(offset.toNumber());
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value != void 0) {
      values.push(value);
    }
  });
  const uniqueNames = coders.reduce((accum, coder) => {
    const name2 = coder.localName;
    if (name2) {
      if (!accum[name2]) {
        accum[name2] = 0;
      }
      accum[name2]++;
    }
    return accum;
  }, {});
  coders.forEach((coder, index) => {
    let name2 = coder.localName;
    if (!name2 || uniqueNames[name2] !== 1) {
      return;
    }
    if (name2 === "length") {
      name2 = "_length";
    }
    if (values[name2] != null) {
      return;
    }
    const value = values[index];
    if (value instanceof Error) {
      Object.defineProperty(values, name2, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    } else {
      values[name2] = value;
    }
  });
  for (let i = 0; i < values.length; i++) {
    const value = values[i];
    if (value instanceof Error) {
      Object.defineProperty(values, i, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    }
  }
  return Object.freeze(values);
}
var logger3, ArrayCoder;
var init_array = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/array.js"() {
    "use strict";
    init_react();
    init_lib();
    init_version();
    init_abstract_coder();
    init_anonymous();
    logger3 = new Logger(version);
    ArrayCoder = class extends Coder {
      constructor(coder, length2, localName) {
        const type = coder.type + "[" + (length2 >= 0 ? length2 : "") + "]";
        const dynamic = length2 === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        this.coder = coder;
        this.length = length2;
      }
      defaultValue() {
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for (let i = 0; i < this.length; i++) {
          result.push(defaultChild);
        }
        return result;
      }
      encode(writer, value) {
        if (!Array.isArray(value)) {
          this._throwError("expected array value", value);
        }
        let count = this.length;
        if (count === -1) {
          count = value.length;
          writer.writeValue(value.length);
        }
        logger3.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for (let i = 0; i < value.length; i++) {
          coders.push(this.coder);
        }
        return pack(writer, coders, value);
      }
      decode(reader) {
        let count = this.length;
        if (count === -1) {
          count = reader.readValue().toNumber();
          if (count * 32 > reader._data.length) {
            logger3.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
              length: reader._data.length,
              count
            });
          }
        }
        let coders = [];
        for (let i = 0; i < count; i++) {
          coders.push(new AnonymousCoder(this.coder));
        }
        return reader.coerce(this.name, unpack(reader, coders));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
var BooleanCoder;
var init_boolean = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/boolean.js"() {
    "use strict";
    init_react();
    init_abstract_coder();
    BooleanCoder = class extends Coder {
      constructor(localName) {
        super("bool", "bool", localName, false);
      }
      defaultValue() {
        return false;
      }
      encode(writer, value) {
        return writer.writeValue(value ? 1 : 0);
      }
      decode(reader) {
        return reader.coerce(this.type, !reader.readValue().isZero());
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
var DynamicBytesCoder, BytesCoder;
var init_bytes = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/bytes.js"() {
    "use strict";
    init_react();
    init_lib2();
    init_abstract_coder();
    DynamicBytesCoder = class extends Coder {
      constructor(type, localName) {
        super(type, type, localName, true);
      }
      defaultValue() {
        return "0x";
      }
      encode(writer, value) {
        value = arrayify(value);
        let length2 = writer.writeValue(value.length);
        length2 += writer.writeBytes(value);
        return length2;
      }
      decode(reader) {
        return reader.readBytes(reader.readValue().toNumber(), true);
      }
    };
    BytesCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("bytes", localName);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify(super.decode(reader)));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
var FixedBytesCoder;
var init_fixed_bytes = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js"() {
    "use strict";
    init_react();
    init_lib2();
    init_abstract_coder();
    FixedBytesCoder = class extends Coder {
      constructor(size2, localName) {
        let name2 = "bytes" + String(size2);
        super(name2, name2, localName, false);
        this.size = size2;
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
      }
      encode(writer, value) {
        let data = arrayify(value);
        if (data.length !== this.size) {
          this._throwError("incorrect data length", value);
        }
        return writer.writeBytes(data);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/null.js
var NullCoder;
var init_null = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/null.js"() {
    "use strict";
    init_react();
    init_abstract_coder();
    NullCoder = class extends Coder {
      constructor(localName) {
        super("null", "", localName, false);
      }
      defaultValue() {
        return null;
      }
      encode(writer, value) {
        if (value != null) {
          this._throwError("not null", value);
        }
        return writer.writeBytes([]);
      }
      decode(reader) {
        reader.readBytes(0);
        return reader.coerce(this.name, null);
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/number.js
var NumberCoder;
var init_number = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/number.js"() {
    "use strict";
    init_react();
    init_lib3();
    init_lib8();
    init_abstract_coder();
    NumberCoder = class extends Coder {
      constructor(size2, signed, localName) {
        const name2 = (signed ? "int" : "uint") + size2 * 8;
        super(name2, name2, localName, false);
        this.size = size2;
        this.signed = signed;
      }
      defaultValue() {
        return 0;
      }
      encode(writer, value) {
        let v2 = BigNumber.from(value);
        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
        if (this.signed) {
          let bounds = maxUintValue.mask(this.size * 8 - 1);
          if (v2.gt(bounds) || v2.lt(bounds.add(One).mul(NegativeOne))) {
            this._throwError("value out-of-bounds", value);
          }
        } else if (v2.lt(Zero) || v2.gt(maxUintValue.mask(this.size * 8))) {
          this._throwError("value out-of-bounds", value);
        }
        v2 = v2.toTwos(this.size * 8).mask(this.size * 8);
        if (this.signed) {
          v2 = v2.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
        }
        return writer.writeValue(v2);
      }
      decode(reader) {
        let value = reader.readValue().mask(this.size * 8);
        if (this.signed) {
          value = value.fromTwos(this.size * 8);
        }
        return reader.coerce(this.name, value);
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/string.js
var StringCoder;
var init_string = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/string.js"() {
    "use strict";
    init_react();
    init_lib9();
    init_bytes();
    StringCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("string", localName);
      }
      defaultValue() {
        return "";
      }
      encode(writer, value) {
        return super.encode(writer, toUtf8Bytes(value));
      }
      decode(reader) {
        return toUtf8String(super.decode(reader));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
var TupleCoder;
var init_tuple = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/tuple.js"() {
    "use strict";
    init_react();
    init_abstract_coder();
    init_array();
    TupleCoder = class extends Coder {
      constructor(coders, localName) {
        let dynamic = false;
        const types = [];
        coders.forEach((coder) => {
          if (coder.dynamic) {
            dynamic = true;
          }
          types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        this.coders = coders;
      }
      defaultValue() {
        const values = [];
        this.coders.forEach((coder) => {
          values.push(coder.defaultValue());
        });
        const uniqueNames = this.coders.reduce((accum, coder) => {
          const name2 = coder.localName;
          if (name2) {
            if (!accum[name2]) {
              accum[name2] = 0;
            }
            accum[name2]++;
          }
          return accum;
        }, {});
        this.coders.forEach((coder, index) => {
          let name2 = coder.localName;
          if (!name2 || uniqueNames[name2] !== 1) {
            return;
          }
          if (name2 === "length") {
            name2 = "_length";
          }
          if (values[name2] != null) {
            return;
          }
          values[name2] = values[index];
        });
        return Object.freeze(values);
      }
      encode(writer, value) {
        return pack(writer, this.coders, value);
      }
      decode(reader) {
        return reader.coerce(this.name, unpack(reader, this.coders));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/abi-coder.js
var logger4, paramTypeBytes, paramTypeNumber, AbiCoder, defaultAbiCoder;
var init_abi_coder = __esm({
  "node_modules/@ethersproject/abi/lib.esm/abi-coder.js"() {
    "use strict";
    init_react();
    init_lib2();
    init_lib4();
    init_lib();
    init_version();
    init_abstract_coder();
    init_address();
    init_array();
    init_boolean();
    init_bytes();
    init_fixed_bytes();
    init_null();
    init_number();
    init_string();
    init_tuple();
    init_fragments();
    logger4 = new Logger(version);
    paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    AbiCoder = class {
      constructor(coerceFunc) {
        logger4.checkNew(new.target, AbiCoder);
        defineReadOnly(this, "coerceFunc", coerceFunc || null);
      }
      _getCoder(param) {
        switch (param.baseType) {
          case "address":
            return new AddressCoder(param.name);
          case "bool":
            return new BooleanCoder(param.name);
          case "string":
            return new StringCoder(param.name);
          case "bytes":
            return new BytesCoder(param.name);
          case "array":
            return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
          case "tuple":
            return new TupleCoder((param.components || []).map((component) => {
              return this._getCoder(component);
            }), param.name);
          case "":
            return new NullCoder(param.name);
        }
        let match2 = param.type.match(paramTypeNumber);
        if (match2) {
          let size2 = parseInt(match2[2] || "256");
          if (size2 === 0 || size2 > 256 || size2 % 8 !== 0) {
            logger4.throwArgumentError("invalid " + match2[1] + " bit length", "param", param);
          }
          return new NumberCoder(size2 / 8, match2[1] === "int", param.name);
        }
        match2 = param.type.match(paramTypeBytes);
        if (match2) {
          let size2 = parseInt(match2[1]);
          if (size2 === 0 || size2 > 32) {
            logger4.throwArgumentError("invalid bytes length", "param", param);
          }
          return new FixedBytesCoder(size2, param.name);
        }
        return logger4.throwArgumentError("invalid type", "type", param.type);
      }
      _getWordSize() {
        return 32;
      }
      _getReader(data, allowLoose) {
        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
      }
      _getWriter() {
        return new Writer(this._getWordSize());
      }
      getDefaultValue(types) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.defaultValue();
      }
      encode(types, values) {
        if (types.length !== values.length) {
          logger4.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
            count: { types: types.length, values: values.length },
            value: { types, values }
          });
        }
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        const writer = this._getWriter();
        coder.encode(writer, values);
        return writer.data;
      }
      decode(types, data, loose) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.decode(this._getReader(arrayify(data), loose));
      }
    };
    defaultAbiCoder = new AbiCoder();
  }
});

// node_modules/@ethersproject/abi/lib.esm/interface.js
function wrapAccessError(property, error) {
  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
  wrap.error = error;
  return wrap;
}
var logger5, LogDescription, TransactionDescription, ErrorDescription, Indexed, BuiltinErrors, Interface;
var init_interface = __esm({
  "node_modules/@ethersproject/abi/lib.esm/interface.js"() {
    "use strict";
    init_react();
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib10();
    init_lib5();
    init_lib4();
    init_abi_coder();
    init_abstract_coder();
    init_fragments();
    init_lib();
    init_version();
    logger5 = new Logger(version);
    LogDescription = class extends Description {
    };
    TransactionDescription = class extends Description {
    };
    ErrorDescription = class extends Description {
    };
    Indexed = class extends Description {
      static isIndexed(value) {
        return !!(value && value._isIndexed);
      }
    };
    BuiltinErrors = {
      "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
      "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    Interface = class {
      constructor(fragments) {
        logger5.checkNew(new.target, Interface);
        let abi = [];
        if (typeof fragments === "string") {
          abi = JSON.parse(fragments);
        } else {
          abi = fragments;
        }
        defineReadOnly(this, "fragments", abi.map((fragment) => {
          return Fragment.from(fragment);
        }).filter((fragment) => fragment != null));
        defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "errors", {});
        defineReadOnly(this, "events", {});
        defineReadOnly(this, "structs", {});
        this.fragments.forEach((fragment) => {
          let bucket = null;
          switch (fragment.type) {
            case "constructor":
              if (this.deploy) {
                logger5.warn("duplicate definition - constructor");
                return;
              }
              defineReadOnly(this, "deploy", fragment);
              return;
            case "function":
              bucket = this.functions;
              break;
            case "event":
              bucket = this.events;
              break;
            case "error":
              bucket = this.errors;
              break;
            default:
              return;
          }
          let signature = fragment.format();
          if (bucket[signature]) {
            logger5.warn("duplicate definition - " + signature);
            return;
          }
          bucket[signature] = fragment;
        });
        if (!this.deploy) {
          defineReadOnly(this, "deploy", ConstructorFragment.from({
            payable: false,
            type: "constructor"
          }));
        }
        defineReadOnly(this, "_isInterface", true);
      }
      format(format) {
        if (!format) {
          format = FormatTypes.full;
        }
        if (format === FormatTypes.sighash) {
          logger5.throwArgumentError("interface does not support formatting sighash", "format", format);
        }
        const abi = this.fragments.map((fragment) => fragment.format(format));
        if (format === FormatTypes.json) {
          return JSON.stringify(abi.map((j2) => JSON.parse(j2)));
        }
        return abi;
      }
      static getAbiCoder() {
        return defaultAbiCoder;
      }
      static getAddress(address) {
        return getAddress(address);
      }
      static getSighash(fragment) {
        return hexDataSlice(id(fragment.format()), 0, 4);
      }
      static getEventTopic(eventFragment) {
        return id(eventFragment.format());
      }
      getFunction(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
          for (const name2 in this.functions) {
            if (nameOrSignatureOrSighash === this.getSighash(name2)) {
              return this.functions[name2];
            }
          }
          logger5.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name2 = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.functions).filter((f2) => f2.split("(")[0] === name2);
          if (matching.length === 0) {
            logger5.throwArgumentError("no matching function", "name", name2);
          } else if (matching.length > 1) {
            logger5.throwArgumentError("multiple matching functions", "name", name2);
          }
          return this.functions[matching[0]];
        }
        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger5.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      getEvent(nameOrSignatureOrTopic) {
        if (isHexString(nameOrSignatureOrTopic)) {
          const topichash = nameOrSignatureOrTopic.toLowerCase();
          for (const name2 in this.events) {
            if (topichash === this.getEventTopic(name2)) {
              return this.events[name2];
            }
          }
          logger5.throwArgumentError("no matching event", "topichash", topichash);
        }
        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
          const name2 = nameOrSignatureOrTopic.trim();
          const matching = Object.keys(this.events).filter((f2) => f2.split("(")[0] === name2);
          if (matching.length === 0) {
            logger5.throwArgumentError("no matching event", "name", name2);
          } else if (matching.length > 1) {
            logger5.throwArgumentError("multiple matching events", "name", name2);
          }
          return this.events[matching[0]];
        }
        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
        if (!result) {
          logger5.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
        }
        return result;
      }
      getError(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
          const getSighash = getStatic(this.constructor, "getSighash");
          for (const name2 in this.errors) {
            const error = this.errors[name2];
            if (nameOrSignatureOrSighash === getSighash(error)) {
              return this.errors[name2];
            }
          }
          logger5.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name2 = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.errors).filter((f2) => f2.split("(")[0] === name2);
          if (matching.length === 0) {
            logger5.throwArgumentError("no matching error", "name", name2);
          } else if (matching.length > 1) {
            logger5.throwArgumentError("multiple matching errors", "name", name2);
          }
          return this.errors[matching[0]];
        }
        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger5.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      getSighash(fragment) {
        if (typeof fragment === "string") {
          try {
            fragment = this.getFunction(fragment);
          } catch (error) {
            try {
              fragment = this.getError(fragment);
            } catch (_2) {
              throw error;
            }
          }
        }
        return getStatic(this.constructor, "getSighash")(fragment);
      }
      getEventTopic(eventFragment) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        return getStatic(this.constructor, "getEventTopic")(eventFragment);
      }
      _decodeParams(params, data) {
        return this._abiCoder.decode(params, data);
      }
      _encodeParams(params, values) {
        return this._abiCoder.encode(params, values);
      }
      encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
      }
      decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        const bytes = arrayify(data);
        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
          logger5.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
        }
        return this._decodeParams(fragment.inputs, bytes.slice(4));
      }
      encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        return hexlify(concat([
          this.getSighash(fragment),
          this._encodeParams(fragment.inputs, values || [])
        ]));
      }
      decodeFunctionData(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        const bytes = arrayify(data);
        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
          logger5.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
        }
        return this._decodeParams(functionFragment.inputs, bytes.slice(4));
      }
      encodeFunctionData(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(concat([
          this.getSighash(functionFragment),
          this._encodeParams(functionFragment.inputs, values || [])
        ]));
      }
      decodeFunctionResult(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        let bytes = arrayify(data);
        let reason = null;
        let errorArgs = null;
        let errorName = null;
        let errorSignature = null;
        switch (bytes.length % this._abiCoder._getWordSize()) {
          case 0:
            try {
              return this._abiCoder.decode(functionFragment.outputs, bytes);
            } catch (error) {
            }
            break;
          case 4: {
            const selector = hexlify(bytes.slice(0, 4));
            const builtin = BuiltinErrors[selector];
            if (builtin) {
              errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
              errorName = builtin.name;
              errorSignature = builtin.signature;
              if (builtin.reason) {
                reason = errorArgs[0];
              }
            } else {
              try {
                const error = this.getError(selector);
                errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                errorName = error.name;
                errorSignature = error.format();
              } catch (error) {
                console.log(error);
              }
            }
            break;
          }
        }
        return logger5.throwError("call revert exception", Logger.errors.CALL_EXCEPTION, {
          method: functionFragment.format(),
          errorArgs,
          errorName,
          errorSignature,
          reason
        });
      }
      encodeFunctionResult(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
      }
      encodeFilterTopics(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (values.length > eventFragment.inputs.length) {
          logger5.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
            argument: "values",
            value: values
          });
        }
        let topics = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        const encodeTopic = (param, value) => {
          if (param.type === "string") {
            return id(value);
          } else if (param.type === "bytes") {
            return keccak256(hexlify(value));
          }
          if (param.type === "address") {
            this._abiCoder.encode(["address"], [value]);
          }
          return hexZeroPad(hexlify(value), 32);
        };
        values.forEach((value, index) => {
          let param = eventFragment.inputs[index];
          if (!param.indexed) {
            if (value != null) {
              logger5.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
            }
            return;
          }
          if (value == null) {
            topics.push(null);
          } else if (param.baseType === "array" || param.baseType === "tuple") {
            logger5.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
          } else if (Array.isArray(value)) {
            topics.push(value.map((value2) => encodeTopic(param, value2)));
          } else {
            topics.push(encodeTopic(param, value));
          }
        });
        while (topics.length && topics[topics.length - 1] === null) {
          topics.pop();
        }
        return topics;
      }
      encodeEventLog(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        if (values.length !== eventFragment.inputs.length) {
          logger5.throwArgumentError("event arguments/values mismatch", "values", values);
        }
        eventFragment.inputs.forEach((param, index) => {
          const value = values[index];
          if (param.indexed) {
            if (param.type === "string") {
              topics.push(id(value));
            } else if (param.type === "bytes") {
              topics.push(keccak256(value));
            } else if (param.baseType === "tuple" || param.baseType === "array") {
              throw new Error("not implemented");
            } else {
              topics.push(this._abiCoder.encode([param.type], [value]));
            }
          } else {
            dataTypes.push(param);
            dataValues.push(value);
          }
        });
        return {
          data: this._abiCoder.encode(dataTypes, dataValues),
          topics
        };
      }
      decodeEventLog(eventFragment, data, topics) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (topics != null && !eventFragment.anonymous) {
          let topicHash = this.getEventTopic(eventFragment);
          if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
            logger5.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
          }
          topics = topics.slice(1);
        }
        let indexed = [];
        let nonIndexed = [];
        let dynamic = [];
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
              indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
              dynamic.push(true);
            } else {
              indexed.push(param);
              dynamic.push(false);
            }
          } else {
            nonIndexed.push(param);
            dynamic.push(false);
          }
        });
        let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
        let result = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (resultIndexed == null) {
              result[index] = new Indexed({ _isIndexed: true, hash: null });
            } else if (dynamic[index]) {
              result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
            } else {
              try {
                result[index] = resultIndexed[indexedIndex++];
              } catch (error) {
                result[index] = error;
              }
            }
          } else {
            try {
              result[index] = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
              result[index] = error;
            }
          }
          if (param.name && result[param.name] == null) {
            const value = result[index];
            if (value instanceof Error) {
              Object.defineProperty(result, param.name, {
                enumerable: true,
                get: () => {
                  throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
                }
              });
            } else {
              result[param.name] = value;
            }
          }
        });
        for (let i = 0; i < result.length; i++) {
          const value = result[i];
          if (value instanceof Error) {
            Object.defineProperty(result, i, {
              enumerable: true,
              get: () => {
                throw wrapAccessError(`index ${i}`, value);
              }
            });
          }
        }
        return Object.freeze(result);
      }
      parseTransaction(tx) {
        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new TransactionDescription({
          args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
          functionFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment),
          value: BigNumber.from(tx.value || "0")
        });
      }
      parseLog(log4) {
        let fragment = this.getEvent(log4.topics[0]);
        if (!fragment || fragment.anonymous) {
          return null;
        }
        return new LogDescription({
          eventFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          topic: this.getEventTopic(fragment),
          args: this.decodeEventLog(fragment, log4.data, log4.topics)
        });
      }
      parseError(data) {
        const hexData = hexlify(data);
        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new ErrorDescription({
          args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
          errorFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment)
        });
      }
      static isInterface(value) {
        return !!(value && value._isInterface);
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/index.js
var init_lib13 = __esm({
  "node_modules/@ethersproject/abi/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_fragments();
    init_abi_coder();
    init_interface();
  }
});

// node_modules/@ethersproject/abstract-provider/lib.esm/_version.js
var version2;
var init_version2 = __esm({
  "node_modules/@ethersproject/abstract-provider/lib.esm/_version.js"() {
    init_react();
    version2 = "abstract-provider/5.5.1";
  }
});

// node_modules/@ethersproject/abstract-provider/lib.esm/index.js
var __awaiter, logger6, ForkEvent, Provider;
var init_lib14 = __esm({
  "node_modules/@ethersproject/abstract-provider/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_lib3();
    init_lib4();
    init_lib();
    init_version2();
    __awaiter = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger6 = new Logger(version2);
    ForkEvent = class extends Description {
      static isForkEvent(value) {
        return !!(value && value._isForkEvent);
      }
    };
    Provider = class {
      constructor() {
        logger6.checkAbstract(new.target, Provider);
        defineReadOnly(this, "_isProvider", true);
      }
      getFeeData() {
        return __awaiter(this, void 0, void 0, function* () {
          const { block, gasPrice } = yield resolveProperties({
            block: this.getBlock("latest"),
            gasPrice: this.getGasPrice().catch((error) => {
              return null;
            })
          });
          let maxFeePerGas = null, maxPriorityFeePerGas = null;
          if (block && block.baseFeePerGas) {
            maxPriorityFeePerGas = BigNumber.from("2500000000");
            maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
          }
          return { maxFeePerGas, maxPriorityFeePerGas, gasPrice };
        });
      }
      addListener(eventName, listener) {
        return this.on(eventName, listener);
      }
      removeListener(eventName, listener) {
        return this.off(eventName, listener);
      }
      static isProvider(value) {
        return !!(value && value._isProvider);
      }
    };
  }
});

// node_modules/@ethersproject/abstract-signer/lib.esm/_version.js
var version3;
var init_version3 = __esm({
  "node_modules/@ethersproject/abstract-signer/lib.esm/_version.js"() {
    init_react();
    version3 = "abstract-signer/5.5.0";
  }
});

// node_modules/@ethersproject/abstract-signer/lib.esm/index.js
var __awaiter2, logger7, allowedTransactionKeys, forwardErrors, Signer, VoidSigner;
var init_lib15 = __esm({
  "node_modules/@ethersproject/abstract-signer/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_lib4();
    init_lib();
    init_version3();
    __awaiter2 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger7 = new Logger(version3);
    allowedTransactionKeys = [
      "accessList",
      "chainId",
      "customData",
      "data",
      "from",
      "gasLimit",
      "gasPrice",
      "maxFeePerGas",
      "maxPriorityFeePerGas",
      "nonce",
      "to",
      "type",
      "value"
    ];
    forwardErrors = [
      Logger.errors.INSUFFICIENT_FUNDS,
      Logger.errors.NONCE_EXPIRED,
      Logger.errors.REPLACEMENT_UNDERPRICED
    ];
    Signer = class {
      constructor() {
        logger7.checkAbstract(new.target, Signer);
        defineReadOnly(this, "_isSigner", true);
      }
      getBalance(blockTag) {
        return __awaiter2(this, void 0, void 0, function* () {
          this._checkProvider("getBalance");
          return yield this.provider.getBalance(this.getAddress(), blockTag);
        });
      }
      getTransactionCount(blockTag) {
        return __awaiter2(this, void 0, void 0, function* () {
          this._checkProvider("getTransactionCount");
          return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
        });
      }
      estimateGas(transaction) {
        return __awaiter2(this, void 0, void 0, function* () {
          this._checkProvider("estimateGas");
          const tx = yield resolveProperties(this.checkTransaction(transaction));
          return yield this.provider.estimateGas(tx);
        });
      }
      call(transaction, blockTag) {
        return __awaiter2(this, void 0, void 0, function* () {
          this._checkProvider("call");
          const tx = yield resolveProperties(this.checkTransaction(transaction));
          return yield this.provider.call(tx, blockTag);
        });
      }
      sendTransaction(transaction) {
        return __awaiter2(this, void 0, void 0, function* () {
          this._checkProvider("sendTransaction");
          const tx = yield this.populateTransaction(transaction);
          const signedTx = yield this.signTransaction(tx);
          return yield this.provider.sendTransaction(signedTx);
        });
      }
      getChainId() {
        return __awaiter2(this, void 0, void 0, function* () {
          this._checkProvider("getChainId");
          const network = yield this.provider.getNetwork();
          return network.chainId;
        });
      }
      getGasPrice() {
        return __awaiter2(this, void 0, void 0, function* () {
          this._checkProvider("getGasPrice");
          return yield this.provider.getGasPrice();
        });
      }
      getFeeData() {
        return __awaiter2(this, void 0, void 0, function* () {
          this._checkProvider("getFeeData");
          return yield this.provider.getFeeData();
        });
      }
      resolveName(name2) {
        return __awaiter2(this, void 0, void 0, function* () {
          this._checkProvider("resolveName");
          return yield this.provider.resolveName(name2);
        });
      }
      checkTransaction(transaction) {
        for (const key in transaction) {
          if (allowedTransactionKeys.indexOf(key) === -1) {
            logger7.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
          }
        }
        const tx = shallowCopy(transaction);
        if (tx.from == null) {
          tx.from = this.getAddress();
        } else {
          tx.from = Promise.all([
            Promise.resolve(tx.from),
            this.getAddress()
          ]).then((result) => {
            if (result[0].toLowerCase() !== result[1].toLowerCase()) {
              logger7.throwArgumentError("from address mismatch", "transaction", transaction);
            }
            return result[0];
          });
        }
        return tx;
      }
      populateTransaction(transaction) {
        return __awaiter2(this, void 0, void 0, function* () {
          const tx = yield resolveProperties(this.checkTransaction(transaction));
          if (tx.to != null) {
            tx.to = Promise.resolve(tx.to).then((to) => __awaiter2(this, void 0, void 0, function* () {
              if (to == null) {
                return null;
              }
              const address = yield this.resolveName(to);
              if (address == null) {
                logger7.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
              }
              return address;
            }));
            tx.to.catch((error) => {
            });
          }
          const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;
          if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
            logger7.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
          } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
            logger7.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
          }
          if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {
            tx.type = 2;
          } else if (tx.type === 0 || tx.type === 1) {
            if (tx.gasPrice == null) {
              tx.gasPrice = this.getGasPrice();
            }
          } else {
            const feeData = yield this.getFeeData();
            if (tx.type == null) {
              if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                tx.type = 2;
                if (tx.gasPrice != null) {
                  const gasPrice = tx.gasPrice;
                  delete tx.gasPrice;
                  tx.maxFeePerGas = gasPrice;
                  tx.maxPriorityFeePerGas = gasPrice;
                } else {
                  if (tx.maxFeePerGas == null) {
                    tx.maxFeePerGas = feeData.maxFeePerGas;
                  }
                  if (tx.maxPriorityFeePerGas == null) {
                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                  }
                }
              } else if (feeData.gasPrice != null) {
                if (hasEip1559) {
                  logger7.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "populateTransaction"
                  });
                }
                if (tx.gasPrice == null) {
                  tx.gasPrice = feeData.gasPrice;
                }
                tx.type = 0;
              } else {
                logger7.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "signer.getFeeData"
                });
              }
            } else if (tx.type === 2) {
              if (tx.maxFeePerGas == null) {
                tx.maxFeePerGas = feeData.maxFeePerGas;
              }
              if (tx.maxPriorityFeePerGas == null) {
                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
              }
            }
          }
          if (tx.nonce == null) {
            tx.nonce = this.getTransactionCount("pending");
          }
          if (tx.gasLimit == null) {
            tx.gasLimit = this.estimateGas(tx).catch((error) => {
              if (forwardErrors.indexOf(error.code) >= 0) {
                throw error;
              }
              return logger7.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error,
                tx
              });
            });
          }
          if (tx.chainId == null) {
            tx.chainId = this.getChainId();
          } else {
            tx.chainId = Promise.all([
              Promise.resolve(tx.chainId),
              this.getChainId()
            ]).then((results) => {
              if (results[1] !== 0 && results[0] !== results[1]) {
                logger7.throwArgumentError("chainId address mismatch", "transaction", transaction);
              }
              return results[0];
            });
          }
          return yield resolveProperties(tx);
        });
      }
      _checkProvider(operation) {
        if (!this.provider) {
          logger7.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: operation || "_checkProvider"
          });
        }
      }
      static isSigner(value) {
        return !!(value && value._isSigner);
      }
    };
    VoidSigner = class extends Signer {
      constructor(address, provider) {
        logger7.checkNew(new.target, VoidSigner);
        super();
        defineReadOnly(this, "address", address);
        defineReadOnly(this, "provider", provider || null);
      }
      getAddress() {
        return Promise.resolve(this.address);
      }
      _fail(message, operation) {
        return Promise.resolve().then(() => {
          logger7.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation });
        });
      }
      signMessage(message) {
        return this._fail("VoidSigner cannot sign messages", "signMessage");
      }
      signTransaction(transaction) {
        return this._fail("VoidSigner cannot sign transactions", "signTransaction");
      }
      _signTypedData(domain, types, value) {
        return this._fail("VoidSigner cannot sign typed data", "signTypedData");
      }
      connect(provider) {
        return new VoidSigner(this.address, provider);
      }
    };
  }
});

// node_modules/@ethersproject/contracts/lib.esm/_version.js
var version4;
var init_version4 = __esm({
  "node_modules/@ethersproject/contracts/lib.esm/_version.js"() {
    init_react();
    version4 = "contracts/5.5.0";
  }
});

// node_modules/@ethersproject/contracts/lib.esm/index.js
function resolveName(resolver, nameOrPromise) {
  return __awaiter3(this, void 0, void 0, function* () {
    const name2 = yield nameOrPromise;
    if (typeof name2 !== "string") {
      logger8.throwArgumentError("invalid address or ENS name", "name", name2);
    }
    try {
      return getAddress(name2);
    } catch (error) {
    }
    if (!resolver) {
      logger8.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "resolveName"
      });
    }
    const address = yield resolver.resolveName(name2);
    if (address == null) {
      logger8.throwArgumentError("resolver or addr is not configured for ENS name", "name", name2);
    }
    return address;
  });
}
function resolveAddresses(resolver, value, paramType) {
  return __awaiter3(this, void 0, void 0, function* () {
    if (Array.isArray(paramType)) {
      return yield Promise.all(paramType.map((paramType2, index) => {
        return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType2.name], paramType2);
      }));
    }
    if (paramType.type === "address") {
      return yield resolveName(resolver, value);
    }
    if (paramType.type === "tuple") {
      return yield resolveAddresses(resolver, value, paramType.components);
    }
    if (paramType.baseType === "array") {
      if (!Array.isArray(value)) {
        return Promise.reject(logger8.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
          argument: "value",
          value
        }));
      }
      return yield Promise.all(value.map((v2) => resolveAddresses(resolver, v2, paramType.arrayChildren)));
    }
    return value;
  });
}
function populateTransaction(contract, fragment, args) {
  return __awaiter3(this, void 0, void 0, function* () {
    let overrides = {};
    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
      overrides = shallowCopy(args.pop());
    }
    logger8.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
    if (contract.signer) {
      if (overrides.from) {
        overrides.from = resolveProperties({
          override: resolveName(contract.signer, overrides.from),
          signer: contract.signer.getAddress()
        }).then((check) => __awaiter3(this, void 0, void 0, function* () {
          if (getAddress(check.signer) !== check.override) {
            logger8.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "overrides.from"
            });
          }
          return check.override;
        }));
      } else {
        overrides.from = contract.signer.getAddress();
      }
    } else if (overrides.from) {
      overrides.from = resolveName(contract.provider, overrides.from);
    }
    const resolved = yield resolveProperties({
      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
      address: contract.resolvedAddress,
      overrides: resolveProperties(overrides) || {}
    });
    const data = contract.interface.encodeFunctionData(fragment, resolved.args);
    const tx = {
      data,
      to: resolved.address
    };
    const ro = resolved.overrides;
    if (ro.nonce != null) {
      tx.nonce = BigNumber.from(ro.nonce).toNumber();
    }
    if (ro.gasLimit != null) {
      tx.gasLimit = BigNumber.from(ro.gasLimit);
    }
    if (ro.gasPrice != null) {
      tx.gasPrice = BigNumber.from(ro.gasPrice);
    }
    if (ro.maxFeePerGas != null) {
      tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);
    }
    if (ro.maxPriorityFeePerGas != null) {
      tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);
    }
    if (ro.from != null) {
      tx.from = ro.from;
    }
    if (ro.type != null) {
      tx.type = ro.type;
    }
    if (ro.accessList != null) {
      tx.accessList = accessListify(ro.accessList);
    }
    if (tx.gasLimit == null && fragment.gas != null) {
      let intrinsic = 21e3;
      const bytes = arrayify(data);
      for (let i = 0; i < bytes.length; i++) {
        intrinsic += 4;
        if (bytes[i]) {
          intrinsic += 64;
        }
      }
      tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
    }
    if (ro.value) {
      const roValue = BigNumber.from(ro.value);
      if (!roValue.isZero() && !fragment.payable) {
        logger8.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "overrides.value",
          value: overrides.value
        });
      }
      tx.value = roValue;
    }
    if (ro.customData) {
      tx.customData = shallowCopy(ro.customData);
    }
    delete overrides.nonce;
    delete overrides.gasLimit;
    delete overrides.gasPrice;
    delete overrides.from;
    delete overrides.value;
    delete overrides.type;
    delete overrides.accessList;
    delete overrides.maxFeePerGas;
    delete overrides.maxPriorityFeePerGas;
    delete overrides.customData;
    const leftovers = Object.keys(overrides).filter((key) => overrides[key] != null);
    if (leftovers.length) {
      logger8.throwError(`cannot override ${leftovers.map((l2) => JSON.stringify(l2)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "overrides",
        overrides: leftovers
      });
    }
    return tx;
  });
}
function buildPopulate(contract, fragment) {
  return function(...args) {
    return populateTransaction(contract, fragment, args);
  };
}
function buildEstimate(contract, fragment) {
  const signerOrProvider = contract.signer || contract.provider;
  return function(...args) {
    return __awaiter3(this, void 0, void 0, function* () {
      if (!signerOrProvider) {
        logger8.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "estimateGas"
        });
      }
      const tx = yield populateTransaction(contract, fragment, args);
      return yield signerOrProvider.estimateGas(tx);
    });
  };
}
function addContractWait(contract, tx) {
  const wait = tx.wait.bind(tx);
  tx.wait = (confirmations) => {
    return wait(confirmations).then((receipt) => {
      receipt.events = receipt.logs.map((log4) => {
        let event = deepCopy(log4);
        let parsed = null;
        try {
          parsed = contract.interface.parseLog(log4);
        } catch (e) {
        }
        if (parsed) {
          event.args = parsed.args;
          event.decode = (data, topics) => {
            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
          };
          event.event = parsed.name;
          event.eventSignature = parsed.signature;
        }
        event.removeListener = () => {
          return contract.provider;
        };
        event.getBlock = () => {
          return contract.provider.getBlock(receipt.blockHash);
        };
        event.getTransaction = () => {
          return contract.provider.getTransaction(receipt.transactionHash);
        };
        event.getTransactionReceipt = () => {
          return Promise.resolve(receipt);
        };
        return event;
      });
      return receipt;
    });
  };
}
function buildCall(contract, fragment, collapseSimple) {
  const signerOrProvider = contract.signer || contract.provider;
  return function(...args) {
    return __awaiter3(this, void 0, void 0, function* () {
      let blockTag = void 0;
      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
        const overrides = shallowCopy(args.pop());
        if (overrides.blockTag != null) {
          blockTag = yield overrides.blockTag;
        }
        delete overrides.blockTag;
        args.push(overrides);
      }
      if (contract.deployTransaction != null) {
        yield contract._deployed(blockTag);
      }
      const tx = yield populateTransaction(contract, fragment, args);
      const result = yield signerOrProvider.call(tx, blockTag);
      try {
        let value = contract.interface.decodeFunctionResult(fragment, result);
        if (collapseSimple && fragment.outputs.length === 1) {
          value = value[0];
        }
        return value;
      } catch (error) {
        if (error.code === Logger.errors.CALL_EXCEPTION) {
          error.address = contract.address;
          error.args = args;
          error.transaction = tx;
        }
        throw error;
      }
    });
  };
}
function buildSend(contract, fragment) {
  return function(...args) {
    return __awaiter3(this, void 0, void 0, function* () {
      if (!contract.signer) {
        logger8.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "sendTransaction"
        });
      }
      if (contract.deployTransaction != null) {
        yield contract._deployed();
      }
      const txRequest = yield populateTransaction(contract, fragment, args);
      const tx = yield contract.signer.sendTransaction(txRequest);
      addContractWait(contract, tx);
      return tx;
    });
  };
}
function buildDefault(contract, fragment, collapseSimple) {
  if (fragment.constant) {
    return buildCall(contract, fragment, collapseSimple);
  }
  return buildSend(contract, fragment);
}
function getEventTag(filter) {
  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
    return "*";
  }
  return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
    if (Array.isArray(topic)) {
      return topic.join("|");
    }
    return topic;
  }).join(":") : "");
}
var __awaiter3, logger8, allowedTransactionKeys2, RunningEvent, ErrorRunningEvent, FragmentRunningEvent, WildcardRunningEvent, BaseContract, Contract, ContractFactory;
var init_lib16 = __esm({
  "node_modules/@ethersproject/contracts/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_lib13();
    init_lib14();
    init_lib15();
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib4();
    init_lib12();
    init_lib();
    init_version4();
    __awaiter3 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger8 = new Logger(version4);
    allowedTransactionKeys2 = {
      chainId: true,
      data: true,
      from: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      value: true,
      type: true,
      accessList: true,
      maxFeePerGas: true,
      maxPriorityFeePerGas: true,
      customData: true
    };
    RunningEvent = class {
      constructor(tag, filter) {
        defineReadOnly(this, "tag", tag);
        defineReadOnly(this, "filter", filter);
        this._listeners = [];
      }
      addListener(listener, once) {
        this._listeners.push({ listener, once });
      }
      removeListener(listener) {
        let done = false;
        this._listeners = this._listeners.filter((item) => {
          if (done || item.listener !== listener) {
            return true;
          }
          done = true;
          return false;
        });
      }
      removeAllListeners() {
        this._listeners = [];
      }
      listeners() {
        return this._listeners.map((i) => i.listener);
      }
      listenerCount() {
        return this._listeners.length;
      }
      run(args) {
        const listenerCount = this.listenerCount();
        this._listeners = this._listeners.filter((item) => {
          const argsCopy = args.slice();
          setTimeout(() => {
            item.listener.apply(this, argsCopy);
          }, 0);
          return !item.once;
        });
        return listenerCount;
      }
      prepareEvent(event) {
      }
      getEmit(event) {
        return [event];
      }
    };
    ErrorRunningEvent = class extends RunningEvent {
      constructor() {
        super("error", null);
      }
    };
    FragmentRunningEvent = class extends RunningEvent {
      constructor(address, contractInterface, fragment, topics) {
        const filter = {
          address
        };
        let topic = contractInterface.getEventTopic(fragment);
        if (topics) {
          if (topic !== topics[0]) {
            logger8.throwArgumentError("topic mismatch", "topics", topics);
          }
          filter.topics = topics.slice();
        } else {
          filter.topics = [topic];
        }
        super(getEventTag(filter), filter);
        defineReadOnly(this, "address", address);
        defineReadOnly(this, "interface", contractInterface);
        defineReadOnly(this, "fragment", fragment);
      }
      prepareEvent(event) {
        super.prepareEvent(event);
        event.event = this.fragment.name;
        event.eventSignature = this.fragment.format();
        event.decode = (data, topics) => {
          return this.interface.decodeEventLog(this.fragment, data, topics);
        };
        try {
          event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
        } catch (error) {
          event.args = null;
          event.decodeError = error;
        }
      }
      getEmit(event) {
        const errors = checkResultErrors(event.args);
        if (errors.length) {
          throw errors[0].error;
        }
        const args = (event.args || []).slice();
        args.push(event);
        return args;
      }
    };
    WildcardRunningEvent = class extends RunningEvent {
      constructor(address, contractInterface) {
        super("*", { address });
        defineReadOnly(this, "address", address);
        defineReadOnly(this, "interface", contractInterface);
      }
      prepareEvent(event) {
        super.prepareEvent(event);
        try {
          const parsed = this.interface.parseLog(event);
          event.event = parsed.name;
          event.eventSignature = parsed.signature;
          event.decode = (data, topics) => {
            return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
          };
          event.args = parsed.args;
        } catch (error) {
        }
      }
    };
    BaseContract = class {
      constructor(addressOrName, contractInterface, signerOrProvider) {
        logger8.checkNew(new.target, Contract);
        defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
        if (signerOrProvider == null) {
          defineReadOnly(this, "provider", null);
          defineReadOnly(this, "signer", null);
        } else if (Signer.isSigner(signerOrProvider)) {
          defineReadOnly(this, "provider", signerOrProvider.provider || null);
          defineReadOnly(this, "signer", signerOrProvider);
        } else if (Provider.isProvider(signerOrProvider)) {
          defineReadOnly(this, "provider", signerOrProvider);
          defineReadOnly(this, "signer", null);
        } else {
          logger8.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
        }
        defineReadOnly(this, "callStatic", {});
        defineReadOnly(this, "estimateGas", {});
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "populateTransaction", {});
        defineReadOnly(this, "filters", {});
        {
          const uniqueFilters = {};
          Object.keys(this.interface.events).forEach((eventSignature) => {
            const event = this.interface.events[eventSignature];
            defineReadOnly(this.filters, eventSignature, (...args) => {
              return {
                address: this.address,
                topics: this.interface.encodeFilterTopics(event, args)
              };
            });
            if (!uniqueFilters[event.name]) {
              uniqueFilters[event.name] = [];
            }
            uniqueFilters[event.name].push(eventSignature);
          });
          Object.keys(uniqueFilters).forEach((name2) => {
            const filters = uniqueFilters[name2];
            if (filters.length === 1) {
              defineReadOnly(this.filters, name2, this.filters[filters[0]]);
            } else {
              logger8.warn(`Duplicate definition of ${name2} (${filters.join(", ")})`);
            }
          });
        }
        defineReadOnly(this, "_runningEvents", {});
        defineReadOnly(this, "_wrappedEmits", {});
        if (addressOrName == null) {
          logger8.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
        }
        defineReadOnly(this, "address", addressOrName);
        if (this.provider) {
          defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
        } else {
          try {
            defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
          } catch (error) {
            logger8.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "new Contract"
            });
          }
        }
        const uniqueNames = {};
        const uniqueSignatures = {};
        Object.keys(this.interface.functions).forEach((signature) => {
          const fragment = this.interface.functions[signature];
          if (uniqueSignatures[signature]) {
            logger8.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);
            return;
          }
          uniqueSignatures[signature] = true;
          {
            const name2 = fragment.name;
            if (!uniqueNames[`%${name2}`]) {
              uniqueNames[`%${name2}`] = [];
            }
            uniqueNames[`%${name2}`].push(signature);
          }
          if (this[signature] == null) {
            defineReadOnly(this, signature, buildDefault(this, fragment, true));
          }
          if (this.functions[signature] == null) {
            defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));
          }
          if (this.callStatic[signature] == null) {
            defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));
          }
          if (this.populateTransaction[signature] == null) {
            defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));
          }
          if (this.estimateGas[signature] == null) {
            defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));
          }
        });
        Object.keys(uniqueNames).forEach((name2) => {
          const signatures = uniqueNames[name2];
          if (signatures.length > 1) {
            return;
          }
          name2 = name2.substring(1);
          const signature = signatures[0];
          try {
            if (this[name2] == null) {
              defineReadOnly(this, name2, this[signature]);
            }
          } catch (e) {
          }
          if (this.functions[name2] == null) {
            defineReadOnly(this.functions, name2, this.functions[signature]);
          }
          if (this.callStatic[name2] == null) {
            defineReadOnly(this.callStatic, name2, this.callStatic[signature]);
          }
          if (this.populateTransaction[name2] == null) {
            defineReadOnly(this.populateTransaction, name2, this.populateTransaction[signature]);
          }
          if (this.estimateGas[name2] == null) {
            defineReadOnly(this.estimateGas, name2, this.estimateGas[signature]);
          }
        });
      }
      static getContractAddress(transaction) {
        return getContractAddress(transaction);
      }
      static getInterface(contractInterface) {
        if (Interface.isInterface(contractInterface)) {
          return contractInterface;
        }
        return new Interface(contractInterface);
      }
      deployed() {
        return this._deployed();
      }
      _deployed(blockTag) {
        if (!this._deployedPromise) {
          if (this.deployTransaction) {
            this._deployedPromise = this.deployTransaction.wait().then(() => {
              return this;
            });
          } else {
            this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
              if (code === "0x") {
                logger8.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
                  contractAddress: this.address,
                  operation: "getDeployed"
                });
              }
              return this;
            });
          }
        }
        return this._deployedPromise;
      }
      fallback(overrides) {
        if (!this.signer) {
          logger8.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
        }
        const tx = shallowCopy(overrides || {});
        ["from", "to"].forEach(function(key) {
          if (tx[key] == null) {
            return;
          }
          logger8.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
        });
        tx.to = this.resolvedAddress;
        return this.deployed().then(() => {
          return this.signer.sendTransaction(tx);
        });
      }
      connect(signerOrProvider) {
        if (typeof signerOrProvider === "string") {
          signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
        }
        const contract = new this.constructor(this.address, this.interface, signerOrProvider);
        if (this.deployTransaction) {
          defineReadOnly(contract, "deployTransaction", this.deployTransaction);
        }
        return contract;
      }
      attach(addressOrName) {
        return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
      }
      static isIndexed(value) {
        return Indexed.isIndexed(value);
      }
      _normalizeRunningEvent(runningEvent) {
        if (this._runningEvents[runningEvent.tag]) {
          return this._runningEvents[runningEvent.tag];
        }
        return runningEvent;
      }
      _getRunningEvent(eventName) {
        if (typeof eventName === "string") {
          if (eventName === "error") {
            return this._normalizeRunningEvent(new ErrorRunningEvent());
          }
          if (eventName === "event") {
            return this._normalizeRunningEvent(new RunningEvent("event", null));
          }
          if (eventName === "*") {
            return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
          }
          const fragment = this.interface.getEvent(eventName);
          return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
        }
        if (eventName.topics && eventName.topics.length > 0) {
          try {
            const topic = eventName.topics[0];
            if (typeof topic !== "string") {
              throw new Error("invalid topic");
            }
            const fragment = this.interface.getEvent(topic);
            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
          } catch (error) {
          }
          const filter = {
            address: this.address,
            topics: eventName.topics
          };
          return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
        }
        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
      }
      _checkRunningEvents(runningEvent) {
        if (runningEvent.listenerCount() === 0) {
          delete this._runningEvents[runningEvent.tag];
          const emit = this._wrappedEmits[runningEvent.tag];
          if (emit && runningEvent.filter) {
            this.provider.off(runningEvent.filter, emit);
            delete this._wrappedEmits[runningEvent.tag];
          }
        }
      }
      _wrapEvent(runningEvent, log4, listener) {
        const event = deepCopy(log4);
        event.removeListener = () => {
          if (!listener) {
            return;
          }
          runningEvent.removeListener(listener);
          this._checkRunningEvents(runningEvent);
        };
        event.getBlock = () => {
          return this.provider.getBlock(log4.blockHash);
        };
        event.getTransaction = () => {
          return this.provider.getTransaction(log4.transactionHash);
        };
        event.getTransactionReceipt = () => {
          return this.provider.getTransactionReceipt(log4.transactionHash);
        };
        runningEvent.prepareEvent(event);
        return event;
      }
      _addEventListener(runningEvent, listener, once) {
        if (!this.provider) {
          logger8.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
        }
        runningEvent.addListener(listener, once);
        this._runningEvents[runningEvent.tag] = runningEvent;
        if (!this._wrappedEmits[runningEvent.tag]) {
          const wrappedEmit = (log4) => {
            let event = this._wrapEvent(runningEvent, log4, listener);
            if (event.decodeError == null) {
              try {
                const args = runningEvent.getEmit(event);
                this.emit(runningEvent.filter, ...args);
              } catch (error) {
                event.decodeError = error.error;
              }
            }
            if (runningEvent.filter != null) {
              this.emit("event", event);
            }
            if (event.decodeError != null) {
              this.emit("error", event.decodeError, event);
            }
          };
          this._wrappedEmits[runningEvent.tag] = wrappedEmit;
          if (runningEvent.filter != null) {
            this.provider.on(runningEvent.filter, wrappedEmit);
          }
        }
      }
      queryFilter(event, fromBlockOrBlockhash, toBlock) {
        const runningEvent = this._getRunningEvent(event);
        const filter = shallowCopy(runningEvent.filter);
        if (typeof fromBlockOrBlockhash === "string" && isHexString(fromBlockOrBlockhash, 32)) {
          if (toBlock != null) {
            logger8.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
          }
          filter.blockHash = fromBlockOrBlockhash;
        } else {
          filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
          filter.toBlock = toBlock != null ? toBlock : "latest";
        }
        return this.provider.getLogs(filter).then((logs) => {
          return logs.map((log4) => this._wrapEvent(runningEvent, log4, null));
        });
      }
      on(event, listener) {
        this._addEventListener(this._getRunningEvent(event), listener, false);
        return this;
      }
      once(event, listener) {
        this._addEventListener(this._getRunningEvent(event), listener, true);
        return this;
      }
      emit(eventName, ...args) {
        if (!this.provider) {
          return false;
        }
        const runningEvent = this._getRunningEvent(eventName);
        const result = runningEvent.run(args) > 0;
        this._checkRunningEvents(runningEvent);
        return result;
      }
      listenerCount(eventName) {
        if (!this.provider) {
          return 0;
        }
        if (eventName == null) {
          return Object.keys(this._runningEvents).reduce((accum, key) => {
            return accum + this._runningEvents[key].listenerCount();
          }, 0);
        }
        return this._getRunningEvent(eventName).listenerCount();
      }
      listeners(eventName) {
        if (!this.provider) {
          return [];
        }
        if (eventName == null) {
          const result = [];
          for (let tag in this._runningEvents) {
            this._runningEvents[tag].listeners().forEach((listener) => {
              result.push(listener);
            });
          }
          return result;
        }
        return this._getRunningEvent(eventName).listeners();
      }
      removeAllListeners(eventName) {
        if (!this.provider) {
          return this;
        }
        if (eventName == null) {
          for (const tag in this._runningEvents) {
            const runningEvent2 = this._runningEvents[tag];
            runningEvent2.removeAllListeners();
            this._checkRunningEvents(runningEvent2);
          }
          return this;
        }
        const runningEvent = this._getRunningEvent(eventName);
        runningEvent.removeAllListeners();
        this._checkRunningEvents(runningEvent);
        return this;
      }
      off(eventName, listener) {
        if (!this.provider) {
          return this;
        }
        const runningEvent = this._getRunningEvent(eventName);
        runningEvent.removeListener(listener);
        this._checkRunningEvents(runningEvent);
        return this;
      }
      removeListener(eventName, listener) {
        return this.off(eventName, listener);
      }
    };
    Contract = class extends BaseContract {
    };
    ContractFactory = class {
      constructor(contractInterface, bytecode, signer) {
        let bytecodeHex = null;
        if (typeof bytecode === "string") {
          bytecodeHex = bytecode;
        } else if (isBytes(bytecode)) {
          bytecodeHex = hexlify(bytecode);
        } else if (bytecode && typeof bytecode.object === "string") {
          bytecodeHex = bytecode.object;
        } else {
          bytecodeHex = "!";
        }
        if (bytecodeHex.substring(0, 2) !== "0x") {
          bytecodeHex = "0x" + bytecodeHex;
        }
        if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {
          logger8.throwArgumentError("invalid bytecode", "bytecode", bytecode);
        }
        if (signer && !Signer.isSigner(signer)) {
          logger8.throwArgumentError("invalid signer", "signer", signer);
        }
        defineReadOnly(this, "bytecode", bytecodeHex);
        defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
        defineReadOnly(this, "signer", signer || null);
      }
      getDeployTransaction(...args) {
        let tx = {};
        if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
          tx = shallowCopy(args.pop());
          for (const key in tx) {
            if (!allowedTransactionKeys2[key]) {
              throw new Error("unknown transaction override " + key);
            }
          }
        }
        ["data", "from", "to"].forEach((key) => {
          if (tx[key] == null) {
            return;
          }
          logger8.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
        });
        if (tx.value) {
          const value = BigNumber.from(tx.value);
          if (!value.isZero() && !this.interface.deploy.payable) {
            logger8.throwError("non-payable constructor cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "overrides.value",
              value: tx.value
            });
          }
        }
        logger8.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
        tx.data = hexlify(concat([
          this.bytecode,
          this.interface.encodeDeploy(args)
        ]));
        return tx;
      }
      deploy(...args) {
        return __awaiter3(this, void 0, void 0, function* () {
          let overrides = {};
          if (args.length === this.interface.deploy.inputs.length + 1) {
            overrides = args.pop();
          }
          logger8.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
          const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
          params.push(overrides);
          const unsignedTx = this.getDeployTransaction(...params);
          const tx = yield this.signer.sendTransaction(unsignedTx);
          const address = getStatic(this.constructor, "getContractAddress")(tx);
          const contract = getStatic(this.constructor, "getContract")(address, this.interface, this.signer);
          addContractWait(contract, tx);
          defineReadOnly(contract, "deployTransaction", tx);
          return contract;
        });
      }
      attach(address) {
        return this.constructor.getContract(address, this.interface, this.signer);
      }
      connect(signer) {
        return new this.constructor(this.interface, this.bytecode, signer);
      }
      static fromSolidity(compilerOutput, signer) {
        if (compilerOutput == null) {
          logger8.throwError("missing compiler output", Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
        }
        if (typeof compilerOutput === "string") {
          compilerOutput = JSON.parse(compilerOutput);
        }
        const abi = compilerOutput.abi;
        let bytecode = null;
        if (compilerOutput.bytecode) {
          bytecode = compilerOutput.bytecode;
        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
          bytecode = compilerOutput.evm.bytecode;
        }
        return new this(abi, bytecode, signer);
      }
      static getInterface(contractInterface) {
        return Contract.getInterface(contractInterface);
      }
      static getContractAddress(tx) {
        return getContractAddress(tx);
      }
      static getContract(address, contractInterface, signer) {
        return new Contract(address, contractInterface, signer);
      }
    };
  }
});

// node_modules/@ethersproject/basex/lib.esm/index.js
var BaseX, Base32, Base58;
var init_lib17 = __esm({
  "node_modules/@ethersproject/basex/lib.esm/index.js"() {
    init_react();
    init_lib2();
    init_lib4();
    BaseX = class {
      constructor(alphabet) {
        defineReadOnly(this, "alphabet", alphabet);
        defineReadOnly(this, "base", alphabet.length);
        defineReadOnly(this, "_alphabetMap", {});
        defineReadOnly(this, "_leader", alphabet.charAt(0));
        for (let i = 0; i < alphabet.length; i++) {
          this._alphabetMap[alphabet.charAt(i)] = i;
        }
      }
      encode(value) {
        let source = arrayify(value);
        if (source.length === 0) {
          return "";
        }
        let digits = [0];
        for (let i = 0; i < source.length; ++i) {
          let carry = source[i];
          for (let j2 = 0; j2 < digits.length; ++j2) {
            carry += digits[j2] << 8;
            digits[j2] = carry % this.base;
            carry = carry / this.base | 0;
          }
          while (carry > 0) {
            digits.push(carry % this.base);
            carry = carry / this.base | 0;
          }
        }
        let string = "";
        for (let k2 = 0; source[k2] === 0 && k2 < source.length - 1; ++k2) {
          string += this._leader;
        }
        for (let q2 = digits.length - 1; q2 >= 0; --q2) {
          string += this.alphabet[digits[q2]];
        }
        return string;
      }
      decode(value) {
        if (typeof value !== "string") {
          throw new TypeError("Expected String");
        }
        let bytes = [];
        if (value.length === 0) {
          return new Uint8Array(bytes);
        }
        bytes.push(0);
        for (let i = 0; i < value.length; i++) {
          let byte = this._alphabetMap[value[i]];
          if (byte === void 0) {
            throw new Error("Non-base" + this.base + " character");
          }
          let carry = byte;
          for (let j2 = 0; j2 < bytes.length; ++j2) {
            carry += bytes[j2] * this.base;
            bytes[j2] = carry & 255;
            carry >>= 8;
          }
          while (carry > 0) {
            bytes.push(carry & 255);
            carry >>= 8;
          }
        }
        for (let k2 = 0; value[k2] === this._leader && k2 < value.length - 1; ++k2) {
          bytes.push(0);
        }
        return arrayify(new Uint8Array(bytes.reverse()));
      }
    };
    Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
    Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  }
});

// node_modules/@ethersproject/sha2/lib.esm/types.js
var SupportedAlgorithm;
var init_types = __esm({
  "node_modules/@ethersproject/sha2/lib.esm/types.js"() {
    init_react();
    (function(SupportedAlgorithm2) {
      SupportedAlgorithm2["sha256"] = "sha256";
      SupportedAlgorithm2["sha512"] = "sha512";
    })(SupportedAlgorithm || (SupportedAlgorithm = {}));
  }
});

// node_modules/@ethersproject/sha2/lib.esm/_version.js
var version5;
var init_version5 = __esm({
  "node_modules/@ethersproject/sha2/lib.esm/_version.js"() {
    init_react();
    version5 = "sha2/5.5.0";
  }
});

// node_modules/@ethersproject/sha2/lib.esm/sha2.js
function ripemd160(data) {
  return "0x" + import_hash2.default.ripemd160().update(arrayify(data)).digest("hex");
}
function sha256(data) {
  return "0x" + import_hash2.default.sha256().update(arrayify(data)).digest("hex");
}
function sha512(data) {
  return "0x" + import_hash2.default.sha512().update(arrayify(data)).digest("hex");
}
function computeHmac(algorithm, key, data) {
  if (!SupportedAlgorithm[algorithm]) {
    logger9.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "hmac",
      algorithm
    });
  }
  return "0x" + import_hash2.default.hmac(import_hash2.default[algorithm], arrayify(key)).update(arrayify(data)).digest("hex");
}
var import_hash2, logger9;
var init_sha2 = __esm({
  "node_modules/@ethersproject/sha2/lib.esm/sha2.js"() {
    "use strict";
    init_react();
    import_hash2 = __toESM(require_hash());
    init_lib2();
    init_types();
    init_lib();
    init_version5();
    logger9 = new Logger(version5);
  }
});

// node_modules/@ethersproject/sha2/lib.esm/index.js
var init_lib18 = __esm({
  "node_modules/@ethersproject/sha2/lib.esm/index.js"() {
    init_react();
    init_sha2();
    init_types();
  }
});

// node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js
function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
  password = arrayify(password);
  salt = arrayify(salt);
  let hLen;
  let l2 = 1;
  const DK = new Uint8Array(keylen);
  const block1 = new Uint8Array(salt.length + 4);
  block1.set(salt);
  let r2;
  let T;
  for (let i = 1; i <= l2; i++) {
    block1[salt.length] = i >> 24 & 255;
    block1[salt.length + 1] = i >> 16 & 255;
    block1[salt.length + 2] = i >> 8 & 255;
    block1[salt.length + 3] = i & 255;
    let U2 = arrayify(computeHmac(hashAlgorithm, password, block1));
    if (!hLen) {
      hLen = U2.length;
      T = new Uint8Array(hLen);
      l2 = Math.ceil(keylen / hLen);
      r2 = keylen - (l2 - 1) * hLen;
    }
    T.set(U2);
    for (let j2 = 1; j2 < iterations; j2++) {
      U2 = arrayify(computeHmac(hashAlgorithm, password, U2));
      for (let k2 = 0; k2 < hLen; k2++)
        T[k2] ^= U2[k2];
    }
    const destPos = (i - 1) * hLen;
    const len = i === l2 ? r2 : hLen;
    DK.set(arrayify(T).slice(0, len), destPos);
  }
  return hexlify(DK);
}
var init_pbkdf2 = __esm({
  "node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js"() {
    "use strict";
    init_react();
    init_lib2();
    init_lib18();
  }
});

// node_modules/@ethersproject/pbkdf2/lib.esm/index.js
var init_lib19 = __esm({
  "node_modules/@ethersproject/pbkdf2/lib.esm/index.js"() {
    init_react();
    init_pbkdf2();
  }
});

// node_modules/@ethersproject/wordlists/lib.esm/_version.js
var version6;
var init_version6 = __esm({
  "node_modules/@ethersproject/wordlists/lib.esm/_version.js"() {
    init_react();
    version6 = "wordlists/5.5.0";
  }
});

// node_modules/@ethersproject/wordlists/lib.esm/wordlist.js
var exportWordlist, logger10, Wordlist;
var init_wordlist = __esm({
  "node_modules/@ethersproject/wordlists/lib.esm/wordlist.js"() {
    "use strict";
    init_react();
    init_lib10();
    init_lib4();
    init_lib();
    init_version6();
    exportWordlist = false;
    logger10 = new Logger(version6);
    Wordlist = class {
      constructor(locale) {
        logger10.checkAbstract(new.target, Wordlist);
        defineReadOnly(this, "locale", locale);
      }
      split(mnemonic) {
        return mnemonic.toLowerCase().split(/ +/g);
      }
      join(words2) {
        return words2.join(" ");
      }
      static check(wordlist2) {
        const words2 = [];
        for (let i = 0; i < 2048; i++) {
          const word = wordlist2.getWord(i);
          if (i !== wordlist2.getWordIndex(word)) {
            return "0x";
          }
          words2.push(word);
        }
        return id(words2.join("\n") + "\n");
      }
      static register(lang, name2) {
        if (!name2) {
          name2 = lang.locale;
        }
        if (exportWordlist) {
          try {
            const anyGlobal2 = window;
            if (anyGlobal2._ethers && anyGlobal2._ethers.wordlists) {
              if (!anyGlobal2._ethers.wordlists[name2]) {
                defineReadOnly(anyGlobal2._ethers.wordlists, name2, lang);
              }
            }
          } catch (error) {
          }
        }
      }
    };
  }
});

// node_modules/@ethersproject/wordlists/lib.esm/lang-en.js
function loadWords(lang) {
  if (wordlist != null) {
    return;
  }
  wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
  if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
    wordlist = null;
    throw new Error("BIP39 Wordlist for en (English) FAILED");
  }
}
var words, wordlist, LangEn, langEn;
var init_lang_en = __esm({
  "node_modules/@ethersproject/wordlists/lib.esm/lang-en.js"() {
    "use strict";
    init_react();
    init_wordlist();
    words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
    wordlist = null;
    LangEn = class extends Wordlist {
      constructor() {
        super("en");
      }
      getWord(index) {
        loadWords(this);
        return wordlist[index];
      }
      getWordIndex(word) {
        loadWords(this);
        return wordlist.indexOf(word);
      }
    };
    langEn = new LangEn();
    Wordlist.register(langEn);
  }
});

// node_modules/@ethersproject/wordlists/lib.esm/wordlists.js
var wordlists;
var init_wordlists = __esm({
  "node_modules/@ethersproject/wordlists/lib.esm/wordlists.js"() {
    "use strict";
    init_react();
    init_lang_en();
    wordlists = {
      en: langEn
    };
  }
});

// node_modules/@ethersproject/wordlists/lib.esm/index.js
var init_lib20 = __esm({
  "node_modules/@ethersproject/wordlists/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_wordlist();
    init_wordlists();
  }
});

// node_modules/@ethersproject/hdnode/lib.esm/_version.js
var version7;
var init_version7 = __esm({
  "node_modules/@ethersproject/hdnode/lib.esm/_version.js"() {
    init_react();
    version7 = "hdnode/5.5.0";
  }
});

// node_modules/@ethersproject/hdnode/lib.esm/index.js
function getUpperMask(bits) {
  return (1 << bits) - 1 << 8 - bits;
}
function getLowerMask(bits) {
  return (1 << bits) - 1;
}
function bytes32(value) {
  return hexZeroPad(hexlify(value), 32);
}
function base58check(data) {
  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));
}
function getWordlist(wordlist2) {
  if (wordlist2 == null) {
    return wordlists["en"];
  }
  if (typeof wordlist2 === "string") {
    const words2 = wordlists[wordlist2];
    if (words2 == null) {
      logger11.throwArgumentError("unknown locale", "wordlist", wordlist2);
    }
    return words2;
  }
  return wordlist2;
}
function mnemonicToSeed(mnemonic, password) {
  if (!password) {
    password = "";
  }
  const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
  return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
}
function mnemonicToEntropy(mnemonic, wordlist2) {
  wordlist2 = getWordlist(wordlist2);
  logger11.checkNormalize();
  const words2 = wordlist2.split(mnemonic);
  if (words2.length % 3 !== 0) {
    throw new Error("invalid mnemonic");
  }
  const entropy = arrayify(new Uint8Array(Math.ceil(11 * words2.length / 8)));
  let offset = 0;
  for (let i = 0; i < words2.length; i++) {
    let index = wordlist2.getWordIndex(words2[i].normalize("NFKD"));
    if (index === -1) {
      throw new Error("invalid mnemonic");
    }
    for (let bit = 0; bit < 11; bit++) {
      if (index & 1 << 10 - bit) {
        entropy[offset >> 3] |= 1 << 7 - offset % 8;
      }
      offset++;
    }
  }
  const entropyBits = 32 * words2.length / 3;
  const checksumBits = words2.length / 3;
  const checksumMask = getUpperMask(checksumBits);
  const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
    throw new Error("invalid checksum");
  }
  return hexlify(entropy.slice(0, entropyBits / 8));
}
function entropyToMnemonic(entropy, wordlist2) {
  wordlist2 = getWordlist(wordlist2);
  entropy = arrayify(entropy);
  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
    throw new Error("invalid entropy");
  }
  const indices = [0];
  let remainingBits = 11;
  for (let i = 0; i < entropy.length; i++) {
    if (remainingBits > 8) {
      indices[indices.length - 1] <<= 8;
      indices[indices.length - 1] |= entropy[i];
      remainingBits -= 8;
    } else {
      indices[indices.length - 1] <<= remainingBits;
      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
      indices.push(entropy[i] & getLowerMask(8 - remainingBits));
      remainingBits += 3;
    }
  }
  const checksumBits = entropy.length / 4;
  const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);
  indices[indices.length - 1] <<= checksumBits;
  indices[indices.length - 1] |= checksum >> 8 - checksumBits;
  return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
}
function isValidMnemonic(mnemonic, wordlist2) {
  try {
    mnemonicToEntropy(mnemonic, wordlist2);
    return true;
  } catch (error) {
  }
  return false;
}
function getAccountPath(index) {
  if (typeof index !== "number" || index < 0 || index >= HardenedBit || index % 1) {
    logger11.throwArgumentError("invalid account index", "index", index);
  }
  return `m/44'/60'/${index}'/0/0`;
}
var logger11, N, MasterSecret, HardenedBit, _constructorGuard2, defaultPath, HDNode;
var init_lib21 = __esm({
  "node_modules/@ethersproject/hdnode/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_lib17();
    init_lib2();
    init_lib3();
    init_lib9();
    init_lib19();
    init_lib4();
    init_lib11();
    init_lib18();
    init_lib12();
    init_lib20();
    init_lib();
    init_version7();
    logger11 = new Logger(version7);
    N = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    MasterSecret = toUtf8Bytes("Bitcoin seed");
    HardenedBit = 2147483648;
    _constructorGuard2 = {};
    defaultPath = "m/44'/60'/0'/0/0";
    HDNode = class {
      constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
        logger11.checkNew(new.target, HDNode);
        if (constructorGuard !== _constructorGuard2) {
          throw new Error("HDNode constructor cannot be called directly");
        }
        if (privateKey) {
          const signingKey = new SigningKey(privateKey);
          defineReadOnly(this, "privateKey", signingKey.privateKey);
          defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
        } else {
          defineReadOnly(this, "privateKey", null);
          defineReadOnly(this, "publicKey", hexlify(publicKey));
        }
        defineReadOnly(this, "parentFingerprint", parentFingerprint);
        defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));
        defineReadOnly(this, "address", computeAddress(this.publicKey));
        defineReadOnly(this, "chainCode", chainCode);
        defineReadOnly(this, "index", index);
        defineReadOnly(this, "depth", depth);
        if (mnemonicOrPath == null) {
          defineReadOnly(this, "mnemonic", null);
          defineReadOnly(this, "path", null);
        } else if (typeof mnemonicOrPath === "string") {
          defineReadOnly(this, "mnemonic", null);
          defineReadOnly(this, "path", mnemonicOrPath);
        } else {
          defineReadOnly(this, "mnemonic", mnemonicOrPath);
          defineReadOnly(this, "path", mnemonicOrPath.path);
        }
      }
      get extendedKey() {
        if (this.depth >= 256) {
          throw new Error("Depth too large!");
        }
        return base58check(concat([
          this.privateKey != null ? "0x0488ADE4" : "0x0488B21E",
          hexlify(this.depth),
          this.parentFingerprint,
          hexZeroPad(hexlify(this.index), 4),
          this.chainCode,
          this.privateKey != null ? concat(["0x00", this.privateKey]) : this.publicKey
        ]));
      }
      neuter() {
        return new HDNode(_constructorGuard2, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
      }
      _derive(index) {
        if (index > 4294967295) {
          throw new Error("invalid index - " + String(index));
        }
        let path = this.path;
        if (path) {
          path += "/" + (index & ~HardenedBit);
        }
        const data = new Uint8Array(37);
        if (index & HardenedBit) {
          if (!this.privateKey) {
            throw new Error("cannot derive child of neutered node");
          }
          data.set(arrayify(this.privateKey), 1);
          if (path) {
            path += "'";
          }
        } else {
          data.set(arrayify(this.publicKey));
        }
        for (let i = 24; i >= 0; i -= 8) {
          data[33 + (i >> 3)] = index >> 24 - i & 255;
        }
        const I2 = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
        const IL = I2.slice(0, 32);
        const IR = I2.slice(32);
        let ki = null;
        let Ki = null;
        if (this.privateKey) {
          ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));
        } else {
          const ek = new SigningKey(hexlify(IL));
          Ki = ek._addPoint(this.publicKey);
        }
        let mnemonicOrPath = path;
        const srcMnemonic = this.mnemonic;
        if (srcMnemonic) {
          mnemonicOrPath = Object.freeze({
            phrase: srcMnemonic.phrase,
            path,
            locale: srcMnemonic.locale || "en"
          });
        }
        return new HDNode(_constructorGuard2, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
      }
      derivePath(path) {
        const components = path.split("/");
        if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
          throw new Error("invalid path - " + path);
        }
        if (components[0] === "m") {
          components.shift();
        }
        let result = this;
        for (let i = 0; i < components.length; i++) {
          const component = components[i];
          if (component.match(/^[0-9]+'$/)) {
            const index = parseInt(component.substring(0, component.length - 1));
            if (index >= HardenedBit) {
              throw new Error("invalid path index - " + component);
            }
            result = result._derive(HardenedBit + index);
          } else if (component.match(/^[0-9]+$/)) {
            const index = parseInt(component);
            if (index >= HardenedBit) {
              throw new Error("invalid path index - " + component);
            }
            result = result._derive(index);
          } else {
            throw new Error("invalid path component - " + component);
          }
        }
        return result;
      }
      static _fromSeed(seed, mnemonic) {
        const seedArray = arrayify(seed);
        if (seedArray.length < 16 || seedArray.length > 64) {
          throw new Error("invalid seed");
        }
        const I2 = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
        return new HDNode(_constructorGuard2, bytes32(I2.slice(0, 32)), null, "0x00000000", bytes32(I2.slice(32)), 0, 0, mnemonic);
      }
      static fromMnemonic(mnemonic, password, wordlist2) {
        wordlist2 = getWordlist(wordlist2);
        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist2), wordlist2);
        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
          phrase: mnemonic,
          path: "m",
          locale: wordlist2.locale
        });
      }
      static fromSeed(seed) {
        return HDNode._fromSeed(seed, null);
      }
      static fromExtendedKey(extendedKey) {
        const bytes = Base58.decode(extendedKey);
        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
          logger11.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        }
        const depth = bytes[4];
        const parentFingerprint = hexlify(bytes.slice(5, 9));
        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
        const chainCode = hexlify(bytes.slice(13, 45));
        const key = bytes.slice(45, 78);
        switch (hexlify(bytes.slice(0, 4))) {
          case "0x0488b21e":
          case "0x043587cf":
            return new HDNode(_constructorGuard2, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);
          case "0x0488ade4":
          case "0x04358394 ":
            if (key[0] !== 0) {
              break;
            }
            return new HDNode(_constructorGuard2, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
        }
        return logger11.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
      }
    };
  }
});

// node_modules/@ethersproject/random/lib.esm/_version.js
var version8;
var init_version8 = __esm({
  "node_modules/@ethersproject/random/lib.esm/_version.js"() {
    init_react();
    version8 = "random/5.5.1";
  }
});

// node_modules/@ethersproject/random/lib.esm/random.js
function getGlobal() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  throw new Error("unable to locate global object");
}
function randomBytes(length2) {
  if (length2 <= 0 || length2 > 1024 || length2 % 1 || length2 != length2) {
    logger12.throwArgumentError("invalid length", "length", length2);
  }
  const result = new Uint8Array(length2);
  crypto.getRandomValues(result);
  return arrayify(result);
}
var logger12, anyGlobal, crypto;
var init_random = __esm({
  "node_modules/@ethersproject/random/lib.esm/random.js"() {
    "use strict";
    init_react();
    init_lib2();
    init_lib();
    init_version8();
    logger12 = new Logger(version8);
    anyGlobal = getGlobal();
    crypto = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto || !crypto.getRandomValues) {
      logger12.warn("WARNING: Missing strong random number source");
      crypto = {
        getRandomValues: function(buffer) {
          return logger12.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "crypto.getRandomValues"
          });
        }
      };
    }
  }
});

// node_modules/@ethersproject/random/lib.esm/shuffle.js
function shuffled(array) {
  array = array.slice();
  for (let i = array.length - 1; i > 0; i--) {
    const j2 = Math.floor(Math.random() * (i + 1));
    const tmp = array[i];
    array[i] = array[j2];
    array[j2] = tmp;
  }
  return array;
}
var init_shuffle = __esm({
  "node_modules/@ethersproject/random/lib.esm/shuffle.js"() {
    "use strict";
    init_react();
  }
});

// node_modules/@ethersproject/random/lib.esm/index.js
var init_lib22 = __esm({
  "node_modules/@ethersproject/random/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_random();
    init_shuffle();
  }
});

// node_modules/@ethersproject/json-wallets/node_modules/aes-js/index.js
var require_aes_js = __commonJS({
  "node_modules/@ethersproject/json-wallets/node_modules/aes-js/index.js"(exports, module) {
    "use strict";
    init_react();
    (function(root) {
      function checkInt(value) {
        return parseInt(value) === value;
      }
      function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) {
          return false;
        }
        for (var i = 0; i < arrayish.length; i++) {
          if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
            return false;
          }
        }
        return true;
      }
      function coerceArray(arg, copy2) {
        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === "Uint8Array") {
          if (copy2) {
            if (arg.slice) {
              arg = arg.slice();
            } else {
              arg = Array.prototype.slice.call(arg);
            }
          }
          return arg;
        }
        if (Array.isArray(arg)) {
          if (!checkInts(arg)) {
            throw new Error("Array contains invalid value: " + arg);
          }
          return new Uint8Array(arg);
        }
        if (checkInt(arg.length) && checkInts(arg)) {
          return new Uint8Array(arg);
        }
        throw new Error("unsupported array-like object");
      }
      function createArray(length2) {
        return new Uint8Array(length2);
      }
      function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
          if (sourceArray.slice) {
            sourceArray = sourceArray.slice(sourceStart, sourceEnd);
          } else {
            sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
          }
        }
        targetArray.set(sourceArray, targetStart);
      }
      var convertUtf8 = function() {
        function toBytes(text) {
          var result = [], i = 0;
          text = encodeURI(text);
          while (i < text.length) {
            var c2 = text.charCodeAt(i++);
            if (c2 === 37) {
              result.push(parseInt(text.substr(i, 2), 16));
              i += 2;
            } else {
              result.push(c2);
            }
          }
          return coerceArray(result);
        }
        function fromBytes(bytes) {
          var result = [], i = 0;
          while (i < bytes.length) {
            var c2 = bytes[i];
            if (c2 < 128) {
              result.push(String.fromCharCode(c2));
              i++;
            } else if (c2 > 191 && c2 < 224) {
              result.push(String.fromCharCode((c2 & 31) << 6 | bytes[i + 1] & 63));
              i += 2;
            } else {
              result.push(String.fromCharCode((c2 & 15) << 12 | (bytes[i + 1] & 63) << 6 | bytes[i + 2] & 63));
              i += 3;
            }
          }
          return result.join("");
        }
        return {
          toBytes,
          fromBytes
        };
      }();
      var convertHex = function() {
        function toBytes(text) {
          var result = [];
          for (var i = 0; i < text.length; i += 2) {
            result.push(parseInt(text.substr(i, 2), 16));
          }
          return result;
        }
        var Hex = "0123456789abcdef";
        function fromBytes(bytes) {
          var result = [];
          for (var i = 0; i < bytes.length; i++) {
            var v2 = bytes[i];
            result.push(Hex[(v2 & 240) >> 4] + Hex[v2 & 15]);
          }
          return result.join("");
        }
        return {
          toBytes,
          fromBytes
        };
      }();
      var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
      var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
      var S2 = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
      var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
      var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
      var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
      var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
      var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
      var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
      var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
      var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
      var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
      var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
      var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
      var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
      var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
      function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) {
          result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
        }
        return result;
      }
      var AES = function(key) {
        if (!(this instanceof AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        Object.defineProperty(this, "key", {
          value: coerceArray(key, true)
        });
        this._prepare();
      };
      AES.prototype._prepare = function() {
        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
        }
        this._Ke = [];
        this._Kd = [];
        for (var i = 0; i <= rounds; i++) {
          this._Ke.push([0, 0, 0, 0]);
          this._Kd.push([0, 0, 0, 0]);
        }
        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;
        var tk = convertToInt32(this.key);
        var index;
        for (var i = 0; i < KC; i++) {
          index = i >> 2;
          this._Ke[index][i % 4] = tk[i];
          this._Kd[rounds - index][i % 4] = tk[i];
        }
        var rconpointer = 0;
        var t2 = KC, tt;
        while (t2 < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S2[tt >> 16 & 255] << 24 ^ S2[tt >> 8 & 255] << 16 ^ S2[tt & 255] << 8 ^ S2[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (var i = 1; i < KC; i++) {
              tk[i] ^= tk[i - 1];
            }
          } else {
            for (var i = 1; i < KC / 2; i++) {
              tk[i] ^= tk[i - 1];
            }
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S2[tt & 255] ^ S2[tt >> 8 & 255] << 8 ^ S2[tt >> 16 & 255] << 16 ^ S2[tt >> 24 & 255] << 24;
            for (var i = KC / 2 + 1; i < KC; i++) {
              tk[i] ^= tk[i - 1];
            }
          }
          var i = 0, r2, c2;
          while (i < KC && t2 < roundKeyCount) {
            r2 = t2 >> 2;
            c2 = t2 % 4;
            this._Ke[r2][c2] = tk[i];
            this._Kd[rounds - r2][c2] = tk[i++];
            t2++;
          }
        }
        for (var r2 = 1; r2 < rounds; r2++) {
          for (var c2 = 0; c2 < 4; c2++) {
            tt = this._Kd[r2][c2];
            this._Kd[r2][c2] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
          }
        }
      };
      AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
          throw new Error("invalid plaintext size (must be 16 bytes)");
        }
        var rounds = this._Ke.length - 1;
        var a2 = [0, 0, 0, 0];
        var t2 = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) {
          t2[i] ^= this._Ke[0][i];
        }
        for (var r2 = 1; r2 < rounds; r2++) {
          for (var i = 0; i < 4; i++) {
            a2[i] = T1[t2[i] >> 24 & 255] ^ T2[t2[(i + 1) % 4] >> 16 & 255] ^ T3[t2[(i + 2) % 4] >> 8 & 255] ^ T4[t2[(i + 3) % 4] & 255] ^ this._Ke[r2][i];
          }
          t2 = a2.slice();
        }
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
          tt = this._Ke[rounds][i];
          result[4 * i] = (S2[t2[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (S2[t2[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (S2[t2[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (S2[t2[(i + 3) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
          throw new Error("invalid ciphertext size (must be 16 bytes)");
        }
        var rounds = this._Kd.length - 1;
        var a2 = [0, 0, 0, 0];
        var t2 = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) {
          t2[i] ^= this._Kd[0][i];
        }
        for (var r2 = 1; r2 < rounds; r2++) {
          for (var i = 0; i < 4; i++) {
            a2[i] = T5[t2[i] >> 24 & 255] ^ T6[t2[(i + 3) % 4] >> 16 & 255] ^ T7[t2[(i + 2) % 4] >> 8 & 255] ^ T8[t2[(i + 1) % 4] & 255] ^ this._Kd[r2][i];
          }
          t2 = a2.slice();
        }
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
          tt = this._Kd[rounds][i];
          result[4 * i] = (Si[t2[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (Si[t2[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (Si[t2[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (Si[t2[(i + 1) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      var ModeOfOperationECB = function(key) {
        if (!(this instanceof ModeOfOperationECB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Electronic Code Block";
        this.name = "ecb";
        this._aes = new AES(key);
      };
      ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i = 0; i < plaintext.length; i += 16) {
          copyArray(plaintext, block, 0, i, i + 16);
          block = this._aes.encrypt(block);
          copyArray(block, ciphertext, i);
        }
        return ciphertext;
      };
      ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i = 0; i < ciphertext.length; i += 16) {
          copyArray(ciphertext, block, 0, i, i + 16);
          block = this._aes.decrypt(block);
          copyArray(block, plaintext, i);
        }
        return plaintext;
      };
      var ModeOfOperationCBC = function(key, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Block Chaining";
        this.name = "cbc";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastCipherblock = coerceArray(iv, true);
        this._aes = new AES(key);
      };
      ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i = 0; i < plaintext.length; i += 16) {
          copyArray(plaintext, block, 0, i, i + 16);
          for (var j2 = 0; j2 < 16; j2++) {
            block[j2] ^= this._lastCipherblock[j2];
          }
          this._lastCipherblock = this._aes.encrypt(block);
          copyArray(this._lastCipherblock, ciphertext, i);
        }
        return ciphertext;
      };
      ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i = 0; i < ciphertext.length; i += 16) {
          copyArray(ciphertext, block, 0, i, i + 16);
          block = this._aes.decrypt(block);
          for (var j2 = 0; j2 < 16; j2++) {
            plaintext[i + j2] = block[j2] ^ this._lastCipherblock[j2];
          }
          copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }
        return plaintext;
      };
      var ModeOfOperationCFB = function(key, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Feedback";
        this.name = "cfb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 size)");
        }
        if (!segmentSize) {
          segmentSize = 1;
        }
        this.segmentSize = segmentSize;
        this._shiftRegister = coerceArray(iv, true);
        this._aes = new AES(key);
      };
      ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if (plaintext.length % this.segmentSize != 0) {
          throw new Error("invalid plaintext size (must be segmentSize bytes)");
        }
        var encrypted = coerceArray(plaintext, true);
        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j2 = 0; j2 < this.segmentSize; j2++) {
            encrypted[i + j2] ^= xorSegment[j2];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return encrypted;
      };
      ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length % this.segmentSize != 0) {
          throw new Error("invalid ciphertext size (must be segmentSize bytes)");
        }
        var plaintext = coerceArray(ciphertext, true);
        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j2 = 0; j2 < this.segmentSize; j2++) {
            plaintext[i + j2] ^= xorSegment[j2];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return plaintext;
      };
      var ModeOfOperationOFB = function(key, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Output Feedback";
        this.name = "ofb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;
        this._aes = new AES(key);
      };
      ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i = 0; i < encrypted.length; i++) {
          if (this._lastPrecipherIndex === 16) {
            this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
            this._lastPrecipherIndex = 0;
          }
          encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }
        return encrypted;
      };
      ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
      var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
          throw Error("Counter must be instanitated with `new`");
        }
        if (initialValue !== 0 && !initialValue) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this._counter = createArray(16);
          this.setValue(initialValue);
        } else {
          this.setBytes(initialValue);
        }
      };
      Counter.prototype.setValue = function(value) {
        if (typeof value !== "number" || parseInt(value) != value) {
          throw new Error("invalid counter value (must be an integer)");
        }
        for (var index = 15; index >= 0; --index) {
          this._counter[index] = value % 256;
          value = value >> 8;
        }
      };
      Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);
        if (bytes.length != 16) {
          throw new Error("invalid counter bytes size (must be 16 bytes)");
        }
        this._counter = bytes;
      };
      Counter.prototype.increment = function() {
        for (var i = 15; i >= 0; i--) {
          if (this._counter[i] === 255) {
            this._counter[i] = 0;
          } else {
            this._counter[i]++;
            break;
          }
        }
      };
      var ModeOfOperationCTR = function(key, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Counter";
        this.name = "ctr";
        if (!(counter instanceof Counter)) {
          counter = new Counter(counter);
        }
        this._counter = counter;
        this._remainingCounter = null;
        this._remainingCounterIndex = 16;
        this._aes = new AES(key);
      };
      ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i = 0; i < encrypted.length; i++) {
          if (this._remainingCounterIndex === 16) {
            this._remainingCounter = this._aes.encrypt(this._counter._counter);
            this._remainingCounterIndex = 0;
            this._counter.increment();
          }
          encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }
        return encrypted;
      };
      ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
      function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - data.length % 16;
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i = data.length; i < result.length; i++) {
          result[i] = padder;
        }
        return result;
      }
      function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) {
          throw new Error("PKCS#7 invalid length");
        }
        var padder = data[data.length - 1];
        if (padder > 16) {
          throw new Error("PKCS#7 padding byte out of range");
        }
        var length2 = data.length - padder;
        for (var i = 0; i < padder; i++) {
          if (data[length2 + i] !== padder) {
            throw new Error("PKCS#7 invalid padding byte");
          }
        }
        var result = createArray(length2);
        copyArray(data, result, 0, 0, length2);
        return result;
      }
      var aesjs = {
        AES,
        Counter,
        ModeOfOperation: {
          ecb: ModeOfOperationECB,
          cbc: ModeOfOperationCBC,
          cfb: ModeOfOperationCFB,
          ofb: ModeOfOperationOFB,
          ctr: ModeOfOperationCTR
        },
        utils: {
          hex: convertHex,
          utf8: convertUtf8
        },
        padding: {
          pkcs7: {
            pad: pkcs7pad,
            strip: pkcs7strip
          }
        },
        _arrayTest: {
          coerceArray,
          createArray,
          copyArray
        }
      };
      if (typeof exports !== "undefined") {
        module.exports = aesjs;
      } else if (typeof define === "function" && define.amd) {
        define(aesjs);
      } else {
        if (root.aesjs) {
          aesjs._aesjs = root.aesjs;
        }
        root.aesjs = aesjs;
      }
    })(exports);
  }
});

// node_modules/@ethersproject/json-wallets/lib.esm/_version.js
var version9;
var init_version9 = __esm({
  "node_modules/@ethersproject/json-wallets/lib.esm/_version.js"() {
    init_react();
    version9 = "json-wallets/5.5.0";
  }
});

// node_modules/@ethersproject/json-wallets/lib.esm/utils.js
function looseArrayify(hexString) {
  if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") {
    hexString = "0x" + hexString;
  }
  return arrayify(hexString);
}
function zpad(value, length2) {
  value = String(value);
  while (value.length < length2) {
    value = "0" + value;
  }
  return value;
}
function getPassword(password) {
  if (typeof password === "string") {
    return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
  }
  return arrayify(password);
}
function searchPath(object, path) {
  let currentChild = object;
  const comps = path.toLowerCase().split("/");
  for (let i = 0; i < comps.length; i++) {
    let matchingChild = null;
    for (const key in currentChild) {
      if (key.toLowerCase() === comps[i]) {
        matchingChild = currentChild[key];
        break;
      }
    }
    if (matchingChild === null) {
      return null;
    }
    currentChild = matchingChild;
  }
  return currentChild;
}
function uuidV4(randomBytes2) {
  const bytes = arrayify(randomBytes2);
  bytes[6] = bytes[6] & 15 | 64;
  bytes[8] = bytes[8] & 63 | 128;
  const value = hexlify(bytes);
  return [
    value.substring(2, 10),
    value.substring(10, 14),
    value.substring(14, 18),
    value.substring(18, 22),
    value.substring(22, 34)
  ].join("-");
}
var init_utils = __esm({
  "node_modules/@ethersproject/json-wallets/lib.esm/utils.js"() {
    "use strict";
    init_react();
    init_lib2();
    init_lib9();
  }
});

// node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js
function decrypt(json, password) {
  const data = JSON.parse(json);
  password = getPassword(password);
  const ethaddr = getAddress(searchPath(data, "ethaddr"));
  const encseed = looseArrayify(searchPath(data, "encseed"));
  if (!encseed || encseed.length % 16 !== 0) {
    logger13.throwArgumentError("invalid encseed", "json", json);
  }
  const key = arrayify(pbkdf2(password, password, 2e3, 32, "sha256")).slice(0, 16);
  const iv = encseed.slice(0, 16);
  const encryptedSeed = encseed.slice(16);
  const aesCbc = new import_aes_js.default.ModeOfOperation.cbc(key, iv);
  const seed = import_aes_js.default.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
  let seedHex = "";
  for (let i = 0; i < seed.length; i++) {
    seedHex += String.fromCharCode(seed[i]);
  }
  const seedHexBytes = toUtf8Bytes(seedHex);
  const privateKey = keccak256(seedHexBytes);
  return new CrowdsaleAccount({
    _isCrowdsaleAccount: true,
    address: ethaddr,
    privateKey
  });
}
var import_aes_js, logger13, CrowdsaleAccount;
var init_crowdsale = __esm({
  "node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js"() {
    "use strict";
    init_react();
    import_aes_js = __toESM(require_aes_js());
    init_lib7();
    init_lib2();
    init_lib5();
    init_lib19();
    init_lib9();
    init_lib4();
    init_lib();
    init_version9();
    init_utils();
    logger13 = new Logger(version9);
    CrowdsaleAccount = class extends Description {
      isCrowdsaleAccount(value) {
        return !!(value && value._isCrowdsaleAccount);
      }
    };
  }
});

// node_modules/@ethersproject/json-wallets/lib.esm/inspect.js
function isCrowdsaleWallet(json) {
  let data = null;
  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }
  return data.encseed && data.ethaddr;
}
function isKeystoreWallet(json) {
  let data = null;
  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }
  if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
    return false;
  }
  return true;
}
function getJsonWalletAddress(json) {
  if (isCrowdsaleWallet(json)) {
    try {
      return getAddress(JSON.parse(json).ethaddr);
    } catch (error) {
      return null;
    }
  }
  if (isKeystoreWallet(json)) {
    try {
      return getAddress(JSON.parse(json).address);
    } catch (error) {
      return null;
    }
  }
  return null;
}
var init_inspect = __esm({
  "node_modules/@ethersproject/json-wallets/lib.esm/inspect.js"() {
    "use strict";
    init_react();
    init_lib7();
  }
});

// node_modules/scrypt-js/scrypt.js
var require_scrypt = __commonJS({
  "node_modules/scrypt-js/scrypt.js"(exports, module) {
    "use strict";
    init_react();
    (function(root) {
      const MAX_VALUE = 2147483647;
      function SHA256(m) {
        const K = new Uint32Array([
          1116352408,
          1899447441,
          3049323471,
          3921009573,
          961987163,
          1508970993,
          2453635748,
          2870763221,
          3624381080,
          310598401,
          607225278,
          1426881987,
          1925078388,
          2162078206,
          2614888103,
          3248222580,
          3835390401,
          4022224774,
          264347078,
          604807628,
          770255983,
          1249150122,
          1555081692,
          1996064986,
          2554220882,
          2821834349,
          2952996808,
          3210313671,
          3336571891,
          3584528711,
          113926993,
          338241895,
          666307205,
          773529912,
          1294757372,
          1396182291,
          1695183700,
          1986661051,
          2177026350,
          2456956037,
          2730485921,
          2820302411,
          3259730800,
          3345764771,
          3516065817,
          3600352804,
          4094571909,
          275423344,
          430227734,
          506948616,
          659060556,
          883997877,
          958139571,
          1322822218,
          1537002063,
          1747873779,
          1955562222,
          2024104815,
          2227730452,
          2361852424,
          2428436474,
          2756734187,
          3204031479,
          3329325298
        ]);
        let h0 = 1779033703, h1 = 3144134277, h2 = 1013904242, h3 = 2773480762;
        let h4 = 1359893119, h5 = 2600822924, h6 = 528734635, h7 = 1541459225;
        const w2 = new Uint32Array(64);
        function blocks(p3) {
          let off = 0, len = p3.length;
          while (len >= 64) {
            let a2 = h0, b2 = h1, c2 = h2, d2 = h3, e = h4, f2 = h5, g2 = h6, h8 = h7, u2, i2, j2, t1, t2;
            for (i2 = 0; i2 < 16; i2++) {
              j2 = off + i2 * 4;
              w2[i2] = (p3[j2] & 255) << 24 | (p3[j2 + 1] & 255) << 16 | (p3[j2 + 2] & 255) << 8 | p3[j2 + 3] & 255;
            }
            for (i2 = 16; i2 < 64; i2++) {
              u2 = w2[i2 - 2];
              t1 = (u2 >>> 17 | u2 << 32 - 17) ^ (u2 >>> 19 | u2 << 32 - 19) ^ u2 >>> 10;
              u2 = w2[i2 - 15];
              t2 = (u2 >>> 7 | u2 << 32 - 7) ^ (u2 >>> 18 | u2 << 32 - 18) ^ u2 >>> 3;
              w2[i2] = (t1 + w2[i2 - 7] | 0) + (t2 + w2[i2 - 16] | 0) | 0;
            }
            for (i2 = 0; i2 < 64; i2++) {
              t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f2 ^ ~e & g2) | 0) + (h8 + (K[i2] + w2[i2] | 0) | 0) | 0;
              t2 = ((a2 >>> 2 | a2 << 32 - 2) ^ (a2 >>> 13 | a2 << 32 - 13) ^ (a2 >>> 22 | a2 << 32 - 22)) + (a2 & b2 ^ a2 & c2 ^ b2 & c2) | 0;
              h8 = g2;
              g2 = f2;
              f2 = e;
              e = d2 + t1 | 0;
              d2 = c2;
              c2 = b2;
              b2 = a2;
              a2 = t1 + t2 | 0;
            }
            h0 = h0 + a2 | 0;
            h1 = h1 + b2 | 0;
            h2 = h2 + c2 | 0;
            h3 = h3 + d2 | 0;
            h4 = h4 + e | 0;
            h5 = h5 + f2 | 0;
            h6 = h6 + g2 | 0;
            h7 = h7 + h8 | 0;
            off += 64;
            len -= 64;
          }
        }
        blocks(m);
        let i, bytesLeft = m.length % 64, bitLenHi = m.length / 536870912 | 0, bitLenLo = m.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p2 = m.slice(m.length - bytesLeft, m.length);
        p2.push(128);
        for (i = bytesLeft + 1; i < numZeros; i++) {
          p2.push(0);
        }
        p2.push(bitLenHi >>> 24 & 255);
        p2.push(bitLenHi >>> 16 & 255);
        p2.push(bitLenHi >>> 8 & 255);
        p2.push(bitLenHi >>> 0 & 255);
        p2.push(bitLenLo >>> 24 & 255);
        p2.push(bitLenLo >>> 16 & 255);
        p2.push(bitLenLo >>> 8 & 255);
        p2.push(bitLenLo >>> 0 & 255);
        blocks(p2);
        return [
          h0 >>> 24 & 255,
          h0 >>> 16 & 255,
          h0 >>> 8 & 255,
          h0 >>> 0 & 255,
          h1 >>> 24 & 255,
          h1 >>> 16 & 255,
          h1 >>> 8 & 255,
          h1 >>> 0 & 255,
          h2 >>> 24 & 255,
          h2 >>> 16 & 255,
          h2 >>> 8 & 255,
          h2 >>> 0 & 255,
          h3 >>> 24 & 255,
          h3 >>> 16 & 255,
          h3 >>> 8 & 255,
          h3 >>> 0 & 255,
          h4 >>> 24 & 255,
          h4 >>> 16 & 255,
          h4 >>> 8 & 255,
          h4 >>> 0 & 255,
          h5 >>> 24 & 255,
          h5 >>> 16 & 255,
          h5 >>> 8 & 255,
          h5 >>> 0 & 255,
          h6 >>> 24 & 255,
          h6 >>> 16 & 255,
          h6 >>> 8 & 255,
          h6 >>> 0 & 255,
          h7 >>> 24 & 255,
          h7 >>> 16 & 255,
          h7 >>> 8 & 255,
          h7 >>> 0 & 255
        ];
      }
      function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
        password = password.length <= 64 ? password : SHA256(password);
        const innerLen = 64 + salt.length + 4;
        const inner = new Array(innerLen);
        const outerKey = new Array(64);
        let i;
        let dk = [];
        for (i = 0; i < 64; i++) {
          inner[i] = 54;
        }
        for (i = 0; i < password.length; i++) {
          inner[i] ^= password[i];
        }
        for (i = 0; i < salt.length; i++) {
          inner[64 + i] = salt[i];
        }
        for (i = innerLen - 4; i < innerLen; i++) {
          inner[i] = 0;
        }
        for (i = 0; i < 64; i++)
          outerKey[i] = 92;
        for (i = 0; i < password.length; i++)
          outerKey[i] ^= password[i];
        function incrementCounter() {
          for (let i2 = innerLen - 1; i2 >= innerLen - 4; i2--) {
            inner[i2]++;
            if (inner[i2] <= 255)
              return;
            inner[i2] = 0;
          }
        }
        while (dkLen >= 32) {
          incrementCounter();
          dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
          dkLen -= 32;
        }
        if (dkLen > 0) {
          incrementCounter();
          dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
        }
        return dk;
      }
      function blockmix_salsa8(BY, Yi, r2, x2, _X) {
        let i;
        arraycopy(BY, (2 * r2 - 1) * 16, _X, 0, 16);
        for (i = 0; i < 2 * r2; i++) {
          blockxor(BY, i * 16, _X, 16);
          salsa20_8(_X, x2);
          arraycopy(_X, 0, BY, Yi + i * 16, 16);
        }
        for (i = 0; i < r2; i++) {
          arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);
        }
        for (i = 0; i < r2; i++) {
          arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r2) * 16, 16);
        }
      }
      function R2(a2, b2) {
        return a2 << b2 | a2 >>> 32 - b2;
      }
      function salsa20_8(B2, x2) {
        arraycopy(B2, 0, x2, 0, 16);
        for (let i = 8; i > 0; i -= 2) {
          x2[4] ^= R2(x2[0] + x2[12], 7);
          x2[8] ^= R2(x2[4] + x2[0], 9);
          x2[12] ^= R2(x2[8] + x2[4], 13);
          x2[0] ^= R2(x2[12] + x2[8], 18);
          x2[9] ^= R2(x2[5] + x2[1], 7);
          x2[13] ^= R2(x2[9] + x2[5], 9);
          x2[1] ^= R2(x2[13] + x2[9], 13);
          x2[5] ^= R2(x2[1] + x2[13], 18);
          x2[14] ^= R2(x2[10] + x2[6], 7);
          x2[2] ^= R2(x2[14] + x2[10], 9);
          x2[6] ^= R2(x2[2] + x2[14], 13);
          x2[10] ^= R2(x2[6] + x2[2], 18);
          x2[3] ^= R2(x2[15] + x2[11], 7);
          x2[7] ^= R2(x2[3] + x2[15], 9);
          x2[11] ^= R2(x2[7] + x2[3], 13);
          x2[15] ^= R2(x2[11] + x2[7], 18);
          x2[1] ^= R2(x2[0] + x2[3], 7);
          x2[2] ^= R2(x2[1] + x2[0], 9);
          x2[3] ^= R2(x2[2] + x2[1], 13);
          x2[0] ^= R2(x2[3] + x2[2], 18);
          x2[6] ^= R2(x2[5] + x2[4], 7);
          x2[7] ^= R2(x2[6] + x2[5], 9);
          x2[4] ^= R2(x2[7] + x2[6], 13);
          x2[5] ^= R2(x2[4] + x2[7], 18);
          x2[11] ^= R2(x2[10] + x2[9], 7);
          x2[8] ^= R2(x2[11] + x2[10], 9);
          x2[9] ^= R2(x2[8] + x2[11], 13);
          x2[10] ^= R2(x2[9] + x2[8], 18);
          x2[12] ^= R2(x2[15] + x2[14], 7);
          x2[13] ^= R2(x2[12] + x2[15], 9);
          x2[14] ^= R2(x2[13] + x2[12], 13);
          x2[15] ^= R2(x2[14] + x2[13], 18);
        }
        for (let i = 0; i < 16; ++i) {
          B2[i] += x2[i];
        }
      }
      function blockxor(S2, Si, D2, len) {
        for (let i = 0; i < len; i++) {
          D2[i] ^= S2[Si + i];
        }
      }
      function arraycopy(src, srcPos, dest, destPos, length2) {
        while (length2--) {
          dest[destPos++] = src[srcPos++];
        }
      }
      function checkBufferish(o2) {
        if (!o2 || typeof o2.length !== "number") {
          return false;
        }
        for (let i = 0; i < o2.length; i++) {
          const v2 = o2[i];
          if (typeof v2 !== "number" || v2 % 1 || v2 < 0 || v2 >= 256) {
            return false;
          }
        }
        return true;
      }
      function ensureInteger(value, name2) {
        if (typeof value !== "number" || value % 1) {
          throw new Error("invalid " + name2);
        }
        return value;
      }
      function _scrypt(password, salt, N2, r2, p2, dkLen, callback) {
        N2 = ensureInteger(N2, "N");
        r2 = ensureInteger(r2, "r");
        p2 = ensureInteger(p2, "p");
        dkLen = ensureInteger(dkLen, "dkLen");
        if (N2 === 0 || (N2 & N2 - 1) !== 0) {
          throw new Error("N must be power of 2");
        }
        if (N2 > MAX_VALUE / 128 / r2) {
          throw new Error("N too large");
        }
        if (r2 > MAX_VALUE / 128 / p2) {
          throw new Error("r too large");
        }
        if (!checkBufferish(password)) {
          throw new Error("password must be an array or buffer");
        }
        password = Array.prototype.slice.call(password);
        if (!checkBufferish(salt)) {
          throw new Error("salt must be an array or buffer");
        }
        salt = Array.prototype.slice.call(salt);
        let b2 = PBKDF2_HMAC_SHA256_OneIter(password, salt, p2 * 128 * r2);
        const B2 = new Uint32Array(p2 * 32 * r2);
        for (let i = 0; i < B2.length; i++) {
          const j2 = i * 4;
          B2[i] = (b2[j2 + 3] & 255) << 24 | (b2[j2 + 2] & 255) << 16 | (b2[j2 + 1] & 255) << 8 | (b2[j2 + 0] & 255) << 0;
        }
        const XY = new Uint32Array(64 * r2);
        const V = new Uint32Array(32 * r2 * N2);
        const Yi = 32 * r2;
        const x2 = new Uint32Array(16);
        const _X = new Uint32Array(16);
        const totalOps = p2 * N2 * 2;
        let currentOp = 0;
        let lastPercent10 = null;
        let stop = false;
        let state = 0;
        let i0 = 0, i1;
        let Bi;
        const limit = callback ? parseInt(1e3 / r2) : 4294967295;
        const nextTick = typeof setImmediate !== "undefined" ? setImmediate : setTimeout;
        const incrementalSMix = function() {
          if (stop) {
            return callback(new Error("cancelled"), currentOp / totalOps);
          }
          let steps;
          switch (state) {
            case 0:
              Bi = i0 * 32 * r2;
              arraycopy(B2, Bi, XY, 0, Yi);
              state = 1;
              i1 = 0;
            case 1:
              steps = N2 - i1;
              if (steps > limit) {
                steps = limit;
              }
              for (let i = 0; i < steps; i++) {
                arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);
                blockmix_salsa8(XY, Yi, r2, x2, _X);
              }
              i1 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop = callback(null, currentOp / totalOps);
                  if (stop) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i1 < N2) {
                break;
              }
              i1 = 0;
              state = 2;
            case 2:
              steps = N2 - i1;
              if (steps > limit) {
                steps = limit;
              }
              for (let i = 0; i < steps; i++) {
                const offset = (2 * r2 - 1) * 16;
                const j2 = XY[offset] & N2 - 1;
                blockxor(V, j2 * Yi, XY, Yi);
                blockmix_salsa8(XY, Yi, r2, x2, _X);
              }
              i1 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop = callback(null, currentOp / totalOps);
                  if (stop) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i1 < N2) {
                break;
              }
              arraycopy(XY, 0, B2, Bi, Yi);
              i0++;
              if (i0 < p2) {
                state = 0;
                break;
              }
              b2 = [];
              for (let i = 0; i < B2.length; i++) {
                b2.push(B2[i] >> 0 & 255);
                b2.push(B2[i] >> 8 & 255);
                b2.push(B2[i] >> 16 & 255);
                b2.push(B2[i] >> 24 & 255);
              }
              const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b2, dkLen);
              if (callback) {
                callback(null, 1, derivedKey);
              }
              return derivedKey;
          }
          if (callback) {
            nextTick(incrementalSMix);
          }
        };
        if (!callback) {
          while (true) {
            const derivedKey = incrementalSMix();
            if (derivedKey != void 0) {
              return derivedKey;
            }
          }
        }
        incrementalSMix();
      }
      const lib = {
        scrypt: function(password, salt, N2, r2, p2, dkLen, progressCallback) {
          return new Promise(function(resolve, reject) {
            let lastProgress = 0;
            if (progressCallback) {
              progressCallback(0);
            }
            _scrypt(password, salt, N2, r2, p2, dkLen, function(error, progress, key) {
              if (error) {
                reject(error);
              } else if (key) {
                if (progressCallback && lastProgress !== 1) {
                  progressCallback(1);
                }
                resolve(new Uint8Array(key));
              } else if (progressCallback && progress !== lastProgress) {
                lastProgress = progress;
                return progressCallback(progress);
              }
            });
          });
        },
        syncScrypt: function(password, salt, N2, r2, p2, dkLen) {
          return new Uint8Array(_scrypt(password, salt, N2, r2, p2, dkLen));
        }
      };
      if (typeof exports !== "undefined") {
        module.exports = lib;
      } else if (typeof define === "function" && define.amd) {
        define(lib);
      } else if (root) {
        if (root.scrypt) {
          root._scrypt = root.scrypt;
        }
        root.scrypt = lib;
      }
    })(exports);
  }
});

// node_modules/@ethersproject/json-wallets/lib.esm/keystore.js
function hasMnemonic(value) {
  return value != null && value.mnemonic && value.mnemonic.phrase;
}
function _decrypt(data, key, ciphertext) {
  const cipher = searchPath(data, "crypto/cipher");
  if (cipher === "aes-128-ctr") {
    const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
    const counter = new import_aes_js2.default.Counter(iv);
    const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(key, counter);
    return arrayify(aesCtr.decrypt(ciphertext));
  }
  return null;
}
function _getAccount(data, key) {
  const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
  const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);
  if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
    throw new Error("invalid password");
  }
  const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
  if (!privateKey) {
    logger14.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "decrypt"
    });
  }
  const mnemonicKey = key.slice(32, 64);
  const address = computeAddress(privateKey);
  if (data.address) {
    let check = data.address.toLowerCase();
    if (check.substring(0, 2) !== "0x") {
      check = "0x" + check;
    }
    if (getAddress(check) !== address) {
      throw new Error("address mismatch");
    }
  }
  const account = {
    _isKeystoreAccount: true,
    address,
    privateKey: hexlify(privateKey)
  };
  if (searchPath(data, "x-ethers/version") === "0.1") {
    const mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
    const mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
    const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);
    const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
    const path = searchPath(data, "x-ethers/path") || defaultPath;
    const locale = searchPath(data, "x-ethers/locale") || "en";
    const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
    try {
      const mnemonic = entropyToMnemonic(entropy, locale);
      const node2 = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
      if (node2.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
      account.mnemonic = node2.mnemonic;
    } catch (error) {
      if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
        throw error;
      }
    }
  }
  return new KeystoreAccount(account);
}
function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
  return arrayify(pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));
}
function pbkdf22(passwordBytes, salt, count, dkLen, prfFunc) {
  return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
}
function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
  const passwordBytes = getPassword(password);
  const kdf = searchPath(data, "crypto/kdf");
  if (kdf && typeof kdf === "string") {
    const throwError = function(name2, value) {
      return logger14.throwArgumentError("invalid key-derivation function parameters", name2, value);
    };
    if (kdf.toLowerCase() === "scrypt") {
      const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
      const N2 = parseInt(searchPath(data, "crypto/kdfparams/n"));
      const r2 = parseInt(searchPath(data, "crypto/kdfparams/r"));
      const p2 = parseInt(searchPath(data, "crypto/kdfparams/p"));
      if (!N2 || !r2 || !p2) {
        throwError("kdf", kdf);
      }
      if ((N2 & N2 - 1) !== 0) {
        throwError("N", N2);
      }
      const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }
      return scryptFunc(passwordBytes, salt, N2, r2, p2, 64, progressCallback);
    } else if (kdf.toLowerCase() === "pbkdf2") {
      const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
      let prfFunc = null;
      const prf = searchPath(data, "crypto/kdfparams/prf");
      if (prf === "hmac-sha256") {
        prfFunc = "sha256";
      } else if (prf === "hmac-sha512") {
        prfFunc = "sha512";
      } else {
        throwError("prf", prf);
      }
      const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
      const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }
      return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
    }
  }
  return logger14.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
}
function decryptSync(json, password) {
  const data = JSON.parse(json);
  const key = _computeKdfKey(data, password, pbkdf2Sync, import_scrypt_js.default.syncScrypt);
  return _getAccount(data, key);
}
function decrypt2(json, password, progressCallback) {
  return __awaiter4(this, void 0, void 0, function* () {
    const data = JSON.parse(json);
    const key = yield _computeKdfKey(data, password, pbkdf22, import_scrypt_js.default.scrypt, progressCallback);
    return _getAccount(data, key);
  });
}
function encrypt(account, password, options, progressCallback) {
  try {
    if (getAddress(account.address) !== computeAddress(account.privateKey)) {
      throw new Error("address/privateKey mismatch");
    }
    if (hasMnemonic(account)) {
      const mnemonic = account.mnemonic;
      const node2 = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
      if (node2.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
    }
  } catch (e) {
    return Promise.reject(e);
  }
  if (typeof options === "function" && !progressCallback) {
    progressCallback = options;
    options = {};
  }
  if (!options) {
    options = {};
  }
  const privateKey = arrayify(account.privateKey);
  const passwordBytes = getPassword(password);
  let entropy = null;
  let path = null;
  let locale = null;
  if (hasMnemonic(account)) {
    const srcMnemonic = account.mnemonic;
    entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
    path = srcMnemonic.path || defaultPath;
    locale = srcMnemonic.locale || "en";
  }
  let client = options.client;
  if (!client) {
    client = "ethers.js";
  }
  let salt = null;
  if (options.salt) {
    salt = arrayify(options.salt);
  } else {
    salt = randomBytes(32);
    ;
  }
  let iv = null;
  if (options.iv) {
    iv = arrayify(options.iv);
    if (iv.length !== 16) {
      throw new Error("invalid iv");
    }
  } else {
    iv = randomBytes(16);
  }
  let uuidRandom = null;
  if (options.uuid) {
    uuidRandom = arrayify(options.uuid);
    if (uuidRandom.length !== 16) {
      throw new Error("invalid uuid");
    }
  } else {
    uuidRandom = randomBytes(16);
  }
  let N2 = 1 << 17, r2 = 8, p2 = 1;
  if (options.scrypt) {
    if (options.scrypt.N) {
      N2 = options.scrypt.N;
    }
    if (options.scrypt.r) {
      r2 = options.scrypt.r;
    }
    if (options.scrypt.p) {
      p2 = options.scrypt.p;
    }
  }
  return import_scrypt_js.default.scrypt(passwordBytes, salt, N2, r2, p2, 64, progressCallback).then((key) => {
    key = arrayify(key);
    const derivedKey = key.slice(0, 16);
    const macPrefix = key.slice(16, 32);
    const mnemonicKey = key.slice(32, 64);
    const counter = new import_aes_js2.default.Counter(iv);
    const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(derivedKey, counter);
    const ciphertext = arrayify(aesCtr.encrypt(privateKey));
    const mac = keccak256(concat([macPrefix, ciphertext]));
    const data = {
      address: account.address.substring(2).toLowerCase(),
      id: uuidV4(uuidRandom),
      version: 3,
      Crypto: {
        cipher: "aes-128-ctr",
        cipherparams: {
          iv: hexlify(iv).substring(2)
        },
        ciphertext: hexlify(ciphertext).substring(2),
        kdf: "scrypt",
        kdfparams: {
          salt: hexlify(salt).substring(2),
          n: N2,
          dklen: 32,
          p: p2,
          r: r2
        },
        mac: mac.substring(2)
      }
    };
    if (entropy) {
      const mnemonicIv = randomBytes(16);
      const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);
      const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
      const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
      const now2 = new Date();
      const timestamp = now2.getUTCFullYear() + "-" + zpad(now2.getUTCMonth() + 1, 2) + "-" + zpad(now2.getUTCDate(), 2) + "T" + zpad(now2.getUTCHours(), 2) + "-" + zpad(now2.getUTCMinutes(), 2) + "-" + zpad(now2.getUTCSeconds(), 2) + ".0Z";
      data["x-ethers"] = {
        client,
        gethFilename: "UTC--" + timestamp + "--" + data.address,
        mnemonicCounter: hexlify(mnemonicIv).substring(2),
        mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
        path,
        locale,
        version: "0.1"
      };
    }
    return JSON.stringify(data);
  });
}
var import_aes_js2, import_scrypt_js, __awaiter4, logger14, KeystoreAccount;
var init_keystore = __esm({
  "node_modules/@ethersproject/json-wallets/lib.esm/keystore.js"() {
    "use strict";
    init_react();
    import_aes_js2 = __toESM(require_aes_js());
    import_scrypt_js = __toESM(require_scrypt());
    init_lib7();
    init_lib2();
    init_lib21();
    init_lib5();
    init_lib19();
    init_lib22();
    init_lib4();
    init_lib12();
    init_utils();
    init_lib();
    init_version9();
    __awaiter4 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger14 = new Logger(version9);
    KeystoreAccount = class extends Description {
      isKeystoreAccount(value) {
        return !!(value && value._isKeystoreAccount);
      }
    };
  }
});

// node_modules/@ethersproject/json-wallets/lib.esm/index.js
function decryptJsonWallet(json, password, progressCallback) {
  if (isCrowdsaleWallet(json)) {
    if (progressCallback) {
      progressCallback(0);
    }
    const account = decrypt(json, password);
    if (progressCallback) {
      progressCallback(1);
    }
    return Promise.resolve(account);
  }
  if (isKeystoreWallet(json)) {
    return decrypt2(json, password, progressCallback);
  }
  return Promise.reject(new Error("invalid JSON wallet"));
}
function decryptJsonWalletSync(json, password) {
  if (isCrowdsaleWallet(json)) {
    return decrypt(json, password);
  }
  if (isKeystoreWallet(json)) {
    return decryptSync(json, password);
  }
  throw new Error("invalid JSON wallet");
}
var init_lib23 = __esm({
  "node_modules/@ethersproject/json-wallets/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_crowdsale();
    init_inspect();
    init_keystore();
  }
});

// node_modules/@ethersproject/wallet/lib.esm/_version.js
var version10;
var init_version10 = __esm({
  "node_modules/@ethersproject/wallet/lib.esm/_version.js"() {
    init_react();
    version10 = "wallet/5.5.0";
  }
});

// node_modules/@ethersproject/wallet/lib.esm/index.js
function isAccount(value) {
  return value != null && isHexString(value.privateKey, 32) && value.address != null;
}
function hasMnemonic2(value) {
  const mnemonic = value.mnemonic;
  return mnemonic && mnemonic.phrase;
}
function verifyMessage(message, signature) {
  return recoverAddress(hashMessage(message), signature);
}
function verifyTypedData(domain, types, value, signature) {
  return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);
}
var __awaiter5, logger15, Wallet;
var init_lib24 = __esm({
  "node_modules/@ethersproject/wallet/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_lib7();
    init_lib14();
    init_lib15();
    init_lib2();
    init_lib10();
    init_lib21();
    init_lib5();
    init_lib4();
    init_lib22();
    init_lib11();
    init_lib23();
    init_lib12();
    init_lib();
    init_version10();
    __awaiter5 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger15 = new Logger(version10);
    Wallet = class extends Signer {
      constructor(privateKey, provider) {
        logger15.checkNew(new.target, Wallet);
        super();
        if (isAccount(privateKey)) {
          const signingKey = new SigningKey(privateKey.privateKey);
          defineReadOnly(this, "_signingKey", () => signingKey);
          defineReadOnly(this, "address", computeAddress(this.publicKey));
          if (this.address !== getAddress(privateKey.address)) {
            logger15.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
          }
          if (hasMnemonic2(privateKey)) {
            const srcMnemonic = privateKey.mnemonic;
            defineReadOnly(this, "_mnemonic", () => ({
              phrase: srcMnemonic.phrase,
              path: srcMnemonic.path || defaultPath,
              locale: srcMnemonic.locale || "en"
            }));
            const mnemonic = this.mnemonic;
            const node2 = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
            if (computeAddress(node2.privateKey) !== this.address) {
              logger15.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
            }
          } else {
            defineReadOnly(this, "_mnemonic", () => null);
          }
        } else {
          if (SigningKey.isSigningKey(privateKey)) {
            if (privateKey.curve !== "secp256k1") {
              logger15.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
            }
            defineReadOnly(this, "_signingKey", () => privateKey);
          } else {
            if (typeof privateKey === "string") {
              if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                privateKey = "0x" + privateKey;
              }
            }
            const signingKey = new SigningKey(privateKey);
            defineReadOnly(this, "_signingKey", () => signingKey);
          }
          defineReadOnly(this, "_mnemonic", () => null);
          defineReadOnly(this, "address", computeAddress(this.publicKey));
        }
        if (provider && !Provider.isProvider(provider)) {
          logger15.throwArgumentError("invalid provider", "provider", provider);
        }
        defineReadOnly(this, "provider", provider || null);
      }
      get mnemonic() {
        return this._mnemonic();
      }
      get privateKey() {
        return this._signingKey().privateKey;
      }
      get publicKey() {
        return this._signingKey().publicKey;
      }
      getAddress() {
        return Promise.resolve(this.address);
      }
      connect(provider) {
        return new Wallet(this, provider);
      }
      signTransaction(transaction) {
        return resolveProperties(transaction).then((tx) => {
          if (tx.from != null) {
            if (getAddress(tx.from) !== this.address) {
              logger15.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
            }
            delete tx.from;
          }
          const signature = this._signingKey().signDigest(keccak256(serialize(tx)));
          return serialize(tx, signature);
        });
      }
      signMessage(message) {
        return __awaiter5(this, void 0, void 0, function* () {
          return joinSignature(this._signingKey().signDigest(hashMessage(message)));
        });
      }
      _signTypedData(domain, types, value) {
        return __awaiter5(this, void 0, void 0, function* () {
          const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name2) => {
            if (this.provider == null) {
              logger15.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "resolveName",
                value: name2
              });
            }
            return this.provider.resolveName(name2);
          });
          return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
        });
      }
      encrypt(password, options, progressCallback) {
        if (typeof options === "function" && !progressCallback) {
          progressCallback = options;
          options = {};
        }
        if (progressCallback && typeof progressCallback !== "function") {
          throw new Error("invalid callback");
        }
        if (!options) {
          options = {};
        }
        return encrypt(this, password, options, progressCallback);
      }
      static createRandom(options) {
        let entropy = randomBytes(16);
        if (!options) {
          options = {};
        }
        if (options.extraEntropy) {
          entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));
        }
        const mnemonic = entropyToMnemonic(entropy, options.locale);
        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
      }
      static fromEncryptedJson(json, password, progressCallback) {
        return decryptJsonWallet(json, password, progressCallback).then((account) => {
          return new Wallet(account);
        });
      }
      static fromEncryptedJsonSync(json, password) {
        return new Wallet(decryptJsonWalletSync(json, password));
      }
      static fromMnemonic(mnemonic, path, wordlist2) {
        if (!path) {
          path = defaultPath;
        }
        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist2).derivePath(path));
      }
    };
  }
});

// node_modules/@ethersproject/networks/lib.esm/_version.js
var version11;
var init_version11 = __esm({
  "node_modules/@ethersproject/networks/lib.esm/_version.js"() {
    init_react();
    version11 = "networks/5.5.2";
  }
});

// node_modules/@ethersproject/networks/lib.esm/index.js
function isRenetworkable(value) {
  return value && typeof value.renetwork === "function";
}
function ethDefaultProvider(network) {
  const func = function(providers, options) {
    if (options == null) {
      options = {};
    }
    const providerList = [];
    if (providers.InfuraProvider) {
      try {
        providerList.push(new providers.InfuraProvider(network, options.infura));
      } catch (error) {
      }
    }
    if (providers.EtherscanProvider) {
      try {
        providerList.push(new providers.EtherscanProvider(network, options.etherscan));
      } catch (error) {
      }
    }
    if (providers.AlchemyProvider) {
      try {
        providerList.push(new providers.AlchemyProvider(network, options.alchemy));
      } catch (error) {
      }
    }
    if (providers.PocketProvider) {
      const skip = ["goerli", "ropsten", "rinkeby"];
      try {
        const provider = new providers.PocketProvider(network);
        if (provider.network && skip.indexOf(provider.network.name) === -1) {
          providerList.push(provider);
        }
      } catch (error) {
      }
    }
    if (providers.CloudflareProvider) {
      try {
        providerList.push(new providers.CloudflareProvider(network));
      } catch (error) {
      }
    }
    if (providerList.length === 0) {
      return null;
    }
    if (providers.FallbackProvider) {
      let quorum = 1;
      if (options.quorum != null) {
        quorum = options.quorum;
      } else if (network === "homestead") {
        quorum = 2;
      }
      return new providers.FallbackProvider(providerList, quorum);
    }
    return providerList[0];
  };
  func.renetwork = function(network2) {
    return ethDefaultProvider(network2);
  };
  return func;
}
function etcDefaultProvider(url, network) {
  const func = function(providers, options) {
    if (providers.JsonRpcProvider) {
      return new providers.JsonRpcProvider(url, network);
    }
    return null;
  };
  func.renetwork = function(network2) {
    return etcDefaultProvider(url, network2);
  };
  return func;
}
function getNetwork(network) {
  if (network == null) {
    return null;
  }
  if (typeof network === "number") {
    for (const name2 in networks) {
      const standard2 = networks[name2];
      if (standard2.chainId === network) {
        return {
          name: standard2.name,
          chainId: standard2.chainId,
          ensAddress: standard2.ensAddress || null,
          _defaultProvider: standard2._defaultProvider || null
        };
      }
    }
    return {
      chainId: network,
      name: "unknown"
    };
  }
  if (typeof network === "string") {
    const standard2 = networks[network];
    if (standard2 == null) {
      return null;
    }
    return {
      name: standard2.name,
      chainId: standard2.chainId,
      ensAddress: standard2.ensAddress,
      _defaultProvider: standard2._defaultProvider || null
    };
  }
  const standard = networks[network.name];
  if (!standard) {
    if (typeof network.chainId !== "number") {
      logger16.throwArgumentError("invalid network chainId", "network", network);
    }
    return network;
  }
  if (network.chainId !== 0 && network.chainId !== standard.chainId) {
    logger16.throwArgumentError("network chainId mismatch", "network", network);
  }
  let defaultProvider = network._defaultProvider || null;
  if (defaultProvider == null && standard._defaultProvider) {
    if (isRenetworkable(standard._defaultProvider)) {
      defaultProvider = standard._defaultProvider.renetwork(network);
    } else {
      defaultProvider = standard._defaultProvider;
    }
  }
  return {
    name: network.name,
    chainId: standard.chainId,
    ensAddress: network.ensAddress || standard.ensAddress || null,
    _defaultProvider: defaultProvider
  };
}
var logger16, homestead, ropsten, classicMordor, networks;
var init_lib25 = __esm({
  "node_modules/@ethersproject/networks/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_lib();
    init_version11();
    logger16 = new Logger(version11);
    homestead = {
      chainId: 1,
      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      name: "homestead",
      _defaultProvider: ethDefaultProvider("homestead")
    };
    ropsten = {
      chainId: 3,
      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      name: "ropsten",
      _defaultProvider: ethDefaultProvider("ropsten")
    };
    classicMordor = {
      chainId: 63,
      name: "classicMordor",
      _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
    };
    networks = {
      unspecified: { chainId: 0, name: "unspecified" },
      homestead,
      mainnet: homestead,
      morden: { chainId: 2, name: "morden" },
      ropsten,
      testnet: ropsten,
      rinkeby: {
        chainId: 4,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "rinkeby",
        _defaultProvider: ethDefaultProvider("rinkeby")
      },
      kovan: {
        chainId: 42,
        name: "kovan",
        _defaultProvider: ethDefaultProvider("kovan")
      },
      goerli: {
        chainId: 5,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "goerli",
        _defaultProvider: ethDefaultProvider("goerli")
      },
      kintsugi: { chainId: 1337702, name: "kintsugi" },
      classic: {
        chainId: 61,
        name: "classic",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic")
      },
      classicMorden: { chainId: 62, name: "classicMorden" },
      classicMordor,
      classicTestnet: classicMordor,
      classicKotti: {
        chainId: 6,
        name: "classicKotti",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti")
      },
      xdai: { chainId: 100, name: "xdai" },
      matic: { chainId: 137, name: "matic" },
      maticmum: { chainId: 80001, name: "maticmum" },
      optimism: { chainId: 10, name: "optimism" },
      "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
      "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
      arbitrum: { chainId: 42161, name: "arbitrum" },
      "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
      bnb: { chainId: 56, name: "bnb" },
      bnbt: { chainId: 97, name: "bnbt" }
    };
  }
});

// node_modules/@ethersproject/base64/lib.esm/base64.js
function decode(textData) {
  textData = atob(textData);
  const data = [];
  for (let i = 0; i < textData.length; i++) {
    data.push(textData.charCodeAt(i));
  }
  return arrayify(data);
}
function encode(data) {
  data = arrayify(data);
  let textData = "";
  for (let i = 0; i < data.length; i++) {
    textData += String.fromCharCode(data[i]);
  }
  return btoa(textData);
}
var init_base64 = __esm({
  "node_modules/@ethersproject/base64/lib.esm/base64.js"() {
    "use strict";
    init_react();
    init_lib2();
  }
});

// node_modules/@ethersproject/base64/lib.esm/index.js
var lib_exports3 = {};
__export(lib_exports3, {
  decode: () => decode,
  encode: () => encode
});
var init_lib26 = __esm({
  "node_modules/@ethersproject/base64/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_base64();
  }
});

// node_modules/@ethersproject/web/lib.esm/_version.js
var version12;
var init_version12 = __esm({
  "node_modules/@ethersproject/web/lib.esm/_version.js"() {
    init_react();
    version12 = "web/5.5.1";
  }
});

// node_modules/@ethersproject/web/lib.esm/geturl.js
function getUrl(href, options) {
  return __awaiter6(this, void 0, void 0, function* () {
    if (options == null) {
      options = {};
    }
    const request = {
      method: options.method || "GET",
      headers: options.headers || {},
      body: options.body || void 0
    };
    if (options.skipFetchSetup !== true) {
      request.mode = "cors";
      request.cache = "no-cache";
      request.credentials = "same-origin";
      request.redirect = "follow";
      request.referrer = "client";
    }
    ;
    const response = yield fetch(href, request);
    const body = yield response.arrayBuffer();
    const headers = {};
    if (response.headers.forEach) {
      response.headers.forEach((value, key) => {
        headers[key.toLowerCase()] = value;
      });
    } else {
      response.headers.keys().forEach((key) => {
        headers[key.toLowerCase()] = response.headers.get(key);
      });
    }
    return {
      headers,
      statusCode: response.status,
      statusMessage: response.statusText,
      body: arrayify(new Uint8Array(body))
    };
  });
}
var __awaiter6;
var init_geturl = __esm({
  "node_modules/@ethersproject/web/lib.esm/geturl.js"() {
    "use strict";
    init_react();
    init_lib2();
    __awaiter6 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
  }
});

// node_modules/@ethersproject/web/lib.esm/index.js
function staller(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function bodyify(value, type) {
  if (value == null) {
    return null;
  }
  if (typeof value === "string") {
    return value;
  }
  if (isBytesLike(value)) {
    if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
      try {
        return toUtf8String(value);
      } catch (error) {
      }
      ;
    }
    return hexlify(value);
  }
  return value;
}
function _fetchData(connection, body, processFunc) {
  const attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
  logger17.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
  const throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
  const throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
  logger17.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
  const headers = {};
  let url = null;
  const options = {
    method: "GET"
  };
  let allow304 = false;
  let timeout = 2 * 60 * 1e3;
  if (typeof connection === "string") {
    url = connection;
  } else if (typeof connection === "object") {
    if (connection == null || connection.url == null) {
      logger17.throwArgumentError("missing URL", "connection.url", connection);
    }
    url = connection.url;
    if (typeof connection.timeout === "number" && connection.timeout > 0) {
      timeout = connection.timeout;
    }
    if (connection.headers) {
      for (const key in connection.headers) {
        headers[key.toLowerCase()] = { key, value: String(connection.headers[key]) };
        if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
          allow304 = true;
        }
      }
    }
    options.allowGzip = !!connection.allowGzip;
    if (connection.user != null && connection.password != null) {
      if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
        logger17.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, { argument: "url", url, user: connection.user, password: "[REDACTED]" });
      }
      const authorization = connection.user + ":" + connection.password;
      headers["authorization"] = {
        key: "Authorization",
        value: "Basic " + encode(toUtf8Bytes(authorization))
      };
    }
  }
  const reData = new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$", "i");
  const dataMatch = url ? url.match(reData) : null;
  if (dataMatch) {
    try {
      const response = {
        statusCode: 200,
        statusMessage: "OK",
        headers: { "content-type": dataMatch[1] },
        body: decode(dataMatch[2])
      };
      let result = response.body;
      if (processFunc) {
        result = processFunc(response.body, response);
      }
      return Promise.resolve(result);
    } catch (error) {
      logger17.throwError("processing response error", Logger.errors.SERVER_ERROR, {
        body: bodyify(dataMatch[1], dataMatch[2]),
        error,
        requestBody: null,
        requestMethod: "GET",
        url
      });
    }
  }
  if (body) {
    options.method = "POST";
    options.body = body;
    if (headers["content-type"] == null) {
      headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
    }
    if (headers["content-length"] == null) {
      headers["content-length"] = { key: "Content-Length", value: String(body.length) };
    }
  }
  const flatHeaders = {};
  Object.keys(headers).forEach((key) => {
    const header = headers[key];
    flatHeaders[header.key] = header.value;
  });
  options.headers = flatHeaders;
  const runningTimeout = function() {
    let timer2 = null;
    const promise = new Promise(function(resolve, reject) {
      if (timeout) {
        timer2 = setTimeout(() => {
          if (timer2 == null) {
            return;
          }
          timer2 = null;
          reject(logger17.makeError("timeout", Logger.errors.TIMEOUT, {
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            timeout,
            url
          }));
        }, timeout);
      }
    });
    const cancel = function() {
      if (timer2 == null) {
        return;
      }
      clearTimeout(timer2);
      timer2 = null;
    };
    return { promise, cancel };
  }();
  const runningFetch = function() {
    return __awaiter7(this, void 0, void 0, function* () {
      for (let attempt = 0; attempt < attemptLimit; attempt++) {
        let response = null;
        try {
          response = yield getUrl(url, options);
          if (attempt < attemptLimit) {
            if (response.statusCode === 301 || response.statusCode === 302) {
              const location = response.headers.location || "";
              if (options.method === "GET" && location.match(/^https:/)) {
                url = response.headers.location;
                continue;
              }
            } else if (response.statusCode === 429) {
              let tryAgain = true;
              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }
              if (tryAgain) {
                let stall3 = 0;
                const retryAfter = response.headers["retry-after"];
                if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                  stall3 = parseInt(retryAfter) * 1e3;
                } else {
                  stall3 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                }
                yield staller(stall3);
                continue;
              }
            }
          }
        } catch (error) {
          response = error.response;
          if (response == null) {
            runningTimeout.cancel();
            logger17.throwError("missing response", Logger.errors.SERVER_ERROR, {
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              serverError: error,
              url
            });
          }
        }
        let body2 = response.body;
        if (allow304 && response.statusCode === 304) {
          body2 = null;
        } else if (response.statusCode < 200 || response.statusCode >= 300) {
          runningTimeout.cancel();
          logger17.throwError("bad response", Logger.errors.SERVER_ERROR, {
            status: response.statusCode,
            headers: response.headers,
            body: bodyify(body2, response.headers ? response.headers["content-type"] : null),
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            url
          });
        }
        if (processFunc) {
          try {
            const result = yield processFunc(body2, response);
            runningTimeout.cancel();
            return result;
          } catch (error) {
            if (error.throttleRetry && attempt < attemptLimit) {
              let tryAgain = true;
              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }
              if (tryAgain) {
                const timeout2 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                yield staller(timeout2);
                continue;
              }
            }
            runningTimeout.cancel();
            logger17.throwError("processing response error", Logger.errors.SERVER_ERROR, {
              body: bodyify(body2, response.headers ? response.headers["content-type"] : null),
              error,
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              url
            });
          }
        }
        runningTimeout.cancel();
        return body2;
      }
      return logger17.throwError("failed response", Logger.errors.SERVER_ERROR, {
        requestBody: bodyify(options.body, flatHeaders["content-type"]),
        requestMethod: options.method,
        url
      });
    });
  }();
  return Promise.race([runningTimeout.promise, runningFetch]);
}
function fetchJson(connection, json, processFunc) {
  let processJsonFunc = (value, response) => {
    let result = null;
    if (value != null) {
      try {
        result = JSON.parse(toUtf8String(value));
      } catch (error) {
        logger17.throwError("invalid JSON", Logger.errors.SERVER_ERROR, {
          body: value,
          error
        });
      }
    }
    if (processFunc) {
      result = processFunc(result, response);
    }
    return result;
  };
  let body = null;
  if (json != null) {
    body = toUtf8Bytes(json);
    const updated = typeof connection === "string" ? { url: connection } : shallowCopy(connection);
    if (updated.headers) {
      const hasContentType = Object.keys(updated.headers).filter((k2) => k2.toLowerCase() === "content-type").length !== 0;
      if (!hasContentType) {
        updated.headers = shallowCopy(updated.headers);
        updated.headers["content-type"] = "application/json";
      }
    } else {
      updated.headers = { "content-type": "application/json" };
    }
    connection = updated;
  }
  return _fetchData(connection, body, processJsonFunc);
}
function poll(func, options) {
  if (!options) {
    options = {};
  }
  options = shallowCopy(options);
  if (options.floor == null) {
    options.floor = 0;
  }
  if (options.ceiling == null) {
    options.ceiling = 1e4;
  }
  if (options.interval == null) {
    options.interval = 250;
  }
  return new Promise(function(resolve, reject) {
    let timer2 = null;
    let done = false;
    const cancel = () => {
      if (done) {
        return false;
      }
      done = true;
      if (timer2) {
        clearTimeout(timer2);
      }
      return true;
    };
    if (options.timeout) {
      timer2 = setTimeout(() => {
        if (cancel()) {
          reject(new Error("timeout"));
        }
      }, options.timeout);
    }
    const retryLimit = options.retryLimit;
    let attempt = 0;
    function check() {
      return func().then(function(result) {
        if (result !== void 0) {
          if (cancel()) {
            resolve(result);
          }
        } else if (options.oncePoll) {
          options.oncePoll.once("poll", check);
        } else if (options.onceBlock) {
          options.onceBlock.once("block", check);
        } else if (!done) {
          attempt++;
          if (attempt > retryLimit) {
            if (cancel()) {
              reject(new Error("retry limit reached"));
            }
            return;
          }
          let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
          if (timeout < options.floor) {
            timeout = options.floor;
          }
          if (timeout > options.ceiling) {
            timeout = options.ceiling;
          }
          setTimeout(check, timeout);
        }
        return null;
      }, function(error) {
        if (cancel()) {
          reject(error);
        }
      });
    }
    check();
  });
}
var __awaiter7, logger17;
var init_lib27 = __esm({
  "node_modules/@ethersproject/web/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_lib26();
    init_lib2();
    init_lib4();
    init_lib9();
    init_lib();
    init_version12();
    init_geturl();
    __awaiter7 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger17 = new Logger(version12);
  }
});

// node_modules/bech32/index.js
var require_bech32 = __commonJS({
  "node_modules/bech32/index.js"(exports, module) {
    "use strict";
    init_react();
    var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
    var ALPHABET_MAP = {};
    for (z2 = 0; z2 < ALPHABET.length; z2++) {
      x2 = ALPHABET.charAt(z2);
      if (ALPHABET_MAP[x2] !== void 0)
        throw new TypeError(x2 + " is ambiguous");
      ALPHABET_MAP[x2] = z2;
    }
    var x2;
    var z2;
    function polymodStep(pre) {
      var b2 = pre >> 25;
      return (pre & 33554431) << 5 ^ -(b2 >> 0 & 1) & 996825010 ^ -(b2 >> 1 & 1) & 642813549 ^ -(b2 >> 2 & 1) & 513874426 ^ -(b2 >> 3 & 1) & 1027748829 ^ -(b2 >> 4 & 1) & 705979059;
    }
    function prefixChk(prefix2) {
      var chk = 1;
      for (var i = 0; i < prefix2.length; ++i) {
        var c2 = prefix2.charCodeAt(i);
        if (c2 < 33 || c2 > 126)
          return "Invalid prefix (" + prefix2 + ")";
        chk = polymodStep(chk) ^ c2 >> 5;
      }
      chk = polymodStep(chk);
      for (i = 0; i < prefix2.length; ++i) {
        var v2 = prefix2.charCodeAt(i);
        chk = polymodStep(chk) ^ v2 & 31;
      }
      return chk;
    }
    function encode2(prefix2, words2, LIMIT) {
      LIMIT = LIMIT || 90;
      if (prefix2.length + 7 + words2.length > LIMIT)
        throw new TypeError("Exceeds length limit");
      prefix2 = prefix2.toLowerCase();
      var chk = prefixChk(prefix2);
      if (typeof chk === "string")
        throw new Error(chk);
      var result = prefix2 + "1";
      for (var i = 0; i < words2.length; ++i) {
        var x3 = words2[i];
        if (x3 >> 5 !== 0)
          throw new Error("Non 5-bit word");
        chk = polymodStep(chk) ^ x3;
        result += ALPHABET.charAt(x3);
      }
      for (i = 0; i < 6; ++i) {
        chk = polymodStep(chk);
      }
      chk ^= 1;
      for (i = 0; i < 6; ++i) {
        var v2 = chk >> (5 - i) * 5 & 31;
        result += ALPHABET.charAt(v2);
      }
      return result;
    }
    function __decode(str, LIMIT) {
      LIMIT = LIMIT || 90;
      if (str.length < 8)
        return str + " too short";
      if (str.length > LIMIT)
        return "Exceeds length limit";
      var lowered = str.toLowerCase();
      var uppered = str.toUpperCase();
      if (str !== lowered && str !== uppered)
        return "Mixed-case string " + str;
      str = lowered;
      var split = str.lastIndexOf("1");
      if (split === -1)
        return "No separator character for " + str;
      if (split === 0)
        return "Missing prefix for " + str;
      var prefix2 = str.slice(0, split);
      var wordChars = str.slice(split + 1);
      if (wordChars.length < 6)
        return "Data too short";
      var chk = prefixChk(prefix2);
      if (typeof chk === "string")
        return chk;
      var words2 = [];
      for (var i = 0; i < wordChars.length; ++i) {
        var c2 = wordChars.charAt(i);
        var v2 = ALPHABET_MAP[c2];
        if (v2 === void 0)
          return "Unknown character " + c2;
        chk = polymodStep(chk) ^ v2;
        if (i + 6 >= wordChars.length)
          continue;
        words2.push(v2);
      }
      if (chk !== 1)
        return "Invalid checksum for " + str;
      return { prefix: prefix2, words: words2 };
    }
    function decodeUnsafe() {
      var res = __decode.apply(null, arguments);
      if (typeof res === "object")
        return res;
    }
    function decode2(str) {
      var res = __decode.apply(null, arguments);
      if (typeof res === "object")
        return res;
      throw new Error(res);
    }
    function convert(data, inBits, outBits, pad) {
      var value = 0;
      var bits = 0;
      var maxV = (1 << outBits) - 1;
      var result = [];
      for (var i = 0; i < data.length; ++i) {
        value = value << inBits | data[i];
        bits += inBits;
        while (bits >= outBits) {
          bits -= outBits;
          result.push(value >> bits & maxV);
        }
      }
      if (pad) {
        if (bits > 0) {
          result.push(value << outBits - bits & maxV);
        }
      } else {
        if (bits >= inBits)
          return "Excess padding";
        if (value << outBits - bits & maxV)
          return "Non-zero padding";
      }
      return result;
    }
    function toWordsUnsafe(bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res))
        return res;
    }
    function toWords(bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res))
        return res;
      throw new Error(res);
    }
    function fromWordsUnsafe(words2) {
      var res = convert(words2, 5, 8, false);
      if (Array.isArray(res))
        return res;
    }
    function fromWords(words2) {
      var res = convert(words2, 5, 8, false);
      if (Array.isArray(res))
        return res;
      throw new Error(res);
    }
    module.exports = {
      decodeUnsafe,
      decode: decode2,
      encode: encode2,
      toWordsUnsafe,
      toWords,
      fromWordsUnsafe,
      fromWords
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/_version.js
var version13;
var init_version13 = __esm({
  "node_modules/@ethersproject/providers/lib.esm/_version.js"() {
    init_react();
    version13 = "providers/5.5.2";
  }
});

// node_modules/@ethersproject/providers/lib.esm/formatter.js
function isCommunityResourcable(value) {
  return value && typeof value.isCommunityResource === "function";
}
function isCommunityResource(value) {
  return isCommunityResourcable(value) && value.isCommunityResource();
}
function showThrottleMessage() {
  if (throttleMessage) {
    return;
  }
  throttleMessage = true;
  console.log("========= NOTICE =========");
  console.log("Request-Rate Exceeded  (this message will not be repeated)");
  console.log("");
  console.log("The default API keys for each service are provided as a highly-throttled,");
  console.log("community resource for low-traffic projects and early prototyping.");
  console.log("");
  console.log("While your application will continue to function, we highly recommended");
  console.log("signing up for your own API keys to improve performance, increase your");
  console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
  console.log("");
  console.log("For more details: https://docs.ethers.io/api-keys/");
  console.log("==========================");
}
var logger18, Formatter, throttleMessage;
var init_formatter = __esm({
  "node_modules/@ethersproject/providers/lib.esm/formatter.js"() {
    "use strict";
    init_react();
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib8();
    init_lib4();
    init_lib12();
    init_lib();
    init_version13();
    logger18 = new Logger(version13);
    Formatter = class {
      constructor() {
        logger18.checkNew(new.target, Formatter);
        this.formats = this.getDefaultFormats();
      }
      getDefaultFormats() {
        const formats = {};
        const address = this.address.bind(this);
        const bigNumber = this.bigNumber.bind(this);
        const blockTag = this.blockTag.bind(this);
        const data = this.data.bind(this);
        const hash3 = this.hash.bind(this);
        const hex = this.hex.bind(this);
        const number = this.number.bind(this);
        const type = this.type.bind(this);
        const strictData = (v2) => {
          return this.data(v2, true);
        };
        formats.transaction = {
          hash: hash3,
          type,
          accessList: Formatter.allowNull(this.accessList.bind(this), null),
          blockHash: Formatter.allowNull(hash3, null),
          blockNumber: Formatter.allowNull(number, null),
          transactionIndex: Formatter.allowNull(number, null),
          confirmations: Formatter.allowNull(number, null),
          from: address,
          gasPrice: Formatter.allowNull(bigNumber),
          maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
          maxFeePerGas: Formatter.allowNull(bigNumber),
          gasLimit: bigNumber,
          to: Formatter.allowNull(address, null),
          value: bigNumber,
          nonce: number,
          data,
          r: Formatter.allowNull(this.uint256),
          s: Formatter.allowNull(this.uint256),
          v: Formatter.allowNull(number),
          creates: Formatter.allowNull(address, null),
          raw: Formatter.allowNull(data)
        };
        formats.transactionRequest = {
          from: Formatter.allowNull(address),
          nonce: Formatter.allowNull(number),
          gasLimit: Formatter.allowNull(bigNumber),
          gasPrice: Formatter.allowNull(bigNumber),
          maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
          maxFeePerGas: Formatter.allowNull(bigNumber),
          to: Formatter.allowNull(address),
          value: Formatter.allowNull(bigNumber),
          data: Formatter.allowNull(strictData),
          type: Formatter.allowNull(number),
          accessList: Formatter.allowNull(this.accessList.bind(this), null)
        };
        formats.receiptLog = {
          transactionIndex: number,
          blockNumber: number,
          transactionHash: hash3,
          address,
          topics: Formatter.arrayOf(hash3),
          data,
          logIndex: number,
          blockHash: hash3
        };
        formats.receipt = {
          to: Formatter.allowNull(this.address, null),
          from: Formatter.allowNull(this.address, null),
          contractAddress: Formatter.allowNull(address, null),
          transactionIndex: number,
          root: Formatter.allowNull(hex),
          gasUsed: bigNumber,
          logsBloom: Formatter.allowNull(data),
          blockHash: hash3,
          transactionHash: hash3,
          logs: Formatter.arrayOf(this.receiptLog.bind(this)),
          blockNumber: number,
          confirmations: Formatter.allowNull(number, null),
          cumulativeGasUsed: bigNumber,
          effectiveGasPrice: Formatter.allowNull(bigNumber),
          status: Formatter.allowNull(number),
          type
        };
        formats.block = {
          hash: hash3,
          parentHash: hash3,
          number,
          timestamp: number,
          nonce: Formatter.allowNull(hex),
          difficulty: this.difficulty.bind(this),
          gasLimit: bigNumber,
          gasUsed: bigNumber,
          miner: address,
          extraData: data,
          transactions: Formatter.allowNull(Formatter.arrayOf(hash3)),
          baseFeePerGas: Formatter.allowNull(bigNumber)
        };
        formats.blockWithTransactions = shallowCopy(formats.block);
        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
        formats.filter = {
          fromBlock: Formatter.allowNull(blockTag, void 0),
          toBlock: Formatter.allowNull(blockTag, void 0),
          blockHash: Formatter.allowNull(hash3, void 0),
          address: Formatter.allowNull(address, void 0),
          topics: Formatter.allowNull(this.topics.bind(this), void 0)
        };
        formats.filterLog = {
          blockNumber: Formatter.allowNull(number),
          blockHash: Formatter.allowNull(hash3),
          transactionIndex: number,
          removed: Formatter.allowNull(this.boolean.bind(this)),
          address,
          data: Formatter.allowFalsish(data, "0x"),
          topics: Formatter.arrayOf(hash3),
          transactionHash: hash3,
          logIndex: number
        };
        return formats;
      }
      accessList(accessList) {
        return accessListify(accessList || []);
      }
      number(number) {
        if (number === "0x") {
          return 0;
        }
        return BigNumber.from(number).toNumber();
      }
      type(number) {
        if (number === "0x" || number == null) {
          return 0;
        }
        return BigNumber.from(number).toNumber();
      }
      bigNumber(value) {
        return BigNumber.from(value);
      }
      boolean(value) {
        if (typeof value === "boolean") {
          return value;
        }
        if (typeof value === "string") {
          value = value.toLowerCase();
          if (value === "true") {
            return true;
          }
          if (value === "false") {
            return false;
          }
        }
        throw new Error("invalid boolean - " + value);
      }
      hex(value, strict) {
        if (typeof value === "string") {
          if (!strict && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
          }
          if (isHexString(value)) {
            return value.toLowerCase();
          }
        }
        return logger18.throwArgumentError("invalid hash", "value", value);
      }
      data(value, strict) {
        const result = this.hex(value, strict);
        if (result.length % 2 !== 0) {
          throw new Error("invalid data; odd-length - " + value);
        }
        return result;
      }
      address(value) {
        return getAddress(value);
      }
      callAddress(value) {
        if (!isHexString(value, 32)) {
          return null;
        }
        const address = getAddress(hexDataSlice(value, 12));
        return address === AddressZero ? null : address;
      }
      contractAddress(value) {
        return getContractAddress(value);
      }
      blockTag(blockTag) {
        if (blockTag == null) {
          return "latest";
        }
        if (blockTag === "earliest") {
          return "0x0";
        }
        if (blockTag === "latest" || blockTag === "pending") {
          return blockTag;
        }
        if (typeof blockTag === "number" || isHexString(blockTag)) {
          return hexValue(blockTag);
        }
        throw new Error("invalid blockTag");
      }
      hash(value, strict) {
        const result = this.hex(value, strict);
        if (hexDataLength(result) !== 32) {
          return logger18.throwArgumentError("invalid hash", "value", value);
        }
        return result;
      }
      difficulty(value) {
        if (value == null) {
          return null;
        }
        const v2 = BigNumber.from(value);
        try {
          return v2.toNumber();
        } catch (error) {
        }
        return null;
      }
      uint256(value) {
        if (!isHexString(value)) {
          throw new Error("invalid uint256");
        }
        return hexZeroPad(value, 32);
      }
      _block(value, format) {
        if (value.author != null && value.miner == null) {
          value.miner = value.author;
        }
        const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;
        const result = Formatter.check(format, value);
        result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);
        return result;
      }
      block(value) {
        return this._block(value, this.formats.block);
      }
      blockWithTransactions(value) {
        return this._block(value, this.formats.blockWithTransactions);
      }
      transactionRequest(value) {
        return Formatter.check(this.formats.transactionRequest, value);
      }
      transactionResponse(transaction) {
        if (transaction.gas != null && transaction.gasLimit == null) {
          transaction.gasLimit = transaction.gas;
        }
        if (transaction.to && BigNumber.from(transaction.to).isZero()) {
          transaction.to = "0x0000000000000000000000000000000000000000";
        }
        if (transaction.input != null && transaction.data == null) {
          transaction.data = transaction.input;
        }
        if (transaction.to == null && transaction.creates == null) {
          transaction.creates = this.contractAddress(transaction);
        }
        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
          transaction.accessList = [];
        }
        const result = Formatter.check(this.formats.transaction, transaction);
        if (transaction.chainId != null) {
          let chainId = transaction.chainId;
          if (isHexString(chainId)) {
            chainId = BigNumber.from(chainId).toNumber();
          }
          result.chainId = chainId;
        } else {
          let chainId = transaction.networkId;
          if (chainId == null && result.v == null) {
            chainId = transaction.chainId;
          }
          if (isHexString(chainId)) {
            chainId = BigNumber.from(chainId).toNumber();
          }
          if (typeof chainId !== "number" && result.v != null) {
            chainId = (result.v - 35) / 2;
            if (chainId < 0) {
              chainId = 0;
            }
            chainId = parseInt(chainId);
          }
          if (typeof chainId !== "number") {
            chainId = 0;
          }
          result.chainId = chainId;
        }
        if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
          result.blockHash = null;
        }
        return result;
      }
      transaction(value) {
        return parse(value);
      }
      receiptLog(value) {
        return Formatter.check(this.formats.receiptLog, value);
      }
      receipt(value) {
        const result = Formatter.check(this.formats.receipt, value);
        if (result.root != null) {
          if (result.root.length <= 4) {
            const value2 = BigNumber.from(result.root).toNumber();
            if (value2 === 0 || value2 === 1) {
              if (result.status != null && result.status !== value2) {
                logger18.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
              }
              result.status = value2;
              delete result.root;
            } else {
              logger18.throwArgumentError("invalid alt-root-status", "value.root", result.root);
            }
          } else if (result.root.length !== 66) {
            logger18.throwArgumentError("invalid root hash", "value.root", result.root);
          }
        }
        if (result.status != null) {
          result.byzantium = true;
        }
        return result;
      }
      topics(value) {
        if (Array.isArray(value)) {
          return value.map((v2) => this.topics(v2));
        } else if (value != null) {
          return this.hash(value, true);
        }
        return null;
      }
      filter(value) {
        return Formatter.check(this.formats.filter, value);
      }
      filterLog(value) {
        return Formatter.check(this.formats.filterLog, value);
      }
      static check(format, object) {
        const result = {};
        for (const key in format) {
          try {
            const value = format[key](object[key]);
            if (value !== void 0) {
              result[key] = value;
            }
          } catch (error) {
            error.checkKey = key;
            error.checkValue = object[key];
            throw error;
          }
        }
        return result;
      }
      static allowNull(format, nullValue) {
        return function(value) {
          if (value == null) {
            return nullValue;
          }
          return format(value);
        };
      }
      static allowFalsish(format, replaceValue) {
        return function(value) {
          if (!value) {
            return replaceValue;
          }
          return format(value);
        };
      }
      static arrayOf(format) {
        return function(array) {
          if (!Array.isArray(array)) {
            throw new Error("not an array");
          }
          const result = [];
          array.forEach(function(value) {
            result.push(format(value));
          });
          return result;
        };
      }
    };
    throttleMessage = false;
  }
});

// node_modules/@ethersproject/providers/lib.esm/base-provider.js
function checkTopic(topic) {
  if (topic == null) {
    return "null";
  }
  if (hexDataLength(topic) !== 32) {
    logger19.throwArgumentError("invalid topic", "topic", topic);
  }
  return topic.toLowerCase();
}
function serializeTopics(topics) {
  topics = topics.slice();
  while (topics.length > 0 && topics[topics.length - 1] == null) {
    topics.pop();
  }
  return topics.map((topic) => {
    if (Array.isArray(topic)) {
      const unique = {};
      topic.forEach((topic2) => {
        unique[checkTopic(topic2)] = true;
      });
      const sorted = Object.keys(unique);
      sorted.sort();
      return sorted.join("|");
    } else {
      return checkTopic(topic);
    }
  }).join("&");
}
function deserializeTopics(data) {
  if (data === "") {
    return [];
  }
  return data.split(/&/g).map((topic) => {
    if (topic === "") {
      return [];
    }
    const comps = topic.split("|").map((topic2) => {
      return topic2 === "null" ? null : topic2;
    });
    return comps.length === 1 ? comps[0] : comps;
  });
}
function getEventTag2(eventName) {
  if (typeof eventName === "string") {
    eventName = eventName.toLowerCase();
    if (hexDataLength(eventName) === 32) {
      return "tx:" + eventName;
    }
    if (eventName.indexOf(":") === -1) {
      return eventName;
    }
  } else if (Array.isArray(eventName)) {
    return "filter:*:" + serializeTopics(eventName);
  } else if (ForkEvent.isForkEvent(eventName)) {
    logger19.warn("not implemented");
    throw new Error("not implemented");
  } else if (eventName && typeof eventName === "object") {
    return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
  }
  throw new Error("invalid event - " + eventName);
}
function getTime() {
  return new Date().getTime();
}
function stall(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function bytes32ify(value) {
  return hexZeroPad(BigNumber.from(value).toHexString(), 32);
}
function base58Encode(data) {
  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));
}
function _parseString(result) {
  try {
    return toUtf8String(_parseBytes(result));
  } catch (error) {
  }
  return null;
}
function _parseBytes(result) {
  if (result === "0x") {
    return null;
  }
  const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();
  const length2 = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
  return hexDataSlice(result, offset + 32, offset + 32 + length2);
}
function getIpfsLink(link) {
  return `https://gateway.ipfs.io/ipfs/${link.substring(7)}`;
}
var import_bech32, __awaiter8, logger19, PollableEvents, Event, coinInfos, matcherIpfs, matchers, Resolver, defaultFormatter, nextPollId, BaseProvider;
var init_base_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/base-provider.js"() {
    "use strict";
    init_react();
    init_lib14();
    init_lib17();
    init_lib3();
    init_lib2();
    init_lib8();
    init_lib10();
    init_lib25();
    init_lib4();
    init_lib18();
    init_lib9();
    init_lib27();
    import_bech32 = __toESM(require_bech32());
    init_lib();
    init_version13();
    init_formatter();
    __awaiter8 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger19 = new Logger(version13);
    PollableEvents = ["block", "network", "pending", "poll"];
    Event = class {
      constructor(tag, listener, once) {
        defineReadOnly(this, "tag", tag);
        defineReadOnly(this, "listener", listener);
        defineReadOnly(this, "once", once);
      }
      get event() {
        switch (this.type) {
          case "tx":
            return this.hash;
          case "filter":
            return this.filter;
        }
        return this.tag;
      }
      get type() {
        return this.tag.split(":")[0];
      }
      get hash() {
        const comps = this.tag.split(":");
        if (comps[0] !== "tx") {
          return null;
        }
        return comps[1];
      }
      get filter() {
        const comps = this.tag.split(":");
        if (comps[0] !== "filter") {
          return null;
        }
        const address = comps[1];
        const topics = deserializeTopics(comps[2]);
        const filter = {};
        if (topics.length > 0) {
          filter.topics = topics;
        }
        if (address && address !== "*") {
          filter.address = address;
        }
        return filter;
      }
      pollable() {
        return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
      }
    };
    coinInfos = {
      "0": { symbol: "btc", p2pkh: 0, p2sh: 5, prefix: "bc" },
      "2": { symbol: "ltc", p2pkh: 48, p2sh: 50, prefix: "ltc" },
      "3": { symbol: "doge", p2pkh: 30, p2sh: 22 },
      "60": { symbol: "eth", ilk: "eth" },
      "61": { symbol: "etc", ilk: "eth" },
      "700": { symbol: "xdai", ilk: "eth" }
    };
    matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
    matchers = [
      new RegExp("^(https)://(.*)$", "i"),
      new RegExp("^(data):(.*)$", "i"),
      matcherIpfs,
      new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
    ];
    Resolver = class {
      constructor(provider, address, name2, resolvedAddress) {
        defineReadOnly(this, "provider", provider);
        defineReadOnly(this, "name", name2);
        defineReadOnly(this, "address", provider.formatter.address(address));
        defineReadOnly(this, "_resolvedAddress", resolvedAddress);
      }
      _fetchBytes(selector, parameters) {
        return __awaiter8(this, void 0, void 0, function* () {
          const tx = {
            to: this.address,
            data: hexConcat([selector, namehash(this.name), parameters || "0x"])
          };
          try {
            return _parseBytes(yield this.provider.call(tx));
          } catch (error) {
            if (error.code === Logger.errors.CALL_EXCEPTION) {
              return null;
            }
            return null;
          }
        });
      }
      _getAddress(coinType, hexBytes) {
        const coinInfo = coinInfos[String(coinType)];
        if (coinInfo == null) {
          logger19.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: `getAddress(${coinType})`
          });
        }
        if (coinInfo.ilk === "eth") {
          return this.provider.formatter.address(hexBytes);
        }
        const bytes = arrayify(hexBytes);
        if (coinInfo.p2pkh != null) {
          const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
          if (p2pkh) {
            const length2 = parseInt(p2pkh[1], 16);
            if (p2pkh[2].length === length2 * 2 && length2 >= 1 && length2 <= 75) {
              return base58Encode(concat([[coinInfo.p2pkh], "0x" + p2pkh[2]]));
            }
          }
        }
        if (coinInfo.p2sh != null) {
          const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
          if (p2sh) {
            const length2 = parseInt(p2sh[1], 16);
            if (p2sh[2].length === length2 * 2 && length2 >= 1 && length2 <= 75) {
              return base58Encode(concat([[coinInfo.p2sh], "0x" + p2sh[2]]));
            }
          }
        }
        if (coinInfo.prefix != null) {
          const length2 = bytes[1];
          let version17 = bytes[0];
          if (version17 === 0) {
            if (length2 !== 20 && length2 !== 32) {
              version17 = -1;
            }
          } else {
            version17 = -1;
          }
          if (version17 >= 0 && bytes.length === 2 + length2 && length2 >= 1 && length2 <= 75) {
            const words2 = import_bech32.default.toWords(bytes.slice(2));
            words2.unshift(version17);
            return import_bech32.default.encode(coinInfo.prefix, words2);
          }
        }
        return null;
      }
      getAddress(coinType) {
        return __awaiter8(this, void 0, void 0, function* () {
          if (coinType == null) {
            coinType = 60;
          }
          if (coinType === 60) {
            try {
              const transaction = {
                to: this.address,
                data: "0x3b3b57de" + namehash(this.name).substring(2)
              };
              const hexBytes2 = yield this.provider.call(transaction);
              if (hexBytes2 === "0x" || hexBytes2 === HashZero) {
                return null;
              }
              return this.provider.formatter.callAddress(hexBytes2);
            } catch (error) {
              if (error.code === Logger.errors.CALL_EXCEPTION) {
                return null;
              }
              throw error;
            }
          }
          const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
          if (hexBytes == null || hexBytes === "0x") {
            return null;
          }
          const address = this._getAddress(coinType, hexBytes);
          if (address == null) {
            logger19.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {
              operation: `getAddress(${coinType})`,
              coinType,
              data: hexBytes
            });
          }
          return address;
        });
      }
      getAvatar() {
        return __awaiter8(this, void 0, void 0, function* () {
          const linkage = [{ type: "name", content: this.name }];
          try {
            const avatar = yield this.getText("avatar");
            if (avatar == null) {
              return null;
            }
            for (let i = 0; i < matchers.length; i++) {
              const match2 = avatar.match(matchers[i]);
              if (match2 == null) {
                continue;
              }
              const scheme = match2[1].toLowerCase();
              switch (scheme) {
                case "https":
                  linkage.push({ type: "url", content: avatar });
                  return { linkage, url: avatar };
                case "data":
                  linkage.push({ type: "data", content: avatar });
                  return { linkage, url: avatar };
                case "ipfs":
                  linkage.push({ type: "ipfs", content: avatar });
                  return { linkage, url: getIpfsLink(avatar) };
                case "erc721":
                case "erc1155": {
                  const selector = scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
                  linkage.push({ type: scheme, content: avatar });
                  const owner = this._resolvedAddress || (yield this.getAddress());
                  const comps = (match2[2] || "").split("/");
                  if (comps.length !== 2) {
                    return null;
                  }
                  const addr = yield this.provider.formatter.address(comps[0]);
                  const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);
                  if (scheme === "erc721") {
                    const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({
                      to: addr,
                      data: hexConcat(["0x6352211e", tokenId])
                    }));
                    if (owner !== tokenOwner) {
                      return null;
                    }
                    linkage.push({ type: "owner", content: tokenOwner });
                  } else if (scheme === "erc1155") {
                    const balance = BigNumber.from(yield this.provider.call({
                      to: addr,
                      data: hexConcat(["0x00fdd58e", hexZeroPad(owner, 32), tokenId])
                    }));
                    if (balance.isZero()) {
                      return null;
                    }
                    linkage.push({ type: "balance", content: balance.toString() });
                  }
                  const tx = {
                    to: this.provider.formatter.address(comps[0]),
                    data: hexConcat([selector, tokenId])
                  };
                  let metadataUrl = _parseString(yield this.provider.call(tx));
                  if (metadataUrl == null) {
                    return null;
                  }
                  linkage.push({ type: "metadata-url", content: metadataUrl });
                  if (scheme === "erc1155") {
                    metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                    linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
                  }
                  const metadata = yield fetchJson(metadataUrl);
                  if (!metadata) {
                    return null;
                  }
                  linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                  let imageUrl = metadata.image;
                  if (typeof imageUrl !== "string") {
                    return null;
                  }
                  if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                  } else {
                    const ipfs = imageUrl.match(matcherIpfs);
                    if (ipfs == null) {
                      return null;
                    }
                    linkage.push({ type: "url-ipfs", content: imageUrl });
                    imageUrl = getIpfsLink(imageUrl);
                  }
                  linkage.push({ type: "url", content: imageUrl });
                  return { linkage, url: imageUrl };
                }
              }
            }
          } catch (error) {
          }
          return null;
        });
      }
      getContentHash() {
        return __awaiter8(this, void 0, void 0, function* () {
          const hexBytes = yield this._fetchBytes("0xbc1c58d1");
          if (hexBytes == null || hexBytes === "0x") {
            return null;
          }
          const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
          if (ipfs) {
            const length2 = parseInt(ipfs[3], 16);
            if (ipfs[4].length === length2 * 2) {
              return "ipfs://" + Base58.encode("0x" + ipfs[1]);
            }
          }
          const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
          if (swarm) {
            if (swarm[1].length === 32 * 2) {
              return "bzz://" + swarm[1];
            }
          }
          return logger19.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "getContentHash()",
            data: hexBytes
          });
        });
      }
      getText(key) {
        return __awaiter8(this, void 0, void 0, function* () {
          let keyBytes = toUtf8Bytes(key);
          keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
          if (keyBytes.length % 32 !== 0) {
            keyBytes = concat([keyBytes, hexZeroPad("0x", 32 - key.length % 32)]);
          }
          const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
          if (hexBytes == null || hexBytes === "0x") {
            return null;
          }
          return toUtf8String(hexBytes);
        });
      }
    };
    defaultFormatter = null;
    nextPollId = 1;
    BaseProvider = class extends Provider {
      constructor(network) {
        logger19.checkNew(new.target, Provider);
        super();
        this._events = [];
        this._emitted = { block: -2 };
        this.formatter = new.target.getFormatter();
        defineReadOnly(this, "anyNetwork", network === "any");
        if (this.anyNetwork) {
          network = this.detectNetwork();
        }
        if (network instanceof Promise) {
          this._networkPromise = network;
          network.catch((error) => {
          });
          this._ready().catch((error) => {
          });
        } else {
          const knownNetwork = getStatic(new.target, "getNetwork")(network);
          if (knownNetwork) {
            defineReadOnly(this, "_network", knownNetwork);
            this.emit("network", knownNetwork, null);
          } else {
            logger19.throwArgumentError("invalid network", "network", network);
          }
        }
        this._maxInternalBlockNumber = -1024;
        this._lastBlockNumber = -2;
        this._pollingInterval = 4e3;
        this._fastQueryDate = 0;
      }
      _ready() {
        return __awaiter8(this, void 0, void 0, function* () {
          if (this._network == null) {
            let network = null;
            if (this._networkPromise) {
              try {
                network = yield this._networkPromise;
              } catch (error) {
              }
            }
            if (network == null) {
              network = yield this.detectNetwork();
            }
            if (!network) {
              logger19.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
            }
            if (this._network == null) {
              if (this.anyNetwork) {
                this._network = network;
              } else {
                defineReadOnly(this, "_network", network);
              }
              this.emit("network", network, null);
            }
          }
          return this._network;
        });
      }
      get ready() {
        return poll(() => {
          return this._ready().then((network) => {
            return network;
          }, (error) => {
            if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
              return void 0;
            }
            throw error;
          });
        });
      }
      static getFormatter() {
        if (defaultFormatter == null) {
          defaultFormatter = new Formatter();
        }
        return defaultFormatter;
      }
      static getNetwork(network) {
        return getNetwork(network == null ? "homestead" : network);
      }
      _getInternalBlockNumber(maxAge) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this._ready();
          if (maxAge > 0) {
            while (this._internalBlockNumber) {
              const internalBlockNumber = this._internalBlockNumber;
              try {
                const result = yield internalBlockNumber;
                if (getTime() - result.respTime <= maxAge) {
                  return result.blockNumber;
                }
                break;
              } catch (error) {
                if (this._internalBlockNumber === internalBlockNumber) {
                  break;
                }
              }
            }
          }
          const reqTime = getTime();
          const checkInternalBlockNumber = resolveProperties({
            blockNumber: this.perform("getBlockNumber", {}),
            networkError: this.getNetwork().then((network) => null, (error) => error)
          }).then(({ blockNumber, networkError }) => {
            if (networkError) {
              if (this._internalBlockNumber === checkInternalBlockNumber) {
                this._internalBlockNumber = null;
              }
              throw networkError;
            }
            const respTime = getTime();
            blockNumber = BigNumber.from(blockNumber).toNumber();
            if (blockNumber < this._maxInternalBlockNumber) {
              blockNumber = this._maxInternalBlockNumber;
            }
            this._maxInternalBlockNumber = blockNumber;
            this._setFastBlockNumber(blockNumber);
            return { blockNumber, reqTime, respTime };
          });
          this._internalBlockNumber = checkInternalBlockNumber;
          checkInternalBlockNumber.catch((error) => {
            if (this._internalBlockNumber === checkInternalBlockNumber) {
              this._internalBlockNumber = null;
            }
          });
          return (yield checkInternalBlockNumber).blockNumber;
        });
      }
      poll() {
        return __awaiter8(this, void 0, void 0, function* () {
          const pollId = nextPollId++;
          const runners = [];
          let blockNumber = null;
          try {
            blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
          } catch (error) {
            this.emit("error", error);
            return;
          }
          this._setFastBlockNumber(blockNumber);
          this.emit("poll", pollId, blockNumber);
          if (blockNumber === this._lastBlockNumber) {
            this.emit("didPoll", pollId);
            return;
          }
          if (this._emitted.block === -2) {
            this._emitted.block = blockNumber - 1;
          }
          if (Math.abs(this._emitted.block - blockNumber) > 1e3) {
            logger19.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
            this.emit("error", logger19.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, {
              blockNumber,
              event: "blockSkew",
              previousBlockNumber: this._emitted.block
            }));
            this.emit("block", blockNumber);
          } else {
            for (let i = this._emitted.block + 1; i <= blockNumber; i++) {
              this.emit("block", i);
            }
          }
          if (this._emitted.block !== blockNumber) {
            this._emitted.block = blockNumber;
            Object.keys(this._emitted).forEach((key) => {
              if (key === "block") {
                return;
              }
              const eventBlockNumber = this._emitted[key];
              if (eventBlockNumber === "pending") {
                return;
              }
              if (blockNumber - eventBlockNumber > 12) {
                delete this._emitted[key];
              }
            });
          }
          if (this._lastBlockNumber === -2) {
            this._lastBlockNumber = blockNumber - 1;
          }
          this._events.forEach((event) => {
            switch (event.type) {
              case "tx": {
                const hash3 = event.hash;
                let runner = this.getTransactionReceipt(hash3).then((receipt) => {
                  if (!receipt || receipt.blockNumber == null) {
                    return null;
                  }
                  this._emitted["t:" + hash3] = receipt.blockNumber;
                  this.emit(hash3, receipt);
                  return null;
                }).catch((error) => {
                  this.emit("error", error);
                });
                runners.push(runner);
                break;
              }
              case "filter": {
                const filter = event.filter;
                filter.fromBlock = this._lastBlockNumber + 1;
                filter.toBlock = blockNumber;
                const runner = this.getLogs(filter).then((logs) => {
                  if (logs.length === 0) {
                    return;
                  }
                  logs.forEach((log4) => {
                    this._emitted["b:" + log4.blockHash] = log4.blockNumber;
                    this._emitted["t:" + log4.transactionHash] = log4.blockNumber;
                    this.emit(filter, log4);
                  });
                }).catch((error) => {
                  this.emit("error", error);
                });
                runners.push(runner);
                break;
              }
            }
          });
          this._lastBlockNumber = blockNumber;
          Promise.all(runners).then(() => {
            this.emit("didPoll", pollId);
          }).catch((error) => {
            this.emit("error", error);
          });
          return;
        });
      }
      resetEventsBlock(blockNumber) {
        this._lastBlockNumber = blockNumber - 1;
        if (this.polling) {
          this.poll();
        }
      }
      get network() {
        return this._network;
      }
      detectNetwork() {
        return __awaiter8(this, void 0, void 0, function* () {
          return logger19.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "provider.detectNetwork"
          });
        });
      }
      getNetwork() {
        return __awaiter8(this, void 0, void 0, function* () {
          const network = yield this._ready();
          const currentNetwork = yield this.detectNetwork();
          if (network.chainId !== currentNetwork.chainId) {
            if (this.anyNetwork) {
              this._network = currentNetwork;
              this._lastBlockNumber = -2;
              this._fastBlockNumber = null;
              this._fastBlockNumberPromise = null;
              this._fastQueryDate = 0;
              this._emitted.block = -2;
              this._maxInternalBlockNumber = -1024;
              this._internalBlockNumber = null;
              this.emit("network", currentNetwork, network);
              yield stall(0);
              return this._network;
            }
            const error = logger19.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, {
              event: "changed",
              network,
              detectedNetwork: currentNetwork
            });
            this.emit("error", error);
            throw error;
          }
          return network;
        });
      }
      get blockNumber() {
        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
          this._setFastBlockNumber(blockNumber);
        }, (error) => {
        });
        return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
      }
      get polling() {
        return this._poller != null;
      }
      set polling(value) {
        if (value && !this._poller) {
          this._poller = setInterval(() => {
            this.poll();
          }, this.pollingInterval);
          if (!this._bootstrapPoll) {
            this._bootstrapPoll = setTimeout(() => {
              this.poll();
              this._bootstrapPoll = setTimeout(() => {
                if (!this._poller) {
                  this.poll();
                }
                this._bootstrapPoll = null;
              }, this.pollingInterval);
            }, 0);
          }
        } else if (!value && this._poller) {
          clearInterval(this._poller);
          this._poller = null;
        }
      }
      get pollingInterval() {
        return this._pollingInterval;
      }
      set pollingInterval(value) {
        if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
          throw new Error("invalid polling interval");
        }
        this._pollingInterval = value;
        if (this._poller) {
          clearInterval(this._poller);
          this._poller = setInterval(() => {
            this.poll();
          }, this._pollingInterval);
        }
      }
      _getFastBlockNumber() {
        const now2 = getTime();
        if (now2 - this._fastQueryDate > 2 * this._pollingInterval) {
          this._fastQueryDate = now2;
          this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
              this._fastBlockNumber = blockNumber;
            }
            return this._fastBlockNumber;
          });
        }
        return this._fastBlockNumberPromise;
      }
      _setFastBlockNumber(blockNumber) {
        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
          return;
        }
        this._fastQueryDate = getTime();
        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
          this._fastBlockNumber = blockNumber;
          this._fastBlockNumberPromise = Promise.resolve(blockNumber);
        }
      }
      waitForTransaction(transactionHash, confirmations, timeout) {
        return __awaiter8(this, void 0, void 0, function* () {
          return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);
        });
      }
      _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
        return __awaiter8(this, void 0, void 0, function* () {
          const receipt = yield this.getTransactionReceipt(transactionHash);
          if ((receipt ? receipt.confirmations : 0) >= confirmations) {
            return receipt;
          }
          return new Promise((resolve, reject) => {
            const cancelFuncs = [];
            let done = false;
            const alreadyDone = function() {
              if (done) {
                return true;
              }
              done = true;
              cancelFuncs.forEach((func) => {
                func();
              });
              return false;
            };
            const minedHandler = (receipt2) => {
              if (receipt2.confirmations < confirmations) {
                return;
              }
              if (alreadyDone()) {
                return;
              }
              resolve(receipt2);
            };
            this.on(transactionHash, minedHandler);
            cancelFuncs.push(() => {
              this.removeListener(transactionHash, minedHandler);
            });
            if (replaceable) {
              let lastBlockNumber = replaceable.startBlock;
              let scannedBlock = null;
              const replaceHandler = (blockNumber) => __awaiter8(this, void 0, void 0, function* () {
                if (done) {
                  return;
                }
                yield stall(1e3);
                this.getTransactionCount(replaceable.from).then((nonce) => __awaiter8(this, void 0, void 0, function* () {
                  if (done) {
                    return;
                  }
                  if (nonce <= replaceable.nonce) {
                    lastBlockNumber = blockNumber;
                  } else {
                    {
                      const mined = yield this.getTransaction(transactionHash);
                      if (mined && mined.blockNumber != null) {
                        return;
                      }
                    }
                    if (scannedBlock == null) {
                      scannedBlock = lastBlockNumber - 3;
                      if (scannedBlock < replaceable.startBlock) {
                        scannedBlock = replaceable.startBlock;
                      }
                    }
                    while (scannedBlock <= blockNumber) {
                      if (done) {
                        return;
                      }
                      const block = yield this.getBlockWithTransactions(scannedBlock);
                      for (let ti = 0; ti < block.transactions.length; ti++) {
                        const tx = block.transactions[ti];
                        if (tx.hash === transactionHash) {
                          return;
                        }
                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                          if (done) {
                            return;
                          }
                          const receipt2 = yield this.waitForTransaction(tx.hash, confirmations);
                          if (alreadyDone()) {
                            return;
                          }
                          let reason = "replaced";
                          if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                            reason = "repriced";
                          } else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                            reason = "cancelled";
                          }
                          reject(logger19.makeError("transaction was replaced", Logger.errors.TRANSACTION_REPLACED, {
                            cancelled: reason === "replaced" || reason === "cancelled",
                            reason,
                            replacement: this._wrapTransaction(tx),
                            hash: transactionHash,
                            receipt: receipt2
                          }));
                          return;
                        }
                      }
                      scannedBlock++;
                    }
                  }
                  if (done) {
                    return;
                  }
                  this.once("block", replaceHandler);
                }), (error) => {
                  if (done) {
                    return;
                  }
                  this.once("block", replaceHandler);
                });
              });
              if (done) {
                return;
              }
              this.once("block", replaceHandler);
              cancelFuncs.push(() => {
                this.removeListener("block", replaceHandler);
              });
            }
            if (typeof timeout === "number" && timeout > 0) {
              const timer2 = setTimeout(() => {
                if (alreadyDone()) {
                  return;
                }
                reject(logger19.makeError("timeout exceeded", Logger.errors.TIMEOUT, { timeout }));
              }, timeout);
              if (timer2.unref) {
                timer2.unref();
              }
              cancelFuncs.push(() => {
                clearTimeout(timer2);
              });
            }
          });
        });
      }
      getBlockNumber() {
        return __awaiter8(this, void 0, void 0, function* () {
          return this._getInternalBlockNumber(0);
        });
      }
      getGasPrice() {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const result = yield this.perform("getGasPrice", {});
          try {
            return BigNumber.from(result);
          } catch (error) {
            return logger19.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getGasPrice",
              result,
              error
            });
          }
        });
      }
      getBalance(addressOrName, blockTag) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            address: this._getAddress(addressOrName),
            blockTag: this._getBlockTag(blockTag)
          });
          const result = yield this.perform("getBalance", params);
          try {
            return BigNumber.from(result);
          } catch (error) {
            return logger19.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getBalance",
              params,
              result,
              error
            });
          }
        });
      }
      getTransactionCount(addressOrName, blockTag) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            address: this._getAddress(addressOrName),
            blockTag: this._getBlockTag(blockTag)
          });
          const result = yield this.perform("getTransactionCount", params);
          try {
            return BigNumber.from(result).toNumber();
          } catch (error) {
            return logger19.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getTransactionCount",
              params,
              result,
              error
            });
          }
        });
      }
      getCode(addressOrName, blockTag) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            address: this._getAddress(addressOrName),
            blockTag: this._getBlockTag(blockTag)
          });
          const result = yield this.perform("getCode", params);
          try {
            return hexlify(result);
          } catch (error) {
            return logger19.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getCode",
              params,
              result,
              error
            });
          }
        });
      }
      getStorageAt(addressOrName, position2, blockTag) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            address: this._getAddress(addressOrName),
            blockTag: this._getBlockTag(blockTag),
            position: Promise.resolve(position2).then((p2) => hexValue(p2))
          });
          const result = yield this.perform("getStorageAt", params);
          try {
            return hexlify(result);
          } catch (error) {
            return logger19.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "getStorageAt",
              params,
              result,
              error
            });
          }
        });
      }
      _wrapTransaction(tx, hash3, startBlock) {
        if (hash3 != null && hexDataLength(hash3) !== 32) {
          throw new Error("invalid response - sendTransaction");
        }
        const result = tx;
        if (hash3 != null && tx.hash !== hash3) {
          logger19.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash3 });
        }
        result.wait = (confirms, timeout) => __awaiter8(this, void 0, void 0, function* () {
          if (confirms == null) {
            confirms = 1;
          }
          if (timeout == null) {
            timeout = 0;
          }
          let replacement = void 0;
          if (confirms !== 0 && startBlock != null) {
            replacement = {
              data: tx.data,
              from: tx.from,
              nonce: tx.nonce,
              to: tx.to,
              value: tx.value,
              startBlock
            };
          }
          const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
          if (receipt == null && confirms === 0) {
            return null;
          }
          this._emitted["t:" + tx.hash] = receipt.blockNumber;
          if (receipt.status === 0) {
            logger19.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, {
              transactionHash: tx.hash,
              transaction: tx,
              receipt
            });
          }
          return receipt;
        });
        return result;
      }
      sendTransaction(signedTransaction) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const hexTx = yield Promise.resolve(signedTransaction).then((t2) => hexlify(t2));
          const tx = this.formatter.transaction(signedTransaction);
          if (tx.confirmations == null) {
            tx.confirmations = 0;
          }
          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
          try {
            const hash3 = yield this.perform("sendTransaction", { signedTransaction: hexTx });
            return this._wrapTransaction(tx, hash3, blockNumber);
          } catch (error) {
            error.transaction = tx;
            error.transactionHash = tx.hash;
            throw error;
          }
        });
      }
      _getTransactionRequest(transaction) {
        return __awaiter8(this, void 0, void 0, function* () {
          const values = yield transaction;
          const tx = {};
          ["from", "to"].forEach((key) => {
            if (values[key] == null) {
              return;
            }
            tx[key] = Promise.resolve(values[key]).then((v2) => v2 ? this._getAddress(v2) : null);
          });
          ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach((key) => {
            if (values[key] == null) {
              return;
            }
            tx[key] = Promise.resolve(values[key]).then((v2) => v2 ? BigNumber.from(v2) : null);
          });
          ["type"].forEach((key) => {
            if (values[key] == null) {
              return;
            }
            tx[key] = Promise.resolve(values[key]).then((v2) => v2 != null ? v2 : null);
          });
          if (values.accessList) {
            tx.accessList = this.formatter.accessList(values.accessList);
          }
          ["data"].forEach((key) => {
            if (values[key] == null) {
              return;
            }
            tx[key] = Promise.resolve(values[key]).then((v2) => v2 ? hexlify(v2) : null);
          });
          return this.formatter.transactionRequest(yield resolveProperties(tx));
        });
      }
      _getFilter(filter) {
        return __awaiter8(this, void 0, void 0, function* () {
          filter = yield filter;
          const result = {};
          if (filter.address != null) {
            result.address = this._getAddress(filter.address);
          }
          ["blockHash", "topics"].forEach((key) => {
            if (filter[key] == null) {
              return;
            }
            result[key] = filter[key];
          });
          ["fromBlock", "toBlock"].forEach((key) => {
            if (filter[key] == null) {
              return;
            }
            result[key] = this._getBlockTag(filter[key]);
          });
          return this.formatter.filter(yield resolveProperties(result));
        });
      }
      call(transaction, blockTag) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            transaction: this._getTransactionRequest(transaction),
            blockTag: this._getBlockTag(blockTag)
          });
          const result = yield this.perform("call", params);
          try {
            return hexlify(result);
          } catch (error) {
            return logger19.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "call",
              params,
              result,
              error
            });
          }
        });
      }
      estimateGas(transaction) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({
            transaction: this._getTransactionRequest(transaction)
          });
          const result = yield this.perform("estimateGas", params);
          try {
            return BigNumber.from(result);
          } catch (error) {
            return logger19.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
              method: "estimateGas",
              params,
              result,
              error
            });
          }
        });
      }
      _getAddress(addressOrName) {
        return __awaiter8(this, void 0, void 0, function* () {
          addressOrName = yield addressOrName;
          if (typeof addressOrName !== "string") {
            logger19.throwArgumentError("invalid address or ENS name", "name", addressOrName);
          }
          const address = yield this.resolveName(addressOrName);
          if (address == null) {
            logger19.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: `resolveName(${JSON.stringify(addressOrName)})`
            });
          }
          return address;
        });
      }
      _getBlock(blockHashOrBlockTag, includeTransactions) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          blockHashOrBlockTag = yield blockHashOrBlockTag;
          let blockNumber = -128;
          const params = {
            includeTransactions: !!includeTransactions
          };
          if (isHexString(blockHashOrBlockTag, 32)) {
            params.blockHash = blockHashOrBlockTag;
          } else {
            try {
              params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
              if (isHexString(params.blockTag)) {
                blockNumber = parseInt(params.blockTag.substring(2), 16);
              }
            } catch (error) {
              logger19.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
            }
          }
          return poll(() => __awaiter8(this, void 0, void 0, function* () {
            const block = yield this.perform("getBlock", params);
            if (block == null) {
              if (params.blockHash != null) {
                if (this._emitted["b:" + params.blockHash] == null) {
                  return null;
                }
              }
              if (params.blockTag != null) {
                if (blockNumber > this._emitted.block) {
                  return null;
                }
              }
              return void 0;
            }
            if (includeTransactions) {
              let blockNumber2 = null;
              for (let i = 0; i < block.transactions.length; i++) {
                const tx = block.transactions[i];
                if (tx.blockNumber == null) {
                  tx.confirmations = 0;
                } else if (tx.confirmations == null) {
                  if (blockNumber2 == null) {
                    blockNumber2 = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                  }
                  let confirmations = blockNumber2 - tx.blockNumber + 1;
                  if (confirmations <= 0) {
                    confirmations = 1;
                  }
                  tx.confirmations = confirmations;
                }
              }
              const blockWithTxs = this.formatter.blockWithTransactions(block);
              blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));
              return blockWithTxs;
            }
            return this.formatter.block(block);
          }), { oncePoll: this });
        });
      }
      getBlock(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, false);
      }
      getBlockWithTransactions(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, true);
      }
      getTransaction(transactionHash) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          transactionHash = yield transactionHash;
          const params = { transactionHash: this.formatter.hash(transactionHash, true) };
          return poll(() => __awaiter8(this, void 0, void 0, function* () {
            const result = yield this.perform("getTransaction", params);
            if (result == null) {
              if (this._emitted["t:" + transactionHash] == null) {
                return null;
              }
              return void 0;
            }
            const tx = this.formatter.transactionResponse(result);
            if (tx.blockNumber == null) {
              tx.confirmations = 0;
            } else if (tx.confirmations == null) {
              const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              let confirmations = blockNumber - tx.blockNumber + 1;
              if (confirmations <= 0) {
                confirmations = 1;
              }
              tx.confirmations = confirmations;
            }
            return this._wrapTransaction(tx);
          }), { oncePoll: this });
        });
      }
      getTransactionReceipt(transactionHash) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          transactionHash = yield transactionHash;
          const params = { transactionHash: this.formatter.hash(transactionHash, true) };
          return poll(() => __awaiter8(this, void 0, void 0, function* () {
            const result = yield this.perform("getTransactionReceipt", params);
            if (result == null) {
              if (this._emitted["t:" + transactionHash] == null) {
                return null;
              }
              return void 0;
            }
            if (result.blockHash == null) {
              return void 0;
            }
            const receipt = this.formatter.receipt(result);
            if (receipt.blockNumber == null) {
              receipt.confirmations = 0;
            } else if (receipt.confirmations == null) {
              const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              let confirmations = blockNumber - receipt.blockNumber + 1;
              if (confirmations <= 0) {
                confirmations = 1;
              }
              receipt.confirmations = confirmations;
            }
            return receipt;
          }), { oncePoll: this });
        });
      }
      getLogs(filter) {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          const params = yield resolveProperties({ filter: this._getFilter(filter) });
          const logs = yield this.perform("getLogs", params);
          logs.forEach((log4) => {
            if (log4.removed == null) {
              log4.removed = false;
            }
          });
          return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
        });
      }
      getEtherPrice() {
        return __awaiter8(this, void 0, void 0, function* () {
          yield this.getNetwork();
          return this.perform("getEtherPrice", {});
        });
      }
      _getBlockTag(blockTag) {
        return __awaiter8(this, void 0, void 0, function* () {
          blockTag = yield blockTag;
          if (typeof blockTag === "number" && blockTag < 0) {
            if (blockTag % 1) {
              logger19.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
            }
            let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
            blockNumber += blockTag;
            if (blockNumber < 0) {
              blockNumber = 0;
            }
            return this.formatter.blockTag(blockNumber);
          }
          return this.formatter.blockTag(blockTag);
        });
      }
      getResolver(name2) {
        return __awaiter8(this, void 0, void 0, function* () {
          try {
            const address = yield this._getResolver(name2);
            if (address == null) {
              return null;
            }
            return new Resolver(this, address, name2);
          } catch (error) {
            if (error.code === Logger.errors.CALL_EXCEPTION) {
              return null;
            }
            throw error;
          }
        });
      }
      _getResolver(name2) {
        return __awaiter8(this, void 0, void 0, function* () {
          const network = yield this.getNetwork();
          if (!network.ensAddress) {
            logger19.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, { operation: "ENS", network: network.name });
          }
          const transaction = {
            to: network.ensAddress,
            data: "0x0178b8bf" + namehash(name2).substring(2)
          };
          try {
            return this.formatter.callAddress(yield this.call(transaction));
          } catch (error) {
            if (error.code === Logger.errors.CALL_EXCEPTION) {
              return null;
            }
            throw error;
          }
        });
      }
      resolveName(name2) {
        return __awaiter8(this, void 0, void 0, function* () {
          name2 = yield name2;
          try {
            return Promise.resolve(this.formatter.address(name2));
          } catch (error) {
            if (isHexString(name2)) {
              throw error;
            }
          }
          if (typeof name2 !== "string") {
            logger19.throwArgumentError("invalid ENS name", "name", name2);
          }
          const resolver = yield this.getResolver(name2);
          if (!resolver) {
            return null;
          }
          return yield resolver.getAddress();
        });
      }
      lookupAddress(address) {
        return __awaiter8(this, void 0, void 0, function* () {
          address = yield address;
          address = this.formatter.address(address);
          const reverseName = address.substring(2).toLowerCase() + ".addr.reverse";
          const resolverAddress = yield this._getResolver(reverseName);
          if (!resolverAddress) {
            return null;
          }
          let bytes = arrayify(yield this.call({
            to: resolverAddress,
            data: "0x691f3431" + namehash(reverseName).substring(2)
          }));
          if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {
            return null;
          }
          bytes = bytes.slice(32);
          if (bytes.length < 32) {
            return null;
          }
          const length2 = BigNumber.from(bytes.slice(0, 32)).toNumber();
          bytes = bytes.slice(32);
          if (length2 > bytes.length) {
            return null;
          }
          const name2 = toUtf8String(bytes.slice(0, length2));
          const addr = yield this.resolveName(name2);
          if (addr != address) {
            return null;
          }
          return name2;
        });
      }
      getAvatar(nameOrAddress) {
        return __awaiter8(this, void 0, void 0, function* () {
          let resolver = null;
          if (isHexString(nameOrAddress)) {
            const address = this.formatter.address(nameOrAddress);
            const reverseName = address.substring(2).toLowerCase() + ".addr.reverse";
            const resolverAddress = yield this._getResolver(reverseName);
            if (!resolverAddress) {
              return null;
            }
            resolver = new Resolver(this, resolverAddress, "_", address);
          } else {
            resolver = yield this.getResolver(nameOrAddress);
            if (!resolver) {
              return null;
            }
          }
          const avatar = yield resolver.getAvatar();
          if (avatar == null) {
            return null;
          }
          return avatar.url;
        });
      }
      perform(method, params) {
        return logger19.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
      }
      _startEvent(event) {
        this.polling = this._events.filter((e) => e.pollable()).length > 0;
      }
      _stopEvent(event) {
        this.polling = this._events.filter((e) => e.pollable()).length > 0;
      }
      _addEventListener(eventName, listener, once) {
        const event = new Event(getEventTag2(eventName), listener, once);
        this._events.push(event);
        this._startEvent(event);
        return this;
      }
      on(eventName, listener) {
        return this._addEventListener(eventName, listener, false);
      }
      once(eventName, listener) {
        return this._addEventListener(eventName, listener, true);
      }
      emit(eventName, ...args) {
        let result = false;
        let stopped = [];
        let eventTag = getEventTag2(eventName);
        this._events = this._events.filter((event) => {
          if (event.tag !== eventTag) {
            return true;
          }
          setTimeout(() => {
            event.listener.apply(this, args);
          }, 0);
          result = true;
          if (event.once) {
            stopped.push(event);
            return false;
          }
          return true;
        });
        stopped.forEach((event) => {
          this._stopEvent(event);
        });
        return result;
      }
      listenerCount(eventName) {
        if (!eventName) {
          return this._events.length;
        }
        let eventTag = getEventTag2(eventName);
        return this._events.filter((event) => {
          return event.tag === eventTag;
        }).length;
      }
      listeners(eventName) {
        if (eventName == null) {
          return this._events.map((event) => event.listener);
        }
        let eventTag = getEventTag2(eventName);
        return this._events.filter((event) => event.tag === eventTag).map((event) => event.listener);
      }
      off(eventName, listener) {
        if (listener == null) {
          return this.removeAllListeners(eventName);
        }
        const stopped = [];
        let found = false;
        let eventTag = getEventTag2(eventName);
        this._events = this._events.filter((event) => {
          if (event.tag !== eventTag || event.listener != listener) {
            return true;
          }
          if (found) {
            return true;
          }
          found = true;
          stopped.push(event);
          return false;
        });
        stopped.forEach((event) => {
          this._stopEvent(event);
        });
        return this;
      }
      removeAllListeners(eventName) {
        let stopped = [];
        if (eventName == null) {
          stopped = this._events;
          this._events = [];
        } else {
          const eventTag = getEventTag2(eventName);
          this._events = this._events.filter((event) => {
            if (event.tag !== eventTag) {
              return true;
            }
            stopped.push(event);
            return false;
          });
        }
        stopped.forEach((event) => {
          this._stopEvent(event);
        });
        return this;
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js
function checkError(method, error, params) {
  if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
    const e = error.error;
    if (e && e.message.match("reverted") && isHexString(e.data)) {
      return e.data;
    }
    logger20.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
      error,
      data: "0x"
    });
  }
  let message = error.message;
  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
    message = error.error.message;
  } else if (typeof error.body === "string") {
    message = error.body;
  } else if (typeof error.responseText === "string") {
    message = error.responseText;
  }
  message = (message || "").toLowerCase();
  const transaction = params.transaction || params.signedTransaction;
  if (message.match(/insufficient funds|base fee exceeds gas limit/)) {
    logger20.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/nonce too low/)) {
    logger20.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/replacement transaction underpriced/)) {
    logger20.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/only replay-protected/)) {
    logger20.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, {
      error,
      method,
      transaction
    });
  }
  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
    logger20.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error,
      method,
      transaction
    });
  }
  throw error;
}
function timer(timeout) {
  return new Promise(function(resolve) {
    setTimeout(resolve, timeout);
  });
}
function getResult(payload) {
  if (payload.error) {
    const error = new Error(payload.error.message);
    error.code = payload.error.code;
    error.data = payload.error.data;
    throw error;
  }
  return payload.result;
}
function getLowerCase(value) {
  if (value) {
    return value.toLowerCase();
  }
  return value;
}
var __awaiter9, logger20, errorGas, _constructorGuard3, JsonRpcSigner, UncheckedJsonRpcSigner, allowedTransactionKeys3, JsonRpcProvider;
var init_json_rpc_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js"() {
    "use strict";
    init_react();
    init_lib15();
    init_lib3();
    init_lib2();
    init_lib10();
    init_lib4();
    init_lib9();
    init_lib12();
    init_lib27();
    init_lib();
    init_version13();
    init_base_provider();
    __awaiter9 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger20 = new Logger(version13);
    errorGas = ["call", "estimateGas"];
    _constructorGuard3 = {};
    JsonRpcSigner = class extends Signer {
      constructor(constructorGuard, provider, addressOrIndex) {
        logger20.checkNew(new.target, JsonRpcSigner);
        super();
        if (constructorGuard !== _constructorGuard3) {
          throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
        }
        defineReadOnly(this, "provider", provider);
        if (addressOrIndex == null) {
          addressOrIndex = 0;
        }
        if (typeof addressOrIndex === "string") {
          defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
          defineReadOnly(this, "_index", null);
        } else if (typeof addressOrIndex === "number") {
          defineReadOnly(this, "_index", addressOrIndex);
          defineReadOnly(this, "_address", null);
        } else {
          logger20.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
        }
      }
      connect(provider) {
        return logger20.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "connect"
        });
      }
      connectUnchecked() {
        return new UncheckedJsonRpcSigner(_constructorGuard3, this.provider, this._address || this._index);
      }
      getAddress() {
        if (this._address) {
          return Promise.resolve(this._address);
        }
        return this.provider.send("eth_accounts", []).then((accounts) => {
          if (accounts.length <= this._index) {
            logger20.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "getAddress"
            });
          }
          return this.provider.formatter.address(accounts[this._index]);
        });
      }
      sendUncheckedTransaction(transaction) {
        transaction = shallowCopy(transaction);
        const fromAddress = this.getAddress().then((address) => {
          if (address) {
            address = address.toLowerCase();
          }
          return address;
        });
        if (transaction.gasLimit == null) {
          const estimate = shallowCopy(transaction);
          estimate.from = fromAddress;
          transaction.gasLimit = this.provider.estimateGas(estimate);
        }
        if (transaction.to != null) {
          transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter9(this, void 0, void 0, function* () {
            if (to == null) {
              return null;
            }
            const address = yield this.provider.resolveName(to);
            if (address == null) {
              logger20.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
            }
            return address;
          }));
        }
        return resolveProperties({
          tx: resolveProperties(transaction),
          sender: fromAddress
        }).then(({ tx, sender }) => {
          if (tx.from != null) {
            if (tx.from.toLowerCase() !== sender) {
              logger20.throwArgumentError("from address mismatch", "transaction", transaction);
            }
          } else {
            tx.from = sender;
          }
          const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
          return this.provider.send("eth_sendTransaction", [hexTx]).then((hash3) => {
            return hash3;
          }, (error) => {
            return checkError("sendTransaction", error, hexTx);
          });
        });
      }
      signTransaction(transaction) {
        return logger20.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "signTransaction"
        });
      }
      sendTransaction(transaction) {
        return __awaiter9(this, void 0, void 0, function* () {
          const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
          const hash3 = yield this.sendUncheckedTransaction(transaction);
          try {
            return yield poll(() => __awaiter9(this, void 0, void 0, function* () {
              const tx = yield this.provider.getTransaction(hash3);
              if (tx === null) {
                return void 0;
              }
              return this.provider._wrapTransaction(tx, hash3, blockNumber);
            }), { oncePoll: this.provider });
          } catch (error) {
            error.transactionHash = hash3;
            throw error;
          }
        });
      }
      signMessage(message) {
        return __awaiter9(this, void 0, void 0, function* () {
          const data = typeof message === "string" ? toUtf8Bytes(message) : message;
          const address = yield this.getAddress();
          return yield this.provider.send("personal_sign", [hexlify(data), address.toLowerCase()]);
        });
      }
      _legacySignMessage(message) {
        return __awaiter9(this, void 0, void 0, function* () {
          const data = typeof message === "string" ? toUtf8Bytes(message) : message;
          const address = yield this.getAddress();
          return yield this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data)]);
        });
      }
      _signTypedData(domain, types, value) {
        return __awaiter9(this, void 0, void 0, function* () {
          const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name2) => {
            return this.provider.resolveName(name2);
          });
          const address = yield this.getAddress();
          return yield this.provider.send("eth_signTypedData_v4", [
            address.toLowerCase(),
            JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
          ]);
        });
      }
      unlock(password) {
        return __awaiter9(this, void 0, void 0, function* () {
          const provider = this.provider;
          const address = yield this.getAddress();
          return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
        });
      }
    };
    UncheckedJsonRpcSigner = class extends JsonRpcSigner {
      sendTransaction(transaction) {
        return this.sendUncheckedTransaction(transaction).then((hash3) => {
          return {
            hash: hash3,
            nonce: null,
            gasLimit: null,
            gasPrice: null,
            data: null,
            value: null,
            chainId: null,
            confirmations: 0,
            from: null,
            wait: (confirmations) => {
              return this.provider.waitForTransaction(hash3, confirmations);
            }
          };
        });
      }
    };
    allowedTransactionKeys3 = {
      chainId: true,
      data: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      value: true,
      type: true,
      accessList: true,
      maxFeePerGas: true,
      maxPriorityFeePerGas: true
    };
    JsonRpcProvider = class extends BaseProvider {
      constructor(url, network) {
        logger20.checkNew(new.target, JsonRpcProvider);
        let networkOrReady = network;
        if (networkOrReady == null) {
          networkOrReady = new Promise((resolve, reject) => {
            setTimeout(() => {
              this.detectNetwork().then((network2) => {
                resolve(network2);
              }, (error) => {
                reject(error);
              });
            }, 0);
          });
        }
        super(networkOrReady);
        if (!url) {
          url = getStatic(this.constructor, "defaultUrl")();
        }
        if (typeof url === "string") {
          defineReadOnly(this, "connection", Object.freeze({
            url
          }));
        } else {
          defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
        }
        this._nextId = 42;
      }
      get _cache() {
        if (this._eventLoopCache == null) {
          this._eventLoopCache = {};
        }
        return this._eventLoopCache;
      }
      static defaultUrl() {
        return "http://localhost:8545";
      }
      detectNetwork() {
        if (!this._cache["detectNetwork"]) {
          this._cache["detectNetwork"] = this._uncachedDetectNetwork();
          setTimeout(() => {
            this._cache["detectNetwork"] = null;
          }, 0);
        }
        return this._cache["detectNetwork"];
      }
      _uncachedDetectNetwork() {
        return __awaiter9(this, void 0, void 0, function* () {
          yield timer(0);
          let chainId = null;
          try {
            chainId = yield this.send("eth_chainId", []);
          } catch (error) {
            try {
              chainId = yield this.send("net_version", []);
            } catch (error2) {
            }
          }
          if (chainId != null) {
            const getNetwork2 = getStatic(this.constructor, "getNetwork");
            try {
              return getNetwork2(BigNumber.from(chainId).toNumber());
            } catch (error) {
              return logger20.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                chainId,
                event: "invalidNetwork",
                serverError: error
              });
            }
          }
          return logger20.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
            event: "noNetwork"
          });
        });
      }
      getSigner(addressOrIndex) {
        return new JsonRpcSigner(_constructorGuard3, this, addressOrIndex);
      }
      getUncheckedSigner(addressOrIndex) {
        return this.getSigner(addressOrIndex).connectUnchecked();
      }
      listAccounts() {
        return this.send("eth_accounts", []).then((accounts) => {
          return accounts.map((a2) => this.formatter.address(a2));
        });
      }
      send(method, params) {
        const request = {
          method,
          params,
          id: this._nextId++,
          jsonrpc: "2.0"
        };
        this.emit("debug", {
          action: "request",
          request: deepCopy(request),
          provider: this
        });
        const cache = ["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0;
        if (cache && this._cache[method]) {
          return this._cache[method];
        }
        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result2) => {
          this.emit("debug", {
            action: "response",
            request,
            response: result2,
            provider: this
          });
          return result2;
        }, (error) => {
          this.emit("debug", {
            action: "response",
            error,
            request,
            provider: this
          });
          throw error;
        });
        if (cache) {
          this._cache[method] = result;
          setTimeout(() => {
            this._cache[method] = null;
          }, 0);
        }
        return result;
      }
      prepareRequest(method, params) {
        switch (method) {
          case "getBlockNumber":
            return ["eth_blockNumber", []];
          case "getGasPrice":
            return ["eth_gasPrice", []];
          case "getBalance":
            return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
          case "getTransactionCount":
            return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
          case "getCode":
            return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
          case "getStorageAt":
            return ["eth_getStorageAt", [getLowerCase(params.address), params.position, params.blockTag]];
          case "sendTransaction":
            return ["eth_sendRawTransaction", [params.signedTransaction]];
          case "getBlock":
            if (params.blockTag) {
              return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
            } else if (params.blockHash) {
              return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
            }
            return null;
          case "getTransaction":
            return ["eth_getTransactionByHash", [params.transactionHash]];
          case "getTransactionReceipt":
            return ["eth_getTransactionReceipt", [params.transactionHash]];
          case "call": {
            const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
            return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
          }
          case "estimateGas": {
            const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
            return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
          }
          case "getLogs":
            if (params.filter && params.filter.address != null) {
              params.filter.address = getLowerCase(params.filter.address);
            }
            return ["eth_getLogs", [params.filter]];
          default:
            break;
        }
        return null;
      }
      perform(method, params) {
        return __awaiter9(this, void 0, void 0, function* () {
          if (method === "call" || method === "estimateGas") {
            const tx = params.transaction;
            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {
              if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                const feeData = yield this.getFeeData();
                if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                  params = shallowCopy(params);
                  params.transaction = shallowCopy(tx);
                  delete params.transaction.type;
                }
              }
            }
          }
          const args = this.prepareRequest(method, params);
          if (args == null) {
            logger20.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
          }
          try {
            return yield this.send(args[0], args[1]);
          } catch (error) {
            return checkError(method, error, params);
          }
        });
      }
      _startEvent(event) {
        if (event.tag === "pending") {
          this._startPending();
        }
        super._startEvent(event);
      }
      _startPending() {
        if (this._pendingFilter != null) {
          return;
        }
        const self2 = this;
        const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
        this._pendingFilter = pendingFilter;
        pendingFilter.then(function(filterId) {
          function poll2() {
            self2.send("eth_getFilterChanges", [filterId]).then(function(hashes) {
              if (self2._pendingFilter != pendingFilter) {
                return null;
              }
              let seq = Promise.resolve();
              hashes.forEach(function(hash3) {
                self2._emitted["t:" + hash3.toLowerCase()] = "pending";
                seq = seq.then(function() {
                  return self2.getTransaction(hash3).then(function(tx) {
                    self2.emit("pending", tx);
                    return null;
                  });
                });
              });
              return seq.then(function() {
                return timer(1e3);
              });
            }).then(function() {
              if (self2._pendingFilter != pendingFilter) {
                self2.send("eth_uninstallFilter", [filterId]);
                return;
              }
              setTimeout(function() {
                poll2();
              }, 0);
              return null;
            }).catch((error) => {
            });
          }
          poll2();
          return filterId;
        }).catch((error) => {
        });
      }
      _stopEvent(event) {
        if (event.tag === "pending" && this.listenerCount("pending") === 0) {
          this._pendingFilter = null;
        }
        super._stopEvent(event);
      }
      static hexlifyTransaction(transaction, allowExtra) {
        const allowed = shallowCopy(allowedTransactionKeys3);
        if (allowExtra) {
          for (const key in allowExtra) {
            if (allowExtra[key]) {
              allowed[key] = true;
            }
          }
        }
        checkProperties(transaction, allowed);
        const result = {};
        ["gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function(key) {
          if (transaction[key] == null) {
            return;
          }
          const value = hexValue(transaction[key]);
          if (key === "gasLimit") {
            key = "gas";
          }
          result[key] = value;
        });
        ["from", "to", "data"].forEach(function(key) {
          if (transaction[key] == null) {
            return;
          }
          result[key] = hexlify(transaction[key]);
        });
        if (transaction.accessList) {
          result["accessList"] = accessListify(transaction.accessList);
        }
        return result;
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/ws.js
var WS;
var init_ws = __esm({
  "node_modules/@ethersproject/providers/lib.esm/ws.js"() {
    "use strict";
    init_react();
    init_lib();
    init_version13();
    WS = null;
    try {
      WS = WebSocket;
      if (WS == null) {
        throw new Error("inject please");
      }
    } catch (error) {
      const logger35 = new Logger(version13);
      WS = function() {
        logger35.throwError("WebSockets not supported in this environment", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new WebSocket()"
        });
      };
    }
  }
});

// node_modules/@ethersproject/providers/lib.esm/websocket-provider.js
var __awaiter10, logger21, NextId, WebSocketProvider;
var init_websocket_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/websocket-provider.js"() {
    "use strict";
    init_react();
    init_lib3();
    init_lib4();
    init_json_rpc_provider();
    init_ws();
    init_lib();
    init_version13();
    __awaiter10 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger21 = new Logger(version13);
    NextId = 1;
    WebSocketProvider = class extends JsonRpcProvider {
      constructor(url, network) {
        if (network === "any") {
          logger21.throwError("WebSocketProvider does not support 'any' network yet", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "network:any"
          });
        }
        super(url, network);
        this._pollingInterval = -1;
        this._wsReady = false;
        defineReadOnly(this, "_websocket", new WS(this.connection.url));
        defineReadOnly(this, "_requests", {});
        defineReadOnly(this, "_subs", {});
        defineReadOnly(this, "_subIds", {});
        defineReadOnly(this, "_detectNetwork", super.detectNetwork());
        this._websocket.onopen = () => {
          this._wsReady = true;
          Object.keys(this._requests).forEach((id2) => {
            this._websocket.send(this._requests[id2].payload);
          });
        };
        this._websocket.onmessage = (messageEvent) => {
          const data = messageEvent.data;
          const result = JSON.parse(data);
          if (result.id != null) {
            const id2 = String(result.id);
            const request = this._requests[id2];
            delete this._requests[id2];
            if (result.result !== void 0) {
              request.callback(null, result.result);
              this.emit("debug", {
                action: "response",
                request: JSON.parse(request.payload),
                response: result.result,
                provider: this
              });
            } else {
              let error = null;
              if (result.error) {
                error = new Error(result.error.message || "unknown error");
                defineReadOnly(error, "code", result.error.code || null);
                defineReadOnly(error, "response", data);
              } else {
                error = new Error("unknown error");
              }
              request.callback(error, void 0);
              this.emit("debug", {
                action: "response",
                error,
                request: JSON.parse(request.payload),
                provider: this
              });
            }
          } else if (result.method === "eth_subscription") {
            const sub = this._subs[result.params.subscription];
            if (sub) {
              sub.processFunc(result.params.result);
            }
          } else {
            console.warn("this should not happen");
          }
        };
        const fauxPoll = setInterval(() => {
          this.emit("poll");
        }, 1e3);
        if (fauxPoll.unref) {
          fauxPoll.unref();
        }
      }
      detectNetwork() {
        return this._detectNetwork;
      }
      get pollingInterval() {
        return 0;
      }
      resetEventsBlock(blockNumber) {
        logger21.throwError("cannot reset events block on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "resetEventBlock"
        });
      }
      set pollingInterval(value) {
        logger21.throwError("cannot set polling interval on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setPollingInterval"
        });
      }
      poll() {
        return __awaiter10(this, void 0, void 0, function* () {
          return null;
        });
      }
      set polling(value) {
        if (!value) {
          return;
        }
        logger21.throwError("cannot set polling on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setPolling"
        });
      }
      send(method, params) {
        const rid = NextId++;
        return new Promise((resolve, reject) => {
          function callback(error, result) {
            if (error) {
              return reject(error);
            }
            return resolve(result);
          }
          const payload = JSON.stringify({
            method,
            params,
            id: rid,
            jsonrpc: "2.0"
          });
          this.emit("debug", {
            action: "request",
            request: JSON.parse(payload),
            provider: this
          });
          this._requests[String(rid)] = { callback, payload };
          if (this._wsReady) {
            this._websocket.send(payload);
          }
        });
      }
      static defaultUrl() {
        return "ws://localhost:8546";
      }
      _subscribe(tag, param, processFunc) {
        return __awaiter10(this, void 0, void 0, function* () {
          let subIdPromise = this._subIds[tag];
          if (subIdPromise == null) {
            subIdPromise = Promise.all(param).then((param2) => {
              return this.send("eth_subscribe", param2);
            });
            this._subIds[tag] = subIdPromise;
          }
          const subId = yield subIdPromise;
          this._subs[subId] = { tag, processFunc };
        });
      }
      _startEvent(event) {
        switch (event.type) {
          case "block":
            this._subscribe("block", ["newHeads"], (result) => {
              const blockNumber = BigNumber.from(result.number).toNumber();
              this._emitted.block = blockNumber;
              this.emit("block", blockNumber);
            });
            break;
          case "pending":
            this._subscribe("pending", ["newPendingTransactions"], (result) => {
              this.emit("pending", result);
            });
            break;
          case "filter":
            this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], (result) => {
              if (result.removed == null) {
                result.removed = false;
              }
              this.emit(event.filter, this.formatter.filterLog(result));
            });
            break;
          case "tx": {
            const emitReceipt = (event2) => {
              const hash3 = event2.hash;
              this.getTransactionReceipt(hash3).then((receipt) => {
                if (!receipt) {
                  return;
                }
                this.emit(hash3, receipt);
              });
            };
            emitReceipt(event);
            this._subscribe("tx", ["newHeads"], (result) => {
              this._events.filter((e) => e.type === "tx").forEach(emitReceipt);
            });
            break;
          }
          case "debug":
          case "poll":
          case "willPoll":
          case "didPoll":
          case "error":
            break;
          default:
            console.log("unhandled:", event);
            break;
        }
      }
      _stopEvent(event) {
        let tag = event.tag;
        if (event.type === "tx") {
          if (this._events.filter((e) => e.type === "tx").length) {
            return;
          }
          tag = "tx";
        } else if (this.listenerCount(event.event)) {
          return;
        }
        const subId = this._subIds[tag];
        if (!subId) {
          return;
        }
        delete this._subIds[tag];
        subId.then((subId2) => {
          if (!this._subs[subId2]) {
            return;
          }
          delete this._subs[subId2];
          this.send("eth_unsubscribe", [subId2]);
        });
      }
      destroy() {
        return __awaiter10(this, void 0, void 0, function* () {
          if (this._websocket.readyState === WS.CONNECTING) {
            yield new Promise((resolve) => {
              this._websocket.onopen = function() {
                resolve(true);
              };
              this._websocket.onerror = function() {
                resolve(false);
              };
            });
          }
          this._websocket.close(1e3);
        });
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js
var __awaiter11, logger22, StaticJsonRpcProvider, UrlJsonRpcProvider;
var init_url_json_rpc_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js"() {
    "use strict";
    init_react();
    init_lib4();
    init_lib();
    init_version13();
    init_json_rpc_provider();
    __awaiter11 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger22 = new Logger(version13);
    StaticJsonRpcProvider = class extends JsonRpcProvider {
      detectNetwork() {
        const _super = Object.create(null, {
          detectNetwork: { get: () => super.detectNetwork }
        });
        return __awaiter11(this, void 0, void 0, function* () {
          let network = this.network;
          if (network == null) {
            network = yield _super.detectNetwork.call(this);
            if (!network) {
              logger22.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
            }
            if (this._network == null) {
              defineReadOnly(this, "_network", network);
              this.emit("network", network, null);
            }
          }
          return network;
        });
      }
    };
    UrlJsonRpcProvider = class extends StaticJsonRpcProvider {
      constructor(network, apiKey) {
        logger22.checkAbstract(new.target, UrlJsonRpcProvider);
        network = getStatic(new.target, "getNetwork")(network);
        apiKey = getStatic(new.target, "getApiKey")(apiKey);
        const connection = getStatic(new.target, "getUrl")(network, apiKey);
        super(connection, network);
        if (typeof apiKey === "string") {
          defineReadOnly(this, "apiKey", apiKey);
        } else if (apiKey != null) {
          Object.keys(apiKey).forEach((key) => {
            defineReadOnly(this, key, apiKey[key]);
          });
        }
      }
      _startPending() {
        logger22.warn("WARNING: API provider does not support pending filters");
      }
      isCommunityResource() {
        return false;
      }
      getSigner(address) {
        return logger22.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
      }
      listAccounts() {
        return Promise.resolve([]);
      }
      static getApiKey(apiKey) {
        return apiKey;
      }
      static getUrl(network, apiKey) {
        return logger22.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, {
          operation: "getUrl"
        });
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js
var logger23, defaultApiKey, AlchemyWebSocketProvider, AlchemyProvider;
var init_alchemy_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js"() {
    "use strict";
    init_react();
    init_lib4();
    init_formatter();
    init_websocket_provider();
    init_lib();
    init_version13();
    init_url_json_rpc_provider();
    logger23 = new Logger(version13);
    defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    AlchemyWebSocketProvider = class extends WebSocketProvider {
      constructor(network, apiKey) {
        const provider = new AlchemyProvider(network, apiKey);
        const url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
        super(url, provider.network);
        defineReadOnly(this, "apiKey", provider.apiKey);
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
    };
    AlchemyProvider = class extends UrlJsonRpcProvider {
      static getWebSocketProvider(network, apiKey) {
        return new AlchemyWebSocketProvider(network, apiKey);
      }
      static getApiKey(apiKey) {
        if (apiKey == null) {
          return defaultApiKey;
        }
        if (apiKey && typeof apiKey !== "string") {
          logger23.throwArgumentError("invalid apiKey", "apiKey", apiKey);
        }
        return apiKey;
      }
      static getUrl(network, apiKey) {
        let host = null;
        switch (network.name) {
          case "homestead":
            host = "eth-mainnet.alchemyapi.io/v2/";
            break;
          case "ropsten":
            host = "eth-ropsten.alchemyapi.io/v2/";
            break;
          case "rinkeby":
            host = "eth-rinkeby.alchemyapi.io/v2/";
            break;
          case "goerli":
            host = "eth-goerli.alchemyapi.io/v2/";
            break;
          case "kovan":
            host = "eth-kovan.alchemyapi.io/v2/";
            break;
          case "matic":
            host = "polygon-mainnet.g.alchemy.com/v2/";
            break;
          case "maticmum":
            host = "polygon-mumbai.g.alchemy.com/v2/";
            break;
          case "arbitrum":
            host = "arb-mainnet.g.alchemy.com/v2/";
            break;
          case "arbitrum-rinkeby":
            host = "arb-rinkeby.g.alchemy.com/v2/";
            break;
          case "optimism":
            host = "opt-mainnet.g.alchemy.com/v2/";
            break;
          case "optimism-kovan":
            host = "opt-kovan.g.alchemy.com/v2/";
            break;
          default:
            logger23.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return {
          allowGzip: true,
          url: "https://" + host + apiKey,
          throttleCallback: (attempt, url) => {
            if (apiKey === defaultApiKey) {
              showThrottleMessage();
            }
            return Promise.resolve(true);
          }
        };
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js
var __awaiter12, logger24, CloudflareProvider;
var init_cloudflare_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js"() {
    "use strict";
    init_react();
    init_url_json_rpc_provider();
    init_lib();
    init_version13();
    __awaiter12 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger24 = new Logger(version13);
    CloudflareProvider = class extends UrlJsonRpcProvider {
      static getApiKey(apiKey) {
        if (apiKey != null) {
          logger24.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
        }
        return null;
      }
      static getUrl(network, apiKey) {
        let host = null;
        switch (network.name) {
          case "homestead":
            host = "https://cloudflare-eth.com/";
            break;
          default:
            logger24.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return host;
      }
      perform(method, params) {
        const _super = Object.create(null, {
          perform: { get: () => super.perform }
        });
        return __awaiter12(this, void 0, void 0, function* () {
          if (method === "getBlockNumber") {
            const block = yield _super.perform.call(this, "getBlock", { blockTag: "latest" });
            return block.number;
          }
          return _super.perform.call(this, method, params);
        });
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js
function getTransactionPostData(transaction) {
  const result = {};
  for (let key in transaction) {
    if (transaction[key] == null) {
      continue;
    }
    let value = transaction[key];
    if (key === "type" && value === 0) {
      continue;
    }
    if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
      value = hexValue(hexlify(value));
    } else if (key === "accessList") {
      value = "[" + accessListify(value).map((set) => {
        return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
      }).join(",") + "]";
    } else {
      value = hexlify(value);
    }
    result[key] = value;
  }
  return result;
}
function getResult2(result) {
  if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
    return result.result;
  }
  if (result.status != 1 || result.message != "OK") {
    const error = new Error("invalid response");
    error.result = JSON.stringify(result);
    if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
      error.throttleRetry = true;
    }
    throw error;
  }
  return result.result;
}
function getJsonResult(result) {
  if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
    const error = new Error("throttled response");
    error.result = JSON.stringify(result);
    error.throttleRetry = true;
    throw error;
  }
  if (result.jsonrpc != "2.0") {
    const error = new Error("invalid response");
    error.result = JSON.stringify(result);
    throw error;
  }
  if (result.error) {
    const error = new Error(result.error.message || "unknown error");
    if (result.error.code) {
      error.code = result.error.code;
    }
    if (result.error.data) {
      error.data = result.error.data;
    }
    throw error;
  }
  return result.result;
}
function checkLogTag(blockTag) {
  if (blockTag === "pending") {
    throw new Error("pending not supported");
  }
  if (blockTag === "latest") {
    return blockTag;
  }
  return parseInt(blockTag.substring(2), 16);
}
function checkError2(method, error, transaction) {
  if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
    const e = error.error;
    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
      let data = e.data;
      if (data) {
        data = "0x" + data.replace(/^.*0x/i, "");
      }
      if (isHexString(data)) {
        return data;
      }
      logger25.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
        error,
        data: "0x"
      });
    }
  }
  let message = error.message;
  if (error.code === Logger.errors.SERVER_ERROR) {
    if (error.error && typeof error.error.message === "string") {
      message = error.error.message;
    } else if (typeof error.body === "string") {
      message = error.body;
    } else if (typeof error.responseText === "string") {
      message = error.responseText;
    }
  }
  message = (message || "").toLowerCase();
  if (message.match(/insufficient funds/)) {
    logger25.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
    logger25.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/another transaction with same nonce/)) {
    logger25.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/execution failed due to an exception|execution reverted/)) {
    logger25.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error,
      method,
      transaction
    });
  }
  throw error;
}
var __awaiter13, logger25, defaultApiKey2, EtherscanProvider;
var init_etherscan_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js"() {
    "use strict";
    init_react();
    init_lib2();
    init_lib4();
    init_lib12();
    init_lib27();
    init_formatter();
    init_lib();
    init_version13();
    init_base_provider();
    __awaiter13 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger25 = new Logger(version13);
    defaultApiKey2 = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
    EtherscanProvider = class extends BaseProvider {
      constructor(network, apiKey) {
        logger25.checkNew(new.target, EtherscanProvider);
        super(network);
        defineReadOnly(this, "baseUrl", this.getBaseUrl());
        defineReadOnly(this, "apiKey", apiKey || defaultApiKey2);
      }
      getBaseUrl() {
        switch (this.network ? this.network.name : "invalid") {
          case "homestead":
            return "https://api.etherscan.io";
          case "ropsten":
            return "https://api-ropsten.etherscan.io";
          case "rinkeby":
            return "https://api-rinkeby.etherscan.io";
          case "kovan":
            return "https://api-kovan.etherscan.io";
          case "goerli":
            return "https://api-goerli.etherscan.io";
          default:
        }
        return logger25.throwArgumentError("unsupported network", "network", name);
      }
      getUrl(module, params) {
        const query = Object.keys(params).reduce((accum, key) => {
          const value = params[key];
          if (value != null) {
            accum += `&${key}=${value}`;
          }
          return accum;
        }, "");
        const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
        return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
      }
      getPostUrl() {
        return `${this.baseUrl}/api`;
      }
      getPostData(module, params) {
        params.module = module;
        params.apikey = this.apiKey;
        return params;
      }
      fetch(module, params, post) {
        return __awaiter13(this, void 0, void 0, function* () {
          const url = post ? this.getPostUrl() : this.getUrl(module, params);
          const payload = post ? this.getPostData(module, params) : null;
          const procFunc = module === "proxy" ? getJsonResult : getResult2;
          this.emit("debug", {
            action: "request",
            request: url,
            provider: this
          });
          const connection = {
            url,
            throttleSlotInterval: 1e3,
            throttleCallback: (attempt, url2) => {
              if (this.isCommunityResource()) {
                showThrottleMessage();
              }
              return Promise.resolve(true);
            }
          };
          let payloadStr = null;
          if (payload) {
            connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
            payloadStr = Object.keys(payload).map((key) => {
              return `${key}=${payload[key]}`;
            }).join("&");
          }
          const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);
          this.emit("debug", {
            action: "response",
            request: url,
            response: deepCopy(result),
            provider: this
          });
          return result;
        });
      }
      detectNetwork() {
        return __awaiter13(this, void 0, void 0, function* () {
          return this.network;
        });
      }
      perform(method, params) {
        const _super = Object.create(null, {
          perform: { get: () => super.perform }
        });
        return __awaiter13(this, void 0, void 0, function* () {
          switch (method) {
            case "getBlockNumber":
              return this.fetch("proxy", { action: "eth_blockNumber" });
            case "getGasPrice":
              return this.fetch("proxy", { action: "eth_gasPrice" });
            case "getBalance":
              return this.fetch("account", {
                action: "balance",
                address: params.address,
                tag: params.blockTag
              });
            case "getTransactionCount":
              return this.fetch("proxy", {
                action: "eth_getTransactionCount",
                address: params.address,
                tag: params.blockTag
              });
            case "getCode":
              return this.fetch("proxy", {
                action: "eth_getCode",
                address: params.address,
                tag: params.blockTag
              });
            case "getStorageAt":
              return this.fetch("proxy", {
                action: "eth_getStorageAt",
                address: params.address,
                position: params.position,
                tag: params.blockTag
              });
            case "sendTransaction":
              return this.fetch("proxy", {
                action: "eth_sendRawTransaction",
                hex: params.signedTransaction
              }, true).catch((error) => {
                return checkError2("sendTransaction", error, params.signedTransaction);
              });
            case "getBlock":
              if (params.blockTag) {
                return this.fetch("proxy", {
                  action: "eth_getBlockByNumber",
                  tag: params.blockTag,
                  boolean: params.includeTransactions ? "true" : "false"
                });
              }
              throw new Error("getBlock by blockHash not implemented");
            case "getTransaction":
              return this.fetch("proxy", {
                action: "eth_getTransactionByHash",
                txhash: params.transactionHash
              });
            case "getTransactionReceipt":
              return this.fetch("proxy", {
                action: "eth_getTransactionReceipt",
                txhash: params.transactionHash
              });
            case "call": {
              if (params.blockTag !== "latest") {
                throw new Error("EtherscanProvider does not support blockTag for call");
              }
              const postData = getTransactionPostData(params.transaction);
              postData.module = "proxy";
              postData.action = "eth_call";
              try {
                return yield this.fetch("proxy", postData, true);
              } catch (error) {
                return checkError2("call", error, params.transaction);
              }
            }
            case "estimateGas": {
              const postData = getTransactionPostData(params.transaction);
              postData.module = "proxy";
              postData.action = "eth_estimateGas";
              try {
                return yield this.fetch("proxy", postData, true);
              } catch (error) {
                return checkError2("estimateGas", error, params.transaction);
              }
            }
            case "getLogs": {
              const args = { action: "getLogs" };
              if (params.filter.fromBlock) {
                args.fromBlock = checkLogTag(params.filter.fromBlock);
              }
              if (params.filter.toBlock) {
                args.toBlock = checkLogTag(params.filter.toBlock);
              }
              if (params.filter.address) {
                args.address = params.filter.address;
              }
              if (params.filter.topics && params.filter.topics.length > 0) {
                if (params.filter.topics.length > 1) {
                  logger25.throwError("unsupported topic count", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                }
                if (params.filter.topics.length === 1) {
                  const topic0 = params.filter.topics[0];
                  if (typeof topic0 !== "string" || topic0.length !== 66) {
                    logger25.throwError("unsupported topic format", Logger.errors.UNSUPPORTED_OPERATION, { topic0 });
                  }
                  args.topic0 = topic0;
                }
              }
              const logs = yield this.fetch("logs", args);
              let blocks = {};
              for (let i = 0; i < logs.length; i++) {
                const log4 = logs[i];
                if (log4.blockHash != null) {
                  continue;
                }
                if (blocks[log4.blockNumber] == null) {
                  const block = yield this.getBlock(log4.blockNumber);
                  if (block) {
                    blocks[log4.blockNumber] = block.hash;
                  }
                }
                log4.blockHash = blocks[log4.blockNumber];
              }
              return logs;
            }
            case "getEtherPrice":
              if (this.network.name !== "homestead") {
                return 0;
              }
              return parseFloat((yield this.fetch("stats", { action: "ethprice" })).ethusd);
            default:
              break;
          }
          return _super.perform.call(this, method, params);
        });
      }
      getHistory(addressOrName, startBlock, endBlock) {
        return __awaiter13(this, void 0, void 0, function* () {
          const params = {
            action: "txlist",
            address: yield this.resolveName(addressOrName),
            startblock: startBlock == null ? 0 : startBlock,
            endblock: endBlock == null ? 99999999 : endBlock,
            sort: "asc"
          };
          const result = yield this.fetch("account", params);
          return result.map((tx) => {
            ["contractAddress", "to"].forEach(function(key) {
              if (tx[key] == "") {
                delete tx[key];
              }
            });
            if (tx.creates == null && tx.contractAddress != null) {
              tx.creates = tx.contractAddress;
            }
            const item = this.formatter.transactionResponse(tx);
            if (tx.timeStamp) {
              item.timestamp = parseInt(tx.timeStamp);
            }
            return item;
          });
        });
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey2;
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/fallback-provider.js
function now() {
  return new Date().getTime();
}
function checkNetworks(networks2) {
  let result = null;
  for (let i = 0; i < networks2.length; i++) {
    const network = networks2[i];
    if (network == null) {
      return null;
    }
    if (result) {
      if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
        logger26.throwArgumentError("provider mismatch", "networks", networks2);
      }
    } else {
      result = network;
    }
  }
  return result;
}
function median(values, maxDelta) {
  values = values.slice().sort();
  const middle = Math.floor(values.length / 2);
  if (values.length % 2) {
    return values[middle];
  }
  const a2 = values[middle - 1], b2 = values[middle];
  if (maxDelta != null && Math.abs(a2 - b2) > maxDelta) {
    return null;
  }
  return (a2 + b2) / 2;
}
function serialize2(value) {
  if (value === null) {
    return "null";
  } else if (typeof value === "number" || typeof value === "boolean") {
    return JSON.stringify(value);
  } else if (typeof value === "string") {
    return value;
  } else if (BigNumber.isBigNumber(value)) {
    return value.toString();
  } else if (Array.isArray(value)) {
    return JSON.stringify(value.map((i) => serialize2(i)));
  } else if (typeof value === "object") {
    const keys = Object.keys(value);
    keys.sort();
    return "{" + keys.map((key) => {
      let v2 = value[key];
      if (typeof v2 === "function") {
        v2 = "[function]";
      } else {
        v2 = serialize2(v2);
      }
      return JSON.stringify(key) + ":" + v2;
    }).join(",") + "}";
  }
  throw new Error("unknown value type: " + typeof value);
}
function stall2(duration) {
  let cancel = null;
  let timer2 = null;
  let promise = new Promise((resolve) => {
    cancel = function() {
      if (timer2) {
        clearTimeout(timer2);
        timer2 = null;
      }
      resolve();
    };
    timer2 = setTimeout(cancel, duration);
  });
  const wait = (func) => {
    promise = promise.then(func);
    return promise;
  };
  function getPromise() {
    return promise;
  }
  return { cancel, getPromise, wait };
}
function exposeDebugConfig(config, now2) {
  const result = {
    weight: config.weight
  };
  Object.defineProperty(result, "provider", { get: () => config.provider });
  if (config.start) {
    result.start = config.start;
  }
  if (now2) {
    result.duration = now2 - config.start;
  }
  if (config.done) {
    if (config.error) {
      result.error = config.error;
    } else {
      result.result = config.result || null;
    }
  }
  return result;
}
function normalizedTally(normalize, quorum) {
  return function(configs) {
    const tally = {};
    configs.forEach((c2) => {
      const value = normalize(c2.result);
      if (!tally[value]) {
        tally[value] = { count: 0, result: c2.result };
      }
      tally[value].count++;
    });
    const keys = Object.keys(tally);
    for (let i = 0; i < keys.length; i++) {
      const check = tally[keys[i]];
      if (check.count >= quorum) {
        return check.result;
      }
    }
    return void 0;
  };
}
function getProcessFunc(provider, method, params) {
  let normalize = serialize2;
  switch (method) {
    case "getBlockNumber":
      return function(configs) {
        const values = configs.map((c2) => c2.result);
        let blockNumber = median(configs.map((c2) => c2.result), 2);
        if (blockNumber == null) {
          return void 0;
        }
        blockNumber = Math.ceil(blockNumber);
        if (values.indexOf(blockNumber + 1) >= 0) {
          blockNumber++;
        }
        if (blockNumber >= provider._highestBlockNumber) {
          provider._highestBlockNumber = blockNumber;
        }
        return provider._highestBlockNumber;
      };
    case "getGasPrice":
      return function(configs) {
        const values = configs.map((c2) => c2.result);
        values.sort();
        return values[Math.floor(values.length / 2)];
      };
    case "getEtherPrice":
      return function(configs) {
        return median(configs.map((c2) => c2.result));
      };
    case "getBalance":
    case "getTransactionCount":
    case "getCode":
    case "getStorageAt":
    case "call":
    case "estimateGas":
    case "getLogs":
      break;
    case "getTransaction":
    case "getTransactionReceipt":
      normalize = function(tx) {
        if (tx == null) {
          return null;
        }
        tx = shallowCopy(tx);
        tx.confirmations = -1;
        return serialize2(tx);
      };
      break;
    case "getBlock":
      if (params.includeTransactions) {
        normalize = function(block) {
          if (block == null) {
            return null;
          }
          block = shallowCopy(block);
          block.transactions = block.transactions.map((tx) => {
            tx = shallowCopy(tx);
            tx.confirmations = -1;
            return tx;
          });
          return serialize2(block);
        };
      } else {
        normalize = function(block) {
          if (block == null) {
            return null;
          }
          return serialize2(block);
        };
      }
      break;
    default:
      throw new Error("unknown method: " + method);
  }
  return normalizedTally(normalize, provider.quorum);
}
function waitForSync(config, blockNumber) {
  return __awaiter14(this, void 0, void 0, function* () {
    const provider = config.provider;
    if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
      return provider;
    }
    return poll(() => {
      return new Promise((resolve, reject) => {
        setTimeout(function() {
          if (provider.blockNumber >= blockNumber) {
            return resolve(provider);
          }
          if (config.cancelled) {
            return resolve(null);
          }
          return resolve(void 0);
        }, 0);
      });
    }, { oncePoll: provider });
  });
}
function getRunner(config, currentBlockNumber, method, params) {
  return __awaiter14(this, void 0, void 0, function* () {
    let provider = config.provider;
    switch (method) {
      case "getBlockNumber":
      case "getGasPrice":
        return provider[method]();
      case "getEtherPrice":
        if (provider.getEtherPrice) {
          return provider.getEtherPrice();
        }
        break;
      case "getBalance":
      case "getTransactionCount":
      case "getCode":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[method](params.address, params.blockTag || "latest");
      case "getStorageAt":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
      case "getBlock":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash);
      case "call":
      case "estimateGas":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[method](params.transaction);
      case "getTransaction":
      case "getTransactionReceipt":
        return provider[method](params.transactionHash);
      case "getLogs": {
        let filter = params.filter;
        if (filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider.getLogs(filter);
      }
    }
    return logger26.throwError("unknown method error", Logger.errors.UNKNOWN_ERROR, {
      method,
      params
    });
  });
}
var __awaiter14, logger26, nextRid, ForwardErrors, ForwardProperties, FallbackProvider;
var init_fallback_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/fallback-provider.js"() {
    "use strict";
    init_react();
    init_lib14();
    init_lib3();
    init_lib2();
    init_lib4();
    init_lib22();
    init_lib27();
    init_base_provider();
    init_formatter();
    init_lib();
    init_version13();
    __awaiter14 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger26 = new Logger(version13);
    nextRid = 1;
    ForwardErrors = [
      Logger.errors.CALL_EXCEPTION,
      Logger.errors.INSUFFICIENT_FUNDS,
      Logger.errors.NONCE_EXPIRED,
      Logger.errors.REPLACEMENT_UNDERPRICED,
      Logger.errors.UNPREDICTABLE_GAS_LIMIT
    ];
    ForwardProperties = [
      "address",
      "args",
      "errorArgs",
      "errorSignature",
      "method",
      "transaction"
    ];
    FallbackProvider = class extends BaseProvider {
      constructor(providers, quorum) {
        logger26.checkNew(new.target, FallbackProvider);
        if (providers.length === 0) {
          logger26.throwArgumentError("missing providers", "providers", providers);
        }
        const providerConfigs = providers.map((configOrProvider, index) => {
          if (Provider.isProvider(configOrProvider)) {
            const stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
            const priority = 1;
            return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
          }
          const config = shallowCopy(configOrProvider);
          if (config.priority == null) {
            config.priority = 1;
          }
          if (config.stallTimeout == null) {
            config.stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
          }
          if (config.weight == null) {
            config.weight = 1;
          }
          const weight = config.weight;
          if (weight % 1 || weight > 512 || weight < 1) {
            logger26.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
          }
          return Object.freeze(config);
        });
        const total = providerConfigs.reduce((accum, c2) => accum + c2.weight, 0);
        if (quorum == null) {
          quorum = total / 2;
        } else if (quorum > total) {
          logger26.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
        }
        let networkOrReady = checkNetworks(providerConfigs.map((c2) => c2.provider.network));
        if (networkOrReady == null) {
          networkOrReady = new Promise((resolve, reject) => {
            setTimeout(() => {
              this.detectNetwork().then(resolve, reject);
            }, 0);
          });
        }
        super(networkOrReady);
        defineReadOnly(this, "providerConfigs", Object.freeze(providerConfigs));
        defineReadOnly(this, "quorum", quorum);
        this._highestBlockNumber = -1;
      }
      detectNetwork() {
        return __awaiter14(this, void 0, void 0, function* () {
          const networks2 = yield Promise.all(this.providerConfigs.map((c2) => c2.provider.getNetwork()));
          return checkNetworks(networks2);
        });
      }
      perform(method, params) {
        return __awaiter14(this, void 0, void 0, function* () {
          if (method === "sendTransaction") {
            const results = yield Promise.all(this.providerConfigs.map((c2) => {
              return c2.provider.sendTransaction(params.signedTransaction).then((result) => {
                return result.hash;
              }, (error) => {
                return error;
              });
            }));
            for (let i2 = 0; i2 < results.length; i2++) {
              const result = results[i2];
              if (typeof result === "string") {
                return result;
              }
            }
            throw results[0];
          }
          if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
            yield this.getBlockNumber();
          }
          const processFunc = getProcessFunc(this, method, params);
          const configs = shuffled(this.providerConfigs.map(shallowCopy));
          configs.sort((a2, b2) => a2.priority - b2.priority);
          const currentBlockNumber = this._highestBlockNumber;
          let i = 0;
          let first = true;
          while (true) {
            const t0 = now();
            let inflightWeight = configs.filter((c2) => c2.runner && t0 - c2.start < c2.stallTimeout).reduce((accum, c2) => accum + c2.weight, 0);
            while (inflightWeight < this.quorum && i < configs.length) {
              const config = configs[i++];
              const rid = nextRid++;
              config.start = now();
              config.staller = stall2(config.stallTimeout);
              config.staller.wait(() => {
                config.staller = null;
              });
              config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {
                config.done = true;
                config.result = result;
                if (this.listenerCount("debug")) {
                  this.emit("debug", {
                    action: "request",
                    rid,
                    backend: exposeDebugConfig(config, now()),
                    request: { method, params: deepCopy(params) },
                    provider: this
                  });
                }
              }, (error) => {
                config.done = true;
                config.error = error;
                if (this.listenerCount("debug")) {
                  this.emit("debug", {
                    action: "request",
                    rid,
                    backend: exposeDebugConfig(config, now()),
                    request: { method, params: deepCopy(params) },
                    provider: this
                  });
                }
              });
              if (this.listenerCount("debug")) {
                this.emit("debug", {
                  action: "request",
                  rid,
                  backend: exposeDebugConfig(config, null),
                  request: { method, params: deepCopy(params) },
                  provider: this
                });
              }
              inflightWeight += config.weight;
            }
            const waiting = [];
            configs.forEach((c2) => {
              if (c2.done || !c2.runner) {
                return;
              }
              waiting.push(c2.runner);
              if (c2.staller) {
                waiting.push(c2.staller.getPromise());
              }
            });
            if (waiting.length) {
              yield Promise.race(waiting);
            }
            const results = configs.filter((c2) => c2.done && c2.error == null);
            if (results.length >= this.quorum) {
              const result = processFunc(results);
              if (result !== void 0) {
                configs.forEach((c2) => {
                  if (c2.staller) {
                    c2.staller.cancel();
                  }
                  c2.cancelled = true;
                });
                return result;
              }
              if (!first) {
                yield stall2(100).getPromise();
              }
              first = false;
            }
            const errors = configs.reduce((accum, c2) => {
              if (!c2.done || c2.error == null) {
                return accum;
              }
              const code = c2.error.code;
              if (ForwardErrors.indexOf(code) >= 0) {
                if (!accum[code]) {
                  accum[code] = { error: c2.error, weight: 0 };
                }
                accum[code].weight += c2.weight;
              }
              return accum;
            }, {});
            Object.keys(errors).forEach((errorCode) => {
              const tally = errors[errorCode];
              if (tally.weight < this.quorum) {
                return;
              }
              configs.forEach((c2) => {
                if (c2.staller) {
                  c2.staller.cancel();
                }
                c2.cancelled = true;
              });
              const e = tally.error;
              const props = {};
              ForwardProperties.forEach((name2) => {
                if (e[name2] == null) {
                  return;
                }
                props[name2] = e[name2];
              });
              logger26.throwError(e.reason || e.message, errorCode, props);
            });
            if (configs.filter((c2) => !c2.done).length === 0) {
              break;
            }
          }
          configs.forEach((c2) => {
            if (c2.staller) {
              c2.staller.cancel();
            }
            c2.cancelled = true;
          });
          return logger26.throwError("failed to meet quorum", Logger.errors.SERVER_ERROR, {
            method,
            params,
            results: configs.map((c2) => exposeDebugConfig(c2)),
            provider: this
          });
        });
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/ipc-provider.js
var IpcProvider;
var init_ipc_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/ipc-provider.js"() {
    "use strict";
    init_react();
    IpcProvider = null;
  }
});

// node_modules/@ethersproject/providers/lib.esm/infura-provider.js
var logger27, defaultProjectId, InfuraWebSocketProvider, InfuraProvider;
var init_infura_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/infura-provider.js"() {
    "use strict";
    init_react();
    init_lib4();
    init_websocket_provider();
    init_formatter();
    init_lib();
    init_version13();
    init_url_json_rpc_provider();
    logger27 = new Logger(version13);
    defaultProjectId = "84842078b09946638c03157f83405213";
    InfuraWebSocketProvider = class extends WebSocketProvider {
      constructor(network, apiKey) {
        const provider = new InfuraProvider(network, apiKey);
        const connection = provider.connection;
        if (connection.password) {
          logger27.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "InfuraProvider.getWebSocketProvider()"
          });
        }
        const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
        super(url, network);
        defineReadOnly(this, "apiKey", provider.projectId);
        defineReadOnly(this, "projectId", provider.projectId);
        defineReadOnly(this, "projectSecret", provider.projectSecret);
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
    };
    InfuraProvider = class extends UrlJsonRpcProvider {
      static getWebSocketProvider(network, apiKey) {
        return new InfuraWebSocketProvider(network, apiKey);
      }
      static getApiKey(apiKey) {
        const apiKeyObj = {
          apiKey: defaultProjectId,
          projectId: defaultProjectId,
          projectSecret: null
        };
        if (apiKey == null) {
          return apiKeyObj;
        }
        if (typeof apiKey === "string") {
          apiKeyObj.projectId = apiKey;
        } else if (apiKey.projectSecret != null) {
          logger27.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
          logger27.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
          apiKeyObj.projectId = apiKey.projectId;
          apiKeyObj.projectSecret = apiKey.projectSecret;
        } else if (apiKey.projectId) {
          apiKeyObj.projectId = apiKey.projectId;
        }
        apiKeyObj.apiKey = apiKeyObj.projectId;
        return apiKeyObj;
      }
      static getUrl(network, apiKey) {
        let host = null;
        switch (network ? network.name : "unknown") {
          case "homestead":
            host = "mainnet.infura.io";
            break;
          case "ropsten":
            host = "ropsten.infura.io";
            break;
          case "rinkeby":
            host = "rinkeby.infura.io";
            break;
          case "kovan":
            host = "kovan.infura.io";
            break;
          case "goerli":
            host = "goerli.infura.io";
            break;
          case "matic":
            host = "polygon-mainnet.infura.io";
            break;
          case "maticmum":
            host = "polygon-mumbai.infura.io";
            break;
          case "optimism":
            host = "optimism-mainnet.infura.io";
            break;
          case "optimism-kovan":
            host = "optimism-kovan.infura.io";
            break;
          case "arbitrum":
            host = "arbitrum-mainnet.infura.io";
            break;
          case "arbitrum-rinkeby":
            host = "arbitrum-rinkeby.infura.io";
            break;
          default:
            logger27.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
              argument: "network",
              value: network
            });
        }
        const connection = {
          allowGzip: true,
          url: "https://" + host + "/v3/" + apiKey.projectId,
          throttleCallback: (attempt, url) => {
            if (apiKey.projectId === defaultProjectId) {
              showThrottleMessage();
            }
            return Promise.resolve(true);
          }
        };
        if (apiKey.projectSecret != null) {
          connection.user = "";
          connection.password = apiKey.projectSecret;
        }
        return connection;
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js
var JsonRpcBatchProvider;
var init_json_rpc_batch_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js"() {
    init_react();
    init_lib4();
    init_lib27();
    init_json_rpc_provider();
    JsonRpcBatchProvider = class extends JsonRpcProvider {
      send(method, params) {
        const request = {
          method,
          params,
          id: this._nextId++,
          jsonrpc: "2.0"
        };
        if (this._pendingBatch == null) {
          this._pendingBatch = [];
        }
        const inflightRequest = { request, resolve: null, reject: null };
        const promise = new Promise((resolve, reject) => {
          inflightRequest.resolve = resolve;
          inflightRequest.reject = reject;
        });
        this._pendingBatch.push(inflightRequest);
        if (!this._pendingBatchAggregator) {
          this._pendingBatchAggregator = setTimeout(() => {
            const batch = this._pendingBatch;
            this._pendingBatch = null;
            this._pendingBatchAggregator = null;
            const request2 = batch.map((inflight) => inflight.request);
            this.emit("debug", {
              action: "requestBatch",
              request: deepCopy(request2),
              provider: this
            });
            return fetchJson(this.connection, JSON.stringify(request2)).then((result) => {
              this.emit("debug", {
                action: "response",
                request: request2,
                response: result,
                provider: this
              });
              batch.forEach((inflightRequest2, index) => {
                const payload = result[index];
                if (payload.error) {
                  const error = new Error(payload.error.message);
                  error.code = payload.error.code;
                  error.data = payload.error.data;
                  inflightRequest2.reject(error);
                } else {
                  inflightRequest2.resolve(payload.result);
                }
              });
            }, (error) => {
              this.emit("debug", {
                action: "response",
                error,
                request: request2,
                provider: this
              });
              batch.forEach((inflightRequest2) => {
                inflightRequest2.reject(error);
              });
            });
          }, 10);
        }
        return promise;
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js
var logger28, defaultApiKey3, NodesmithProvider;
var init_nodesmith_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js"() {
    "use strict";
    init_react();
    init_url_json_rpc_provider();
    init_lib();
    init_version13();
    logger28 = new Logger(version13);
    defaultApiKey3 = "ETHERS_JS_SHARED";
    NodesmithProvider = class extends UrlJsonRpcProvider {
      static getApiKey(apiKey) {
        if (apiKey && typeof apiKey !== "string") {
          logger28.throwArgumentError("invalid apiKey", "apiKey", apiKey);
        }
        return apiKey || defaultApiKey3;
      }
      static getUrl(network, apiKey) {
        logger28.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
        let host = null;
        switch (network.name) {
          case "homestead":
            host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
            break;
          case "ropsten":
            host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
            break;
          case "rinkeby":
            host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
            break;
          case "goerli":
            host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
            break;
          case "kovan":
            host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
            break;
          default:
            logger28.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return host + "?apiKey=" + apiKey;
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/pocket-provider.js
var logger29, defaultApplicationIds, PocketProvider;
var init_pocket_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/pocket-provider.js"() {
    "use strict";
    init_react();
    init_lib4();
    init_lib();
    init_version13();
    init_url_json_rpc_provider();
    logger29 = new Logger(version13);
    defaultApplicationIds = {
      homestead: "6004bcd10040261633ade990",
      ropsten: "6004bd4d0040261633ade991",
      rinkeby: "6004bda20040261633ade994",
      goerli: "6004bd860040261633ade992"
    };
    PocketProvider = class extends UrlJsonRpcProvider {
      constructor(network, apiKey) {
        if (apiKey == null) {
          const n2 = getStatic(new.target, "getNetwork")(network);
          if (n2) {
            const applicationId = defaultApplicationIds[n2.name];
            if (applicationId) {
              apiKey = {
                applicationId,
                loadBalancer: true
              };
            }
          }
          if (apiKey == null) {
            logger29.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
              argument: "network",
              value: network
            });
          }
        }
        super(network, apiKey);
      }
      static getApiKey(apiKey) {
        if (apiKey == null) {
          logger29.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
        }
        const apiKeyObj = {
          applicationId: null,
          loadBalancer: false,
          applicationSecretKey: null
        };
        if (typeof apiKey === "string") {
          apiKeyObj.applicationId = apiKey;
        } else if (apiKey.applicationSecretKey != null) {
          logger29.assertArgument(typeof apiKey.applicationId === "string", "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
          logger29.assertArgument(typeof apiKey.applicationSecretKey === "string", "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
          apiKeyObj.applicationId = apiKey.applicationId;
          apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
          apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
        } else if (apiKey.applicationId) {
          logger29.assertArgument(typeof apiKey.applicationId === "string", "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
          apiKeyObj.applicationId = apiKey.applicationId;
          apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
        } else {
          logger29.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
        }
        return apiKeyObj;
      }
      static getUrl(network, apiKey) {
        let host = null;
        switch (network ? network.name : "unknown") {
          case "homestead":
            host = "eth-mainnet.gateway.pokt.network";
            break;
          case "ropsten":
            host = "eth-ropsten.gateway.pokt.network";
            break;
          case "rinkeby":
            host = "eth-rinkeby.gateway.pokt.network";
            break;
          case "goerli":
            host = "eth-goerli.gateway.pokt.network";
            break;
          default:
            logger29.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
              argument: "network",
              value: network
            });
        }
        let url = null;
        if (apiKey.loadBalancer) {
          url = `https://${host}/v1/lb/${apiKey.applicationId}`;
        } else {
          url = `https://${host}/v1/${apiKey.applicationId}`;
        }
        const connection = { url };
        connection.headers = {};
        if (apiKey.applicationSecretKey != null) {
          connection.user = "";
          connection.password = apiKey.applicationSecretKey;
        }
        return connection;
      }
      isCommunityResource() {
        return this.applicationId === defaultApplicationIds[this.network.name];
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/web3-provider.js
function buildWeb3LegacyFetcher(provider, sendFunc) {
  const fetcher = "Web3LegacyFetcher";
  return function(method, params) {
    const request = {
      method,
      params,
      id: _nextId++,
      jsonrpc: "2.0"
    };
    return new Promise((resolve, reject) => {
      this.emit("debug", {
        action: "request",
        fetcher,
        request: deepCopy(request),
        provider: this
      });
      sendFunc(request, (error, response) => {
        if (error) {
          this.emit("debug", {
            action: "response",
            fetcher,
            error,
            request,
            provider: this
          });
          return reject(error);
        }
        this.emit("debug", {
          action: "response",
          fetcher,
          request,
          response,
          provider: this
        });
        if (response.error) {
          const error2 = new Error(response.error.message);
          error2.code = response.error.code;
          error2.data = response.error.data;
          return reject(error2);
        }
        resolve(response.result);
      });
    });
  };
}
function buildEip1193Fetcher(provider) {
  return function(method, params) {
    if (params == null) {
      params = [];
    }
    const request = { method, params };
    this.emit("debug", {
      action: "request",
      fetcher: "Eip1193Fetcher",
      request: deepCopy(request),
      provider: this
    });
    return provider.request(request).then((response) => {
      this.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request,
        response,
        provider: this
      });
      return response;
    }, (error) => {
      this.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request,
        error,
        provider: this
      });
      throw error;
    });
  };
}
var logger30, _nextId, Web3Provider;
var init_web3_provider = __esm({
  "node_modules/@ethersproject/providers/lib.esm/web3-provider.js"() {
    "use strict";
    init_react();
    init_lib4();
    init_lib();
    init_version13();
    init_json_rpc_provider();
    logger30 = new Logger(version13);
    _nextId = 1;
    Web3Provider = class extends JsonRpcProvider {
      constructor(provider, network) {
        logger30.checkNew(new.target, Web3Provider);
        if (provider == null) {
          logger30.throwArgumentError("missing provider", "provider", provider);
        }
        let path = null;
        let jsonRpcFetchFunc = null;
        let subprovider = null;
        if (typeof provider === "function") {
          path = "unknown:";
          jsonRpcFetchFunc = provider;
        } else {
          path = provider.host || provider.path || "";
          if (!path && provider.isMetaMask) {
            path = "metamask";
          }
          subprovider = provider;
          if (provider.request) {
            if (path === "") {
              path = "eip-1193:";
            }
            jsonRpcFetchFunc = buildEip1193Fetcher(provider);
          } else if (provider.sendAsync) {
            jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
          } else if (provider.send) {
            jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
          } else {
            logger30.throwArgumentError("unsupported provider", "provider", provider);
          }
          if (!path) {
            path = "unknown:";
          }
        }
        super(path, network);
        defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
        defineReadOnly(this, "provider", subprovider);
      }
      send(method, params) {
        return this.jsonRpcFetchFunc(method, params);
      }
    };
  }
});

// node_modules/@ethersproject/providers/lib.esm/index.js
var lib_exports4 = {};
__export(lib_exports4, {
  AlchemyProvider: () => AlchemyProvider,
  AlchemyWebSocketProvider: () => AlchemyWebSocketProvider,
  BaseProvider: () => BaseProvider,
  CloudflareProvider: () => CloudflareProvider,
  EtherscanProvider: () => EtherscanProvider,
  FallbackProvider: () => FallbackProvider,
  Formatter: () => Formatter,
  InfuraProvider: () => InfuraProvider,
  InfuraWebSocketProvider: () => InfuraWebSocketProvider,
  IpcProvider: () => IpcProvider,
  JsonRpcBatchProvider: () => JsonRpcBatchProvider,
  JsonRpcProvider: () => JsonRpcProvider,
  JsonRpcSigner: () => JsonRpcSigner,
  NodesmithProvider: () => NodesmithProvider,
  PocketProvider: () => PocketProvider,
  Provider: () => Provider,
  Resolver: () => Resolver,
  StaticJsonRpcProvider: () => StaticJsonRpcProvider,
  UrlJsonRpcProvider: () => UrlJsonRpcProvider,
  Web3Provider: () => Web3Provider,
  WebSocketProvider: () => WebSocketProvider,
  getDefaultProvider: () => getDefaultProvider,
  getNetwork: () => getNetwork,
  isCommunityResourcable: () => isCommunityResourcable,
  isCommunityResource: () => isCommunityResource,
  showThrottleMessage: () => showThrottleMessage
});
function getDefaultProvider(network, options) {
  if (network == null) {
    network = "homestead";
  }
  if (typeof network === "string") {
    const match2 = network.match(/^(ws|http)s?:/i);
    if (match2) {
      switch (match2[1]) {
        case "http":
          return new JsonRpcProvider(network);
        case "ws":
          return new WebSocketProvider(network);
        default:
          logger31.throwArgumentError("unsupported URL scheme", "network", network);
      }
    }
  }
  const n2 = getNetwork(network);
  if (!n2 || !n2._defaultProvider) {
    logger31.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, {
      operation: "getDefaultProvider",
      network
    });
  }
  return n2._defaultProvider({
    FallbackProvider,
    AlchemyProvider,
    CloudflareProvider,
    EtherscanProvider,
    InfuraProvider,
    JsonRpcProvider,
    NodesmithProvider,
    PocketProvider,
    Web3Provider,
    IpcProvider
  }, options);
}
var logger31;
var init_lib28 = __esm({
  "node_modules/@ethersproject/providers/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_lib14();
    init_lib25();
    init_base_provider();
    init_alchemy_provider();
    init_cloudflare_provider();
    init_etherscan_provider();
    init_fallback_provider();
    init_ipc_provider();
    init_infura_provider();
    init_json_rpc_provider();
    init_json_rpc_batch_provider();
    init_nodesmith_provider();
    init_pocket_provider();
    init_url_json_rpc_provider();
    init_web3_provider();
    init_websocket_provider();
    init_formatter();
    init_lib();
    init_version13();
    logger31 = new Logger(version13);
  }
});

// node_modules/@ethersproject/solidity/lib.esm/_version.js
var version14;
var init_version14 = __esm({
  "node_modules/@ethersproject/solidity/lib.esm/_version.js"() {
    init_react();
    version14 = "solidity/5.5.0";
  }
});

// node_modules/@ethersproject/solidity/lib.esm/index.js
function _pack(type, value, isArray) {
  switch (type) {
    case "address":
      if (isArray) {
        return zeroPad(value, 32);
      }
      return arrayify(value);
    case "string":
      return toUtf8Bytes(value);
    case "bytes":
      return arrayify(value);
    case "bool":
      value = value ? "0x01" : "0x00";
      if (isArray) {
        return zeroPad(value, 32);
      }
      return arrayify(value);
  }
  let match2 = type.match(regexNumber);
  if (match2) {
    let size2 = parseInt(match2[2] || "256");
    if (match2[2] && String(size2) !== match2[2] || size2 % 8 !== 0 || size2 === 0 || size2 > 256) {
      logger32.throwArgumentError("invalid number type", "type", type);
    }
    if (isArray) {
      size2 = 256;
    }
    value = BigNumber.from(value).toTwos(size2);
    return zeroPad(value, size2 / 8);
  }
  match2 = type.match(regexBytes);
  if (match2) {
    const size2 = parseInt(match2[1]);
    if (String(size2) !== match2[1] || size2 === 0 || size2 > 32) {
      logger32.throwArgumentError("invalid bytes type", "type", type);
    }
    if (arrayify(value).byteLength !== size2) {
      logger32.throwArgumentError(`invalid value for ${type}`, "value", value);
    }
    if (isArray) {
      return arrayify((value + Zeros).substring(0, 66));
    }
    return value;
  }
  match2 = type.match(regexArray);
  if (match2 && Array.isArray(value)) {
    const baseType = match2[1];
    const count = parseInt(match2[2] || String(value.length));
    if (count != value.length) {
      logger32.throwArgumentError(`invalid array length for ${type}`, "value", value);
    }
    const result = [];
    value.forEach(function(value2) {
      result.push(_pack(baseType, value2, true));
    });
    return concat(result);
  }
  return logger32.throwArgumentError("invalid type", "type", type);
}
function pack2(types, values) {
  if (types.length != values.length) {
    logger32.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
  }
  const tight = [];
  types.forEach(function(type, index) {
    tight.push(_pack(type, values[index]));
  });
  return hexlify(concat(tight));
}
function keccak2562(types, values) {
  return keccak256(pack2(types, values));
}
function sha2562(types, values) {
  return sha256(pack2(types, values));
}
var regexBytes, regexNumber, regexArray, Zeros, logger32;
var init_lib29 = __esm({
  "node_modules/@ethersproject/solidity/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_lib3();
    init_lib2();
    init_lib5();
    init_lib18();
    init_lib9();
    init_lib();
    init_version14();
    regexBytes = new RegExp("^bytes([0-9]+)$");
    regexNumber = new RegExp("^(u?int)([0-9]*)$");
    regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
    logger32 = new Logger(version14);
  }
});

// node_modules/@ethersproject/units/lib.esm/_version.js
var version15;
var init_version15 = __esm({
  "node_modules/@ethersproject/units/lib.esm/_version.js"() {
    init_react();
    version15 = "units/5.5.0";
  }
});

// node_modules/@ethersproject/units/lib.esm/index.js
function commify(value) {
  const comps = String(value).split(".");
  if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") {
    logger33.throwArgumentError("invalid value", "value", value);
  }
  let whole = comps[0];
  let negative = "";
  if (whole.substring(0, 1) === "-") {
    negative = "-";
    whole = whole.substring(1);
  }
  while (whole.substring(0, 1) === "0") {
    whole = whole.substring(1);
  }
  if (whole === "") {
    whole = "0";
  }
  let suffix = "";
  if (comps.length === 2) {
    suffix = "." + (comps[1] || "0");
  }
  while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
    suffix = suffix.substring(0, suffix.length - 1);
  }
  const formatted = [];
  while (whole.length) {
    if (whole.length <= 3) {
      formatted.unshift(whole);
      break;
    } else {
      const index = whole.length - 3;
      formatted.unshift(whole.substring(index));
      whole = whole.substring(0, index);
    }
  }
  return negative + formatted.join(",") + suffix;
}
function formatUnits(value, unitName) {
  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return formatFixed(value, unitName != null ? unitName : 18);
}
function parseUnits(value, unitName) {
  if (typeof value !== "string") {
    logger33.throwArgumentError("value must be a string", "value", value);
  }
  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return parseFixed(value, unitName != null ? unitName : 18);
}
function formatEther(wei) {
  return formatUnits(wei, 18);
}
function parseEther(ether) {
  return parseUnits(ether, 18);
}
var logger33, names;
var init_lib30 = __esm({
  "node_modules/@ethersproject/units/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_lib3();
    init_lib();
    init_version15();
    logger33 = new Logger(version15);
    names = [
      "wei",
      "kwei",
      "mwei",
      "gwei",
      "szabo",
      "finney",
      "ether"
    ];
  }
});

// node_modules/ethers/lib.esm/utils.js
var utils_exports = {};
__export(utils_exports, {
  AbiCoder: () => AbiCoder,
  ConstructorFragment: () => ConstructorFragment,
  ErrorFragment: () => ErrorFragment,
  EventFragment: () => EventFragment,
  FormatTypes: () => FormatTypes,
  Fragment: () => Fragment,
  FunctionFragment: () => FunctionFragment,
  HDNode: () => HDNode,
  Indexed: () => Indexed,
  Interface: () => Interface,
  LogDescription: () => LogDescription,
  Logger: () => Logger,
  ParamType: () => ParamType,
  RLP: () => lib_exports,
  SigningKey: () => SigningKey,
  SupportedAlgorithm: () => SupportedAlgorithm,
  TransactionDescription: () => TransactionDescription,
  TransactionTypes: () => TransactionTypes,
  UnicodeNormalizationForm: () => UnicodeNormalizationForm,
  Utf8ErrorFuncs: () => Utf8ErrorFuncs,
  Utf8ErrorReason: () => Utf8ErrorReason,
  _TypedDataEncoder: () => TypedDataEncoder,
  _fetchData: () => _fetchData,
  _toEscapedUtf8String: () => _toEscapedUtf8String,
  accessListify: () => accessListify,
  arrayify: () => arrayify,
  base58: () => Base58,
  base64: () => lib_exports3,
  checkProperties: () => checkProperties,
  checkResultErrors: () => checkResultErrors,
  commify: () => commify,
  computeAddress: () => computeAddress,
  computeHmac: () => computeHmac,
  computePublicKey: () => computePublicKey,
  concat: () => concat,
  deepCopy: () => deepCopy,
  defaultAbiCoder: () => defaultAbiCoder,
  defaultPath: () => defaultPath,
  defineReadOnly: () => defineReadOnly,
  entropyToMnemonic: () => entropyToMnemonic,
  fetchJson: () => fetchJson,
  formatBytes32String: () => formatBytes32String,
  formatEther: () => formatEther,
  formatUnits: () => formatUnits,
  getAccountPath: () => getAccountPath,
  getAddress: () => getAddress,
  getContractAddress: () => getContractAddress,
  getCreate2Address: () => getCreate2Address,
  getIcapAddress: () => getIcapAddress,
  getJsonWalletAddress: () => getJsonWalletAddress,
  getStatic: () => getStatic,
  hashMessage: () => hashMessage,
  hexConcat: () => hexConcat,
  hexDataLength: () => hexDataLength,
  hexDataSlice: () => hexDataSlice,
  hexStripZeros: () => hexStripZeros,
  hexValue: () => hexValue,
  hexZeroPad: () => hexZeroPad,
  hexlify: () => hexlify,
  id: () => id,
  isAddress: () => isAddress,
  isBytes: () => isBytes,
  isBytesLike: () => isBytesLike,
  isHexString: () => isHexString,
  isValidMnemonic: () => isValidMnemonic,
  isValidName: () => isValidName,
  joinSignature: () => joinSignature,
  keccak256: () => keccak256,
  mnemonicToEntropy: () => mnemonicToEntropy,
  mnemonicToSeed: () => mnemonicToSeed,
  namehash: () => namehash,
  nameprep: () => nameprep,
  parseBytes32String: () => parseBytes32String,
  parseEther: () => parseEther,
  parseTransaction: () => parse,
  parseUnits: () => parseUnits,
  poll: () => poll,
  randomBytes: () => randomBytes,
  recoverAddress: () => recoverAddress,
  recoverPublicKey: () => recoverPublicKey,
  resolveProperties: () => resolveProperties,
  ripemd160: () => ripemd160,
  serializeTransaction: () => serialize,
  sha256: () => sha256,
  sha512: () => sha512,
  shallowCopy: () => shallowCopy,
  shuffled: () => shuffled,
  solidityKeccak256: () => keccak2562,
  solidityPack: () => pack2,
  soliditySha256: () => sha2562,
  splitSignature: () => splitSignature,
  stripZeros: () => stripZeros,
  toUtf8Bytes: () => toUtf8Bytes,
  toUtf8CodePoints: () => toUtf8CodePoints,
  toUtf8String: () => toUtf8String,
  verifyMessage: () => verifyMessage,
  verifyTypedData: () => verifyTypedData,
  zeroPad: () => zeroPad
});
var init_utils2 = __esm({
  "node_modules/ethers/lib.esm/utils.js"() {
    "use strict";
    init_react();
    init_lib13();
    init_lib7();
    init_lib26();
    init_lib17();
    init_lib2();
    init_lib10();
    init_lib21();
    init_lib23();
    init_lib5();
    init_lib();
    init_lib18();
    init_lib29();
    init_lib22();
    init_lib4();
    init_lib6();
    init_lib11();
    init_lib9();
    init_lib12();
    init_lib30();
    init_lib24();
    init_lib27();
    init_lib18();
    init_lib9();
  }
});

// node_modules/ethers/lib.esm/_version.js
var version16;
var init_version16 = __esm({
  "node_modules/ethers/lib.esm/_version.js"() {
    init_react();
    version16 = "ethers/5.5.3";
  }
});

// node_modules/ethers/lib.esm/ethers.js
var ethers_exports = {};
__export(ethers_exports, {
  BaseContract: () => BaseContract,
  BigNumber: () => BigNumber,
  Contract: () => Contract,
  ContractFactory: () => ContractFactory,
  FixedNumber: () => FixedNumber,
  Signer: () => Signer,
  VoidSigner: () => VoidSigner,
  Wallet: () => Wallet,
  Wordlist: () => Wordlist,
  constants: () => lib_exports2,
  errors: () => ErrorCode,
  getDefaultProvider: () => getDefaultProvider,
  logger: () => logger34,
  providers: () => lib_exports4,
  utils: () => utils_exports,
  version: () => version16,
  wordlists: () => wordlists
});
var logger34;
var init_ethers = __esm({
  "node_modules/ethers/lib.esm/ethers.js"() {
    "use strict";
    init_react();
    init_lib16();
    init_lib3();
    init_lib15();
    init_lib24();
    init_lib8();
    init_lib28();
    init_lib28();
    init_lib20();
    init_utils2();
    init_lib();
    init_version16();
    logger34 = new Logger(version16);
  }
});

// node_modules/ethers/lib.esm/index.js
var lib_exports5 = {};
__export(lib_exports5, {
  BaseContract: () => BaseContract,
  BigNumber: () => BigNumber,
  Contract: () => Contract,
  ContractFactory: () => ContractFactory,
  FixedNumber: () => FixedNumber,
  Signer: () => Signer,
  VoidSigner: () => VoidSigner,
  Wallet: () => Wallet,
  Wordlist: () => Wordlist,
  constants: () => lib_exports2,
  errors: () => ErrorCode,
  ethers: () => ethers_exports,
  getDefaultProvider: () => getDefaultProvider,
  logger: () => logger34,
  providers: () => lib_exports4,
  utils: () => utils_exports,
  version: () => version16,
  wordlists: () => wordlists
});
var init_lib31 = __esm({
  "node_modules/ethers/lib.esm/index.js"() {
    "use strict";
    init_react();
    init_ethers();
    init_ethers();
    try {
      const anyGlobal2 = window;
      if (anyGlobal2._ethers == null) {
        anyGlobal2._ethers = ethers_exports;
      }
    } catch (error) {
    }
  }
});

// node_modules/moralis/lib/browser/Cloud.js
var require_Cloud = __commonJS({
  "node_modules/moralis/lib/browser/Cloud.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getJobStatus = getJobStatus;
    exports.getJobsData = getJobsData;
    exports.run = run;
    exports.startJob = startJob;
    var _keys = _interopRequireDefault(require_keys3());
    var _promise = _interopRequireDefault(require_promise3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _decode = _interopRequireDefault(require_decode());
    var _encode = _interopRequireDefault(require_encode());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    function run(name2, data, options) {
      options = options || {};
      if (typeof name2 !== "string" || name2.length === 0) {
        throw new TypeError("Cloud function name must be a string.");
      }
      var requestOptions = {};
      if (options.useMasterKey) {
        requestOptions.useMasterKey = options.useMasterKey;
      }
      if (options.sessionToken) {
        requestOptions.sessionToken = options.sessionToken;
      }
      if (options.context && (0, _typeof2.default)(options.context) === "object") {
        requestOptions.context = options.context;
      }
      return _CoreManager.default.getCloudController().run(name2, data, requestOptions);
    }
    function getJobsData() {
      return _CoreManager.default.getCloudController().getJobsData({
        useMasterKey: true
      });
    }
    function startJob(name2, data) {
      if (typeof name2 !== "string" || name2.length === 0) {
        throw new TypeError("Cloud job name must be a string.");
      }
      return _CoreManager.default.getCloudController().startJob(name2, data, {
        useMasterKey: true
      });
    }
    function getJobStatus(jobStatusId) {
      var query = new _ParseQuery.default("_JobStatus");
      return query.get(jobStatusId, {
        useMasterKey: true
      });
    }
    var DefaultController = {
      run: function(name2, data, options) {
        var RESTController = _CoreManager.default.getRESTController();
        var payload = (0, _encode.default)(data, true);
        var request = RESTController.request("POST", "functions/".concat(name2), payload, options);
        return request.then(function(res) {
          if ((0, _typeof2.default)(res) === "object" && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty("result")) {
            throw new _ParseError.default(_ParseError.default.INVALID_JSON, "The server returned an invalid response.");
          }
          var decoded = (0, _decode.default)(res);
          if (decoded && decoded.hasOwnProperty("result")) {
            return _promise.default.resolve(decoded.result);
          }
          return _promise.default.resolve(void 0);
        });
      },
      getJobsData: function(options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "cloud_code/jobs/data", null, options);
      },
      startJob: function(name2, data, options) {
        var RESTController = _CoreManager.default.getRESTController();
        var payload = (0, _encode.default)(data, true);
        return RESTController.request("POST", "jobs/".concat(name2), payload, options);
      }
    };
    _CoreManager.default.setCloudController(DefaultController);
  }
});

// node_modules/moralis/lib/browser/createSigningData.js
var require_createSigningData = __commonJS({
  "node_modules/moralis/lib/browser/createSigningData.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = createSigningData;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _concat = _interopRequireDefault(require_concat4());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _Cloud = require_Cloud();
    function createSigningData() {
      return _createSigningData.apply(this, arguments);
    }
    function _createSigningData() {
      _createSigningData = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(message) {
        var data, _context, _context2, _yield$run, dateTime, applicationId;
        return _regenerator.default.wrap(function(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.next = 3;
                return (0, _Cloud.run)("getServerTime");
              case 3:
                _yield$run = _context3.sent;
                dateTime = _yield$run.dateTime;
                applicationId = _CoreManager.default.get("APPLICATION_ID");
                data = (0, _concat.default)(_context = (0, _concat.default)(_context2 = "".concat(message, "\n\nId: ")).call(_context2, applicationId, ":")).call(_context, dateTime);
                _context3.next = 12;
                break;
              case 9:
                _context3.prev = 9;
                _context3.t0 = _context3["catch"](0);
                data = "".concat(message);
              case 12:
                return _context3.abrupt("return", data);
              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee, null, [[0, 9]]);
      }));
      return _createSigningData.apply(this, arguments);
    }
  }
});

// node_modules/moralis/lib/browser/MoralisErd.js
var require_MoralisErd = __commonJS({
  "node_modules/moralis/lib/browser/MoralisErd.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _filter = _interopRequireDefault(require_filter4());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _createSigningData = _interopRequireDefault(require_createSigningData());
    var INIT_ERROR = "Could not initialise ledger app, make sure Elrond app is open";
    function getErdJs() {
      return MoralisErd.getErdJs();
    }
    var MoralisErd = /* @__PURE__ */ function() {
      function MoralisErd2() {
        (0, _classCallCheck2.default)(this, MoralisErd2);
      }
      (0, _createClass2.default)(MoralisErd2, null, [{
        key: "getErdJs",
        value: function() {
          if (typeof window !== "undefined" && window.erdjs)
            return window.erdjs;
          throw new Error("Please add erdjs scripts");
        }
      }, {
        key: "gatewayAddress",
        value: function() {
          return "https://gateway.elrond.com";
        }
      }, {
        key: "hwProxy",
        value: function() {
          var _hwProxy = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
            var _getErdJs, ProxyProvider, proxy;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!MoralisErd2._proxy) {
                      _context.next = 2;
                      break;
                    }
                    return _context.abrupt("return", MoralisErd2._proxy);
                  case 2:
                    _getErdJs = getErdJs(), ProxyProvider = _getErdJs.ProxyProvider;
                    proxy = new ProxyProvider(MoralisErd2.gatewayAddress());
                    MoralisErd2._proxy = proxy;
                    return _context.abrupt("return", MoralisErd2._proxy);
                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
          return function() {
            return _hwProxy.apply(this, arguments);
          };
        }()
      }, {
        key: "hwProvider",
        value: function() {
          return MoralisErd2._hw;
        }
      }, {
        key: "enable",
        value: function() {
          var _enable = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            var _getErdJs2, HWProvider, proxy, hw, success;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _getErdJs2 = getErdJs(), HWProvider = _getErdJs2.HWProvider;
                    _context2.next = 3;
                    return MoralisErd2.hwProxy();
                  case 3:
                    proxy = _context2.sent;
                    hw = new HWProvider(proxy);
                    _context2.next = 7;
                    return hw.init();
                  case 7:
                    success = _context2.sent;
                    if (success) {
                      _context2.next = 10;
                      break;
                    }
                    throw new Error(INIT_ERROR);
                  case 10:
                    MoralisErd2._hw = hw;
                    return _context2.abrupt("return", hw);
                  case 12:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));
          return function() {
            return _enable.apply(this, arguments);
          };
        }()
      }, {
        key: "authenticate",
        value: function() {
          var _authenticate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
            var hw, address, erdAddress, accounts, message, data, signature, authData, user;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return MoralisErd2.enable();
                  case 2:
                    hw = _context3.sent;
                    _context3.next = 5;
                    return hw.login();
                  case 5:
                    address = _context3.sent;
                    erdAddress = address.toLowerCase();
                    accounts = [erdAddress];
                    message = MoralisErd2.getSigningData();
                    _context3.next = 11;
                    return (0, _createSigningData.default)(message);
                  case 11:
                    data = _context3.sent;
                    _context3.next = 14;
                    return MoralisErd2.sign(data);
                  case 14:
                    signature = _context3.sent;
                    authData = {
                      id: erdAddress,
                      signature,
                      data
                    };
                    _context3.next = 18;
                    return _ParseUser.default.logInWith("moralisErd", {
                      authData
                    });
                  case 18:
                    user = _context3.sent;
                    if (user) {
                      _context3.next = 21;
                      break;
                    }
                    throw new Error("Could not get user");
                  case 21:
                    _context3.next = 23;
                    return user.setACL(new _ParseACL.default(user));
                  case 23:
                    user.addAllUnique("erdAccounts", accounts);
                    user.set("erdAddress", erdAddress);
                    _context3.next = 27;
                    return user.save();
                  case 27:
                    return _context3.abrupt("return", user);
                  case 28:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }));
          return function() {
            return _authenticate.apply(this, arguments);
          };
        }()
      }, {
        key: "link",
        value: function() {
          var _link = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(account, options) {
            var message, user, erdAddress, ErdAddress, query, erdAddressRecord, data, signature, authData;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisErd2.getSigningData();
                    _context4.next = 3;
                    return _ParseUser.default.current();
                  case 3:
                    user = _context4.sent;
                    erdAddress = account.toLowerCase();
                    ErdAddress = _ParseObject.default.extend("_ErdAddress");
                    query = new _ParseQuery.default(ErdAddress);
                    _context4.next = 9;
                    return query.get(erdAddress).catch(function() {
                      return null;
                    });
                  case 9:
                    erdAddressRecord = _context4.sent;
                    if (erdAddressRecord) {
                      _context4.next = 20;
                      break;
                    }
                    _context4.next = 13;
                    return (0, _createSigningData.default)(message);
                  case 13:
                    data = _context4.sent;
                    _context4.next = 16;
                    return MoralisErd2.sign(data);
                  case 16:
                    signature = _context4.sent;
                    authData = {
                      id: erdAddress,
                      signature,
                      data
                    };
                    _context4.next = 20;
                    return user.linkWith("moralisErd", {
                      authData
                    });
                  case 20:
                    user.addAllUnique("erdAccounts", [erdAddress]);
                    user.set("erdAddress", erdAddress);
                    _context4.next = 24;
                    return user.save();
                  case 24:
                    return _context4.abrupt("return", user);
                  case 25:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));
          return function() {
            return _link.apply(this, arguments);
          };
        }()
      }, {
        key: "unlink",
        value: function() {
          var _unlink = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(account) {
            var _user$get;
            var accountsLower, ErdAddress, query, erdAddressRecord, user, accounts, nextAccounts;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    accountsLower = account.toLowerCase();
                    ErdAddress = _ParseObject.default.extend("_ErdAddress");
                    query = new _ParseQuery.default(ErdAddress);
                    _context5.next = 5;
                    return query.get(accountsLower);
                  case 5:
                    erdAddressRecord = _context5.sent;
                    _context5.next = 8;
                    return erdAddressRecord.destroy();
                  case 8:
                    _context5.next = 10;
                    return _ParseUser.default.current();
                  case 10:
                    user = _context5.sent;
                    accounts = (_user$get = user.get("erdAccounts")) !== null && _user$get !== void 0 ? _user$get : [];
                    nextAccounts = (0, _filter.default)(accounts).call(accounts, function(v2) {
                      return v2 !== accountsLower;
                    });
                    user.set("erdAccounts", nextAccounts);
                    user.set("erdAddress", nextAccounts[0]);
                    _context5.next = 17;
                    return user._unlinkFrom("moralisErd");
                  case 17:
                    _context5.next = 19;
                    return user.save();
                  case 19:
                    return _context5.abrupt("return", user);
                  case 20:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }));
          return function() {
            return _unlink.apply(this, arguments);
          };
        }()
      }, {
        key: "sign",
        value: function() {
          var _sign = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6(data) {
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    return _context6.abrupt("return", data);
                  case 1:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6);
          }));
          return function() {
            return _sign.apply(this, arguments);
          };
        }()
      }, {
        key: "getSigningData",
        value: function() {
          return "Moralis Authentication";
        }
      }]);
      return MoralisErd2;
    }();
    var _default = MoralisErd;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/MoralisDot.js
var require_MoralisDot = __commonJS({
  "node_modules/moralis/lib/browser/MoralisDot.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _keys = _interopRequireDefault(require_keys3());
    var _filter = _interopRequireDefault(require_filter4());
    var _from = _interopRequireDefault(require_from3());
    var _slice = _interopRequireDefault(require_slice4());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _createSigningData = _interopRequireDefault(require_createSigningData());
    var web3EnablePromise = null;
    var MoralisDot = /* @__PURE__ */ function() {
      function MoralisDot2() {
        (0, _classCallCheck2.default)(this, MoralisDot2);
      }
      (0, _createClass2.default)(MoralisDot2, null, [{
        key: "web3IsInjected",
        value: function() {
          return (0, _keys.default)(window.injectedWeb3).length !== 0;
        }
      }, {
        key: "enable",
        value: function() {
          var _enable = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(opts) {
            var _window$injectedWeb, _window$injectedWeb$t;
            var type, _args = arguments;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    type = _args.length > 1 && _args[1] !== void 0 ? _args[1] : "polkadot-js";
                    if (!web3EnablePromise) {
                      _context.next = 3;
                      break;
                    }
                    return _context.abrupt("return", web3EnablePromise);
                  case 3:
                    web3EnablePromise = (_window$injectedWeb = window.injectedWeb3) === null || _window$injectedWeb === void 0 ? void 0 : (_window$injectedWeb$t = _window$injectedWeb[type]) === null || _window$injectedWeb$t === void 0 ? void 0 : _window$injectedWeb$t.enable(opts);
                    return _context.abrupt("return", web3EnablePromise);
                  case 5:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
          return function() {
            return _enable.apply(this, arguments);
          };
        }()
      }, {
        key: "authenticate",
        value: function() {
          var _authenticate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(opts) {
            var _opts$name;
            var allAccounts, account, address, dotAddress, accounts, message, data, signature, authData, user;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return MoralisDot2.enable((_opts$name = opts === null || opts === void 0 ? void 0 : opts.name) !== null && _opts$name !== void 0 ? _opts$name : "Moralis");
                  case 2:
                    MoralisDot2.web3 = _context2.sent;
                    _context2.next = 5;
                    return MoralisDot2.web3.accounts.get();
                  case 5:
                    allAccounts = _context2.sent;
                    account = allAccounts[0];
                    address = account === null || account === void 0 ? void 0 : account.address;
                    if (address) {
                      _context2.next = 10;
                      break;
                    }
                    throw new Error("Address not found");
                  case 10:
                    dotAddress = address;
                    accounts = [dotAddress];
                    message = MoralisDot2.getSigningData();
                    _context2.next = 15;
                    return (0, _createSigningData.default)(message);
                  case 15:
                    data = _context2.sent;
                    _context2.next = 18;
                    return MoralisDot2.sign(address, data);
                  case 18:
                    signature = _context2.sent;
                    authData = {
                      id: dotAddress,
                      signature,
                      data
                    };
                    _context2.next = 22;
                    return _ParseUser.default.logInWith("moralisDot", {
                      authData
                    });
                  case 22:
                    user = _context2.sent;
                    if (user) {
                      _context2.next = 25;
                      break;
                    }
                    throw new Error("Could not get user");
                  case 25:
                    _context2.next = 27;
                    return user.setACL(new _ParseACL.default(user));
                  case 27:
                    user.addAllUnique("dotAccounts", accounts);
                    user.set("dotAddress", dotAddress);
                    _context2.next = 31;
                    return user.save();
                  case 31:
                    return _context2.abrupt("return", user);
                  case 32:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));
          return function() {
            return _authenticate.apply(this, arguments);
          };
        }()
      }, {
        key: "link",
        value: function() {
          var _link = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3(account, options) {
            var message, user, dotAddress, DotAddress, query, dotAddressRecord, data, signature, authData;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisDot2.getSigningData();
                    _context3.next = 3;
                    return _ParseUser.default.current();
                  case 3:
                    user = _context3.sent;
                    dotAddress = account;
                    DotAddress = _ParseObject.default.extend("_DotAddress");
                    query = new _ParseQuery.default(DotAddress);
                    _context3.next = 9;
                    return query.get(dotAddress).catch(function() {
                      return null;
                    });
                  case 9:
                    dotAddressRecord = _context3.sent;
                    if (dotAddressRecord) {
                      _context3.next = 20;
                      break;
                    }
                    _context3.next = 13;
                    return (0, _createSigningData.default)(message);
                  case 13:
                    data = _context3.sent;
                    _context3.next = 16;
                    return MoralisDot2.sign(dotAddress, data);
                  case 16:
                    signature = _context3.sent;
                    authData = {
                      id: dotAddress,
                      signature,
                      data
                    };
                    _context3.next = 20;
                    return user.linkWith("moralisDot", {
                      authData
                    });
                  case 20:
                    user.addAllUnique("dotAccounts", [dotAddress]);
                    user.set("dotAddress", dotAddress);
                    _context3.next = 24;
                    return user.save();
                  case 24:
                    return _context3.abrupt("return", user);
                  case 25:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }));
          return function() {
            return _link.apply(this, arguments);
          };
        }()
      }, {
        key: "unlink",
        value: function() {
          var _unlink = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(account) {
            var _user$get;
            var accountsLower, DotAddress, query, dotAddressRecord, user, accounts, nextAccounts;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    accountsLower = account;
                    DotAddress = _ParseObject.default.extend("_DotAddress");
                    query = new _ParseQuery.default(DotAddress);
                    _context4.next = 5;
                    return query.get(accountsLower);
                  case 5:
                    dotAddressRecord = _context4.sent;
                    _context4.next = 8;
                    return dotAddressRecord.destroy();
                  case 8:
                    _context4.next = 10;
                    return _ParseUser.default.current();
                  case 10:
                    user = _context4.sent;
                    accounts = (_user$get = user.get("dotAccounts")) !== null && _user$get !== void 0 ? _user$get : [];
                    nextAccounts = (0, _filter.default)(accounts).call(accounts, function(v2) {
                      return v2 !== accountsLower;
                    });
                    user.set("dotAccounts", nextAccounts);
                    user.set("dotAddress", nextAccounts[0]);
                    _context4.next = 17;
                    return user._unlinkFrom("moralisDot");
                  case 17:
                    _context4.next = 19;
                    return user.save();
                  case 19:
                    return _context4.abrupt("return", user);
                  case 20:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));
          return function() {
            return _unlink.apply(this, arguments);
          };
        }()
      }, {
        key: "sign",
        value: function() {
          var _sign = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(address, data) {
            var web3, _yield$web3$signer$si, signature;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    if (web3EnablePromise) {
                      _context5.next = 2;
                      break;
                    }
                    throw new Error("Must enable MoralisDot");
                  case 2:
                    _context5.next = 4;
                    return web3EnablePromise;
                  case 4:
                    web3 = _context5.sent;
                    if (web3.signer) {
                      _context5.next = 7;
                      break;
                    }
                    throw new Error("No signer found");
                  case 7:
                    _context5.next = 9;
                    return web3.signer.signRaw({
                      address,
                      data: stringToHex(data),
                      type: "bytes"
                    });
                  case 9:
                    _yield$web3$signer$si = _context5.sent;
                    signature = _yield$web3$signer$si.signature;
                    return _context5.abrupt("return", signature);
                  case 12:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }));
          return function() {
            return _sign.apply(this, arguments);
          };
        }()
      }, {
        key: "getSigningData",
        value: function() {
          return "Moralis Authentication";
        }
      }]);
      return MoralisDot2;
    }();
    var _default = MoralisDot;
    exports.default = _default;
    function stringToHex(value) {
      return toHexString(stringToU8a(value));
    }
    function stringToU8a(value) {
      var u8a = new Uint8Array(value.length);
      for (var i = 0; i < value.length; i++) {
        u8a[i] = value.charCodeAt(i);
      }
      return u8a;
    }
    function toHexString(byteArray) {
      return "0x".concat((0, _from.default)(byteArray, function(byte) {
        var _context6;
        return (0, _slice.default)(_context6 = "0".concat((byte & 255).toString(16))).call(_context6, -2);
      }).join(""));
    }
  }
});

// node_modules/core-js-pure/internals/array-reduce.js
var require_array_reduce = __commonJS({
  "node_modules/core-js-pure/internals/array-reduce.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var aCallable = require_a_callable();
    var toObject = require_to_object();
    var IndexedObject = require_indexed_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var TypeError2 = global2.TypeError;
    var createMethod = function(IS_RIGHT) {
      return function(that, callbackfn, argumentsLength, memo2) {
        aCallable(callbackfn);
        var O2 = toObject(that);
        var self2 = IndexedObject(O2);
        var length2 = lengthOfArrayLike(O2);
        var index = IS_RIGHT ? length2 - 1 : 0;
        var i = IS_RIGHT ? -1 : 1;
        if (argumentsLength < 2)
          while (true) {
            if (index in self2) {
              memo2 = self2[index];
              index += i;
              break;
            }
            index += i;
            if (IS_RIGHT ? index < 0 : length2 <= index) {
              throw TypeError2("Reduce of empty array with no initial value");
            }
          }
        for (; IS_RIGHT ? index >= 0 : length2 > index; index += i)
          if (index in self2) {
            memo2 = callbackfn(memo2, self2[index], index, O2);
          }
        return memo2;
      };
    };
    module.exports = {
      left: createMethod(false),
      right: createMethod(true)
    };
  }
});

// node_modules/core-js-pure/modules/es.array.reduce.js
var require_es_array_reduce = __commonJS({
  "node_modules/core-js-pure/modules/es.array.reduce.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $reduce = require_array_reduce().left;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var CHROME_VERSION = require_engine_v8_version();
    var IS_NODE = require_engine_is_node();
    var STRICT_METHOD = arrayMethodIsStrict("reduce");
    var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
    $({ target: "Array", proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {
      reduce: function reduce(callbackfn) {
        var length2 = arguments.length;
        return $reduce(this, callbackfn, length2, length2 > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/reduce.js
var require_reduce = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/reduce.js"(exports, module) {
    init_react();
    require_es_array_reduce();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").reduce;
  }
});

// node_modules/core-js-pure/es/instance/reduce.js
var require_reduce2 = __commonJS({
  "node_modules/core-js-pure/es/instance/reduce.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_reduce();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.reduce;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.reduce ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/reduce.js
var require_reduce3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/reduce.js"(exports, module) {
    init_react();
    var parent = require_reduce2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js
var require_reduce4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js"(exports, module) {
    init_react();
    module.exports = require_reduce3();
  }
});

// node_modules/core-js-pure/internals/string-repeat.js
var require_string_repeat = __commonJS({
  "node_modules/core-js-pure/internals/string-repeat.js"(exports, module) {
    "use strict";
    init_react();
    var global2 = require_global();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toString2 = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var RangeError = global2.RangeError;
    module.exports = function repeat(count) {
      var str = toString2(requireObjectCoercible(this));
      var result = "";
      var n2 = toIntegerOrInfinity(count);
      if (n2 < 0 || n2 == Infinity)
        throw RangeError("Wrong number of repetitions");
      for (; n2 > 0; (n2 >>>= 1) && (str += str))
        if (n2 & 1)
          result += str;
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/string-pad.js
var require_string_pad = __commonJS({
  "node_modules/core-js-pure/internals/string-pad.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var toLength = require_to_length();
    var toString2 = require_to_string();
    var $repeat = require_string_repeat();
    var requireObjectCoercible = require_require_object_coercible();
    var repeat = uncurryThis($repeat);
    var stringSlice = uncurryThis("".slice);
    var ceil = Math.ceil;
    var createMethod = function(IS_END) {
      return function($this, maxLength, fillString) {
        var S2 = toString2(requireObjectCoercible($this));
        var intMaxLength = toLength(maxLength);
        var stringLength = S2.length;
        var fillStr = fillString === void 0 ? " " : toString2(fillString);
        var fillLen, stringFiller;
        if (intMaxLength <= stringLength || fillStr == "")
          return S2;
        fillLen = intMaxLength - stringLength;
        stringFiller = repeat(fillStr, ceil(fillLen / fillStr.length));
        if (stringFiller.length > fillLen)
          stringFiller = stringSlice(stringFiller, 0, fillLen);
        return IS_END ? S2 + stringFiller : stringFiller + S2;
      };
    };
    module.exports = {
      start: createMethod(false),
      end: createMethod(true)
    };
  }
});

// node_modules/core-js-pure/internals/string-pad-webkit-bug.js
var require_string_pad_webkit_bug = __commonJS({
  "node_modules/core-js-pure/internals/string-pad-webkit-bug.js"(exports, module) {
    init_react();
    var userAgent = require_engine_user_agent();
    module.exports = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent);
  }
});

// node_modules/core-js-pure/modules/es.string.pad-start.js
var require_es_string_pad_start = __commonJS({
  "node_modules/core-js-pure/modules/es.string.pad-start.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $padStart = require_string_pad().start;
    var WEBKIT_BUG = require_string_pad_webkit_bug();
    $({ target: "String", proto: true, forced: WEBKIT_BUG }, {
      padStart: function padStart(maxLength) {
        return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/string/virtual/pad-start.js
var require_pad_start = __commonJS({
  "node_modules/core-js-pure/es/string/virtual/pad-start.js"(exports, module) {
    init_react();
    require_es_string_pad_start();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("String").padStart;
  }
});

// node_modules/core-js-pure/es/instance/pad-start.js
var require_pad_start2 = __commonJS({
  "node_modules/core-js-pure/es/instance/pad-start.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_pad_start();
    var StringPrototype = String.prototype;
    module.exports = function(it) {
      var own = it.padStart;
      return typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.padStart ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/pad-start.js
var require_pad_start3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/pad-start.js"(exports, module) {
    init_react();
    var parent = require_pad_start2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/pad-start.js
var require_pad_start4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/pad-start.js"(exports, module) {
    init_react();
    module.exports = require_pad_start3();
  }
});

// node_modules/moralis/lib/browser/MoralisSol.js
var require_MoralisSol = __commonJS({
  "node_modules/moralis/lib/browser/MoralisSol.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _concat = _interopRequireDefault(require_concat4());
    var _filter = _interopRequireDefault(require_filter4());
    var _reduce = _interopRequireDefault(require_reduce4());
    var _padStart = _interopRequireDefault(require_pad_start4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _createSigningData = _interopRequireDefault(require_createSigningData());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var base64 = {
      decode: function(s2) {
        return Uint8Array.from(atob(s2), function(c2) {
          return c2.charCodeAt(0);
        });
      },
      encode: function(b2) {
        return btoa(String.fromCharCode.apply(String, (0, _toConsumableArray2.default)(new Uint8Array(b2))));
      }
    };
    var MoralisSol = /* @__PURE__ */ function() {
      function MoralisSol2() {
        (0, _classCallCheck2.default)(this, MoralisSol2);
      }
      (0, _createClass2.default)(MoralisSol2, null, [{
        key: "authenticate",
        value: function() {
          var _authenticate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(options) {
            var _context, _user$get;
            var phantom, solAddress, accounts, message, data, signature, authData, user;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return MoralisSol2.enable();
                  case 2:
                    phantom = _context2.sent;
                    if (phantom) {
                      _context2.next = 5;
                      break;
                    }
                    throw new Error("Phantom wallet not available");
                  case 5:
                    solAddress = phantom.publicKey.toString();
                    if (solAddress) {
                      _context2.next = 8;
                      break;
                    }
                    throw new Error("Address not found");
                  case 8:
                    accounts = [solAddress];
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisSol2.getSigningData();
                    _context2.next = 12;
                    return (0, _createSigningData.default)(message);
                  case 12:
                    data = _context2.sent;
                    _context2.next = 15;
                    return MoralisSol2.sign(data);
                  case 15:
                    signature = _context2.sent;
                    authData = {
                      id: solAddress,
                      signature,
                      data
                    };
                    _context2.next = 19;
                    return _ParseUser.default.logInWith("moralisSol", {
                      authData
                    });
                  case 19:
                    user = _context2.sent;
                    _context2.next = 22;
                    return user.setACL(new _ParseACL.default(user));
                  case 22:
                    if (user) {
                      _context2.next = 24;
                      break;
                    }
                    throw new Error("Could not get user");
                  case 24:
                    user.set("solAccounts", uniq((0, _concat.default)(_context = []).call(_context, accounts, (_user$get = user.get("solAccounts")) !== null && _user$get !== void 0 ? _user$get : [])));
                    user.set("solAddress", solAddress);
                    _context2.next = 28;
                    return user.save();
                  case 28:
                    return _context2.abrupt("return", user);
                  case 29:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee);
          }));
          return function() {
            return _authenticate.apply(this, arguments);
          };
        }()
      }, {
        key: "link",
        value: function() {
          var _link = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(account, options) {
            var _context3, _user$get2;
            var message, user, solAddress, SolAddress, query, solAddressRecord, data, signature, authData;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisSol2.getSigningData();
                    _context4.next = 3;
                    return _ParseUser.default.current();
                  case 3:
                    user = _context4.sent;
                    solAddress = account;
                    SolAddress = _ParseObject.default.extend("_SolAddress");
                    query = new _ParseQuery.default(SolAddress);
                    _context4.next = 9;
                    return query.get(solAddress).catch(function() {
                      return null;
                    });
                  case 9:
                    solAddressRecord = _context4.sent;
                    if (solAddressRecord) {
                      _context4.next = 20;
                      break;
                    }
                    _context4.next = 13;
                    return (0, _createSigningData.default)(message);
                  case 13:
                    data = _context4.sent;
                    _context4.next = 16;
                    return MoralisSol2.sign(solAddress, data);
                  case 16:
                    signature = _context4.sent;
                    authData = {
                      id: solAddress,
                      signature,
                      data
                    };
                    _context4.next = 20;
                    return user.linkWith("moralisSol", {
                      authData
                    });
                  case 20:
                    user.set("SolAccounts", uniq((0, _concat.default)(_context3 = [solAddress]).call(_context3, (_user$get2 = user.get("SolAccounts")) !== null && _user$get2 !== void 0 ? _user$get2 : [])));
                    user.set("solAddress", solAddress);
                    _context4.next = 24;
                    return user.save();
                  case 24:
                    return _context4.abrupt("return", user);
                  case 25:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee2);
          }));
          return function() {
            return _link.apply(this, arguments);
          };
        }()
      }, {
        key: "unlink",
        value: function() {
          var _unlink = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3(account) {
            var _user$get3;
            var accountsLower, SolAddress, query, solAddressRecord, user, accounts, nextAccounts;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    accountsLower = account;
                    SolAddress = _ParseObject.default.extend("_SolAddress");
                    query = new _ParseQuery.default(SolAddress);
                    _context5.next = 5;
                    return query.get(accountsLower);
                  case 5:
                    solAddressRecord = _context5.sent;
                    _context5.next = 8;
                    return solAddressRecord.destroy();
                  case 8:
                    _context5.next = 10;
                    return _ParseUser.default.current();
                  case 10:
                    user = _context5.sent;
                    accounts = (_user$get3 = user.get("solAccounts")) !== null && _user$get3 !== void 0 ? _user$get3 : [];
                    nextAccounts = (0, _filter.default)(accounts).call(accounts, function(v2) {
                      return v2 !== accountsLower;
                    });
                    user.set("solAccounts", nextAccounts);
                    user.set("solAddress", nextAccounts[0]);
                    _context5.next = 17;
                    return user._unlinkFrom("moralisSol");
                  case 17:
                    _context5.next = 19;
                    return user.save();
                  case 19:
                    return _context5.abrupt("return", user);
                  case 20:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee3);
          }));
          return function() {
            return _unlink.apply(this, arguments);
          };
        }()
      }, {
        key: "sign",
        value: function() {
          var _sign = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(message) {
            var phantom, encodedMessage, signedMessage;
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _context6.next = 2;
                    return MoralisSol2.enable();
                  case 2:
                    phantom = _context6.sent;
                    encodedMessage = new TextEncoder().encode(message);
                    _context6.next = 6;
                    return phantom.signMessage(encodedMessage, "utf8");
                  case 6:
                    signedMessage = _context6.sent;
                    return _context6.abrupt("return", base64.encode(signedMessage.signature));
                  case 8:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee4);
          }));
          return function() {
            return _sign.apply(this, arguments);
          };
        }()
      }, {
        key: "getSigningData",
        value: function() {
          return "Moralis Authentication";
        }
      }]);
      return MoralisSol2;
    }();
    (0, _defineProperty2.default)(MoralisSol, "enable", /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5() {
      var provider;
      return _regenerator.default.wrap(function(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (!(window && "solana" in window)) {
                _context8.next = 17;
                break;
              }
              provider = window.solana;
              if (!provider.isPhantom) {
                _context8.next = 17;
                break;
              }
              _context8.prev = 3;
              _context8.next = 6;
              return provider.connect({
                onlyIfTrusted: true
              });
            case 6:
              _context8.next = 16;
              break;
            case 8:
              _context8.prev = 8;
              _context8.t0 = _context8["catch"](3);
              if (!(_context8.t0.message === "User rejected the request.")) {
                _context8.next = 15;
                break;
              }
              _context8.next = 13;
              return provider.connect();
            case 13:
              _context8.next = 16;
              break;
            case 15:
              throw _context8.t0;
            case 16:
              return _context8.abrupt("return", provider);
            case 17:
              throw new Error("Phantom wallet not available");
            case 18:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee5, null, [[3, 8]]);
    })));
    function uniq(arr) {
      return (0, _filter.default)(arr).call(arr, function(v2, i) {
        return (0, _indexOf.default)(arr).call(arr, v2) === i;
      });
    }
    var _default = MoralisSol;
    exports.default = _default;
  }
});

// node_modules/core-js-pure/internals/is-integral-number.js
var require_is_integral_number = __commonJS({
  "node_modules/core-js-pure/internals/is-integral-number.js"(exports, module) {
    init_react();
    var isObject = require_is_object();
    var floor = Math.floor;
    module.exports = Number.isInteger || function isInteger(it) {
      return !isObject(it) && isFinite(it) && floor(it) === it;
    };
  }
});

// node_modules/core-js-pure/modules/es.number.is-integer.js
var require_es_number_is_integer = __commonJS({
  "node_modules/core-js-pure/modules/es.number.is-integer.js"() {
    init_react();
    var $ = require_export();
    var isIntegralNumber = require_is_integral_number();
    $({ target: "Number", stat: true }, {
      isInteger: isIntegralNumber
    });
  }
});

// node_modules/core-js-pure/es/number/is-integer.js
var require_is_integer = __commonJS({
  "node_modules/core-js-pure/es/number/is-integer.js"(exports, module) {
    init_react();
    require_es_number_is_integer();
    var path = require_path();
    module.exports = path.Number.isInteger;
  }
});

// node_modules/core-js-pure/stable/number/is-integer.js
var require_is_integer2 = __commonJS({
  "node_modules/core-js-pure/stable/number/is-integer.js"(exports, module) {
    init_react();
    var parent = require_is_integer();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/number/is-integer.js
var require_is_integer3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/number/is-integer.js"(exports, module) {
    init_react();
    module.exports = require_is_integer2();
  }
});

// node_modules/moralis/lib/browser/TransferUtils.js
var require_TransferUtils = __commonJS({
  "node_modules/moralis/lib/browser/TransferUtils.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _keys = _interopRequireDefault(require_keys3());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _isInteger = _interopRequireDefault(require_is_integer3());
    var supportedTypes = ["native", "erc20", "erc721", "erc1155"];
    var ERC1155TransferABI = [{
      inputs: [{
        internalType: "address",
        name: "from",
        type: "address"
      }, {
        internalType: "address",
        name: "to",
        type: "address"
      }, {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }, {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }, {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }],
      outputs: [{
        name: "",
        type: "bool"
      }],
      name: "safeTransferFrom",
      type: "function",
      constant: false,
      payable: false
    }, {
      inputs: [{
        internalType: "address",
        name: "from",
        type: "address"
      }, {
        internalType: "address",
        name: "to",
        type: "address"
      }, {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }, {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }],
      outputs: [{
        name: "",
        type: "bool"
      }],
      name: "transferFrom",
      type: "function",
      constant: false,
      payable: false
    }];
    var ERC721TransferABI = [{
      inputs: [{
        internalType: "address",
        name: "from",
        type: "address"
      }, {
        internalType: "address",
        name: "to",
        type: "address"
      }, {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }],
      outputs: [{
        name: "",
        type: "bool"
      }],
      name: "safeTransferFrom",
      type: "function",
      constant: false,
      payable: false
    }, {
      inputs: [{
        internalType: "address",
        name: "from",
        type: "address"
      }, {
        internalType: "address",
        name: "to",
        type: "address"
      }, {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }],
      outputs: [{
        name: "",
        type: "bool"
      }],
      name: "transferFrom",
      type: "function",
      constant: false,
      payable: false
    }];
    var ERC20TransferABI = [{
      constant: false,
      inputs: [{
        name: "_to",
        type: "address"
      }, {
        name: "_value",
        type: "uint256"
      }],
      name: "transfer",
      outputs: [{
        name: "",
        type: "bool"
      }],
      payable: false,
      stateMutability: "nonpayable",
      type: "function"
    }, {
      constant: true,
      inputs: [{
        name: "_owner",
        type: "address"
      }],
      name: "balanceOf",
      outputs: [{
        name: "balance",
        type: "uint256"
      }],
      payable: false,
      stateMutability: "view",
      type: "function"
    }];
    var tokenParams = {
      native: {
        receiver: "",
        amount: ""
      },
      erc20: {
        contractAddress: "",
        receiver: "",
        amount: ""
      },
      erc721: {
        contractAddress: "",
        receiver: "",
        tokenId: ""
      },
      erc1155: {
        contractAddress: "",
        receiver: "",
        tokenId: "",
        amount: ""
      }
    };
    var isNotEmpty = function(value) {
      return typeof value !== "undefined" && value ? true : false;
    };
    var validateInput = function(type, payload) {
      var errors = [];
      var parameters = tokenParams[type];
      for (var _i = 0, _Object$keys = (0, _keys.default)(parameters); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        if (!isNotEmpty(payload[key])) {
          errors.push("".concat(key, " is required"));
        }
      }
      if (errors.length > 0) {
        throw errors;
      }
    };
    var isSupportedType = function(type) {
      if ((0, _indexOf.default)(supportedTypes).call(supportedTypes, type) === -1)
        throw "Unsupported type";
      return true;
    };
    var isUint256 = function(tokenId) {
      if (!(0, _isInteger.default)(+tokenId) || +tokenId < 0)
        throw new Error("Invalid token Id");
      return true;
    };
    module.exports = {
      abi: {
        erc1155: ERC1155TransferABI,
        erc721: ERC721TransferABI,
        erc20: ERC20TransferABI
      },
      validateInput,
      isSupportedType,
      isNotEmpty,
      isUint256
    };
  }
});

// node_modules/moralis/lib/browser/utils/convert.js
var require_convert = __commonJS({
  "node_modules/moralis/lib/browser/utils/convert.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _parseInt2 = _interopRequireDefault(require_parse_int3());
    function fromDecimalToHex(number) {
      if (typeof number !== "number")
        throw "The input provided should be a number";
      return "0x".concat(number.toString(16));
    }
    function fromHexToDecimal(hex) {
      if (typeof hex !== "string")
        throw "The input provided should be a string";
      return (0, _parseInt2.default)(hex, 16);
    }
    module.exports = {
      fromDecimalToHex,
      fromHexToDecimal
    };
  }
});

// node_modules/moralis/lib/browser/utils/verifyChainId.js
var require_verifyChainId = __commonJS({
  "node_modules/moralis/lib/browser/utils/verifyChainId.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _convert = require_convert();
    function verifyChainId(chainId) {
      if (typeof chainId === "number")
        chainId = (0, _convert.fromDecimalToHex)(chainId);
      return chainId;
    }
    var _default = verifyChainId;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/events.js
var require_events2 = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/events.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EthereumEvents = exports.ConnectorEvents = void 0;
    var _freeze = _interopRequireDefault(require_freeze3());
    var EthereumEvents = (0, _freeze.default)({
      CONNECT: "connect",
      DISCONNECT: "disconnect",
      CHAIN_CHANGED: "chainChanged",
      ACCOUNTS_CHANGED: "accountsChanged"
    });
    exports.EthereumEvents = EthereumEvents;
    var ConnectorEvents = (0, _freeze.default)({
      CONNECT: "connect",
      DISCONNECT: "disconnect",
      CHAIN_CHANGED: "chainChanged",
      ACCOUNT_CHANGED: "accountChanged"
    });
    exports.ConnectorEvents = ConnectorEvents;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/AbstractWeb3Connector.js
var require_AbstractWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/AbstractWeb3Connector.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _bind = _interopRequireDefault(require_bind7());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _events = _interopRequireDefault(require_events());
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    var _events2 = require_events2();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var AbstractWeb3Connector = /* @__PURE__ */ function(_EventEmitter) {
      (0, _inherits2.default)(AbstractWeb3Connector2, _EventEmitter);
      var _super = _createSuper(AbstractWeb3Connector2);
      function AbstractWeb3Connector2() {
        var _context, _context2, _context3, _context4;
        var _this;
        (0, _classCallCheck2.default)(this, AbstractWeb3Connector2);
        _this = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", "abstract");
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "network", "evm");
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "account", null);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "chainId", null);
        _this.handleAccountsChanged = (0, _bind.default)(_context = _this.handleAccountsChanged).call(_context, (0, _assertThisInitialized2.default)(_this));
        _this.handleChainChanged = (0, _bind.default)(_context2 = _this.handleChainChanged).call(_context2, (0, _assertThisInitialized2.default)(_this));
        _this.handleConnect = (0, _bind.default)(_context3 = _this.handleConnect).call(_context3, (0, _assertThisInitialized2.default)(_this));
        _this.handleDisconnect = (0, _bind.default)(_context4 = _this.handleDisconnect).call(_context4, (0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      (0, _createClass2.default)(AbstractWeb3Connector2, [{
        key: "subscribeToEvents",
        value: function(provider) {
          if (provider && provider.on) {
            provider.on(_events2.EthereumEvents.CHAIN_CHANGED, this.handleChainChanged);
            provider.on(_events2.EthereumEvents.ACCOUNTS_CHANGED, this.handleAccountsChanged);
            provider.on(_events2.EthereumEvents.CONNECT, this.handleConnect);
            provider.on(_events2.EthereumEvents.DISCONNECT, this.handleDisconnect);
          }
        }
      }, {
        key: "unsubscribeToEvents",
        value: function(provider) {
          if (provider && provider.removeListener) {
            provider.removeListener(_events2.EthereumEvents.CHAIN_CHANGED, this.handleChainChanged);
            provider.removeListener(_events2.EthereumEvents.ACCOUNTS_CHANGED, this.handleAccountsChanged);
            provider.removeListener(_events2.EthereumEvents.CONNECT, this.handleConnect);
            provider.removeListener(_events2.EthereumEvents.DISCONNECT, this.handleDisconnect);
          }
        }
      }, {
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    throw new Error("Not implemented: activate()");
                  case 1:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }, {
        key: "handleAccountsChanged",
        value: function(accounts) {
          var account = accounts && accounts[0] ? accounts[0].toLowerCase() : null;
          this.account = account;
          this.emit(_events2.ConnectorEvents.ACCOUNT_CHANGED, account);
        }
      }, {
        key: "handleChainChanged",
        value: function(chainId) {
          var newChainId = (0, _verifyChainId.default)(chainId);
          this.chainId = newChainId;
          this.emit(_events2.ConnectorEvents.CHAIN_CHANGED, newChainId);
        }
      }, {
        key: "handleConnect",
        value: function(connectInfo) {
          this.emit(_events2.ConnectorEvents.CONNECT, connectInfo);
        }
      }, {
        key: "handleDisconnect",
        value: function(error) {
          this.emit(_events2.ConnectorEvents.DISCONNECT, error);
        }
      }, {
        key: "deactivate",
        value: function() {
          var _deactivate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    this.unsubscribeToEvents(this.provider);
                    this.account = null;
                    this.chainId = null;
                  case 3:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _deactivate.apply(this, arguments);
          };
        }()
      }]);
      return AbstractWeb3Connector2;
    }(_events.default);
    var _default = AbstractWeb3Connector;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/MoralisRpcs.js
var require_MoralisRpcs = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/MoralisRpcs.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getMoralisRpcs = void 0;
    var getMoralisRpcs = function(speedyNodeKey) {
      return {
        1: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/mainnet"),
        3: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/ropsten"),
        4: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/rinkeby"),
        5: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/goerli"),
        42: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/kovan"),
        137: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/polygon/mainnet"),
        80001: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/polygon/mumbai"),
        56: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/bsc/mainnet"),
        97: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/bsc/testnet"),
        43114: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/avalanche/mainnet"),
        43113: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/avalanche/testnet"),
        250: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/fantom/mainnet")
      };
    };
    exports.getMoralisRpcs = getMoralisRpcs;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/WalletConnectWeb3Connector.js
var require_WalletConnectWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/WalletConnectWeb3Connector.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.WalletConnectEvent = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _concat = _interopRequireDefault(require_concat4());
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    var _events = require_events2();
    var _MoralisRpcs = require_MoralisRpcs();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var WalletConnectEvent = (0, _freeze.default)({
      ACCOUNTS_CHANGED: "accountsChanged",
      CHAIN_CHANGED: "chainChanged",
      DISCONNECT: "disconnect"
    });
    exports.WalletConnectEvent = WalletConnectEvent;
    var WalletConnectWeb3Connector = /* @__PURE__ */ function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(WalletConnectWeb3Connector2, _AbstractWeb3Connecto);
      var _super = _createSuper(WalletConnectWeb3Connector2);
      function WalletConnectWeb3Connector2() {
        var _context;
        var _this;
        (0, _classCallCheck2.default)(this, WalletConnectWeb3Connector2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, (0, _concat.default)(_context = [this]).call(_context, args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", "WalletConnect");
        return _this;
      }
      (0, _createClass2.default)(WalletConnectWeb3Connector2, [{
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
            var _ref, providedChainId, mobileLinks, newSession, WalletConnectProvider, config, _require, _window, _window$WalletConnect, accounts, account, chainId, verifiedChainId, _args = arguments;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _ref = _args.length > 0 && _args[0] !== void 0 ? _args[0] : {}, providedChainId = _ref.chainId, mobileLinks = _ref.mobileLinks, newSession = _ref.newSession;
                    if (newSession) {
                      this.cleanup();
                    }
                    if (this.provider) {
                      _context2.next = 9;
                      break;
                    }
                    config = {
                      rpc: (0, _MoralisRpcs.getMoralisRpcs)("WalletConnect"),
                      chainId: providedChainId,
                      qrcodeModalOptions: {
                        mobileLinks
                      }
                    };
                    try {
                      WalletConnectProvider = (_require = __require("@walletconnect/web3-provider")) === null || _require === void 0 ? void 0 : _require.default;
                    } catch (error) {
                    }
                    if (!WalletConnectProvider) {
                      WalletConnectProvider = (_window = window) === null || _window === void 0 ? void 0 : (_window$WalletConnect = _window.WalletConnectProvider) === null || _window$WalletConnect === void 0 ? void 0 : _window$WalletConnect.default;
                    }
                    if (WalletConnectProvider) {
                      _context2.next = 8;
                      break;
                    }
                    throw new Error('Cannot enable via WalletConnect: dependency "@walletconnect/web3-provider" is missing');
                  case 8:
                    if (typeof WalletConnectProvider === "function") {
                      this.provider = new WalletConnectProvider(config);
                    } else {
                      this.provider = new window.WalletConnectProvider(config);
                    }
                  case 9:
                    if (this.provider) {
                      _context2.next = 11;
                      break;
                    }
                    throw new Error("Could not connect via WalletConnect, error in connecting to provider");
                  case 11:
                    _context2.next = 13;
                    return this.provider.enable();
                  case 13:
                    accounts = _context2.sent;
                    account = accounts[0].toLowerCase();
                    chainId = this.provider.chainId;
                    verifiedChainId = (0, _verifyChainId.default)(chainId);
                    this.account = account;
                    this.chainId = verifiedChainId;
                    this.subscribeToEvents(this.provider);
                    return _context2.abrupt("return", {
                      provider: this.provider,
                      account,
                      chainId: verifiedChainId
                    });
                  case 21:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }, {
        key: "cleanup",
        value: function() {
          try {
            if (window) {
              window.localStorage.removeItem("walletconnect");
            }
          } catch (error) {
          }
        }
      }, {
        key: "deactivate",
        value: function() {
          var _deactivate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    this.unsubscribeToEvents(this.provider);
                    if (!this.provider) {
                      _context3.next = 9;
                      break;
                    }
                    _context3.prev = 2;
                    _context3.next = 5;
                    return this.provider.close();
                  case 5:
                    _context3.next = 9;
                    break;
                  case 7:
                    _context3.prev = 7;
                    _context3.t0 = _context3["catch"](2);
                  case 9:
                    this.account = null;
                    this.chainId = null;
                    this.provider = null;
                  case 12:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this, [[2, 7]]);
          }));
          return function() {
            return _deactivate.apply(this, arguments);
          };
        }()
      }]);
      return WalletConnectWeb3Connector2;
    }(_AbstractWeb3Connector.default);
    var _default = WalletConnectWeb3Connector;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/InjectedWeb3Connector.js
var require_InjectedWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/InjectedWeb3Connector.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.InjectedEvents = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _wrapNativeSuper2 = _interopRequireDefault(require_wrapNativeSuper());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _concat = _interopRequireDefault(require_concat4());
    var _promise = _interopRequireDefault(require_promise3());
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    var _events = _interopRequireDefault(require_events());
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var InjectedEvents = (0, _freeze.default)({
      ACCOUNTS_CHANGED: "accountsChanged",
      CHAIN_CHANGED: "chainChanged",
      CONNECT: "connect",
      DISCONNECT: "disconnect"
    });
    exports.InjectedEvents = InjectedEvents;
    var NoEthereumProviderError = /* @__PURE__ */ function(_Error) {
      (0, _inherits2.default)(NoEthereumProviderError2, _Error);
      var _super = _createSuper(NoEthereumProviderError2);
      function NoEthereumProviderError2() {
        var _this;
        (0, _classCallCheck2.default)(this, NoEthereumProviderError2);
        _this = _super.call(this);
        _this.message = "Non ethereum enabled browser";
        return _this;
      }
      return (0, _createClass2.default)(NoEthereumProviderError2);
    }(/* @__PURE__ */ (0, _wrapNativeSuper2.default)(Error));
    var InjectedWeb3Connector = /* @__PURE__ */ function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(InjectedWeb3Connector2, _AbstractWeb3Connecto);
      var _super2 = _createSuper(InjectedWeb3Connector2);
      function InjectedWeb3Connector2() {
        var _context;
        var _this2;
        (0, _classCallCheck2.default)(this, InjectedWeb3Connector2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this2 = _super2.call.apply(_super2, (0, _concat.default)(_context = [this]).call(_context, args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "type", "injected");
        return _this2;
      }
      (0, _createClass2.default)(InjectedWeb3Connector2, [{
        key: "verifyEthereumBrowser",
        value: function() {
          var _window;
          if (!((_window = window) !== null && _window !== void 0 && _window.ethereum)) {
            throw new NoEthereumProviderError();
          }
        }
      }, {
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
            var _yield$Promise$all, _yield$Promise$all2, accounts, chainId, account, provider;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    this.verifyEthereumBrowser();
                    _context2.next = 3;
                    return _promise.default.all([window.ethereum.request({
                      method: "eth_requestAccounts"
                    }), window.ethereum.request({
                      method: "eth_chainId"
                    })]);
                  case 3:
                    _yield$Promise$all = _context2.sent;
                    _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2);
                    accounts = _yield$Promise$all2[0];
                    chainId = _yield$Promise$all2[1];
                    account = accounts[0] ? accounts[0].toLowerCase() : null;
                    provider = window.ethereum;
                    this.chainId = chainId;
                    this.account = account;
                    this.provider = provider;
                    this.subscribeToEvents(provider);
                    return _context2.abrupt("return", {
                      provider,
                      chainId,
                      account
                    });
                  case 14:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }, {
        key: "switchNetwork",
        value: function() {
          var _switchNetwork = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(chainId) {
            var currentNetwork;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    this.verifyEthereumBrowser();
                    chainId = (0, _verifyChainId.default)(chainId);
                    currentNetwork = this.chainId;
                    if (!(currentNetwork === chainId)) {
                      _context3.next = 5;
                      break;
                    }
                    return _context3.abrupt("return");
                  case 5:
                    _context3.next = 7;
                    return window.ethereum.request({
                      method: "wallet_switchEthereumChain",
                      params: [{
                        chainId
                      }]
                    });
                  case 7:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _switchNetwork.apply(this, arguments);
          };
        }()
      }, {
        key: "addNetwork",
        value: function() {
          var _addNetwork = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3(chainId, chainName, currencyName, currencySymbol, rpcUrl, blockExplorerUrl) {
            var newchainId;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    this.verifyEthereumBrowser();
                    newchainId = (0, _verifyChainId.default)(chainId);
                    _context4.next = 4;
                    return window.ethereum.request({
                      method: "wallet_addEthereumChain",
                      params: [{
                        chainId: newchainId,
                        chainName,
                        nativeCurrency: {
                          name: currencyName,
                          symbol: currencySymbol,
                          decimals: 18
                        },
                        rpcUrls: [rpcUrl],
                        blockExplorerUrls: blockExplorerUrl ? [blockExplorerUrl] : null
                      }]
                    });
                  case 4:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee3, this);
          }));
          return function() {
            return _addNetwork.apply(this, arguments);
          };
        }()
      }]);
      return InjectedWeb3Connector2;
    }(_AbstractWeb3Connector.default);
    var _default = InjectedWeb3Connector;
    exports.default = _default;
  }
});

// node_modules/core-js-pure/internals/native-url.js
var require_native_url = __commonJS({
  "node_modules/core-js-pure/internals/native-url.js"(exports, module) {
    init_react();
    var fails = require_fails();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_PURE = require_is_pure();
    var ITERATOR = wellKnownSymbol("iterator");
    module.exports = !fails(function() {
      var url = new URL("b?a=1&b=2&c=3", "http://a");
      var searchParams = url.searchParams;
      var result = "";
      url.pathname = "c%20d";
      searchParams.forEach(function(value, key) {
        searchParams["delete"]("b");
        result += key + value;
      });
      return IS_PURE && !url.toJSON || !searchParams.sort || url.href !== "http://a/c%20d?a=1&c=3" || searchParams.get("c") !== "3" || String(new URLSearchParams("?a=1")) !== "a=1" || !searchParams[ITERATOR] || new URL("https://a@b").username !== "a" || new URLSearchParams(new URLSearchParams("a=b")).get("a") !== "b" || new URL("http://\u0442\u0435\u0441\u0442").host !== "xn--e1aybc" || new URL("http://a#\u0431").hash !== "#%D0%B1" || result !== "a1c3" || new URL("http://x", void 0).host !== "x";
    });
  }
});

// node_modules/core-js-pure/internals/object-assign.js
var require_object_assign2 = __commonJS({
  "node_modules/core-js-pure/internals/object-assign.js"(exports, module) {
    "use strict";
    init_react();
    var DESCRIPTORS = require_descriptors();
    var uncurryThis = require_function_uncurry_this();
    var call = require_function_call();
    var fails = require_fails();
    var objectKeys = require_object_keys();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var toObject = require_to_object();
    var IndexedObject = require_indexed_object();
    var $assign = Object.assign;
    var defineProperty = Object.defineProperty;
    var concat2 = uncurryThis([].concat);
    module.exports = !$assign || fails(function() {
      if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, "a", {
        enumerable: true,
        get: function() {
          defineProperty(this, "b", {
            value: 3,
            enumerable: false
          });
        }
      }), { b: 2 })).b !== 1)
        return true;
      var A2 = {};
      var B2 = {};
      var symbol = Symbol();
      var alphabet = "abcdefghijklmnopqrst";
      A2[symbol] = 7;
      alphabet.split("").forEach(function(chr) {
        B2[chr] = chr;
      });
      return $assign({}, A2)[symbol] != 7 || objectKeys($assign({}, B2)).join("") != alphabet;
    }) ? function assign2(target, source) {
      var T = toObject(target);
      var argumentsLength = arguments.length;
      var index = 1;
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      var propertyIsEnumerable = propertyIsEnumerableModule.f;
      while (argumentsLength > index) {
        var S2 = IndexedObject(arguments[index++]);
        var keys = getOwnPropertySymbols ? concat2(objectKeys(S2), getOwnPropertySymbols(S2)) : objectKeys(S2);
        var length2 = keys.length;
        var j2 = 0;
        var key;
        while (length2 > j2) {
          key = keys[j2++];
          if (!DESCRIPTORS || call(propertyIsEnumerable, S2, key))
            T[key] = S2[key];
        }
      }
      return T;
    } : $assign;
  }
});

// node_modules/core-js-pure/internals/string-punycode-to-ascii.js
var require_string_punycode_to_ascii = __commonJS({
  "node_modules/core-js-pure/internals/string-punycode-to-ascii.js"(exports, module) {
    "use strict";
    init_react();
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    var maxInt = 2147483647;
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128;
    var delimiter2 = "-";
    var regexNonASCII = /[^\0-\u007E]/;
    var regexSeparators = /[.\u3002\uFF0E\uFF61]/g;
    var OVERFLOW_ERROR = "Overflow: input needs wider integers to process";
    var baseMinusTMin = base - tMin;
    var RangeError = global2.RangeError;
    var exec = uncurryThis(regexSeparators.exec);
    var floor = Math.floor;
    var fromCharCode = String.fromCharCode;
    var charCodeAt = uncurryThis("".charCodeAt);
    var join = uncurryThis([].join);
    var push = uncurryThis([].push);
    var replace2 = uncurryThis("".replace);
    var split = uncurryThis("".split);
    var toLowerCase = uncurryThis("".toLowerCase);
    var ucs2decode = function(string) {
      var output = [];
      var counter = 0;
      var length2 = string.length;
      while (counter < length2) {
        var value = charCodeAt(string, counter++);
        if (value >= 55296 && value <= 56319 && counter < length2) {
          var extra = charCodeAt(string, counter++);
          if ((extra & 64512) == 56320) {
            push(output, ((value & 1023) << 10) + (extra & 1023) + 65536);
          } else {
            push(output, value);
            counter--;
          }
        } else {
          push(output, value);
        }
      }
      return output;
    };
    var digitToBasic = function(digit) {
      return digit + 22 + 75 * (digit < 26);
    };
    var adapt = function(delta, numPoints, firstTime) {
      var k2 = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      while (delta > baseMinusTMin * tMax >> 1) {
        delta = floor(delta / baseMinusTMin);
        k2 += base;
      }
      return floor(k2 + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    var encode2 = function(input) {
      var output = [];
      input = ucs2decode(input);
      var inputLength = input.length;
      var n2 = initialN;
      var delta = 0;
      var bias = initialBias;
      var i, currentValue;
      for (i = 0; i < input.length; i++) {
        currentValue = input[i];
        if (currentValue < 128) {
          push(output, fromCharCode(currentValue));
        }
      }
      var basicLength = output.length;
      var handledCPCount = basicLength;
      if (basicLength) {
        push(output, delimiter2);
      }
      while (handledCPCount < inputLength) {
        var m = maxInt;
        for (i = 0; i < input.length; i++) {
          currentValue = input[i];
          if (currentValue >= n2 && currentValue < m) {
            m = currentValue;
          }
        }
        var handledCPCountPlusOne = handledCPCount + 1;
        if (m - n2 > floor((maxInt - delta) / handledCPCountPlusOne)) {
          throw RangeError(OVERFLOW_ERROR);
        }
        delta += (m - n2) * handledCPCountPlusOne;
        n2 = m;
        for (i = 0; i < input.length; i++) {
          currentValue = input[i];
          if (currentValue < n2 && ++delta > maxInt) {
            throw RangeError(OVERFLOW_ERROR);
          }
          if (currentValue == n2) {
            var q2 = delta;
            var k2 = base;
            while (true) {
              var t2 = k2 <= bias ? tMin : k2 >= bias + tMax ? tMax : k2 - bias;
              if (q2 < t2)
                break;
              var qMinusT = q2 - t2;
              var baseMinusT = base - t2;
              push(output, fromCharCode(digitToBasic(t2 + qMinusT % baseMinusT)));
              q2 = floor(qMinusT / baseMinusT);
              k2 += base;
            }
            push(output, fromCharCode(digitToBasic(q2)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            handledCPCount++;
          }
        }
        delta++;
        n2++;
      }
      return join(output, "");
    };
    module.exports = function(input) {
      var encoded = [];
      var labels = split(replace2(toLowerCase(input), regexSeparators, "."), ".");
      var i, label;
      for (i = 0; i < labels.length; i++) {
        label = labels[i];
        push(encoded, exec(regexNonASCII, label) ? "xn--" + encode2(label) : label);
      }
      return join(encoded, ".");
    };
  }
});

// node_modules/core-js-pure/modules/web.url-search-params.js
var require_web_url_search_params = __commonJS({
  "node_modules/core-js-pure/modules/web.url-search-params.js"(exports, module) {
    "use strict";
    init_react();
    require_es_array_iterator();
    var $ = require_export();
    var global2 = require_global();
    var getBuiltIn = require_get_built_in();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var USE_NATIVE_URL = require_native_url();
    var redefine = require_redefine();
    var redefineAll = require_redefine_all();
    var setToStringTag = require_set_to_string_tag();
    var createIteratorConstructor = require_create_iterator_constructor();
    var InternalStateModule = require_internal_state();
    var anInstance = require_an_instance();
    var isCallable = require_is_callable();
    var hasOwn = require_has_own_property();
    var bind = require_function_bind_context();
    var classof = require_classof();
    var anObject = require_an_object();
    var isObject = require_is_object();
    var $toString = require_to_string();
    var create = require_object_create();
    var createPropertyDescriptor = require_create_property_descriptor();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var validateArgumentsLength = require_validate_arguments_length();
    var wellKnownSymbol = require_well_known_symbol();
    var arraySort = require_array_sort();
    var ITERATOR = wellKnownSymbol("iterator");
    var URL_SEARCH_PARAMS = "URLSearchParams";
    var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + "Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
    var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
    var n$Fetch = getBuiltIn("fetch");
    var N$Request = getBuiltIn("Request");
    var Headers = getBuiltIn("Headers");
    var RequestPrototype = N$Request && N$Request.prototype;
    var HeadersPrototype = Headers && Headers.prototype;
    var RegExp2 = global2.RegExp;
    var TypeError2 = global2.TypeError;
    var decodeURIComponent2 = global2.decodeURIComponent;
    var encodeURIComponent2 = global2.encodeURIComponent;
    var charAt = uncurryThis("".charAt);
    var join = uncurryThis([].join);
    var push = uncurryThis([].push);
    var replace2 = uncurryThis("".replace);
    var shift = uncurryThis([].shift);
    var splice = uncurryThis([].splice);
    var split = uncurryThis("".split);
    var stringSlice = uncurryThis("".slice);
    var plus = /\+/g;
    var sequences = Array(4);
    var percentSequence = function(bytes) {
      return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp2("((?:%[\\da-f]{2}){" + bytes + "})", "gi"));
    };
    var percentDecode = function(sequence) {
      try {
        return decodeURIComponent2(sequence);
      } catch (error) {
        return sequence;
      }
    };
    var deserialize = function(it) {
      var result = replace2(it, plus, " ");
      var bytes = 4;
      try {
        return decodeURIComponent2(result);
      } catch (error) {
        while (bytes) {
          result = replace2(result, percentSequence(bytes--), percentDecode);
        }
        return result;
      }
    };
    var find = /[!'()~]|%20/g;
    var replacements = {
      "!": "%21",
      "'": "%27",
      "(": "%28",
      ")": "%29",
      "~": "%7E",
      "%20": "+"
    };
    var replacer = function(match2) {
      return replacements[match2];
    };
    var serialize4 = function(it) {
      return replace2(encodeURIComponent2(it), find, replacer);
    };
    var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
      setInternalState(this, {
        type: URL_SEARCH_PARAMS_ITERATOR,
        iterator: getIterator(getInternalParamsState(params).entries),
        kind
      });
    }, "Iterator", function next2() {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var step = state.iterator.next();
      var entry = step.value;
      if (!step.done) {
        step.value = kind === "keys" ? entry.key : kind === "values" ? entry.value : [entry.key, entry.value];
      }
      return step;
    }, true);
    var URLSearchParamsState = function(init) {
      this.entries = [];
      this.url = null;
      if (init !== void 0) {
        if (isObject(init))
          this.parseObject(init);
        else
          this.parseQuery(typeof init == "string" ? charAt(init, 0) === "?" ? stringSlice(init, 1) : init : $toString(init));
      }
    };
    URLSearchParamsState.prototype = {
      type: URL_SEARCH_PARAMS,
      bindURL: function(url) {
        this.url = url;
        this.update();
      },
      parseObject: function(object) {
        var iteratorMethod = getIteratorMethod(object);
        var iterator, next2, step, entryIterator, entryNext, first, second;
        if (iteratorMethod) {
          iterator = getIterator(object, iteratorMethod);
          next2 = iterator.next;
          while (!(step = call(next2, iterator)).done) {
            entryIterator = getIterator(anObject(step.value));
            entryNext = entryIterator.next;
            if ((first = call(entryNext, entryIterator)).done || (second = call(entryNext, entryIterator)).done || !call(entryNext, entryIterator).done)
              throw TypeError2("Expected sequence with length 2");
            push(this.entries, { key: $toString(first.value), value: $toString(second.value) });
          }
        } else
          for (var key in object)
            if (hasOwn(object, key)) {
              push(this.entries, { key, value: $toString(object[key]) });
            }
      },
      parseQuery: function(query) {
        if (query) {
          var attributes = split(query, "&");
          var index = 0;
          var attribute, entry;
          while (index < attributes.length) {
            attribute = attributes[index++];
            if (attribute.length) {
              entry = split(attribute, "=");
              push(this.entries, {
                key: deserialize(shift(entry)),
                value: deserialize(join(entry, "="))
              });
            }
          }
        }
      },
      serialize: function() {
        var entries = this.entries;
        var result = [];
        var index = 0;
        var entry;
        while (index < entries.length) {
          entry = entries[index++];
          push(result, serialize4(entry.key) + "=" + serialize4(entry.value));
        }
        return join(result, "&");
      },
      update: function() {
        this.entries.length = 0;
        this.parseQuery(this.url.query);
      },
      updateURL: function() {
        if (this.url)
          this.url.update();
      }
    };
    var URLSearchParamsConstructor = function URLSearchParams2() {
      anInstance(this, URLSearchParamsPrototype);
      var init = arguments.length > 0 ? arguments[0] : void 0;
      setInternalState(this, new URLSearchParamsState(init));
    };
    var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
    redefineAll(URLSearchParamsPrototype, {
      append: function append2(name2, value) {
        validateArgumentsLength(arguments.length, 2);
        var state = getInternalParamsState(this);
        push(state.entries, { key: $toString(name2), value: $toString(value) });
        state.updateURL();
      },
      "delete": function(name2) {
        validateArgumentsLength(arguments.length, 1);
        var state = getInternalParamsState(this);
        var entries = state.entries;
        var key = $toString(name2);
        var index = 0;
        while (index < entries.length) {
          if (entries[index].key === key)
            splice(entries, index, 1);
          else
            index++;
        }
        state.updateURL();
      },
      get: function get(name2) {
        validateArgumentsLength(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key = $toString(name2);
        var index = 0;
        for (; index < entries.length; index++) {
          if (entries[index].key === key)
            return entries[index].value;
        }
        return null;
      },
      getAll: function getAll(name2) {
        validateArgumentsLength(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key = $toString(name2);
        var result = [];
        var index = 0;
        for (; index < entries.length; index++) {
          if (entries[index].key === key)
            push(result, entries[index].value);
        }
        return result;
      },
      has: function has(name2) {
        validateArgumentsLength(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key = $toString(name2);
        var index = 0;
        while (index < entries.length) {
          if (entries[index++].key === key)
            return true;
        }
        return false;
      },
      set: function set(name2, value) {
        validateArgumentsLength(arguments.length, 1);
        var state = getInternalParamsState(this);
        var entries = state.entries;
        var found = false;
        var key = $toString(name2);
        var val = $toString(value);
        var index = 0;
        var entry;
        for (; index < entries.length; index++) {
          entry = entries[index];
          if (entry.key === key) {
            if (found)
              splice(entries, index--, 1);
            else {
              found = true;
              entry.value = val;
            }
          }
        }
        if (!found)
          push(entries, { key, value: val });
        state.updateURL();
      },
      sort: function sort() {
        var state = getInternalParamsState(this);
        arraySort(state.entries, function(a2, b2) {
          return a2.key > b2.key ? 1 : -1;
        });
        state.updateURL();
      },
      forEach: function forEach(callback) {
        var entries = getInternalParamsState(this).entries;
        var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : void 0);
        var index = 0;
        var entry;
        while (index < entries.length) {
          entry = entries[index++];
          boundFunction(entry.value, entry.key, this);
        }
      },
      keys: function keys() {
        return new URLSearchParamsIterator(this, "keys");
      },
      values: function values() {
        return new URLSearchParamsIterator(this, "values");
      },
      entries: function entries() {
        return new URLSearchParamsIterator(this, "entries");
      }
    }, { enumerable: true });
    redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, { name: "entries" });
    redefine(URLSearchParamsPrototype, "toString", function toString2() {
      return getInternalParamsState(this).serialize();
    }, { enumerable: true });
    setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
    $({ global: true, forced: !USE_NATIVE_URL }, {
      URLSearchParams: URLSearchParamsConstructor
    });
    if (!USE_NATIVE_URL && isCallable(Headers)) {
      headersHas = uncurryThis(HeadersPrototype.has);
      headersSet = uncurryThis(HeadersPrototype.set);
      wrapRequestOptions = function(init) {
        if (isObject(init)) {
          var body = init.body;
          var headers;
          if (classof(body) === URL_SEARCH_PARAMS) {
            headers = init.headers ? new Headers(init.headers) : new Headers();
            if (!headersHas(headers, "content-type")) {
              headersSet(headers, "content-type", "application/x-www-form-urlencoded;charset=UTF-8");
            }
            return create(init, {
              body: createPropertyDescriptor(0, $toString(body)),
              headers: createPropertyDescriptor(0, headers)
            });
          }
        }
        return init;
      };
      if (isCallable(n$Fetch)) {
        $({ global: true, enumerable: true, forced: true }, {
          fetch: function fetch2(input) {
            return n$Fetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
          }
        });
      }
      if (isCallable(N$Request)) {
        RequestConstructor = function Request(input) {
          anInstance(this, RequestPrototype);
          return new N$Request(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
        };
        RequestPrototype.constructor = RequestConstructor;
        RequestConstructor.prototype = RequestPrototype;
        $({ global: true, forced: true }, {
          Request: RequestConstructor
        });
      }
    }
    var headersHas;
    var headersSet;
    var wrapRequestOptions;
    var RequestConstructor;
    module.exports = {
      URLSearchParams: URLSearchParamsConstructor,
      getState: getInternalParamsState
    };
  }
});

// node_modules/core-js-pure/modules/web.url.js
var require_web_url = __commonJS({
  "node_modules/core-js-pure/modules/web.url.js"() {
    "use strict";
    init_react();
    require_es_string_iterator();
    var $ = require_export();
    var DESCRIPTORS = require_descriptors();
    var USE_NATIVE_URL = require_native_url();
    var global2 = require_global();
    var bind = require_function_bind_context();
    var uncurryThis = require_function_uncurry_this();
    var defineProperties = require_object_define_properties().f;
    var redefine = require_redefine();
    var anInstance = require_an_instance();
    var hasOwn = require_has_own_property();
    var assign2 = require_object_assign2();
    var arrayFrom = require_array_from();
    var arraySlice = require_array_slice_simple();
    var codeAt = require_string_multibyte().codeAt;
    var toASCII = require_string_punycode_to_ascii();
    var $toString = require_to_string();
    var setToStringTag = require_set_to_string_tag();
    var validateArgumentsLength = require_validate_arguments_length();
    var URLSearchParamsModule = require_web_url_search_params();
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var getInternalURLState = InternalStateModule.getterFor("URL");
    var URLSearchParams2 = URLSearchParamsModule.URLSearchParams;
    var getInternalSearchParamsState = URLSearchParamsModule.getState;
    var NativeURL = global2.URL;
    var TypeError2 = global2.TypeError;
    var parseInt2 = global2.parseInt;
    var floor = Math.floor;
    var pow = Math.pow;
    var charAt = uncurryThis("".charAt);
    var exec = uncurryThis(/./.exec);
    var join = uncurryThis([].join);
    var numberToString = uncurryThis(1 .toString);
    var pop = uncurryThis([].pop);
    var push = uncurryThis([].push);
    var replace2 = uncurryThis("".replace);
    var shift = uncurryThis([].shift);
    var split = uncurryThis("".split);
    var stringSlice = uncurryThis("".slice);
    var toLowerCase = uncurryThis("".toLowerCase);
    var unshift = uncurryThis([].unshift);
    var INVALID_AUTHORITY = "Invalid authority";
    var INVALID_SCHEME = "Invalid scheme";
    var INVALID_HOST = "Invalid host";
    var INVALID_PORT = "Invalid port";
    var ALPHA = /[a-z]/i;
    var ALPHANUMERIC = /[\d+-.a-z]/i;
    var DIGIT = /\d/;
    var HEX_START = /^0x/i;
    var OCT = /^[0-7]+$/;
    var DEC = /^\d+$/;
    var HEX = /^[\da-f]+$/i;
    var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
    var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
    var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
    var TAB_AND_NEW_LINE = /[\t\n\r]/g;
    var EOF;
    var parseIPv4 = function(input) {
      var parts = split(input, ".");
      var partsLength, numbers, index, part, radix, number, ipv4;
      if (parts.length && parts[parts.length - 1] == "") {
        parts.length--;
      }
      partsLength = parts.length;
      if (partsLength > 4)
        return input;
      numbers = [];
      for (index = 0; index < partsLength; index++) {
        part = parts[index];
        if (part == "")
          return input;
        radix = 10;
        if (part.length > 1 && charAt(part, 0) == "0") {
          radix = exec(HEX_START, part) ? 16 : 8;
          part = stringSlice(part, radix == 8 ? 1 : 2);
        }
        if (part === "") {
          number = 0;
        } else {
          if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part))
            return input;
          number = parseInt2(part, radix);
        }
        push(numbers, number);
      }
      for (index = 0; index < partsLength; index++) {
        number = numbers[index];
        if (index == partsLength - 1) {
          if (number >= pow(256, 5 - partsLength))
            return null;
        } else if (number > 255)
          return null;
      }
      ipv4 = pop(numbers);
      for (index = 0; index < numbers.length; index++) {
        ipv4 += numbers[index] * pow(256, 3 - index);
      }
      return ipv4;
    };
    var parseIPv6 = function(input) {
      var address = [0, 0, 0, 0, 0, 0, 0, 0];
      var pieceIndex = 0;
      var compress = null;
      var pointer = 0;
      var value, length2, numbersSeen, ipv4Piece, number, swaps, swap;
      var chr = function() {
        return charAt(input, pointer);
      };
      if (chr() == ":") {
        if (charAt(input, 1) != ":")
          return;
        pointer += 2;
        pieceIndex++;
        compress = pieceIndex;
      }
      while (chr()) {
        if (pieceIndex == 8)
          return;
        if (chr() == ":") {
          if (compress !== null)
            return;
          pointer++;
          pieceIndex++;
          compress = pieceIndex;
          continue;
        }
        value = length2 = 0;
        while (length2 < 4 && exec(HEX, chr())) {
          value = value * 16 + parseInt2(chr(), 16);
          pointer++;
          length2++;
        }
        if (chr() == ".") {
          if (length2 == 0)
            return;
          pointer -= length2;
          if (pieceIndex > 6)
            return;
          numbersSeen = 0;
          while (chr()) {
            ipv4Piece = null;
            if (numbersSeen > 0) {
              if (chr() == "." && numbersSeen < 4)
                pointer++;
              else
                return;
            }
            if (!exec(DIGIT, chr()))
              return;
            while (exec(DIGIT, chr())) {
              number = parseInt2(chr(), 10);
              if (ipv4Piece === null)
                ipv4Piece = number;
              else if (ipv4Piece == 0)
                return;
              else
                ipv4Piece = ipv4Piece * 10 + number;
              if (ipv4Piece > 255)
                return;
              pointer++;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            numbersSeen++;
            if (numbersSeen == 2 || numbersSeen == 4)
              pieceIndex++;
          }
          if (numbersSeen != 4)
            return;
          break;
        } else if (chr() == ":") {
          pointer++;
          if (!chr())
            return;
        } else if (chr())
          return;
        address[pieceIndex++] = value;
      }
      if (compress !== null) {
        swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex != 0 && swaps > 0) {
          swap = address[pieceIndex];
          address[pieceIndex--] = address[compress + swaps - 1];
          address[compress + --swaps] = swap;
        }
      } else if (pieceIndex != 8)
        return;
      return address;
    };
    var findLongestZeroSequence = function(ipv6) {
      var maxIndex = null;
      var maxLength = 1;
      var currStart = null;
      var currLength = 0;
      var index = 0;
      for (; index < 8; index++) {
        if (ipv6[index] !== 0) {
          if (currLength > maxLength) {
            maxIndex = currStart;
            maxLength = currLength;
          }
          currStart = null;
          currLength = 0;
        } else {
          if (currStart === null)
            currStart = index;
          ++currLength;
        }
      }
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      return maxIndex;
    };
    var serializeHost = function(host) {
      var result, index, compress, ignore0;
      if (typeof host == "number") {
        result = [];
        for (index = 0; index < 4; index++) {
          unshift(result, host % 256);
          host = floor(host / 256);
        }
        return join(result, ".");
      } else if (typeof host == "object") {
        result = "";
        compress = findLongestZeroSequence(host);
        for (index = 0; index < 8; index++) {
          if (ignore0 && host[index] === 0)
            continue;
          if (ignore0)
            ignore0 = false;
          if (compress === index) {
            result += index ? ":" : "::";
            ignore0 = true;
          } else {
            result += numberToString(host[index], 16);
            if (index < 7)
              result += ":";
          }
        }
        return "[" + result + "]";
      }
      return host;
    };
    var C0ControlPercentEncodeSet = {};
    var fragmentPercentEncodeSet = assign2({}, C0ControlPercentEncodeSet, {
      " ": 1,
      '"': 1,
      "<": 1,
      ">": 1,
      "`": 1
    });
    var pathPercentEncodeSet = assign2({}, fragmentPercentEncodeSet, {
      "#": 1,
      "?": 1,
      "{": 1,
      "}": 1
    });
    var userinfoPercentEncodeSet = assign2({}, pathPercentEncodeSet, {
      "/": 1,
      ":": 1,
      ";": 1,
      "=": 1,
      "@": 1,
      "[": 1,
      "\\": 1,
      "]": 1,
      "^": 1,
      "|": 1
    });
    var percentEncode = function(chr, set) {
      var code = codeAt(chr, 0);
      return code > 32 && code < 127 && !hasOwn(set, chr) ? chr : encodeURIComponent(chr);
    };
    var specialSchemes = {
      ftp: 21,
      file: null,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var isWindowsDriveLetter = function(string, normalized) {
      var second;
      return string.length == 2 && exec(ALPHA, charAt(string, 0)) && ((second = charAt(string, 1)) == ":" || !normalized && second == "|");
    };
    var startsWithWindowsDriveLetter = function(string) {
      var third;
      return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (string.length == 2 || ((third = charAt(string, 2)) === "/" || third === "\\" || third === "?" || third === "#"));
    };
    var isSingleDot = function(segment) {
      return segment === "." || toLowerCase(segment) === "%2e";
    };
    var isDoubleDot = function(segment) {
      segment = toLowerCase(segment);
      return segment === ".." || segment === "%2e." || segment === ".%2e" || segment === "%2e%2e";
    };
    var SCHEME_START = {};
    var SCHEME = {};
    var NO_SCHEME = {};
    var SPECIAL_RELATIVE_OR_AUTHORITY = {};
    var PATH_OR_AUTHORITY = {};
    var RELATIVE = {};
    var RELATIVE_SLASH = {};
    var SPECIAL_AUTHORITY_SLASHES = {};
    var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
    var AUTHORITY = {};
    var HOST = {};
    var HOSTNAME = {};
    var PORT = {};
    var FILE = {};
    var FILE_SLASH = {};
    var FILE_HOST = {};
    var PATH_START = {};
    var PATH = {};
    var CANNOT_BE_A_BASE_URL_PATH = {};
    var QUERY = {};
    var FRAGMENT = {};
    var URLState = function(url, isBase, base) {
      var urlString = $toString(url);
      var baseState, failure, searchParams;
      if (isBase) {
        failure = this.parse(urlString);
        if (failure)
          throw TypeError2(failure);
        this.searchParams = null;
      } else {
        if (base !== void 0)
          baseState = new URLState(base, true);
        failure = this.parse(urlString, null, baseState);
        if (failure)
          throw TypeError2(failure);
        searchParams = getInternalSearchParamsState(new URLSearchParams2());
        searchParams.bindURL(this);
        this.searchParams = searchParams;
      }
    };
    URLState.prototype = {
      type: "URL",
      parse: function(input, stateOverride, base) {
        var url = this;
        var state = stateOverride || SCHEME_START;
        var pointer = 0;
        var buffer = "";
        var seenAt = false;
        var seenBracket = false;
        var seenPasswordToken = false;
        var codePoints, chr, bufferCodePoints, failure;
        input = $toString(input);
        if (!stateOverride) {
          url.scheme = "";
          url.username = "";
          url.password = "";
          url.host = null;
          url.port = null;
          url.path = [];
          url.query = null;
          url.fragment = null;
          url.cannotBeABaseURL = false;
          input = replace2(input, LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, "");
        }
        input = replace2(input, TAB_AND_NEW_LINE, "");
        codePoints = arrayFrom(input);
        while (pointer <= codePoints.length) {
          chr = codePoints[pointer];
          switch (state) {
            case SCHEME_START:
              if (chr && exec(ALPHA, chr)) {
                buffer += toLowerCase(chr);
                state = SCHEME;
              } else if (!stateOverride) {
                state = NO_SCHEME;
                continue;
              } else
                return INVALID_SCHEME;
              break;
            case SCHEME:
              if (chr && (exec(ALPHANUMERIC, chr) || chr == "+" || chr == "-" || chr == ".")) {
                buffer += toLowerCase(chr);
              } else if (chr == ":") {
                if (stateOverride && (url.isSpecial() != hasOwn(specialSchemes, buffer) || buffer == "file" && (url.includesCredentials() || url.port !== null) || url.scheme == "file" && !url.host))
                  return;
                url.scheme = buffer;
                if (stateOverride) {
                  if (url.isSpecial() && specialSchemes[url.scheme] == url.port)
                    url.port = null;
                  return;
                }
                buffer = "";
                if (url.scheme == "file") {
                  state = FILE;
                } else if (url.isSpecial() && base && base.scheme == url.scheme) {
                  state = SPECIAL_RELATIVE_OR_AUTHORITY;
                } else if (url.isSpecial()) {
                  state = SPECIAL_AUTHORITY_SLASHES;
                } else if (codePoints[pointer + 1] == "/") {
                  state = PATH_OR_AUTHORITY;
                  pointer++;
                } else {
                  url.cannotBeABaseURL = true;
                  push(url.path, "");
                  state = CANNOT_BE_A_BASE_URL_PATH;
                }
              } else if (!stateOverride) {
                buffer = "";
                state = NO_SCHEME;
                pointer = 0;
                continue;
              } else
                return INVALID_SCHEME;
              break;
            case NO_SCHEME:
              if (!base || base.cannotBeABaseURL && chr != "#")
                return INVALID_SCHEME;
              if (base.cannotBeABaseURL && chr == "#") {
                url.scheme = base.scheme;
                url.path = arraySlice(base.path);
                url.query = base.query;
                url.fragment = "";
                url.cannotBeABaseURL = true;
                state = FRAGMENT;
                break;
              }
              state = base.scheme == "file" ? FILE : RELATIVE;
              continue;
            case SPECIAL_RELATIVE_OR_AUTHORITY:
              if (chr == "/" && codePoints[pointer + 1] == "/") {
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                pointer++;
              } else {
                state = RELATIVE;
                continue;
              }
              break;
            case PATH_OR_AUTHORITY:
              if (chr == "/") {
                state = AUTHORITY;
                break;
              } else {
                state = PATH;
                continue;
              }
            case RELATIVE:
              url.scheme = base.scheme;
              if (chr == EOF) {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = arraySlice(base.path);
                url.query = base.query;
              } else if (chr == "/" || chr == "\\" && url.isSpecial()) {
                state = RELATIVE_SLASH;
              } else if (chr == "?") {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = arraySlice(base.path);
                url.query = "";
                state = QUERY;
              } else if (chr == "#") {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = arraySlice(base.path);
                url.query = base.query;
                url.fragment = "";
                state = FRAGMENT;
              } else {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = arraySlice(base.path);
                url.path.length--;
                state = PATH;
                continue;
              }
              break;
            case RELATIVE_SLASH:
              if (url.isSpecial() && (chr == "/" || chr == "\\")) {
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
              } else if (chr == "/") {
                state = AUTHORITY;
              } else {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                state = PATH;
                continue;
              }
              break;
            case SPECIAL_AUTHORITY_SLASHES:
              state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
              if (chr != "/" || charAt(buffer, pointer + 1) != "/")
                continue;
              pointer++;
              break;
            case SPECIAL_AUTHORITY_IGNORE_SLASHES:
              if (chr != "/" && chr != "\\") {
                state = AUTHORITY;
                continue;
              }
              break;
            case AUTHORITY:
              if (chr == "@") {
                if (seenAt)
                  buffer = "%40" + buffer;
                seenAt = true;
                bufferCodePoints = arrayFrom(buffer);
                for (var i = 0; i < bufferCodePoints.length; i++) {
                  var codePoint = bufferCodePoints[i];
                  if (codePoint == ":" && !seenPasswordToken) {
                    seenPasswordToken = true;
                    continue;
                  }
                  var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                  if (seenPasswordToken)
                    url.password += encodedCodePoints;
                  else
                    url.username += encodedCodePoints;
                }
                buffer = "";
              } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial()) {
                if (seenAt && buffer == "")
                  return INVALID_AUTHORITY;
                pointer -= arrayFrom(buffer).length + 1;
                buffer = "";
                state = HOST;
              } else
                buffer += chr;
              break;
            case HOST:
            case HOSTNAME:
              if (stateOverride && url.scheme == "file") {
                state = FILE_HOST;
                continue;
              } else if (chr == ":" && !seenBracket) {
                if (buffer == "")
                  return INVALID_HOST;
                failure = url.parseHost(buffer);
                if (failure)
                  return failure;
                buffer = "";
                state = PORT;
                if (stateOverride == HOSTNAME)
                  return;
              } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial()) {
                if (url.isSpecial() && buffer == "")
                  return INVALID_HOST;
                if (stateOverride && buffer == "" && (url.includesCredentials() || url.port !== null))
                  return;
                failure = url.parseHost(buffer);
                if (failure)
                  return failure;
                buffer = "";
                state = PATH_START;
                if (stateOverride)
                  return;
                continue;
              } else {
                if (chr == "[")
                  seenBracket = true;
                else if (chr == "]")
                  seenBracket = false;
                buffer += chr;
              }
              break;
            case PORT:
              if (exec(DIGIT, chr)) {
                buffer += chr;
              } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial() || stateOverride) {
                if (buffer != "") {
                  var port = parseInt2(buffer, 10);
                  if (port > 65535)
                    return INVALID_PORT;
                  url.port = url.isSpecial() && port === specialSchemes[url.scheme] ? null : port;
                  buffer = "";
                }
                if (stateOverride)
                  return;
                state = PATH_START;
                continue;
              } else
                return INVALID_PORT;
              break;
            case FILE:
              url.scheme = "file";
              if (chr == "/" || chr == "\\")
                state = FILE_SLASH;
              else if (base && base.scheme == "file") {
                if (chr == EOF) {
                  url.host = base.host;
                  url.path = arraySlice(base.path);
                  url.query = base.query;
                } else if (chr == "?") {
                  url.host = base.host;
                  url.path = arraySlice(base.path);
                  url.query = "";
                  state = QUERY;
                } else if (chr == "#") {
                  url.host = base.host;
                  url.path = arraySlice(base.path);
                  url.query = base.query;
                  url.fragment = "";
                  state = FRAGMENT;
                } else {
                  if (!startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ""))) {
                    url.host = base.host;
                    url.path = arraySlice(base.path);
                    url.shortenPath();
                  }
                  state = PATH;
                  continue;
                }
              } else {
                state = PATH;
                continue;
              }
              break;
            case FILE_SLASH:
              if (chr == "/" || chr == "\\") {
                state = FILE_HOST;
                break;
              }
              if (base && base.scheme == "file" && !startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ""))) {
                if (isWindowsDriveLetter(base.path[0], true))
                  push(url.path, base.path[0]);
                else
                  url.host = base.host;
              }
              state = PATH;
              continue;
            case FILE_HOST:
              if (chr == EOF || chr == "/" || chr == "\\" || chr == "?" || chr == "#") {
                if (!stateOverride && isWindowsDriveLetter(buffer)) {
                  state = PATH;
                } else if (buffer == "") {
                  url.host = "";
                  if (stateOverride)
                    return;
                  state = PATH_START;
                } else {
                  failure = url.parseHost(buffer);
                  if (failure)
                    return failure;
                  if (url.host == "localhost")
                    url.host = "";
                  if (stateOverride)
                    return;
                  buffer = "";
                  state = PATH_START;
                }
                continue;
              } else
                buffer += chr;
              break;
            case PATH_START:
              if (url.isSpecial()) {
                state = PATH;
                if (chr != "/" && chr != "\\")
                  continue;
              } else if (!stateOverride && chr == "?") {
                url.query = "";
                state = QUERY;
              } else if (!stateOverride && chr == "#") {
                url.fragment = "";
                state = FRAGMENT;
              } else if (chr != EOF) {
                state = PATH;
                if (chr != "/")
                  continue;
              }
              break;
            case PATH:
              if (chr == EOF || chr == "/" || chr == "\\" && url.isSpecial() || !stateOverride && (chr == "?" || chr == "#")) {
                if (isDoubleDot(buffer)) {
                  url.shortenPath();
                  if (chr != "/" && !(chr == "\\" && url.isSpecial())) {
                    push(url.path, "");
                  }
                } else if (isSingleDot(buffer)) {
                  if (chr != "/" && !(chr == "\\" && url.isSpecial())) {
                    push(url.path, "");
                  }
                } else {
                  if (url.scheme == "file" && !url.path.length && isWindowsDriveLetter(buffer)) {
                    if (url.host)
                      url.host = "";
                    buffer = charAt(buffer, 0) + ":";
                  }
                  push(url.path, buffer);
                }
                buffer = "";
                if (url.scheme == "file" && (chr == EOF || chr == "?" || chr == "#")) {
                  while (url.path.length > 1 && url.path[0] === "") {
                    shift(url.path);
                  }
                }
                if (chr == "?") {
                  url.query = "";
                  state = QUERY;
                } else if (chr == "#") {
                  url.fragment = "";
                  state = FRAGMENT;
                }
              } else {
                buffer += percentEncode(chr, pathPercentEncodeSet);
              }
              break;
            case CANNOT_BE_A_BASE_URL_PATH:
              if (chr == "?") {
                url.query = "";
                state = QUERY;
              } else if (chr == "#") {
                url.fragment = "";
                state = FRAGMENT;
              } else if (chr != EOF) {
                url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
              }
              break;
            case QUERY:
              if (!stateOverride && chr == "#") {
                url.fragment = "";
                state = FRAGMENT;
              } else if (chr != EOF) {
                if (chr == "'" && url.isSpecial())
                  url.query += "%27";
                else if (chr == "#")
                  url.query += "%23";
                else
                  url.query += percentEncode(chr, C0ControlPercentEncodeSet);
              }
              break;
            case FRAGMENT:
              if (chr != EOF)
                url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
              break;
          }
          pointer++;
        }
      },
      parseHost: function(input) {
        var result, codePoints, index;
        if (charAt(input, 0) == "[") {
          if (charAt(input, input.length - 1) != "]")
            return INVALID_HOST;
          result = parseIPv6(stringSlice(input, 1, -1));
          if (!result)
            return INVALID_HOST;
          this.host = result;
        } else if (!this.isSpecial()) {
          if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input))
            return INVALID_HOST;
          result = "";
          codePoints = arrayFrom(input);
          for (index = 0; index < codePoints.length; index++) {
            result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
          }
          this.host = result;
        } else {
          input = toASCII(input);
          if (exec(FORBIDDEN_HOST_CODE_POINT, input))
            return INVALID_HOST;
          result = parseIPv4(input);
          if (result === null)
            return INVALID_HOST;
          this.host = result;
        }
      },
      cannotHaveUsernamePasswordPort: function() {
        return !this.host || this.cannotBeABaseURL || this.scheme == "file";
      },
      includesCredentials: function() {
        return this.username != "" || this.password != "";
      },
      isSpecial: function() {
        return hasOwn(specialSchemes, this.scheme);
      },
      shortenPath: function() {
        var path = this.path;
        var pathSize = path.length;
        if (pathSize && (this.scheme != "file" || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
          path.length--;
        }
      },
      serialize: function() {
        var url = this;
        var scheme = url.scheme;
        var username = url.username;
        var password = url.password;
        var host = url.host;
        var port = url.port;
        var path = url.path;
        var query = url.query;
        var fragment = url.fragment;
        var output = scheme + ":";
        if (host !== null) {
          output += "//";
          if (url.includesCredentials()) {
            output += username + (password ? ":" + password : "") + "@";
          }
          output += serializeHost(host);
          if (port !== null)
            output += ":" + port;
        } else if (scheme == "file")
          output += "//";
        output += url.cannotBeABaseURL ? path[0] : path.length ? "/" + join(path, "/") : "";
        if (query !== null)
          output += "?" + query;
        if (fragment !== null)
          output += "#" + fragment;
        return output;
      },
      setHref: function(href) {
        var failure = this.parse(href);
        if (failure)
          throw TypeError2(failure);
        this.searchParams.update();
      },
      getOrigin: function() {
        var scheme = this.scheme;
        var port = this.port;
        if (scheme == "blob")
          try {
            return new URLConstructor(scheme.path[0]).origin;
          } catch (error) {
            return "null";
          }
        if (scheme == "file" || !this.isSpecial())
          return "null";
        return scheme + "://" + serializeHost(this.host) + (port !== null ? ":" + port : "");
      },
      getProtocol: function() {
        return this.scheme + ":";
      },
      setProtocol: function(protocol) {
        this.parse($toString(protocol) + ":", SCHEME_START);
      },
      getUsername: function() {
        return this.username;
      },
      setUsername: function(username) {
        var codePoints = arrayFrom($toString(username));
        if (this.cannotHaveUsernamePasswordPort())
          return;
        this.username = "";
        for (var i = 0; i < codePoints.length; i++) {
          this.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
        }
      },
      getPassword: function() {
        return this.password;
      },
      setPassword: function(password) {
        var codePoints = arrayFrom($toString(password));
        if (this.cannotHaveUsernamePasswordPort())
          return;
        this.password = "";
        for (var i = 0; i < codePoints.length; i++) {
          this.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
        }
      },
      getHost: function() {
        var host = this.host;
        var port = this.port;
        return host === null ? "" : port === null ? serializeHost(host) : serializeHost(host) + ":" + port;
      },
      setHost: function(host) {
        if (this.cannotBeABaseURL)
          return;
        this.parse(host, HOST);
      },
      getHostname: function() {
        var host = this.host;
        return host === null ? "" : serializeHost(host);
      },
      setHostname: function(hostname) {
        if (this.cannotBeABaseURL)
          return;
        this.parse(hostname, HOSTNAME);
      },
      getPort: function() {
        var port = this.port;
        return port === null ? "" : $toString(port);
      },
      setPort: function(port) {
        if (this.cannotHaveUsernamePasswordPort())
          return;
        port = $toString(port);
        if (port == "")
          this.port = null;
        else
          this.parse(port, PORT);
      },
      getPathname: function() {
        var path = this.path;
        return this.cannotBeABaseURL ? path[0] : path.length ? "/" + join(path, "/") : "";
      },
      setPathname: function(pathname) {
        if (this.cannotBeABaseURL)
          return;
        this.path = [];
        this.parse(pathname, PATH_START);
      },
      getSearch: function() {
        var query = this.query;
        return query ? "?" + query : "";
      },
      setSearch: function(search) {
        search = $toString(search);
        if (search == "") {
          this.query = null;
        } else {
          if (charAt(search, 0) == "?")
            search = stringSlice(search, 1);
          this.query = "";
          this.parse(search, QUERY);
        }
        this.searchParams.update();
      },
      getSearchParams: function() {
        return this.searchParams.facade;
      },
      getHash: function() {
        var fragment = this.fragment;
        return fragment ? "#" + fragment : "";
      },
      setHash: function(hash3) {
        hash3 = $toString(hash3);
        if (hash3 == "") {
          this.fragment = null;
          return;
        }
        if (charAt(hash3, 0) == "#")
          hash3 = stringSlice(hash3, 1);
        this.fragment = "";
        this.parse(hash3, FRAGMENT);
      },
      update: function() {
        this.query = this.searchParams.serialize() || null;
      }
    };
    var URLConstructor = function URL2(url) {
      var that = anInstance(this, URLPrototype);
      var base = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : void 0;
      var state = setInternalState(that, new URLState(url, false, base));
      if (!DESCRIPTORS) {
        that.href = state.serialize();
        that.origin = state.getOrigin();
        that.protocol = state.getProtocol();
        that.username = state.getUsername();
        that.password = state.getPassword();
        that.host = state.getHost();
        that.hostname = state.getHostname();
        that.port = state.getPort();
        that.pathname = state.getPathname();
        that.search = state.getSearch();
        that.searchParams = state.getSearchParams();
        that.hash = state.getHash();
      }
    };
    var URLPrototype = URLConstructor.prototype;
    var accessorDescriptor = function(getter, setter) {
      return {
        get: function() {
          return getInternalURLState(this)[getter]();
        },
        set: setter && function(value) {
          return getInternalURLState(this)[setter](value);
        },
        configurable: true,
        enumerable: true
      };
    };
    if (DESCRIPTORS) {
      defineProperties(URLPrototype, {
        href: accessorDescriptor("serialize", "setHref"),
        origin: accessorDescriptor("getOrigin"),
        protocol: accessorDescriptor("getProtocol", "setProtocol"),
        username: accessorDescriptor("getUsername", "setUsername"),
        password: accessorDescriptor("getPassword", "setPassword"),
        host: accessorDescriptor("getHost", "setHost"),
        hostname: accessorDescriptor("getHostname", "setHostname"),
        port: accessorDescriptor("getPort", "setPort"),
        pathname: accessorDescriptor("getPathname", "setPathname"),
        search: accessorDescriptor("getSearch", "setSearch"),
        searchParams: accessorDescriptor("getSearchParams"),
        hash: accessorDescriptor("getHash", "setHash")
      });
    }
    redefine(URLPrototype, "toJSON", function toJSON() {
      return getInternalURLState(this).serialize();
    }, { enumerable: true });
    redefine(URLPrototype, "toString", function toString2() {
      return getInternalURLState(this).serialize();
    }, { enumerable: true });
    if (NativeURL) {
      nativeCreateObjectURL = NativeURL.createObjectURL;
      nativeRevokeObjectURL = NativeURL.revokeObjectURL;
      if (nativeCreateObjectURL)
        redefine(URLConstructor, "createObjectURL", bind(nativeCreateObjectURL, NativeURL));
      if (nativeRevokeObjectURL)
        redefine(URLConstructor, "revokeObjectURL", bind(nativeRevokeObjectURL, NativeURL));
    }
    var nativeCreateObjectURL;
    var nativeRevokeObjectURL;
    setToStringTag(URLConstructor, "URL");
    $({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
      URL: URLConstructor
    });
  }
});

// node_modules/core-js-pure/modules/web.url.to-json.js
var require_web_url_to_json = __commonJS({
  "node_modules/core-js-pure/modules/web.url.to-json.js"() {
    init_react();
  }
});

// node_modules/core-js-pure/web/url.js
var require_url = __commonJS({
  "node_modules/core-js-pure/web/url.js"(exports, module) {
    init_react();
    require_web_url();
    require_web_url_to_json();
    require_web_url_search_params();
    var path = require_path();
    module.exports = path.URL;
  }
});

// node_modules/core-js-pure/stable/url/index.js
var require_url2 = __commonJS({
  "node_modules/core-js-pure/stable/url/index.js"(exports, module) {
    init_react();
    var parent = require_url();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/url.js
var require_url3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/url.js"(exports, module) {
    init_react();
    module.exports = require_url2();
  }
});

// node_modules/moralis/lib/browser/Web3Connector/NetworkWeb3Connector.js
var require_NetworkWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/NetworkWeb3Connector.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _concat = _interopRequireDefault(require_concat4());
    var _url = _interopRequireDefault(require_url3());
    var _keys = _interopRequireDefault(require_keys3());
    var _reduce = _interopRequireDefault(require_reduce4());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _convert = require_convert();
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    var _MoralisRpcs = require_MoralisRpcs();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var MiniRpcProvider = /* @__PURE__ */ (0, _createClass2.default)(function MiniRpcProvider2(chainId, url) {
      var _this = this;
      (0, _classCallCheck2.default)(this, MiniRpcProvider2);
      (0, _defineProperty2.default)(this, "request", /* @__PURE__ */ function() {
        var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(method, params) {
          var RESTController, response, _context, body, _body$error, _body$error2, _body$error3, _context2;
          return _regenerator.default.wrap(function(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (typeof method !== "string") {
                    params = method.params;
                    method = method.method;
                  }
                  RESTController = _CoreManager.default.getRESTController();
                  _context3.prev = 2;
                  _context3.next = 5;
                  return RESTController.ajax("POST", _this.url, (0, _stringify.default)({
                    jsonrpc: "2.0",
                    id: 1,
                    method,
                    params
                  }), {
                    "Content-Type": "application/json"
                  });
                case 5:
                  response = _context3.sent;
                  if (response) {
                    _context3.next = 8;
                    break;
                  }
                  throw new Error("No response");
                case 8:
                  if (!(!response.status || response.status > 400)) {
                    _context3.next = 10;
                    break;
                  }
                  throw new Error((0, _concat.default)(_context = "Error response [".concat(response.status, "] ")).call(_context, response.statusText));
                case 10:
                  body = response.response;
                  if (!("error" in body)) {
                    _context3.next = 13;
                    break;
                  }
                  throw new Error(body === null || body === void 0 ? void 0 : (_body$error = body.error) === null || _body$error === void 0 ? void 0 : _body$error.message, body === null || body === void 0 ? void 0 : (_body$error2 = body.error) === null || _body$error2 === void 0 ? void 0 : _body$error2.code, body === null || body === void 0 ? void 0 : (_body$error3 = body.error) === null || _body$error3 === void 0 ? void 0 : _body$error3.data);
                case 13:
                  if ("result" in body) {
                    _context3.next = 15;
                    break;
                  }
                  throw new Error("Received unexpected JSON-RPC response");
                case 15:
                  return _context3.abrupt("return", body.result);
                case 18:
                  _context3.prev = 18;
                  _context3.t0 = _context3["catch"](2);
                  throw new Error((0, _concat.default)(_context2 = 'Failed to make "'.concat(method, '" request with networkConnector: "')).call(_context2, _context3.t0.message, '"'));
                case 21:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee, null, [[2, 18]]);
        }));
        return function() {
          return _ref.apply(this, arguments);
        };
      }());
      this.chainId = chainId;
      this.url = url;
      var parsed = new _url.default(url);
      this.host = parsed.host;
      this.path = parsed.pathname;
    });
    var NetworkWeb3Connector = /* @__PURE__ */ function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(NetworkWeb3Connector2, _AbstractWeb3Connecto);
      var _super = _createSuper(NetworkWeb3Connector2);
      function NetworkWeb3Connector2() {
        var _ref3, _context4;
        var _this2;
        var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, urls = _ref2.urls, defaultChainId = _ref2.defaultChainId, chainId = _ref2.chainId, speedyNodeApiKey = _ref2.speedyNodeApiKey;
        (0, _classCallCheck2.default)(this, NetworkWeb3Connector2);
        _this2 = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "type", "network");
        if (!urls && speedyNodeApiKey) {
          urls = (0, _MoralisRpcs.getMoralisRpcs)(speedyNodeApiKey);
        }
        if (!urls && !speedyNodeApiKey) {
          throw new Error("Cannot connect to rpc: No urls or speedyNodeApiKey provided for NetworkWeb3Connector.");
        }
        if (speedyNodeApiKey) {
          console.warn("Using speedyNodeApiKey on the browser enviroment is not recommended, as it is publicly visible.");
        }
        _this2.chainId = (0, _verifyChainId.default)((_ref3 = chainId !== null && chainId !== void 0 ? chainId : defaultChainId) !== null && _ref3 !== void 0 ? _ref3 : Number((0, _keys.default)(urls)[0]));
        _this2.providers = (0, _reduce.default)(_context4 = (0, _keys.default)(urls)).call(_context4, function(accumulator, chainId2) {
          accumulator[Number(chainId2)] = new MiniRpcProvider(Number(chainId2), urls[Number(chainId2)]);
          return accumulator;
        }, {});
        return _this2;
      }
      (0, _createClass2.default)(NetworkWeb3Connector2, [{
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            var _ref4, providedChainId, provider, _args2 = arguments;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _ref4 = _args2.length > 0 && _args2[0] !== void 0 ? _args2[0] : {}, providedChainId = _ref4.chainId;
                    if (providedChainId) {
                      this.chainId = (0, _verifyChainId.default)(providedChainId);
                    }
                    provider = this.providers[(0, _convert.fromHexToDecimal)(this.chainId)];
                    if (provider) {
                      _context5.next = 5;
                      break;
                    }
                    throw new Error("No rpc url provided for chainId ".concat(this.chainId));
                  case 5:
                    return _context5.abrupt("return", {
                      provider,
                      chainId: this.chainId,
                      account: null
                    });
                  case 6:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }]);
      return NetworkWeb3Connector2;
    }(_AbstractWeb3Connector.default);
    var _default = NetworkWeb3Connector;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/InternalWeb3Provider.js
var require_InternalWeb3Provider = __commonJS({
  "node_modules/moralis/lib/browser/InternalWeb3Provider.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.InternalWeb3Events = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _bind = _interopRequireDefault(require_bind7());
    var _events = _interopRequireDefault(require_events());
    var _events2 = require_events2();
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    var _convert = require_convert();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var InternalWeb3Events = (0, _freeze.default)({
      ACCOUNT_CHANGED: "accountChanged",
      CHAIN_CHANGED: "chainChanged",
      PROVIDER_CONNECT: "provider-connect",
      PROVIDER_DISCONNECT: "provider-disconnect",
      WEB3_ENABLED: "web3Enabled",
      WEB3_DEACTIVATED: "web3Deactivated"
    });
    exports.InternalWeb3Events = InternalWeb3Events;
    var InternalWeb3Provider = /* @__PURE__ */ function(_EventEmitter) {
      (0, _inherits2.default)(InternalWeb3Provider2, _EventEmitter);
      var _super = _createSuper(InternalWeb3Provider2);
      function InternalWeb3Provider2(connector) {
        var _context, _context2, _context3, _context4;
        var _this;
        var anyNetwork = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        (0, _classCallCheck2.default)(this, InternalWeb3Provider2);
        _this = _super.call(this);
        if (!connector) {
          throw new Error("Cannot initialize InternalWeb3Provider without a connector");
        }
        _this.connector = connector;
        _this.anyNetwork = anyNetwork;
        _this.handleAccountChanged = (0, _bind.default)(_context = _this.handleAccountChanged).call(_context, (0, _assertThisInitialized2.default)(_this));
        _this.handleChainChanged = (0, _bind.default)(_context2 = _this.handleChainChanged).call(_context2, (0, _assertThisInitialized2.default)(_this));
        _this.handleConnect = (0, _bind.default)(_context3 = _this.handleConnect).call(_context3, (0, _assertThisInitialized2.default)(_this));
        _this.handleDisconnect = (0, _bind.default)(_context4 = _this.handleDisconnect).call(_context4, (0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      (0, _createClass2.default)(InternalWeb3Provider2, [{
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(options) {
            var _yield$this$connector, provider, chainId, account, network;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    if (this.connector) {
                      _context5.next = 2;
                      break;
                    }
                    throw new Error("Cannot acticate InternalWeb3Provider without a connector");
                  case 2:
                    _context5.next = 4;
                    return this.connector.activate(options);
                  case 4:
                    _yield$this$connector = _context5.sent;
                    provider = _yield$this$connector.provider;
                    chainId = _yield$this$connector.chainId;
                    account = _yield$this$connector.account;
                    this.provider = provider;
                    this.chainId = chainId;
                    this.account = account;
                    network = this.anyNetwork ? "any" : (0, _convert.fromHexToDecimal)(chainId);
                    this.web3 = new _ethers.ethers.providers.Web3Provider(provider, network);
                    if (this.connector.on) {
                      this.connector.on(_events2.ConnectorEvents.ACCOUNT_CHANGED, this.handleAccountChanged);
                      this.connector.on(_events2.ConnectorEvents.CHAIN_CHANGED, this.handleChainChanged);
                      this.connector.on(_events2.ConnectorEvents.CONNECT, this.handleConnect);
                      this.connector.on(_events2.ConnectorEvents.DISCONNECT, this.handleDisconnect);
                    }
                    return _context5.abrupt("return", {
                      provider,
                      chainId,
                      account,
                      web3: this.web3
                    });
                  case 15:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }, {
        key: "signer",
        get: function() {
          return this.web3.getSigner(this.account);
        }
      }, {
        key: "signerOrProvider",
        get: function() {
          try {
            if (this.account) {
              return this.web3.getSigner(this.account);
            }
            return this.web3;
          } catch (error) {
            return this.web3;
          }
        }
      }, {
        key: "handleChainChanged",
        value: function(chainId) {
          this.chainId = chainId;
          this.web3 = new _ethers.ethers.providers.Web3Provider(this.provider, (0, _convert.fromHexToDecimal)(chainId));
          this.emit(InternalWeb3Events.CHAIN_CHANGED, chainId);
        }
      }, {
        key: "handleAccountChanged",
        value: function(account) {
          this.account = account;
          this.emit(InternalWeb3Events.ACCOUNT_CHANGED, account);
        }
      }, {
        key: "handleConnect",
        value: function(connectInfo) {
          this.emit(InternalWeb3Events.PROVIDER_CONNECT, connectInfo);
        }
      }, {
        key: "handleDisconnect",
        value: function(error) {
          this.emit(InternalWeb3Events.PROVIDER_DISCONNECT, error);
        }
      }, {
        key: "deactivate",
        value: function() {
          var _deactivate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    this.account = null;
                    this.chianId = null;
                    this.web3 = null;
                    this.provider = null;
                    if (!this.connector) {
                      _context6.next = 9;
                      break;
                    }
                    if (this.connector.removeListener) {
                      this.connector.removeListener(InternalWeb3Events.CHAIN_CHANGED, this.handleChainChanged);
                      this.connector.removeListener(InternalWeb3Events.ACCOUNT_CHANGED, this.handleAccountChanged);
                      this.connector.removeListener(InternalWeb3Events.PROVIDER_CONNECT, this.handleConnect);
                      this.connector.removeListener(InternalWeb3Events.PROVIDER_DISCONNECT, this.handleDisconnect);
                    }
                    if (!this.connector.deactivate) {
                      _context6.next = 9;
                      break;
                    }
                    _context6.next = 9;
                    return this.connector.deactivate();
                  case 9:
                    this.connector = null;
                  case 10:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _deactivate.apply(this, arguments);
          };
        }()
      }]);
      return InternalWeb3Provider2;
    }(_events.default);
    var _default = InternalWeb3Provider;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/MagicWeb3Connector.js
var require_MagicWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/MagicWeb3Connector.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _concat = _interopRequireDefault(require_concat4());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var MagicWeb3Connector = /* @__PURE__ */ function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(MagicWeb3Connector2, _AbstractWeb3Connecto);
      var _super = _createSuper(MagicWeb3Connector2);
      function MagicWeb3Connector2() {
        var _context;
        var _this;
        (0, _classCallCheck2.default)(this, MagicWeb3Connector2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, (0, _concat.default)(_context = [this]).call(_context, args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", "MagicLink");
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "deactivate", /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
          return _regenerator.default.wrap(function(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _this.unsubscribeToEvents(_this.provider);
                  if (!_this.magicUser) {
                    _context2.next = 4;
                    break;
                  }
                  _context2.next = 4;
                  return _this.magicUser.user.logout();
                case 4:
                  _this.account = null;
                  _this.chainId = null;
                  _this.provider = null;
                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee);
        })));
        return _this;
      }
      (0, _createClass2.default)(MagicWeb3Connector2, [{
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            var _ref2, email, apiKey, network, newSession, magic, ether, Magic, _require, _window, _magic, _magic2, _magic2$user, loggedIn, signer, _yield$ether$getNetwo, chainId, address, _args2 = arguments;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _ref2 = _args2.length > 0 && _args2[0] !== void 0 ? _args2[0] : {}, email = _ref2.email, apiKey = _ref2.apiKey, network = _ref2.network, newSession = _ref2.newSession;
                    magic = null;
                    ether = null;
                    if (email) {
                      _context3.next = 5;
                      break;
                    }
                    throw new Error('"email" not provided, please provide Email');
                  case 5:
                    if (apiKey) {
                      _context3.next = 7;
                      break;
                    }
                    throw new Error('"apiKey" not provided, please provide Api Key');
                  case 7:
                    if (network) {
                      _context3.next = 9;
                      break;
                    }
                    throw new Error('"network" not provided, please provide network');
                  case 9:
                    try {
                      Magic = (_require = __require("magic-sdk")) === null || _require === void 0 ? void 0 : _require.Magic;
                    } catch (error) {
                    }
                    if (!Magic) {
                      Magic = (_window = window) === null || _window === void 0 ? void 0 : _window.Magic;
                    }
                    if (Magic) {
                      _context3.next = 13;
                      break;
                    }
                    throw new Error('Cannot enable via MagicLink: dependency "magic-sdk" is missing');
                  case 13:
                    _context3.prev = 13;
                    magic = new Magic(apiKey, {
                      network
                    });
                    if (!newSession) {
                      _context3.next = 24;
                      break;
                    }
                    if (!((_magic = magic) !== null && _magic !== void 0 && _magic.user)) {
                      _context3.next = 24;
                      break;
                    }
                    _context3.prev = 17;
                    _context3.next = 20;
                    return (_magic2 = magic) === null || _magic2 === void 0 ? void 0 : (_magic2$user = _magic2.user) === null || _magic2$user === void 0 ? void 0 : _magic2$user.logout();
                  case 20:
                    _context3.next = 24;
                    break;
                  case 22:
                    _context3.prev = 22;
                    _context3.t0 = _context3["catch"](17);
                  case 24:
                    ether = new _ethers.ethers.providers.Web3Provider(magic.rpcProvider);
                    _context3.next = 27;
                    return magic.auth.loginWithMagicLink({
                      email
                    });
                  case 27:
                    _context3.next = 32;
                    break;
                  case 29:
                    _context3.prev = 29;
                    _context3.t1 = _context3["catch"](13);
                    throw new Error("Error during enable via MagicLink, please double check network and apikey");
                  case 32:
                    _context3.next = 34;
                    return magic.user.isLoggedIn();
                  case 34:
                    loggedIn = _context3.sent;
                    if (!loggedIn) {
                      _context3.next = 50;
                      break;
                    }
                    signer = ether.getSigner();
                    _context3.next = 39;
                    return ether.getNetwork();
                  case 39:
                    _yield$ether$getNetwo = _context3.sent;
                    chainId = _yield$ether$getNetwo.chainId;
                    _context3.next = 43;
                    return signer.getAddress();
                  case 43:
                    address = _context3.sent.toLowerCase();
                    this.account = address;
                    this.provider = ether.provider;
                    this.chainId = "0x".concat(chainId.toString(16));
                    this.magicUser = magic;
                    this.subscribeToEvents(this.provider);
                    return _context3.abrupt("return", {
                      provider: this.provider,
                      account: this.account,
                      chainId: this.chainId
                    });
                  case 50:
                    throw new Error("Error during enable via MagicLink, login to magic failed");
                  case 51:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this, [[13, 29], [17, 22]]);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }]);
      return MagicWeb3Connector2;
    }(_AbstractWeb3Connector.default);
    exports.default = MagicWeb3Connector;
  }
});

// node_modules/@web3auth/core/dist/core.esm.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var import_loglevel, ADAPTER_CACHE_KEY, Web3AuthCore;
var init_core_esm = __esm({
  "node_modules/@web3auth/core/dist/core.esm.js"() {
    init_react();
    init_defineProperty();
    init_openloginJrpc_esm();
    init_base_esm();
    import_loglevel = __toESM(require_loglevel());
    ADAPTER_CACHE_KEY = "Web3Auth-cachedAdapter";
    Web3AuthCore = class extends SafeEventEmitter {
      constructor(options) {
        var _options$chainConfig, _options$chainConfig2, _options$chainConfig3, _options$chainConfig4;
        super();
        _defineProperty(this, "coreOptions", void 0);
        _defineProperty(this, "connectedAdapterName", null);
        _defineProperty(this, "status", ADAPTER_STATUS.NOT_READY);
        _defineProperty(this, "cachedAdapter", null);
        _defineProperty(this, "walletAdapters", {});
        if (!((_options$chainConfig = options.chainConfig) !== null && _options$chainConfig !== void 0 && _options$chainConfig.chainNamespace) || !Object.values(CHAIN_NAMESPACES).includes((_options$chainConfig2 = options.chainConfig) === null || _options$chainConfig2 === void 0 ? void 0 : _options$chainConfig2.chainNamespace))
          throw WalletInitializationError.invalidParams("Please provide a valid chainNamespace in chainConfig");
        this.cachedAdapter = storageAvailable("sessionStorage") ? window.sessionStorage.getItem(ADAPTER_CACHE_KEY) : null;
        this.coreOptions = _objectSpread(_objectSpread({}, options), {}, {
          chainConfig: _objectSpread(_objectSpread({}, getChainConfig((_options$chainConfig3 = options.chainConfig) === null || _options$chainConfig3 === void 0 ? void 0 : _options$chainConfig3.chainNamespace, (_options$chainConfig4 = options.chainConfig) === null || _options$chainConfig4 === void 0 ? void 0 : _options$chainConfig4.chainId)), options.chainConfig)
        });
        this.subscribeToAdapterEvents = this.subscribeToAdapterEvents.bind(this);
      }
      get provider() {
        if (this.status === ADAPTER_STATUS.CONNECTED && this.connectedAdapterName) {
          const adapter = this.walletAdapters[this.connectedAdapterName];
          return adapter.provider;
        }
        return null;
      }
      set provider(_2) {
        throw new Error("Not implemented");
      }
      async init() {
        const initPromises = Object.keys(this.walletAdapters).map((adapterName) => {
          this.subscribeToAdapterEvents(this.walletAdapters[adapterName]);
          if (!this.walletAdapters[adapterName].chainConfigProxy) {
            const providedChainConfig = this.coreOptions.chainConfig;
            if (!providedChainConfig.chainNamespace)
              throw WalletInitializationError.invalidParams("Please provide chainNamespace in chainConfig");
            const chainConfig = _objectSpread(_objectSpread({}, getChainConfig(providedChainConfig.chainNamespace, providedChainConfig.chainId)), providedChainConfig);
            this.walletAdapters[adapterName].setChainConfig(chainConfig);
          }
          return this.walletAdapters[adapterName].init({
            autoConnect: this.cachedAdapter === adapterName
          }).catch((e) => import_loglevel.default.error(e));
        });
        this.status = ADAPTER_STATUS.READY;
        await Promise.all(initPromises);
      }
      configureAdapter(adapter) {
        this.checkInitRequirements();
        const providedChainConfig = this.coreOptions.chainConfig;
        if (!providedChainConfig.chainNamespace)
          throw WalletInitializationError.invalidParams("Please provide chainNamespace in chainConfig");
        const adapterAlreadyExists = this.walletAdapters[adapter.name];
        if (adapterAlreadyExists)
          throw WalletInitializationError.duplicateAdapterError("Wallet adapter for ".concat(adapter.name, " already exists"));
        if (adapter.adapterNamespace !== ADAPTER_NAMESPACES.MULTICHAIN && adapter.adapterNamespace !== providedChainConfig.chainNamespace)
          throw WalletInitializationError.incompatibleChainNameSpace("This wallet adapter belongs to ".concat(adapter.adapterNamespace, " which is incompatible with currently used namespace: ").concat(providedChainConfig.chainNamespace));
        if (adapter.adapterNamespace === ADAPTER_NAMESPACES.MULTICHAIN && adapter.currentChainNamespace && providedChainConfig.chainNamespace !== adapter.currentChainNamespace) {
          adapter.setChainConfig(providedChainConfig);
        }
        this.walletAdapters[adapter.name] = adapter;
        return this;
      }
      clearCache() {
        if (!storageAvailable("sessionStorage"))
          return;
        window.sessionStorage.removeItem(ADAPTER_CACHE_KEY);
        this.cachedAdapter = null;
      }
      async connectTo(walletName, loginParams) {
        if (!this.walletAdapters[walletName])
          throw WalletInitializationError.notFound("Please add wallet adapter for ".concat(walletName, " wallet, before connecting"));
        return this.walletAdapters[walletName].connect(loginParams);
      }
      async logout() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
          cleanup: false
        };
        if (this.status !== ADAPTER_STATUS.CONNECTED || !this.connectedAdapterName)
          throw WalletLoginError.notConnectedError("No wallet is connected");
        await this.walletAdapters[this.connectedAdapterName].disconnect(options);
      }
      async getUserInfo() {
        import_loglevel.default.debug("Getting user info", this.status, this.connectedAdapterName);
        if (this.status !== ADAPTER_STATUS.CONNECTED || !this.connectedAdapterName)
          throw WalletLoginError.notConnectedError("No wallet is connected");
        return this.walletAdapters[this.connectedAdapterName].getUserInfo();
      }
      subscribeToAdapterEvents(walletAdapter) {
        walletAdapter.on(ADAPTER_EVENTS.CONNECTED, (data) => {
          this.status = ADAPTER_STATUS.CONNECTED;
          this.connectedAdapterName = data.adapter;
          this.cacheWallet(data.adapter);
          this.emit(ADAPTER_EVENTS.CONNECTED, _objectSpread({}, data));
          import_loglevel.default.debug("connected", this.status, this.connectedAdapterName);
        });
        walletAdapter.on(ADAPTER_EVENTS.DISCONNECTED, (data) => {
          this.status = ADAPTER_STATUS.READY;
          this.emit(ADAPTER_EVENTS.DISCONNECTED, data);
          if (storageAvailable("sessionStorage")) {
            const cachedAdapter = window.sessionStorage.getItem(ADAPTER_CACHE_KEY);
            if (this.connectedAdapterName === cachedAdapter) {
              this.clearCache();
            }
          }
          import_loglevel.default.debug("disconnected", this.status, this.connectedAdapterName);
        });
        walletAdapter.on(ADAPTER_EVENTS.CONNECTING, (data) => {
          this.status = ADAPTER_STATUS.CONNECTING;
          this.emit(ADAPTER_EVENTS.CONNECTING, data);
          import_loglevel.default.debug("connecting", this.status, this.connectedAdapterName);
        });
        walletAdapter.on(ADAPTER_EVENTS.ERRORED, (data) => {
          this.status = ADAPTER_STATUS.ERRORED;
          this.clearCache();
          this.emit(ADAPTER_EVENTS.ERRORED, data);
          import_loglevel.default.debug("errored", this.status, this.connectedAdapterName);
        });
        walletAdapter.on(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, (data) => {
          import_loglevel.default.debug("adapter data updated", data);
          this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, data);
        });
      }
      checkInitRequirements() {
        if (this.status === ADAPTER_STATUS.CONNECTING)
          throw WalletInitializationError.notReady("Already pending connection");
        if (this.status === ADAPTER_STATUS.CONNECTED)
          throw WalletInitializationError.notReady("Already connected");
        if (this.status === ADAPTER_STATUS.READY)
          throw WalletInitializationError.notReady("Adapter is already initialized");
      }
      cacheWallet(walletName) {
        if (!storageAvailable("sessionStorage"))
          return;
        window.sessionStorage.setItem(ADAPTER_CACHE_KEY, walletName);
        this.cachedAdapter = walletName;
      }
    };
  }
});

// node_modules/lodash.clonedeep/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.clonedeep/index.js"(exports, module) {
    init_react();
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reFlags = /\w*$/;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var freeGlobal = typeof globalThis == "object" && globalThis && globalThis.Object === Object && globalThis;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    function addMapEntry(map, pair) {
      map.set(pair[0], pair[1]);
      return map;
    }
    function addSetEntry(set, value) {
      set.add(value);
      return set;
    }
    function arrayEach(array, iteratee) {
      var index = -1, length2 = array ? array.length : 0;
      while (++index < length2) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayPush(array, values) {
      var index = -1, length2 = values.length, offset = array.length;
      while (++index < length2) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length2 = array ? array.length : 0;
      if (initAccum && length2) {
        accumulator = array[++index];
      }
      while (++index < length2) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    function baseTimes(n2, iteratee) {
      var index = -1, result = Array(n2);
      while (++index < n2) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var Buffer = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap2 = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index = -1, length2 = entries ? entries.length : 0;
      this.clear();
      while (++index < length2) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty2.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length2 = entries ? entries.length : 0;
      this.clear();
      while (++index < length2) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length2 = entries ? entries.length : 0;
      this.clear();
      while (++index < length2) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length2 = result.length, skipIndexes = !!length2;
      for (var key in value) {
        if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length2)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        object[key] = value;
      }
    }
    function assocIndexOf(array, key) {
      var length2 = array.length;
      while (length2--) {
        if (eq(array[length2][0], key)) {
          return length2;
        }
      }
      return -1;
    }
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (!isArr) {
        var props = isFull ? getAllKeys(value) : keys(value);
      }
      arrayEach(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, isDeep, isFull, customizer, key2, value, stack));
      });
      return result;
    }
    function baseCreate(proto) {
      return isObject(proto) ? objectCreate(proto) : {};
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty2.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var result = new buffer.constructor(buffer.length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor());
    }
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor());
    }
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index = -1, length2 = source.length;
      array || (array = Array(length2));
      while (++index < length2) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      object || (object = {});
      var index = -1, length2 = props.length;
      while (++index < length2) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        assignValue(object, key, newValue === void 0 ? source[key] : newValue);
      }
      return object;
    }
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function initCloneArray(array) {
      var length2 = array.length, result = array.constructor(length2);
      if (length2 && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return cloneSet(object, isDeep, cloneFunc);
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    function isIndex(value, length2) {
      length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
      return !!length2 && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function cloneDeep2(value) {
      return baseClone(value, true, true);
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty2.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module.exports = cloneDeep2;
  }
});

// node_modules/qr.js/lib/mode.js
var require_mode = __commonJS({
  "node_modules/qr.js/lib/mode.js"(exports, module) {
    init_react();
    module.exports = {
      MODE_NUMBER: 1 << 0,
      MODE_ALPHA_NUM: 1 << 1,
      MODE_8BIT_BYTE: 1 << 2,
      MODE_KANJI: 1 << 3
    };
  }
});

// node_modules/qr.js/lib/8BitByte.js
var require_BitByte = __commonJS({
  "node_modules/qr.js/lib/8BitByte.js"(exports, module) {
    init_react();
    var mode = require_mode();
    function QR8bitByte(data) {
      this.mode = mode.MODE_8BIT_BYTE;
      this.data = data;
    }
    QR8bitByte.prototype = {
      getLength: function(buffer) {
        return this.data.length;
      },
      write: function(buffer) {
        for (var i = 0; i < this.data.length; i++) {
          buffer.put(this.data.charCodeAt(i), 8);
        }
      }
    };
    module.exports = QR8bitByte;
  }
});

// node_modules/qr.js/lib/ErrorCorrectLevel.js
var require_ErrorCorrectLevel = __commonJS({
  "node_modules/qr.js/lib/ErrorCorrectLevel.js"(exports, module) {
    init_react();
    module.exports = {
      L: 1,
      M: 0,
      Q: 3,
      H: 2
    };
  }
});

// node_modules/qr.js/lib/RSBlock.js
var require_RSBlock = __commonJS({
  "node_modules/qr.js/lib/RSBlock.js"(exports, module) {
    init_react();
    var ECL = require_ErrorCorrectLevel();
    function QRRSBlock(totalCount, dataCount) {
      this.totalCount = totalCount;
      this.dataCount = dataCount;
    }
    QRRSBlock.RS_BLOCK_TABLE = [
      [1, 26, 19],
      [1, 26, 16],
      [1, 26, 13],
      [1, 26, 9],
      [1, 44, 34],
      [1, 44, 28],
      [1, 44, 22],
      [1, 44, 16],
      [1, 70, 55],
      [1, 70, 44],
      [2, 35, 17],
      [2, 35, 13],
      [1, 100, 80],
      [2, 50, 32],
      [2, 50, 24],
      [4, 25, 9],
      [1, 134, 108],
      [2, 67, 43],
      [2, 33, 15, 2, 34, 16],
      [2, 33, 11, 2, 34, 12],
      [2, 86, 68],
      [4, 43, 27],
      [4, 43, 19],
      [4, 43, 15],
      [2, 98, 78],
      [4, 49, 31],
      [2, 32, 14, 4, 33, 15],
      [4, 39, 13, 1, 40, 14],
      [2, 121, 97],
      [2, 60, 38, 2, 61, 39],
      [4, 40, 18, 2, 41, 19],
      [4, 40, 14, 2, 41, 15],
      [2, 146, 116],
      [3, 58, 36, 2, 59, 37],
      [4, 36, 16, 4, 37, 17],
      [4, 36, 12, 4, 37, 13],
      [2, 86, 68, 2, 87, 69],
      [4, 69, 43, 1, 70, 44],
      [6, 43, 19, 2, 44, 20],
      [6, 43, 15, 2, 44, 16],
      [4, 101, 81],
      [1, 80, 50, 4, 81, 51],
      [4, 50, 22, 4, 51, 23],
      [3, 36, 12, 8, 37, 13],
      [2, 116, 92, 2, 117, 93],
      [6, 58, 36, 2, 59, 37],
      [4, 46, 20, 6, 47, 21],
      [7, 42, 14, 4, 43, 15],
      [4, 133, 107],
      [8, 59, 37, 1, 60, 38],
      [8, 44, 20, 4, 45, 21],
      [12, 33, 11, 4, 34, 12],
      [3, 145, 115, 1, 146, 116],
      [4, 64, 40, 5, 65, 41],
      [11, 36, 16, 5, 37, 17],
      [11, 36, 12, 5, 37, 13],
      [5, 109, 87, 1, 110, 88],
      [5, 65, 41, 5, 66, 42],
      [5, 54, 24, 7, 55, 25],
      [11, 36, 12],
      [5, 122, 98, 1, 123, 99],
      [7, 73, 45, 3, 74, 46],
      [15, 43, 19, 2, 44, 20],
      [3, 45, 15, 13, 46, 16],
      [1, 135, 107, 5, 136, 108],
      [10, 74, 46, 1, 75, 47],
      [1, 50, 22, 15, 51, 23],
      [2, 42, 14, 17, 43, 15],
      [5, 150, 120, 1, 151, 121],
      [9, 69, 43, 4, 70, 44],
      [17, 50, 22, 1, 51, 23],
      [2, 42, 14, 19, 43, 15],
      [3, 141, 113, 4, 142, 114],
      [3, 70, 44, 11, 71, 45],
      [17, 47, 21, 4, 48, 22],
      [9, 39, 13, 16, 40, 14],
      [3, 135, 107, 5, 136, 108],
      [3, 67, 41, 13, 68, 42],
      [15, 54, 24, 5, 55, 25],
      [15, 43, 15, 10, 44, 16],
      [4, 144, 116, 4, 145, 117],
      [17, 68, 42],
      [17, 50, 22, 6, 51, 23],
      [19, 46, 16, 6, 47, 17],
      [2, 139, 111, 7, 140, 112],
      [17, 74, 46],
      [7, 54, 24, 16, 55, 25],
      [34, 37, 13],
      [4, 151, 121, 5, 152, 122],
      [4, 75, 47, 14, 76, 48],
      [11, 54, 24, 14, 55, 25],
      [16, 45, 15, 14, 46, 16],
      [6, 147, 117, 4, 148, 118],
      [6, 73, 45, 14, 74, 46],
      [11, 54, 24, 16, 55, 25],
      [30, 46, 16, 2, 47, 17],
      [8, 132, 106, 4, 133, 107],
      [8, 75, 47, 13, 76, 48],
      [7, 54, 24, 22, 55, 25],
      [22, 45, 15, 13, 46, 16],
      [10, 142, 114, 2, 143, 115],
      [19, 74, 46, 4, 75, 47],
      [28, 50, 22, 6, 51, 23],
      [33, 46, 16, 4, 47, 17],
      [8, 152, 122, 4, 153, 123],
      [22, 73, 45, 3, 74, 46],
      [8, 53, 23, 26, 54, 24],
      [12, 45, 15, 28, 46, 16],
      [3, 147, 117, 10, 148, 118],
      [3, 73, 45, 23, 74, 46],
      [4, 54, 24, 31, 55, 25],
      [11, 45, 15, 31, 46, 16],
      [7, 146, 116, 7, 147, 117],
      [21, 73, 45, 7, 74, 46],
      [1, 53, 23, 37, 54, 24],
      [19, 45, 15, 26, 46, 16],
      [5, 145, 115, 10, 146, 116],
      [19, 75, 47, 10, 76, 48],
      [15, 54, 24, 25, 55, 25],
      [23, 45, 15, 25, 46, 16],
      [13, 145, 115, 3, 146, 116],
      [2, 74, 46, 29, 75, 47],
      [42, 54, 24, 1, 55, 25],
      [23, 45, 15, 28, 46, 16],
      [17, 145, 115],
      [10, 74, 46, 23, 75, 47],
      [10, 54, 24, 35, 55, 25],
      [19, 45, 15, 35, 46, 16],
      [17, 145, 115, 1, 146, 116],
      [14, 74, 46, 21, 75, 47],
      [29, 54, 24, 19, 55, 25],
      [11, 45, 15, 46, 46, 16],
      [13, 145, 115, 6, 146, 116],
      [14, 74, 46, 23, 75, 47],
      [44, 54, 24, 7, 55, 25],
      [59, 46, 16, 1, 47, 17],
      [12, 151, 121, 7, 152, 122],
      [12, 75, 47, 26, 76, 48],
      [39, 54, 24, 14, 55, 25],
      [22, 45, 15, 41, 46, 16],
      [6, 151, 121, 14, 152, 122],
      [6, 75, 47, 34, 76, 48],
      [46, 54, 24, 10, 55, 25],
      [2, 45, 15, 64, 46, 16],
      [17, 152, 122, 4, 153, 123],
      [29, 74, 46, 14, 75, 47],
      [49, 54, 24, 10, 55, 25],
      [24, 45, 15, 46, 46, 16],
      [4, 152, 122, 18, 153, 123],
      [13, 74, 46, 32, 75, 47],
      [48, 54, 24, 14, 55, 25],
      [42, 45, 15, 32, 46, 16],
      [20, 147, 117, 4, 148, 118],
      [40, 75, 47, 7, 76, 48],
      [43, 54, 24, 22, 55, 25],
      [10, 45, 15, 67, 46, 16],
      [19, 148, 118, 6, 149, 119],
      [18, 75, 47, 31, 76, 48],
      [34, 54, 24, 34, 55, 25],
      [20, 45, 15, 61, 46, 16]
    ];
    QRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {
      var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);
      if (rsBlock == void 0) {
        throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
      }
      var length2 = rsBlock.length / 3;
      var list = new Array();
      for (var i = 0; i < length2; i++) {
        var count = rsBlock[i * 3 + 0];
        var totalCount = rsBlock[i * 3 + 1];
        var dataCount = rsBlock[i * 3 + 2];
        for (var j2 = 0; j2 < count; j2++) {
          list.push(new QRRSBlock(totalCount, dataCount));
        }
      }
      return list;
    };
    QRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {
      switch (errorCorrectLevel) {
        case ECL.L:
          return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
        case ECL.M:
          return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
        case ECL.Q:
          return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
        case ECL.H:
          return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
        default:
          return void 0;
      }
    };
    module.exports = QRRSBlock;
  }
});

// node_modules/qr.js/lib/BitBuffer.js
var require_BitBuffer = __commonJS({
  "node_modules/qr.js/lib/BitBuffer.js"(exports, module) {
    init_react();
    function QRBitBuffer() {
      this.buffer = new Array();
      this.length = 0;
    }
    QRBitBuffer.prototype = {
      get: function(index) {
        var bufIndex = Math.floor(index / 8);
        return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;
      },
      put: function(num, length2) {
        for (var i = 0; i < length2; i++) {
          this.putBit((num >>> length2 - i - 1 & 1) == 1);
        }
      },
      getLengthInBits: function() {
        return this.length;
      },
      putBit: function(bit) {
        var bufIndex = Math.floor(this.length / 8);
        if (this.buffer.length <= bufIndex) {
          this.buffer.push(0);
        }
        if (bit) {
          this.buffer[bufIndex] |= 128 >>> this.length % 8;
        }
        this.length++;
      }
    };
    module.exports = QRBitBuffer;
  }
});

// node_modules/qr.js/lib/math.js
var require_math = __commonJS({
  "node_modules/qr.js/lib/math.js"(exports, module) {
    init_react();
    var QRMath = {
      glog: function(n2) {
        if (n2 < 1) {
          throw new Error("glog(" + n2 + ")");
        }
        return QRMath.LOG_TABLE[n2];
      },
      gexp: function(n2) {
        while (n2 < 0) {
          n2 += 255;
        }
        while (n2 >= 256) {
          n2 -= 255;
        }
        return QRMath.EXP_TABLE[n2];
      },
      EXP_TABLE: new Array(256),
      LOG_TABLE: new Array(256)
    };
    for (i = 0; i < 8; i++) {
      QRMath.EXP_TABLE[i] = 1 << i;
    }
    var i;
    for (i = 8; i < 256; i++) {
      QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];
    }
    var i;
    for (i = 0; i < 255; i++) {
      QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;
    }
    var i;
    module.exports = QRMath;
  }
});

// node_modules/qr.js/lib/Polynomial.js
var require_Polynomial = __commonJS({
  "node_modules/qr.js/lib/Polynomial.js"(exports, module) {
    init_react();
    var math = require_math();
    function QRPolynomial(num, shift) {
      if (num.length == void 0) {
        throw new Error(num.length + "/" + shift);
      }
      var offset = 0;
      while (offset < num.length && num[offset] == 0) {
        offset++;
      }
      this.num = new Array(num.length - offset + shift);
      for (var i = 0; i < num.length - offset; i++) {
        this.num[i] = num[i + offset];
      }
    }
    QRPolynomial.prototype = {
      get: function(index) {
        return this.num[index];
      },
      getLength: function() {
        return this.num.length;
      },
      multiply: function(e) {
        var num = new Array(this.getLength() + e.getLength() - 1);
        for (var i = 0; i < this.getLength(); i++) {
          for (var j2 = 0; j2 < e.getLength(); j2++) {
            num[i + j2] ^= math.gexp(math.glog(this.get(i)) + math.glog(e.get(j2)));
          }
        }
        return new QRPolynomial(num, 0);
      },
      mod: function(e) {
        if (this.getLength() - e.getLength() < 0) {
          return this;
        }
        var ratio = math.glog(this.get(0)) - math.glog(e.get(0));
        var num = new Array(this.getLength());
        for (var i = 0; i < this.getLength(); i++) {
          num[i] = this.get(i);
        }
        for (var i = 0; i < e.getLength(); i++) {
          num[i] ^= math.gexp(math.glog(e.get(i)) + ratio);
        }
        return new QRPolynomial(num, 0).mod(e);
      }
    };
    module.exports = QRPolynomial;
  }
});

// node_modules/qr.js/lib/util.js
var require_util = __commonJS({
  "node_modules/qr.js/lib/util.js"(exports, module) {
    init_react();
    var Mode = require_mode();
    var Polynomial = require_Polynomial();
    var math = require_math();
    var QRMaskPattern = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };
    var QRUtil = {
      PATTERN_POSITION_TABLE: [
        [],
        [6, 18],
        [6, 22],
        [6, 26],
        [6, 30],
        [6, 34],
        [6, 22, 38],
        [6, 24, 42],
        [6, 26, 46],
        [6, 28, 50],
        [6, 30, 54],
        [6, 32, 58],
        [6, 34, 62],
        [6, 26, 46, 66],
        [6, 26, 48, 70],
        [6, 26, 50, 74],
        [6, 30, 54, 78],
        [6, 30, 56, 82],
        [6, 30, 58, 86],
        [6, 34, 62, 90],
        [6, 28, 50, 72, 94],
        [6, 26, 50, 74, 98],
        [6, 30, 54, 78, 102],
        [6, 28, 54, 80, 106],
        [6, 32, 58, 84, 110],
        [6, 30, 58, 86, 114],
        [6, 34, 62, 90, 118],
        [6, 26, 50, 74, 98, 122],
        [6, 30, 54, 78, 102, 126],
        [6, 26, 52, 78, 104, 130],
        [6, 30, 56, 82, 108, 134],
        [6, 34, 60, 86, 112, 138],
        [6, 30, 58, 86, 114, 142],
        [6, 34, 62, 90, 118, 146],
        [6, 30, 54, 78, 102, 126, 150],
        [6, 24, 50, 76, 102, 128, 154],
        [6, 28, 54, 80, 106, 132, 158],
        [6, 32, 58, 84, 110, 136, 162],
        [6, 26, 54, 82, 110, 138, 166],
        [6, 30, 58, 86, 114, 142, 170]
      ],
      G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,
      G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,
      G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,
      getBCHTypeInfo: function(data) {
        var d2 = data << 10;
        while (QRUtil.getBCHDigit(d2) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
          d2 ^= QRUtil.G15 << QRUtil.getBCHDigit(d2) - QRUtil.getBCHDigit(QRUtil.G15);
        }
        return (data << 10 | d2) ^ QRUtil.G15_MASK;
      },
      getBCHTypeNumber: function(data) {
        var d2 = data << 12;
        while (QRUtil.getBCHDigit(d2) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
          d2 ^= QRUtil.G18 << QRUtil.getBCHDigit(d2) - QRUtil.getBCHDigit(QRUtil.G18);
        }
        return data << 12 | d2;
      },
      getBCHDigit: function(data) {
        var digit = 0;
        while (data != 0) {
          digit++;
          data >>>= 1;
        }
        return digit;
      },
      getPatternPosition: function(typeNumber) {
        return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
      },
      getMask: function(maskPattern, i, j2) {
        switch (maskPattern) {
          case QRMaskPattern.PATTERN000:
            return (i + j2) % 2 == 0;
          case QRMaskPattern.PATTERN001:
            return i % 2 == 0;
          case QRMaskPattern.PATTERN010:
            return j2 % 3 == 0;
          case QRMaskPattern.PATTERN011:
            return (i + j2) % 3 == 0;
          case QRMaskPattern.PATTERN100:
            return (Math.floor(i / 2) + Math.floor(j2 / 3)) % 2 == 0;
          case QRMaskPattern.PATTERN101:
            return i * j2 % 2 + i * j2 % 3 == 0;
          case QRMaskPattern.PATTERN110:
            return (i * j2 % 2 + i * j2 % 3) % 2 == 0;
          case QRMaskPattern.PATTERN111:
            return (i * j2 % 3 + (i + j2) % 2) % 2 == 0;
          default:
            throw new Error("bad maskPattern:" + maskPattern);
        }
      },
      getErrorCorrectPolynomial: function(errorCorrectLength) {
        var a2 = new Polynomial([1], 0);
        for (var i = 0; i < errorCorrectLength; i++) {
          a2 = a2.multiply(new Polynomial([1, math.gexp(i)], 0));
        }
        return a2;
      },
      getLengthInBits: function(mode, type) {
        if (1 <= type && type < 10) {
          switch (mode) {
            case Mode.MODE_NUMBER:
              return 10;
            case Mode.MODE_ALPHA_NUM:
              return 9;
            case Mode.MODE_8BIT_BYTE:
              return 8;
            case Mode.MODE_KANJI:
              return 8;
            default:
              throw new Error("mode:" + mode);
          }
        } else if (type < 27) {
          switch (mode) {
            case Mode.MODE_NUMBER:
              return 12;
            case Mode.MODE_ALPHA_NUM:
              return 11;
            case Mode.MODE_8BIT_BYTE:
              return 16;
            case Mode.MODE_KANJI:
              return 10;
            default:
              throw new Error("mode:" + mode);
          }
        } else if (type < 41) {
          switch (mode) {
            case Mode.MODE_NUMBER:
              return 14;
            case Mode.MODE_ALPHA_NUM:
              return 13;
            case Mode.MODE_8BIT_BYTE:
              return 16;
            case Mode.MODE_KANJI:
              return 12;
            default:
              throw new Error("mode:" + mode);
          }
        } else {
          throw new Error("type:" + type);
        }
      },
      getLostPoint: function(qrCode) {
        var moduleCount = qrCode.getModuleCount();
        var lostPoint = 0;
        for (var row = 0; row < moduleCount; row++) {
          for (var col = 0; col < moduleCount; col++) {
            var sameCount = 0;
            var dark = qrCode.isDark(row, col);
            for (var r2 = -1; r2 <= 1; r2++) {
              if (row + r2 < 0 || moduleCount <= row + r2) {
                continue;
              }
              for (var c2 = -1; c2 <= 1; c2++) {
                if (col + c2 < 0 || moduleCount <= col + c2) {
                  continue;
                }
                if (r2 == 0 && c2 == 0) {
                  continue;
                }
                if (dark == qrCode.isDark(row + r2, col + c2)) {
                  sameCount++;
                }
              }
            }
            if (sameCount > 5) {
              lostPoint += 3 + sameCount - 5;
            }
          }
        }
        for (var row = 0; row < moduleCount - 1; row++) {
          for (var col = 0; col < moduleCount - 1; col++) {
            var count = 0;
            if (qrCode.isDark(row, col))
              count++;
            if (qrCode.isDark(row + 1, col))
              count++;
            if (qrCode.isDark(row, col + 1))
              count++;
            if (qrCode.isDark(row + 1, col + 1))
              count++;
            if (count == 0 || count == 4) {
              lostPoint += 3;
            }
          }
        }
        for (var row = 0; row < moduleCount; row++) {
          for (var col = 0; col < moduleCount - 6; col++) {
            if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {
              lostPoint += 40;
            }
          }
        }
        for (var col = 0; col < moduleCount; col++) {
          for (var row = 0; row < moduleCount - 6; row++) {
            if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {
              lostPoint += 40;
            }
          }
        }
        var darkCount = 0;
        for (var col = 0; col < moduleCount; col++) {
          for (var row = 0; row < moduleCount; row++) {
            if (qrCode.isDark(row, col)) {
              darkCount++;
            }
          }
        }
        var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
        lostPoint += ratio * 10;
        return lostPoint;
      }
    };
    module.exports = QRUtil;
  }
});

// node_modules/qr.js/lib/QRCode.js
var require_QRCode = __commonJS({
  "node_modules/qr.js/lib/QRCode.js"(exports, module) {
    init_react();
    var BitByte = require_BitByte();
    var RSBlock = require_RSBlock();
    var BitBuffer = require_BitBuffer();
    var util = require_util();
    var Polynomial = require_Polynomial();
    function QRCode2(typeNumber, errorCorrectLevel) {
      this.typeNumber = typeNumber;
      this.errorCorrectLevel = errorCorrectLevel;
      this.modules = null;
      this.moduleCount = 0;
      this.dataCache = null;
      this.dataList = [];
    }
    var proto = QRCode2.prototype;
    proto.addData = function(data) {
      var newData = new BitByte(data);
      this.dataList.push(newData);
      this.dataCache = null;
    };
    proto.isDark = function(row, col) {
      if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
        throw new Error(row + "," + col);
      }
      return this.modules[row][col];
    };
    proto.getModuleCount = function() {
      return this.moduleCount;
    };
    proto.make = function() {
      if (this.typeNumber < 1) {
        var typeNumber = 1;
        for (typeNumber = 1; typeNumber < 40; typeNumber++) {
          var rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);
          var buffer = new BitBuffer();
          var totalDataCount = 0;
          for (var i = 0; i < rsBlocks.length; i++) {
            totalDataCount += rsBlocks[i].dataCount;
          }
          for (var i = 0; i < this.dataList.length; i++) {
            var data = this.dataList[i];
            buffer.put(data.mode, 4);
            buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));
            data.write(buffer);
          }
          if (buffer.getLengthInBits() <= totalDataCount * 8)
            break;
        }
        this.typeNumber = typeNumber;
      }
      this.makeImpl(false, this.getBestMaskPattern());
    };
    proto.makeImpl = function(test, maskPattern) {
      this.moduleCount = this.typeNumber * 4 + 17;
      this.modules = new Array(this.moduleCount);
      for (var row = 0; row < this.moduleCount; row++) {
        this.modules[row] = new Array(this.moduleCount);
        for (var col = 0; col < this.moduleCount; col++) {
          this.modules[row][col] = null;
        }
      }
      this.setupPositionProbePattern(0, 0);
      this.setupPositionProbePattern(this.moduleCount - 7, 0);
      this.setupPositionProbePattern(0, this.moduleCount - 7);
      this.setupPositionAdjustPattern();
      this.setupTimingPattern();
      this.setupTypeInfo(test, maskPattern);
      if (this.typeNumber >= 7) {
        this.setupTypeNumber(test);
      }
      if (this.dataCache == null) {
        this.dataCache = QRCode2.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
      }
      this.mapData(this.dataCache, maskPattern);
    };
    proto.setupPositionProbePattern = function(row, col) {
      for (var r2 = -1; r2 <= 7; r2++) {
        if (row + r2 <= -1 || this.moduleCount <= row + r2)
          continue;
        for (var c2 = -1; c2 <= 7; c2++) {
          if (col + c2 <= -1 || this.moduleCount <= col + c2)
            continue;
          if (0 <= r2 && r2 <= 6 && (c2 == 0 || c2 == 6) || 0 <= c2 && c2 <= 6 && (r2 == 0 || r2 == 6) || 2 <= r2 && r2 <= 4 && 2 <= c2 && c2 <= 4) {
            this.modules[row + r2][col + c2] = true;
          } else {
            this.modules[row + r2][col + c2] = false;
          }
        }
      }
    };
    proto.getBestMaskPattern = function() {
      var minLostPoint = 0;
      var pattern = 0;
      for (var i = 0; i < 8; i++) {
        this.makeImpl(true, i);
        var lostPoint = util.getLostPoint(this);
        if (i == 0 || minLostPoint > lostPoint) {
          minLostPoint = lostPoint;
          pattern = i;
        }
      }
      return pattern;
    };
    proto.createMovieClip = function(target_mc, instance_name, depth) {
      var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
      var cs = 1;
      this.make();
      for (var row = 0; row < this.modules.length; row++) {
        var y2 = row * cs;
        for (var col = 0; col < this.modules[row].length; col++) {
          var x2 = col * cs;
          var dark = this.modules[row][col];
          if (dark) {
            qr_mc.beginFill(0, 100);
            qr_mc.moveTo(x2, y2);
            qr_mc.lineTo(x2 + cs, y2);
            qr_mc.lineTo(x2 + cs, y2 + cs);
            qr_mc.lineTo(x2, y2 + cs);
            qr_mc.endFill();
          }
        }
      }
      return qr_mc;
    };
    proto.setupTimingPattern = function() {
      for (var r2 = 8; r2 < this.moduleCount - 8; r2++) {
        if (this.modules[r2][6] != null) {
          continue;
        }
        this.modules[r2][6] = r2 % 2 == 0;
      }
      for (var c2 = 8; c2 < this.moduleCount - 8; c2++) {
        if (this.modules[6][c2] != null) {
          continue;
        }
        this.modules[6][c2] = c2 % 2 == 0;
      }
    };
    proto.setupPositionAdjustPattern = function() {
      var pos = util.getPatternPosition(this.typeNumber);
      for (var i = 0; i < pos.length; i++) {
        for (var j2 = 0; j2 < pos.length; j2++) {
          var row = pos[i];
          var col = pos[j2];
          if (this.modules[row][col] != null) {
            continue;
          }
          for (var r2 = -2; r2 <= 2; r2++) {
            for (var c2 = -2; c2 <= 2; c2++) {
              if (r2 == -2 || r2 == 2 || c2 == -2 || c2 == 2 || r2 == 0 && c2 == 0) {
                this.modules[row + r2][col + c2] = true;
              } else {
                this.modules[row + r2][col + c2] = false;
              }
            }
          }
        }
      }
    };
    proto.setupTypeNumber = function(test) {
      var bits = util.getBCHTypeNumber(this.typeNumber);
      for (var i = 0; i < 18; i++) {
        var mod = !test && (bits >> i & 1) == 1;
        this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
      }
      for (var i = 0; i < 18; i++) {
        var mod = !test && (bits >> i & 1) == 1;
        this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
      }
    };
    proto.setupTypeInfo = function(test, maskPattern) {
      var data = this.errorCorrectLevel << 3 | maskPattern;
      var bits = util.getBCHTypeInfo(data);
      for (var i = 0; i < 15; i++) {
        var mod = !test && (bits >> i & 1) == 1;
        if (i < 6) {
          this.modules[i][8] = mod;
        } else if (i < 8) {
          this.modules[i + 1][8] = mod;
        } else {
          this.modules[this.moduleCount - 15 + i][8] = mod;
        }
      }
      for (var i = 0; i < 15; i++) {
        var mod = !test && (bits >> i & 1) == 1;
        if (i < 8) {
          this.modules[8][this.moduleCount - i - 1] = mod;
        } else if (i < 9) {
          this.modules[8][15 - i - 1 + 1] = mod;
        } else {
          this.modules[8][15 - i - 1] = mod;
        }
      }
      this.modules[this.moduleCount - 8][8] = !test;
    };
    proto.mapData = function(data, maskPattern) {
      var inc = -1;
      var row = this.moduleCount - 1;
      var bitIndex = 7;
      var byteIndex = 0;
      for (var col = this.moduleCount - 1; col > 0; col -= 2) {
        if (col == 6)
          col--;
        while (true) {
          for (var c2 = 0; c2 < 2; c2++) {
            if (this.modules[row][col - c2] == null) {
              var dark = false;
              if (byteIndex < data.length) {
                dark = (data[byteIndex] >>> bitIndex & 1) == 1;
              }
              var mask = util.getMask(maskPattern, row, col - c2);
              if (mask) {
                dark = !dark;
              }
              this.modules[row][col - c2] = dark;
              bitIndex--;
              if (bitIndex == -1) {
                byteIndex++;
                bitIndex = 7;
              }
            }
          }
          row += inc;
          if (row < 0 || this.moduleCount <= row) {
            row -= inc;
            inc = -inc;
            break;
          }
        }
      }
    };
    QRCode2.PAD0 = 236;
    QRCode2.PAD1 = 17;
    QRCode2.createData = function(typeNumber, errorCorrectLevel, dataList) {
      var rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
      var buffer = new BitBuffer();
      for (var i = 0; i < dataList.length; i++) {
        var data = dataList[i];
        buffer.put(data.mode, 4);
        buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));
        data.write(buffer);
      }
      var totalDataCount = 0;
      for (var i = 0; i < rsBlocks.length; i++) {
        totalDataCount += rsBlocks[i].dataCount;
      }
      if (buffer.getLengthInBits() > totalDataCount * 8) {
        throw new Error("code length overflow. (" + buffer.getLengthInBits() + ">" + totalDataCount * 8 + ")");
      }
      if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
        buffer.put(0, 4);
      }
      while (buffer.getLengthInBits() % 8 != 0) {
        buffer.putBit(false);
      }
      while (true) {
        if (buffer.getLengthInBits() >= totalDataCount * 8) {
          break;
        }
        buffer.put(QRCode2.PAD0, 8);
        if (buffer.getLengthInBits() >= totalDataCount * 8) {
          break;
        }
        buffer.put(QRCode2.PAD1, 8);
      }
      return QRCode2.createBytes(buffer, rsBlocks);
    };
    QRCode2.createBytes = function(buffer, rsBlocks) {
      var offset = 0;
      var maxDcCount = 0;
      var maxEcCount = 0;
      var dcdata = new Array(rsBlocks.length);
      var ecdata = new Array(rsBlocks.length);
      for (var r2 = 0; r2 < rsBlocks.length; r2++) {
        var dcCount = rsBlocks[r2].dataCount;
        var ecCount = rsBlocks[r2].totalCount - dcCount;
        maxDcCount = Math.max(maxDcCount, dcCount);
        maxEcCount = Math.max(maxEcCount, ecCount);
        dcdata[r2] = new Array(dcCount);
        for (var i = 0; i < dcdata[r2].length; i++) {
          dcdata[r2][i] = 255 & buffer.buffer[i + offset];
        }
        offset += dcCount;
        var rsPoly = util.getErrorCorrectPolynomial(ecCount);
        var rawPoly = new Polynomial(dcdata[r2], rsPoly.getLength() - 1);
        var modPoly = rawPoly.mod(rsPoly);
        ecdata[r2] = new Array(rsPoly.getLength() - 1);
        for (var i = 0; i < ecdata[r2].length; i++) {
          var modIndex = i + modPoly.getLength() - ecdata[r2].length;
          ecdata[r2][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;
        }
      }
      var totalCodeCount = 0;
      for (var i = 0; i < rsBlocks.length; i++) {
        totalCodeCount += rsBlocks[i].totalCount;
      }
      var data = new Array(totalCodeCount);
      var index = 0;
      for (var i = 0; i < maxDcCount; i++) {
        for (var r2 = 0; r2 < rsBlocks.length; r2++) {
          if (i < dcdata[r2].length) {
            data[index++] = dcdata[r2][i];
          }
        }
      }
      for (var i = 0; i < maxEcCount; i++) {
        for (var r2 = 0; r2 < rsBlocks.length; r2++) {
          if (i < ecdata[r2].length) {
            data[index++] = ecdata[r2][i];
          }
        }
      }
      return data;
    };
    module.exports = QRCode2;
  }
});

// node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    init_react();
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment5 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment5;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/prop-types/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    init_react();
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    init_react();
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    init_react();
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    init_react();
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    init_react();
    var ReactIs = require_react_is();
    var assign2 = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign2({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    init_react();
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react-qr-code/lib/components/QRCodeCell/index.js
var require_QRCodeCell = __commonJS({
  "node_modules/react-qr-code/lib/components/QRCodeCell/index.js"(exports) {
    "use strict";
    init_react();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var propTypes = {
      d: _propTypes2.default.string.isRequired,
      fill: _propTypes2.default.string.isRequired,
      transformX: _propTypes2.default.number.isRequired,
      transformY: _propTypes2.default.number.isRequired
    };
    var defaultProps = {};
    var QRCodeCell = function QRCodeCell2(_ref) {
      var d2 = _ref.d, fill = _ref.fill, transformX = _ref.transformX, transformY = _ref.transformY;
      return _react2.default.createElement("path", { d: d2, fill, transform: "matrix(" + [1, 0, 0, 1, transformX, transformY] + ")" });
    };
    QRCodeCell.propTypes = propTypes;
    QRCodeCell.defaultProps = defaultProps;
    exports.default = QRCodeCell;
  }
});

// node_modules/react-qr-code/lib/components/QRCodeSurface/index.js
var require_QRCodeSurface = __commonJS({
  "node_modules/react-qr-code/lib/components/QRCodeSurface/index.js"(exports) {
    "use strict";
    init_react();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends2 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0)
          continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i))
          continue;
        target[i] = obj[i];
      }
      return target;
    }
    var propTypes = {
      children: _propTypes2.default.array.isRequired,
      size: _propTypes2.default.number.isRequired,
      title: _propTypes2.default.string,
      xmlns: _propTypes2.default.string
    };
    var defaultProps = {
      title: void 0,
      xmlns: "http://www.w3.org/2000/svg"
    };
    var QRCodeSurface = function QRCodeSurface2(_ref) {
      var children = _ref.children, size2 = _ref.size, title = _ref.title, xmlns = _ref.xmlns, props = _objectWithoutProperties(_ref, ["children", "size", "title", "xmlns"]);
      return _react2.default.createElement("svg", _extends2({}, props, { height: size2, width: size2, xmlns }), title ? _react2.default.createElement("title", null, title) : null, children);
    };
    QRCodeSurface.propTypes = propTypes;
    QRCodeSurface.defaultProps = defaultProps;
    exports.default = QRCodeSurface;
  }
});

// node_modules/react-qr-code/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-qr-code/lib/index.js"(exports) {
    "use strict";
    init_react();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends2 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _QRCode = require_QRCode();
    var _QRCode2 = _interopRequireDefault(_QRCode);
    var _ErrorCorrectLevel = require_ErrorCorrectLevel();
    var _ErrorCorrectLevel2 = _interopRequireDefault(_ErrorCorrectLevel);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _QRCodeCell = require_QRCodeCell();
    var _QRCodeCell2 = _interopRequireDefault(_QRCodeCell);
    var _QRCodeSurface = require_QRCodeSurface();
    var _QRCodeSurface2 = _interopRequireDefault(_QRCodeSurface);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0)
          continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i))
          continue;
        target[i] = obj[i];
      }
      return target;
    }
    var propTypes = {
      bgColor: _propTypes2.default.string,
      fgColor: _propTypes2.default.string,
      level: _propTypes2.default.oneOf(["L", "M", "Q", "H"]),
      size: _propTypes2.default.number,
      value: _propTypes2.default.string.isRequired
    };
    var defaultProps = {
      bgColor: "#FFFFFF",
      fgColor: "#000000",
      level: "L",
      size: 256
    };
    var QRCode2 = function QRCode3(_ref) {
      var bgColor = _ref.bgColor, fgColor = _ref.fgColor, level = _ref.level, size2 = _ref.size, value = _ref.value, props = _objectWithoutProperties(_ref, ["bgColor", "fgColor", "level", "size", "value"]);
      var qrcode = new _QRCode2.default(-1, _ErrorCorrectLevel2.default[level]);
      qrcode.addData(value);
      qrcode.make();
      var cells = qrcode.modules;
      var tileSize = size2 / cells.length;
      return _react2.default.createElement(_QRCodeSurface2.default, _extends2({}, props, { size: size2 }), cells.map(function(row, rowIndex) {
        return row.map(function(cell, cellIndex) {
          var fill = cell ? fgColor : bgColor;
          var transformX = Math.round(cellIndex * tileSize);
          var transformY = Math.round(rowIndex * tileSize);
          var qrItemWidth = Math.round((cellIndex + 1) * tileSize) - transformX;
          var qrItemHeight = Math.round((rowIndex + 1) * tileSize) - transformY;
          var d2 = "M 0 0 L " + qrItemWidth + " 0 L " + qrItemWidth + " " + qrItemHeight + " L 0 " + qrItemHeight + " Z";
          return _react2.default.createElement(_QRCodeCell2.default, {
            key: "rectangle-" + rowIndex + "-" + cellIndex,
            d: d2,
            fill,
            transformX,
            transformY
          });
        });
      }));
    };
    QRCode2.propTypes = propTypes;
    QRCode2.defaultProps = defaultProps;
    exports.default = (0, _react.memo)(QRCode2);
  }
});

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    init_react();
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames2() {
        var classes = [];
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg)
            continue;
          var argType = typeof arg;
          if (argType === "string" || argType === "number") {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames2.apply(null, arg);
              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === "object") {
            if (arg.toString === Object.prototype.toString) {
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            } else {
              classes.push(arg.toString());
            }
          }
        }
        return classes.join(" ");
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames2.default = classNames2;
        module.exports = classNames2;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames2;
        });
      } else {
        window.classNames = classNames2;
      }
    })();
  }
});

// node_modules/@web3auth/ui/dist/ui.esm.js
function styleInject(css, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
function Icon(props) {
  const {
    iconName,
    height = "auto",
    width = "auto"
  } = props;
  return icons[iconName] ? (0, import_jsx_runtime.jsx)("img", {
    height,
    width,
    src: icons[iconName].image,
    alt: iconName
  }, void 0) : null;
}
function Image(props) {
  const {
    imageId,
    height = "auto",
    width = "auto"
  } = props;
  return (0, import_jsx_runtime.jsx)("img", {
    src: "https://images.web3auth.io/".concat(imageId, ".svg"),
    height,
    width,
    alt: imageId
  }, void 0);
}
function DetailedLoader(props) {
  const {
    adapter,
    appLogo = DEFAULT_LOGO_URL$2,
    message,
    modalStatus,
    onClose
  } = props;
  const web3authIcon = (0, import_jsx_runtime.jsx)(Image, {
    imageId: "web3auth"
  }, void 0);
  const providerIcon = (0, import_jsx_runtime.jsx)(Image, {
    imageId: "login-".concat(adapter)
  }, void 0);
  (0, import_react.useEffect)(() => {
    import_loglevel2.default.debug("adapter loader re-rendering");
    if (modalStatus === MODAL_STATUS.CONNECTED) {
      setTimeout(() => {
        onClose();
      }, 3e3);
    }
  }, [modalStatus, onClose]);
  return modalStatus !== MODAL_STATUS.INITIALIZED ? (0, import_jsx_runtime.jsxs)("div", {
    className: "w3ajs-modal-loader w3a-modal__loader",
    children: [(0, import_jsx_runtime.jsxs)("div", {
      className: "w3a-modal__loader-content",
      children: [(0, import_jsx_runtime.jsxs)("div", {
        className: "w3a-modal__loader-info",
        children: [modalStatus === MODAL_STATUS.CONNECTING && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
          children: [(0, import_jsx_runtime.jsxs)("div", {
            className: "w3a-modal__loader-bridge",
            children: [(0, import_jsx_runtime.jsx)("div", {
              className: "w3a-modal__loader-app-logo",
              children: (0, import_jsx_runtime.jsx)("img", {
                src: appLogo,
                alt: ""
              }, void 0)
            }, void 0), (0, import_jsx_runtime.jsx)("div", {
              className: "w3a-modal__connector",
              children: (0, import_jsx_runtime.jsxs)("div", {
                className: "w3a-modal__connector-beat",
                children: [(0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0)]
              }, void 0)
            }, void 0), (0, import_jsx_runtime.jsx)("div", {
              className: "w3a-modal__loader-adapter",
              children: providerIcon
            }, void 0)]
          }, void 0), (0, import_jsx_runtime.jsx)("div", {
            children: (0, import_jsx_runtime.jsxs)("div", {
              className: "w3a-modal__loader-bridge-message",
              children: ["Verify on your ", (0, import_jsx_runtime.jsx)("span", {
                children: adapter
              }, void 0), " account to continue"]
            }, void 0)
          }, void 0)]
        }, void 0), modalStatus === ADAPTER_STATUS.CONNECTED && (0, import_jsx_runtime.jsx)("div", {
          className: "w3ajs-modal-loader__message w3a-spinner-message",
          children: message
        }, void 0), modalStatus === ADAPTER_STATUS.ERRORED && (0, import_jsx_runtime.jsx)("div", {
          className: "w3ajs-modal-loader__message w3a-spinner-message w3a-spinner-message--error",
          children: message
        }, void 0)]
      }, void 0), (0, import_jsx_runtime.jsxs)("div", {
        className: "w3a-spinner-power",
        children: [(0, import_jsx_runtime.jsx)("div", {
          children: "Secured by"
        }, void 0), web3authIcon]
      }, void 0)]
    }, void 0), (modalStatus === ADAPTER_STATUS.CONNECTED || modalStatus === ADAPTER_STATUS.ERRORED) && (0, import_jsx_runtime.jsx)("button", {
      type: "button",
      className: "w3a-header__button w3ajs-loader-close-btn",
      onClick: onClose,
      children: closeIcon$1
    }, void 0)]
  }, void 0) : null;
}
function Loader(props) {
  const {
    message,
    modalStatus,
    label,
    onClose,
    canEmit = true
  } = props;
  const web3authIcon = (0, import_jsx_runtime.jsx)(Image, {
    imageId: "web3auth"
  }, void 0);
  (0, import_react.useEffect)(() => {
    import_loglevel2.default.debug("loader re-rendering");
    if (modalStatus === MODAL_STATUS.CONNECTED && canEmit) {
      setTimeout(() => {
        onClose();
      }, 3e3);
    }
  }, [canEmit, modalStatus, onClose]);
  return modalStatus !== MODAL_STATUS.INITIALIZED ? (0, import_jsx_runtime.jsxs)("div", {
    className: "w3ajs-modal-loader w3a-modal__loader",
    children: [(0, import_jsx_runtime.jsxs)("div", {
      className: "w3a-modal__loader-content",
      children: [(0, import_jsx_runtime.jsxs)("div", {
        className: "w3a-modal__loader-info",
        children: [modalStatus === MODAL_STATUS.CONNECTING && (0, import_jsx_runtime.jsxs)("div", {
          className: "w3ajs-modal-loader__spinner w3a-spinner",
          children: [(0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0), (0, import_jsx_runtime.jsx)("div", {}, void 0)]
        }, void 0), (0, import_jsx_runtime.jsx)("div", {
          className: "w3ajs-modal-loader__label w3a-spinner-label",
          children: label
        }, void 0), modalStatus === ADAPTER_STATUS.CONNECTED && (0, import_jsx_runtime.jsx)("div", {
          className: "w3ajs-modal-loader__message w3a-spinner-message",
          children: message
        }, void 0), modalStatus === ADAPTER_STATUS.ERRORED && (0, import_jsx_runtime.jsx)("div", {
          className: "w3ajs-modal-loader__message w3a-spinner-message w3a-spinner-message--error",
          children: message
        }, void 0)]
      }, void 0), (0, import_jsx_runtime.jsxs)("div", {
        className: "w3a-spinner-power",
        children: [(0, import_jsx_runtime.jsx)("div", {
          children: "Secured by"
        }, void 0), web3authIcon]
      }, void 0)]
    }, void 0), (modalStatus === ADAPTER_STATUS.CONNECTED || modalStatus === ADAPTER_STATUS.ERRORED) && (0, import_jsx_runtime.jsx)("button", {
      type: "button",
      className: "w3a-header__button w3ajs-loader-close-btn",
      onClick: onClose,
      children: closeIcon
    }, void 0)]
  }, void 0) : null;
}
function WalletConnect(props) {
  const {
    walletConnectUri
  } = props;
  return (0, import_jsx_runtime.jsxs)("div", {
    className: "w3ajs-wallet-connect w3a-wallet-connect",
    children: [(0, import_jsx_runtime.jsx)("i", {
      className: "w3a-wallet-connect__logo",
      children: walletConnectIcon
    }, void 0), (0, import_jsx_runtime.jsxs)("div", {
      className: "w3ajs-wallet-connect__container w3a-wallet-connect__container",
      children: [(0, import_jsx_runtime.jsx)("div", {
        children: "Scan QR code with a WalletConnect-compatible wallet"
      }, void 0), (0, import_jsx_runtime.jsx)("div", {
        className: "w3ajs-wallet-connect-qr w3a-wallet-connect-qr",
        children: (0, import_jsx_runtime.jsx)(import_react_qr_code.default, {
          size: 200,
          value: walletConnectUri
        }, void 0)
      }, void 0)]
    }, void 0)]
  }, void 0);
}
function ExternalWallet(props) {
  const {
    hideExternalWallets,
    handleExternalWalletClick,
    config = {},
    walletConnectUri,
    showBackButton,
    modalStatus
  } = props;
  const [isLoaded, setIsLoaded] = (0, import_react.useState)(false);
  (0, import_react.useEffect)(() => {
    var _config$WALLET_ADAPTE;
    import_loglevel2.default.debug("loaded external wallets", config);
    const wcAvailable = (((_config$WALLET_ADAPTE = config[WALLET_ADAPTERS.WALLET_CONNECT_V1]) === null || _config$WALLET_ADAPTE === void 0 ? void 0 : _config$WALLET_ADAPTE.showOnModal) || false) !== false;
    if (wcAvailable && !walletConnectUri) {
      handleExternalWalletClick({
        adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1
      });
    } else if (Object.keys(config).length > 0) {
      setIsLoaded(true);
    }
  }, [config, handleExternalWalletClick, walletConnectUri]);
  return (0, import_jsx_runtime.jsx)("div", {
    className: "w3ajs-external-wallet w3a-group",
    children: (0, import_jsx_runtime.jsxs)("div", {
      className: "w3a-external-container w3ajs-external-container",
      children: [showBackButton && (0, import_jsx_runtime.jsxs)("button", {
        type: "button",
        className: "w3a-external-back w3ajs-external-back",
        onClick: hideExternalWallets,
        children: [(0, import_jsx_runtime.jsx)(Icon, {
          iconName: "arrow-left"
        }, void 0), (0, import_jsx_runtime.jsx)("h6", {
          className: "w3a-group__title",
          children: "Back"
        }, void 0)]
      }, void 0), !isLoaded && (0, import_jsx_runtime.jsx)(Loader, {
        modalStatus: MODAL_STATUS.CONNECTING,
        canEmit: false
      }, void 0), Object.keys(config).map((adapter) => {
        if (adapter === WALLET_ADAPTERS.WALLET_CONNECT_V1 || adapter === WALLET_ADAPTERS.WALLET_CONNECT_V2) {
          return (0, import_jsx_runtime.jsx)(WalletConnect$1, {
            walletConnectUri
          }, adapter);
        }
        return null;
      }), modalStatus === MODAL_STATUS.INITIALIZED && (0, import_jsx_runtime.jsx)("ul", {
        className: "w3a-adapter-list w3ajs-wallet-adapters",
        children: Object.keys(config).map((adapter) => {
          var _config$adapter;
          if (adapter === WALLET_ADAPTERS.WALLET_CONNECT_V1 || adapter === WALLET_ADAPTERS.WALLET_CONNECT_V2) {
            return null;
          }
          const providerIcon = (0, import_jsx_runtime.jsx)(Image, {
            imageId: "login-".concat(adapter)
          }, void 0);
          return (0, import_jsx_runtime.jsxs)("li", {
            className: "w3a-adapter-item",
            children: [(0, import_jsx_runtime.jsx)("button", {
              type: "button",
              onClick: () => handleExternalWalletClick({
                adapter
              }),
              className: "w3a-button w3a-button--icon",
              children: providerIcon
            }, void 0), (0, import_jsx_runtime.jsx)("p", {
              className: "w3a-adapter-item__label",
              children: ((_config$adapter = config[adapter]) === null || _config$adapter === void 0 ? void 0 : _config$adapter.label) || adapter
            }, void 0)]
          }, adapter);
        })
      }, void 0)]
    }, void 0)
  }, void 0);
}
function Footer(props) {
  const {
    version: version17
  } = props;
  const web3authIcon = (0, import_jsx_runtime.jsx)(Image, {
    imageId: "web3auth",
    height: "14px",
    width: "auto"
  }, void 0);
  return (0, import_jsx_runtime.jsx)("div", {
    className: "w3a-modal__footer",
    children: (0, import_jsx_runtime.jsxs)("div", {
      className: "w3a-footer",
      children: [(0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsxs)("div", {
          className: "w3a-footer__links",
          children: [(0, import_jsx_runtime.jsx)("a", {
            href: "https://docs.web3auth.io/legal/terms-and-conditions",
            children: "Terms of use"
          }, void 0), (0, import_jsx_runtime.jsx)("span", {
            children: "|"
          }, void 0), (0, import_jsx_runtime.jsx)("a", {
            href: "https://docs.web3auth.io/legal/privacy-policy",
            children: "Privacy policy"
          }, void 0)]
        }, void 0), (0, import_jsx_runtime.jsx)("p", {
          children: version17
        }, void 0)]
      }, void 0), (0, import_jsx_runtime.jsxs)("div", {
        className: "w3a-footer__secured",
        children: [(0, import_jsx_runtime.jsx)("div", {
          children: "Secured by"
        }, void 0), web3authIcon]
      }, void 0)]
    }, void 0)
  }, void 0);
}
function Header(props) {
  const {
    isDark
  } = (0, import_react.useContext)(ThemedContext);
  const {
    appLogo = DEFAULT_LOGO_URL$1,
    onClose
  } = props;
  const web3authIcon = (0, import_jsx_runtime.jsx)(Image, {
    imageId: "web3auth".concat(isDark ? "-light" : "")
  }, void 0);
  return (0, import_jsx_runtime.jsxs)("div", {
    className: "w3a-modal__header",
    children: [(0, import_jsx_runtime.jsxs)("div", {
      className: "w3a-header",
      children: [appLogo ? (0, import_jsx_runtime.jsx)("img", {
        className: "w3a-header__logo",
        src: appLogo,
        alt: ""
      }, void 0) : web3authIcon, (0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsx)("h1", {
          className: "w3a-header__title",
          children: "Sign in"
        }, void 0), (0, import_jsx_runtime.jsx)("p", {
          className: "w3a-header__subtitle",
          children: "Select one of the following to continue"
        }, void 0)]
      }, void 0)]
    }, void 0), (0, import_jsx_runtime.jsx)("button", {
      type: "button",
      onClick: onClose,
      className: "w3a-header__button w3ajs-close-btn",
      children: (0, import_jsx_runtime.jsx)(Icon, {
        iconName: "close"
      }, void 0)
    }, void 0)]
  }, void 0);
}
function SocialLoginEmail(props) {
  const {
    handleSocialLoginClick,
    adapter
  } = props;
  const handleEmailSubmit = (e) => {
    e.preventDefault();
    const email = e.target[0].value;
    if (email)
      handleSocialLoginClick({
        adapter,
        loginParams: {
          loginProvider: "email_passwordless",
          login_hint: email
        }
      });
  };
  return (0, import_jsx_runtime.jsxs)("div", {
    className: "w3ajs-email-passwordless w3a-group w3a-group--email",
    children: [(0, import_jsx_runtime.jsx)("h6", {
      className: "w3a-group__title",
      children: "EMAIL"
    }, void 0), (0, import_jsx_runtime.jsxs)("form", {
      className: "w3ajs-email-passwordless-form",
      onSubmit: (e) => handleEmailSubmit(e),
      children: [(0, import_jsx_runtime.jsx)("input", {
        className: "w3a-text-field",
        type: "email",
        name: "email",
        required: true,
        placeholder: "Email"
      }, void 0), (0, import_jsx_runtime.jsx)("button", {
        className: "w3a-button",
        type: "submit",
        children: "Continue with Email"
      }, void 0)]
    }, void 0)]
  }, void 0);
}
function SocialLogins(props) {
  const {
    socialLoginsConfig = {
      loginMethods: {},
      loginMethodsOrder: [],
      adapter: ""
    },
    handleSocialLoginClick
  } = props;
  const {
    isDark
  } = (0, import_react.useContext)(ThemedContext);
  const [isExpanded, setIsExpanded] = (0, import_react.useState)(false);
  const expandClickHandler = () => {
    setIsExpanded(!isExpanded);
  };
  const adapterListClass = (0, import_classnames.default)("w3a-adapter-list", "w3ajs-socials-adapters", !isExpanded ? " w3a-adapter-list--shrink" : "");
  const adapterButtonClass = (0, import_classnames.default)("w3a-button-expand", "w3ajs-button-expand", isExpanded ? "w3a-button--rotate" : "");
  const adapterExpandText = isExpanded ? "View less options" : "View more options";
  return (0, import_jsx_runtime.jsxs)("div", {
    className: "w3ajs-social-logins w3a-group",
    children: [(0, import_jsx_runtime.jsx)("h6", {
      className: "w3a-group__title",
      children: "CONTINUE WITH"
    }, void 0), (0, import_jsx_runtime.jsx)("ul", {
      className: adapterListClass,
      children: Object.keys(socialLoginsConfig.loginMethods).map((method) => {
        const providerIcon = (0, import_jsx_runtime.jsx)(Image, {
          imageId: "login-".concat(method).concat(isDark && hasLightIcons.includes(method) ? "-light" : "")
        }, void 0);
        if (socialLoginsConfig.loginMethods[method].showOnModal === false || method === "webauthn" || method === "jwt" || method === "email_passwordless") {
          return null;
        }
        const orderIndex = socialLoginsConfig.loginMethodsOrder.indexOf(method) + 1;
        const order = orderIndex || Object.keys(socialLoginsConfig.loginMethods).length + 1;
        return (0, import_jsx_runtime.jsx)("li", {
          className: "w3a-adapter-item",
          style: {
            order
          },
          children: (0, import_jsx_runtime.jsx)("button", {
            type: "button",
            onClick: () => handleSocialLoginClick({
              adapter: socialLoginsConfig.adapter,
              loginParams: {
                loginProvider: method
              }
            }),
            className: "w3a-button w3a-button--icon",
            children: providerIcon
          }, void 0)
        }, method);
      })
    }, void 0), (0, import_jsx_runtime.jsxs)("button", {
      type: "button",
      className: adapterButtonClass,
      style: {
        display: Object.keys(socialLoginsConfig.loginMethods).length > 5 ? "flex" : "none"
      },
      onClick: expandClickHandler,
      children: [(0, import_jsx_runtime.jsx)(Icon, {
        iconName: "expand".concat(isDark ? "-light" : "")
      }, void 0), (0, import_jsx_runtime.jsx)("span", {
        className: "w3ajs-button-expand-text",
        children: adapterExpandText
      }, void 0)]
    }, void 0)]
  }, void 0);
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function Modal(props) {
  var _modalState$socialLog3, _modalState$socialLog4;
  const {
    isDark
  } = (0, import_react.useContext)(ThemedContext);
  const [modalTransitionClasses, setModalTransitionClasses] = (0, import_react.useState)(["w3a-modal__inner"]);
  const [modalState, setModalState] = (0, import_react.useState)({
    externalWalletsVisibility: false,
    status: MODAL_STATUS.INITIALIZED,
    hasExternalWallets: false,
    externalWalletsInitialized: false,
    modalVisibility: false,
    modalVisibilityDelayed: false,
    postLoadingMessage: "",
    walletConnectUri: "",
    socialLoginsConfig: {
      loginMethods: {},
      loginMethodsOrder: [],
      adapter: ""
    },
    externalWalletsConfig: {},
    detailedLoaderAdapter: "",
    showExternalWalletsOnly: false
  });
  const {
    stateListener,
    appLogo,
    version: version17,
    handleSocialLoginClick,
    handleExternalWalletClick,
    handleShowExternalWallets,
    closeModal
  } = props;
  const DETAILED_ADAPTERS = [WALLET_ADAPTERS.PHANTOM, WALLET_ADAPTERS.METAMASK];
  (0, import_react.useEffect)(() => {
    stateListener.emit("MOUNTED");
    stateListener.on("STATE_UPDATED", (newModalState) => {
      import_loglevel2.default.debug("state updated", newModalState);
      setModalState((prevState) => {
        const mergedState = (0, import_lodash.default)((0, import_lodash2.default)(prevState, newModalState));
        return mergedState;
      });
    });
  }, [stateListener]);
  (0, import_react.useEffect)(() => {
    let timeOutId;
    if (modalState.modalVisibility) {
      setModalState((prevState) => {
        return _objectSpread2(_objectSpread2({}, prevState), {}, {
          modalVisibilityDelayed: modalState.modalVisibility
        });
      });
      timeOutId = setTimeout(() => {
        setModalTransitionClasses(["w3a-modal__inner", modalState.modalVisibility ? "w3a-modal__inner--active" : ""]);
      }, 100);
    } else {
      setModalTransitionClasses(["w3a-modal__inner", modalState.modalVisibility ? "w3a-modal__inner--active" : ""]);
      timeOutId = setTimeout(() => {
        setModalState((prevState) => {
          return _objectSpread2(_objectSpread2({}, prevState), {}, {
            modalVisibilityDelayed: modalState.modalVisibility
          });
        });
      }, 250);
    }
    return () => {
      clearTimeout(timeOutId);
    };
  }, [modalState.modalVisibility]);
  const onCloseLoader = (0, import_react.useCallback)(() => {
    if (modalState.status === MODAL_STATUS.CONNECTED) {
      closeModal();
    }
    if (modalState.status === MODAL_STATUS.ERRORED) {
      setModalState((prevState) => {
        return _objectSpread2(_objectSpread2({}, prevState), {}, {
          modalVisibility: true,
          status: MODAL_STATUS.INITIALIZED
        });
      });
    }
  }, [closeModal, modalState.status]);
  const preHandleExternalWalletClick = (params) => {
    const {
      adapter
    } = params;
    if (DETAILED_ADAPTERS.includes(adapter))
      setModalState((prevState) => {
        return _objectSpread2(_objectSpread2({}, prevState), {}, {
          detailedLoaderAdapter: adapter
        });
      });
    else if (adapter !== WALLET_ADAPTERS.WALLET_CONNECT_V1)
      setModalState((prevState) => {
        return _objectSpread2(_objectSpread2({}, prevState), {}, {
          detailedLoaderAdapter: ""
        });
      });
    handleExternalWalletClick(params);
  };
  const preHandleSocialWalletClick = (params) => {
    setModalState((prevState) => {
      return _objectSpread2(_objectSpread2({}, prevState), {}, {
        detailedLoaderAdapter: ""
      });
    });
    handleSocialLoginClick(params);
  };
  const externalWalletButton = (0, import_jsx_runtime.jsx)("div", {
    className: "w3ajs-external-wallet w3a-group",
    children: (0, import_jsx_runtime.jsxs)("div", {
      className: "w3a-external-toggle w3ajs-external-toggle",
      children: [(0, import_jsx_runtime.jsx)("h6", {
        className: "w3a-group__title",
        children: "EXTERNAL WALLET"
      }, void 0), (0, import_jsx_runtime.jsx)("button", {
        type: "button",
        className: "w3a-button w3ajs-external-toggle__button",
        onClick: () => {
          handleShowExternalWallets(modalState.externalWalletsInitialized);
          setModalState((prevState) => {
            return _objectSpread2(_objectSpread2({}, prevState), {}, {
              externalWalletsVisibility: true
            });
          });
        },
        children: "Connect with Wallet"
      }, void 0)]
    }, void 0)
  }, void 0);
  const areSocialLoginsVisible = (0, import_react.useMemo)(() => {
    var _modalState$socialLog, _modalState$socialLog2;
    if (modalState.showExternalWalletsOnly)
      return false;
    if (Object.keys(((_modalState$socialLog = modalState.socialLoginsConfig) === null || _modalState$socialLog === void 0 ? void 0 : _modalState$socialLog.loginMethods) || {}).length === 0)
      return false;
    const isAnySocialLoginVisible = Object.values(((_modalState$socialLog2 = modalState.socialLoginsConfig) === null || _modalState$socialLog2 === void 0 ? void 0 : _modalState$socialLog2.loginMethods) || {}).some((x2) => x2.showOnModal !== false);
    if (isAnySocialLoginVisible)
      return true;
    return false;
  }, [modalState.showExternalWalletsOnly, (_modalState$socialLog3 = modalState.socialLoginsConfig) === null || _modalState$socialLog3 === void 0 ? void 0 : _modalState$socialLog3.loginMethods]);
  import_loglevel2.default.info("modal state", modalState, areSocialLoginsVisible);
  const modalClassName = "w3a-modal ".concat(isDark ? "" : " w3a-modal--light");
  return (0, import_jsx_runtime.jsx)("div", {
    id: "w3a-modal",
    className: modalClassName,
    style: {
      display: !modalState.modalVisibilityDelayed ? "none" : "flex"
    },
    children: (0, import_jsx_runtime.jsxs)("div", {
      className: modalTransitionClasses.join(" "),
      children: [(0, import_jsx_runtime.jsx)(Header$1, {
        onClose: closeModal,
        appLogo
      }, void 0), modalState.status !== MODAL_STATUS.INITIALIZED ? (0, import_jsx_runtime.jsx)("div", {
        className: "w3a-modal__content w3ajs-content",
        children: modalState.detailedLoaderAdapter ? (0, import_jsx_runtime.jsx)(DetailedLoader, {
          onClose: onCloseLoader,
          appLogo,
          modalStatus: modalState.status,
          message: modalState.postLoadingMessage,
          adapter: modalState.detailedLoaderAdapter
        }, void 0) : (0, import_jsx_runtime.jsx)(Loader, {
          onClose: onCloseLoader,
          modalStatus: modalState.status,
          message: modalState.postLoadingMessage
        }, void 0)
      }, void 0) : (0, import_jsx_runtime.jsx)("div", {
        className: "w3a-modal__content w3ajs-content",
        children: areSocialLoginsVisible && !modalState.externalWalletsVisibility ? (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
          children: [(0, import_jsx_runtime.jsx)(SocialLogins, {
            handleSocialLoginClick: (params) => preHandleSocialWalletClick(params),
            socialLoginsConfig: modalState.socialLoginsConfig
          }, void 0), (0, import_jsx_runtime.jsx)(SocialLoginEmail, {
            adapter: (_modalState$socialLog4 = modalState.socialLoginsConfig) === null || _modalState$socialLog4 === void 0 ? void 0 : _modalState$socialLog4.adapter,
            handleSocialLoginClick: (params) => preHandleSocialWalletClick(params)
          }, void 0), modalState.hasExternalWallets && externalWalletButton]
        }, void 0) : (0, import_jsx_runtime.jsx)(ExternalWallet, {
          modalStatus: modalState.status,
          showBackButton: areSocialLoginsVisible,
          handleExternalWalletClick: (params) => preHandleExternalWalletClick(params),
          walletConnectUri: modalState.walletConnectUri,
          config: modalState.externalWalletsConfig,
          hideExternalWallets: () => setModalState((prevState) => {
            return _objectSpread2(_objectSpread2({}, prevState), {}, {
              externalWalletsVisibility: false
            });
          })
        }, void 0)
      }, void 0), (0, import_jsx_runtime.jsx)(Footer$1, {
        version: version17
      }, void 0)]
    }, void 0)
  }, void 0);
}
function createWrapper() {
  const wrapper = document.createElement("div");
  wrapper.setAttribute("id", "w3a-container");
  document.body.appendChild(wrapper);
  return wrapper;
}
var import_jsx_runtime, import_loglevel2, import_react_dom, import_lodash, import_lodash2, import_react, import_react_qr_code, import_classnames, LOGIN_MODAL_EVENTS, MODAL_STATUS, css_248z, ThemedContext, CircleArrowLeft, Close, Expand, ExpandLight, icons, DEFAULT_LOGO_URL$2, closeIcon$1, closeIcon, walletConnectIcon, WalletConnect$1, Footer$1, DEFAULT_LOGO_URL$1, Header$1, hasLightIcons, DEFAULT_LOGO_URL, LoginModal;
var init_ui_esm = __esm({
  "node_modules/@web3auth/ui/dist/ui.esm.js"() {
    init_react();
    init_defineProperty();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    init_openloginJrpc_esm();
    init_base_esm();
    import_loglevel2 = __toESM(require_loglevel());
    import_react_dom = __toESM(require_react_dom());
    import_lodash = __toESM(require_lodash2());
    import_lodash2 = __toESM(require_lodash());
    import_react = __toESM(require_react());
    import_react_qr_code = __toESM(require_lib());
    import_classnames = __toESM(require_classnames());
    LOGIN_MODAL_EVENTS = {
      INIT_EXTERNAL_WALLETS: "INIT_EXTERNAL_WALLETS",
      LOGIN: "LOGIN",
      DISCONNECT: "DISCONNECT",
      MODAL_VISIBILITY: "MODAL_VISIBILITY"
    };
    MODAL_STATUS = {
      INITIALIZED: "initialized",
      CONNECTED: "connected",
      CONNECTING: "connecting",
      ERRORED: "errored"
    };
    css_248z = '/* devanagari */\n@font-face {\n    font-family: "Poppins";\n    font-style: normal;\n    font-weight: 600;\n    src: url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLEj6Z11lFd2JQEl8qw.woff2) format("woff2");\n    unicode-range: U+0900-097F, U+1CD0-1CF6, U+1CF8-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FB;\n}\n/* latin-ext */\n@font-face {\n    font-family: "Poppins";\n    font-style: normal;\n    font-weight: 600;\n    src: url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLEj6Z1JlFd2JQEl8qw.woff2) format("woff2");\n    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n    font-family: "Poppins";\n    font-style: normal;\n    font-weight: 600;\n    src: url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLEj6Z1xlFd2JQEk.woff2) format("woff2");\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC,\n        U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* latin-ext */\n@font-face {\n    font-family: "DM Sans";\n    font-style: normal;\n    font-weight: 400;\n    src: url(https://fonts.gstatic.com/s/dmsans/v6/rP2Hp2ywxg089UriCZ2IHTWEBlwu8Q.woff2) format("woff2");\n    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n/* latin */\n@font-face {\n    font-family: "DM Sans";\n    font-style: normal;\n    font-weight: 400;\n    src: url(https://fonts.gstatic.com/s/dmsans/v6/rP2Hp2ywxg089UriCZOIHTWEBlw.woff2) format("woff2");\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC,\n        U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n/* Modal */\n#w3a-modal {\n    --bg1: #0f1222;\n    --bg2: #24262e;\n    --text-color1: #d3d3d4;\n    --text-color2: #ffffff;\n\n    --text-header: "Poppins", Helvetica, sans-serif;\n    --text-body: "DM Sans", Helvetica, sans-serif;\n\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    padding: 15px;\n    background: rgba(33, 33, 33, 0.46);\n    color: var(--text-color1);\n    font-family: var(--text-body);\n}\n\n#w3a-modal.w3a-modal--hidden {\n    display: none;\n}\n\n#w3a-modal p,\n#w3a-modal form,\n#w3a-modal h1,\n#w3a-modal h6,\n#w3a-modal button {\n    margin: 0;\n    padding: 0;\n}\n\n#w3a-modal .w3a-modal__inner {\n    width: 100%;\n    max-width: 375px;\n    overflow: hidden;\n    border-radius: 6px;\n    position: relative;\n    max-height: 95%;\n    overflow-y: auto;\n    opacity: 0;\n    transition: 200ms cubic-bezier(0.25, 0.8, 0.25, 1);\n    transform-origin: center center;\n    min-height: 350px;\n}\n\n#w3a-modal .w3a-modal__inner.w3a-modal__inner--active {\n    opacity: 1;\n    transition: 200ms cubic-bezier(0.25, 0.8, 0.25, 1);\n    transform-origin: center center;\n}\n\n#w3a-modal .w3a-modal__header {\n    padding: 25px 34px;\n    background: var(--bg1);\n    box-shadow: 0px 4px 28px rgba(3, 100, 255, 0.05);\n    position: relative;\n}\n#w3a-modal .w3a-modal__content {\n    padding: 30px 34px;\n    background: var(--bg2);\n}\n#w3a-modal .w3a-modal__footer {\n    padding: 16px 34px;\n    background: var(--bg1);\n}\n\n/* SPINNER */\n/* Loader */\n#w3a-modal .w3a-modal__loader {\n    background: var(--bg1);\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 10;\n}\n\n#w3a-modal .w3a-modal__loader.w3a-modal__loader--hidden {\n    display: none;\n}\n\n#w3a-modal .w3a-modal__loader-content {\n    text-align: center;\n    margin-bottom: 80px;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n}\n\n#w3a-modal .w3a-modal__loader-info {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 0 30px;\n}\n\n#w3a-modal .w3a-spinner-label {\n    margin-top: 10px;\n    font-size: 16px;\n    font-weight: 500;\n    color: #0364ff;\n}\n\n#w3a-modal .w3a-spinner-message {\n    margin-top: 10px;\n    font-size: 16px;\n}\n#w3a-modal .w3a-spinner-message:first-letter {\n    text-transform: capitalize;\n}\n#w3a-modal .w3a-spinner-message.w3a-spinner-message--error {\n    color: #fb4a61;\n}\n\n#w3a-modal button.w3a-logout {\n    background: none;\n    border: 0;\n    padding: 0;\n    display: inline-flex;\n    align-items: center;\n    margin-bottom: 30px;\n    cursor: pointer;\n    margin-top: 20px;\n    color: #0364ff;\n}\n\n#w3a-modal .w3a-spinner-power {\n    margin-top: auto;\n    font-size: 12px;\n    line-height: 1.2em;\n    color: #b7b8bd;\n}\n#w3a-modal .w3a-spinner-power > img {\n    height: 32px;\n    width: auto;\n}\n\n.w3a-spinner {\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 80px;\n}\n.w3a-spinner div {\n    box-sizing: border-box;\n    display: block;\n    position: absolute;\n    width: 64px;\n    height: 64px;\n    margin: 8px;\n    border: 6px solid #0364ff;\n    border-radius: 50%;\n    animation: w3a-spinner 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n    border-color: #0364ff transparent transparent transparent;\n}\n.w3a-spinner div:nth-child(1) {\n    animation-delay: -0.45s;\n}\n.w3a-spinner div:nth-child(2) {\n    animation-delay: -0.3s;\n}\n.w3a-spinner div:nth-child(3) {\n    animation-delay: -0.15s;\n}\n.w3a-spinner.w3a-spinner--small {\n    width: 64px;\n    height: 64px;\n}\n.w3a-spinner.w3a-spinner--small div {\n    width: 48px;\n    height: 48px;\n    border: 4px solid #0364ff;\n    border-color: #0364ff transparent transparent transparent;\n}\n@keyframes w3a-spinner {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n/* Header */\n#w3a-modal .w3a-header {\n    display: flex;\n    color: var(--text-color2);\n    align-items: center;\n}\n#w3a-modal .w3a-header__logo {\n    height: auto;\n    width: 40px;\n    margin-right: 16px;\n}\n#w3a-modal h1.w3a-header__title {\n    font-family: var(--text-header);\n    font-weight: 600;\n    font-size: 20px;\n    line-height: 1.5em;\n}\n#w3a-modal p.w3a-header__subtitle {\n    font-size: 14px;\n    line-height: 1.5em;\n    font-weight: 400;\n}\n#w3a-modal button.w3a-header__button {\n    cursor: pointer;\n    position: absolute;\n    background: none;\n    padding: 0;\n    border: 0;\n    top: 20px;\n    right: 26px;\n}\n\n/* BODY */\n#w3a-modal .w3a-group {\n    margin-bottom: 24px;\n}\n#w3a-modal .w3a-group:last-child {\n    margin-bottom: 0;\n}\n\n#w3a-modal .w3a-group.w3a-group--hidden,\n#w3a-modal .w3a-group.w3a-group--social-hidden,\n#w3a-modal .w3a-group.w3a-group--email-hidden,\n#w3a-modal .w3a-group.w3a-group--ext-wallet-hidden {\n    display: none;\n}\n\n#w3a-modal .w3a-group:not(.w3a-group--hidden):not(:last-child),\n#w3a-modal .w3a-group:not(.w3a-group--social-hidden):not(:last-child),\n#w3a-modal .w3a-group:not(.w3a-group--email-hidden):not(:last-child),\n#w3a-modal .w3a-group:not(.w3a-group--ext-wallet-hidden):not(:last-child) {\n    border-bottom: 0.5px solid #5c6c7f;\n    padding-bottom: 24px;\n}\n\n#w3a-modal h6.w3a-group__title {\n    font-family: var(--text-header);\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 1.5em;\n    margin-bottom: 8px;\n}\n\n/* Adapter List */\n#w3a-modal ul.w3a-adapter-list {\n    display: flex;\n    align-items: center;\n    padding: 0;\n    margin: 0;\n    gap: 16px;\n    overflow-y: hidden;\n    flex-wrap: wrap;\n    margin-bottom: 16px;\n    max-height: 500px;\n    transition: max-height 0.4s ease-in;\n}\n\n#w3a-modal ul.w3a-adapter-list.w3a-adapter-list--shrink {\n    max-height: 48px;\n    transition: max-height 0.4s ease-out;\n}\n\n#w3a-modal ul.w3a-adapter-list.w3a-adapter-list--hidden {\n    display: none;\n}\n\n#w3a-modal li.w3a-adapter-item {\n    list-style: none;\n}\n\n#w3a-modal .w3a-adapter-item--hide {\n    display: none;\n}\n\n#w3a-modal .w3a-adapter-item__label {\n    font-size: 12px;\n    color: #5c6c7f;\n    text-align: center;\n    margin-top: 8px;\n    text-transform: capitalize;\n    position: absolute;\n    transform: translate(-6px);\n    width: 60px;\n}\n\n/* Buttons */\n#w3a-modal button.w3a-button {\n    background-color: #2f3136;\n    border: 1px solid #404145;\n    box-sizing: border-box;\n    box-shadow: 2px 2px 12px rgba(3, 100, 255, 0.05);\n    border-radius: 24px;\n    height: 48px;\n    width: 100%;\n    padding: 8px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-family: var(--text-body);\n    font-style: normal;\n    font-weight: 400;\n    font-size: 16px;\n    color: var(--text-color2);\n    cursor: pointer;\n}\n\n#w3a-modal button.w3a-button:hover {\n    background: #595857;\n}\n\n#w3a-modal button.w3a-button:active {\n    background: #6f717a;\n}\n\n#w3a-modal button.w3a-button:focus-visible {\n    outline: 1px solid #daf0ff;\n    outline-offset: -1px;\n}\n\n#w3a-modal button.w3a-button--icon {\n    width: 48px;\n}\n\n#w3a-modal button.w3a-button--left {\n    justify-content: start;\n    padding: 8px 16px;\n}\n\n#w3a-modal button.w3a-button--left > img {\n    height: 30px;\n    width: auto;\n}\n\n#w3a-modal button.w3a-button--left > div.w3a-button__name {\n    max-width: 180px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    text-transform: capitalize;\n}\n\n#w3a-modal button.w3a-button--left > div.w3a-button__note {\n    margin-left: 8px;\n    color: #b7b8bd;\n    margin-left: auto;\n}\n\n#w3a-modal .w3a-button__image {\n    max-width: 100%;\n    max-height: 100%;\n    transition: 0.3s cubic-bezier(0.25, 0.8, 0.5, 1), visibility 0s;\n}\n\n#w3a-modal button.w3a-button.w3a-button--rotate .w3a-button__image {\n    transform: rotate(180deg);\n}\n\n#w3a-modal .w3a-button--left .w3a-button__image {\n    margin-right: 12px;\n}\n\n#w3a-modal button.w3a-button-expand {\n    height: unset;\n    width: auto;\n    margin-left: auto;\n    font-size: 12px;\n    margin-top: 16px;\n    display: flex;\n    border: 8px;\n    color: var(--text-color2);\n    align-items: center;\n    cursor: pointer;\n    border-radius: 12px;\n    cursor: pointer;\n    padding: 0 10px 0 8px;\n    background: transparent;\n}\n\n#w3a-modal button.w3a-button-expand svg {\n    width: 12px;\n    height: auto;\n    margin-right: 4px;\n}\n\n#w3a-modal .w3a-external-toggle {\n    display: block;\n}\n\n#w3a-modal .w3a-external-toggle.w3a-external-toggle--hidden {\n    display: none;\n}\n\n#w3a-modal .w3a-external-container {\n    display: block;\n    margin-bottom: 34px;\n}\n\n#w3a-modal .w3a-external-container.w3a-external-container--hidden {\n    display: none;\n}\n\n#w3a-modal .w3a-external-group {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 12px;\n    margin-bottom: 16px;\n}\n\n#w3a-modal .w3a-external-group__left {\n    flex-grow: 1;\n}\n\n#w3a-modal button.w3a-external-back {\n    background: none;\n    border: 0;\n    padding: 0;\n    display: inline-flex;\n    align-items: center;\n    margin-bottom: 30px;\n    cursor: pointer;\n    color: var(--text-color1);\n}\n\n#w3a-modal .w3a-external-back:focus-visible {\n    outline: 1px solid #daf0ff;\n}\n\n#w3a-modal .w3a-external-back .w3a-group__title {\n    margin-bottom: 0;\n    margin-left: 5px;\n}\n\n#w3a-modal .w3a-external-loader {\n    display: flex;\n    justify-content: center;\n}\n\n#w3a-modal .w3a-wallet-connect {\n    display: block;\n    text-align: center;\n    margin-bottom: 16px;\n}\n\n#w3a-modal .w3a-wallet-connect.w3a-wallet-connect--hidden {\n    display: none;\n}\n\n#w3a-modal .w3a-wallet-connect__container {\n    padding: 10px;\n    background: #ffffff;\n    border-radius: 10px;\n    color: var(--text-color1);\n    font-size: 10px;\n    width: fit-content;\n    margin: auto;\n}\n\n.w3a-wallet-connect-qr {\n    width: 200px;\n    margin: 16px 16px;\n    padding: inherit;\n}\n\n#w3a-modal .w3a-wallet-connect__logo > img {\n    text-align: center;\n    width: 115px;\n    margin-bottom: 16px;\n}\n\n/* Text Field */\n#w3a-modal .w3a-text-field {\n    background: #393938;\n    border: 1px solid #27282d;\n    box-sizing: border-box;\n    box-shadow: inset 2px 2px 10px rgba(0, 0, 0, 0.4);\n    border-radius: 24px;\n    padding: 0 28px;\n    height: 48px;\n    width: 100%;\n    font-family: var(--text-body);\n    font-size: 16px;\n    color: var(--text-color2);\n    margin-bottom: 16px;\n}\n\n#w3a-modal .w3a-text-field:active {\n    background: #0f1222;\n}\n\n#w3a-modal .w3a-text-field:focus-visible {\n    outline: 1px solid #daf0ff;\n    outline-offset: -1px;\n}\n\n/* Footer Components */\n#w3a-modal .w3a-footer {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 10px;\n    line-height: 150%;\n    color: var(--text-color2);\n}\n\n#w3a-modal .w3a-footer__links {\n    padding: 0;\n    margin: 0;\n}\n\n#w3a-modal .w3a-footer__links a {\n    color: var(--text-color1);\n    text-decoration: none;\n}\n\n#w3a-modal .w3a-footer__links a:focus-visible {\n    outline: 1px solid #daf0ff;\n}\n\n#w3a-modal .w3a-footer__links span {\n    margin: 0 2px;\n}\n\n#w3a-modal .w3a-footer__secured {\n    text-align: right;\n    color: #b7b8bd;\n}\n#w3a-modal .w3a-footer__secured > img {\n    height: 14px;\n    width: auto;\n}\n\n/* Loader Bridge */\n#w3a-modal .w3a-modal__loader-bridge {\n    display: flex;\n    margin-bottom: 14px;\n}\n\n#w3a-modal .w3a-modal__loader-bridge-message span {\n    text-transform: capitalize;\n}\n\n#w3a-modal .w3a-modal__loader-app-logo {\n    display: flex;\n    padding: 8px;\n}\n\n#w3a-modal .w3a-modal__loader-app-logo img {\n    width: 64px;\n    height: auto;\n}\n\n#w3a-modal .w3a-modal__loader-adapter img {\n    width: 84px;\n    height: auto;\n}\n\n#w3a-modal .w3a-modal__connector {\n    display: flex;\n    align-items: center;\n}\n\n.w3a-modal__connector-beat {\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 80px;\n}\n\n.w3a-modal__connector-beat div {\n    position: absolute;\n    top: 33px;\n    width: 13px;\n    height: 13px;\n    border-radius: 50%;\n    background: #808080;\n    animation-timing-function: cubic-bezier(0, 1, 1, 0);\n}\n\n.w3a-modal__connector-beat div:nth-child(1) {\n    left: 8px;\n    animation: beat1 2.4s infinite;\n}\n\n.w3a-modal__connector-beat div:nth-child(2) {\n    left: 8px;\n    animation: beat2 2.4s infinite;\n}\n\n.w3a-modal__connector-beat div:nth-child(3) {\n    left: 8px;\n    animation: beat3 2.4s infinite;\n}\n\n.w3a-modal__connector-beat div:nth-child(4) {\n    left: 32px;\n    animation: beat4 2.4s infinite;\n}\n\n.w3a-modal__connector-beat div:nth-child(5) {\n    left: 56px;\n    animation: beat5 2.4s infinite;\n}\n\n@keyframes beat1 {\n    0% {\n        transform: scale(0);\n    }\n\n    25% {\n        transform: scale(0);\n    }\n\n    50% {\n        transform: scale(1);\n    }\n\n    75% {\n        transform: scale(0);\n    }\n\n    100% {\n        transform: scale(0);\n    }\n}\n\n@keyframes beat2 {\n    0% {\n        transform: scale(0);\n    }\n\n    25% {\n        transform: scale(1);\n    }\n\n    50% {\n        transform: translate(24px, 0);\n    }\n\n    75% {\n        transform: translate(0, 0);\n    }\n\n    100% {\n        transform: translate(0, 0) scale(0);\n    }\n}\n\n@keyframes beat3 {\n    0% {\n        transform: translate(0, 0);\n    }\n\n    25% {\n        transform: translate(24px, 0);\n    }\n\n    50% {\n        transform: translate(48px, 0);\n    }\n\n    75% {\n        transform: translate(24px, 0);\n    }\n\n    100% {\n        transform: translate(0, 0);\n    }\n}\n\n@keyframes beat4 {\n    0% {\n        transform: translate(0, 0);\n    }\n\n    25% {\n        transform: translate(24px, 0);\n    }\n\n    50% {\n        transform: translate(24px, 0) scale(0);\n    }\n\n    75% {\n        transform: translate(24px, 0) scale(1);\n    }\n\n    100% {\n        transform: translate(0, 0);\n    }\n}\n\n@keyframes beat5 {\n    0% {\n        transform: scale(1);\n    }\n\n    25% {\n        transform: scale(0);\n    }\n\n    50% {\n        transform: scale(0);\n    }\n\n    75% {\n        transform: scale(0);\n    }\n\n    100% {\n        transform: scale(1);\n    }\n}\n\n/* LIGHT MODE */\n#w3a-modal.w3a-modal--light {\n    --bg1: #ffffff;\n    --bg2: #f9f9fb;\n    --text-color1: #a2a5b5;\n    --text-color2: #5c6c7f;\n}\n\n#w3a-modal .w3a-group:not(.w3a-group--hidden):not(:last-child),\n#w3a-modal .w3a-group:not(.w3a-group--social-hidden):not(:last-child),\n#w3a-modal .w3a-group:not(.w3a-group--email-hidden):not(:last-child),\n#w3a-modal .w3a-group:not(.w3a-group--ext-wallet-hidden):not(:last-child) {\n    border-bottom: 0.5px solid #b7b8bd;\n    padding-bottom: 24px;\n}\n\n#w3a-modal.w3a-modal--light button.w3a-button {\n    background-color: #ffffff;\n    border: 1px solid #f3f3f4;\n    box-shadow: none;\n    color: #b7b8bd;\n}\n\n#w3a-modal.w3a-modal--light button.w3a-button:focus-visible {\n    outline: 1px solid #0f1222;\n}\n\n#w3a-modal.w3a-modal--light .w3a-text-field {\n    background: #ffffff;\n    border: 1px solid #ffffff;\n    box-shadow: inset 2px 2px 10px rgba(0, 0, 0, 0.1);\n    color: #b7b8bd;\n}\n\n#w3a-modal.w3a-modal--light .w3a-text-field:active {\n    color: #0f1222;\n    outline: 1px solid #0f1222;\n}\n\n#w3a-modal.w3a-modal--light .w3a-text-field:focus-visible {\n    color: #0f1222;\n    outline: 1px solid #0f1222;\n}\n\n#w3a-modal.w3a-modal--light .w3a-footer__links a:focus-visible {\n    outline: 1px solid #0f1222;\n}\n\n#w3a-modal.w3a-modal--light .w3a-external-back:focus-visible {\n    outline: 1px solid #0f1222;\n}\n';
    styleInject(css_248z);
    ThemedContext = /* @__PURE__ */ (0, import_react.createContext)({
      isDark: true
    });
    CircleArrowLeft = "data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cg%20id%3D%2224%20%2F%20arrows%20%2F%20circle-arrow-left%22%3E%3Cpath%20id%3D%22icon%22%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M12%2023C5.92487%2023%201%2018.0751%201%2012C1%205.92487%205.92487%201%2012%201C18.0751%201%2023%205.92487%2023%2012C23%2018.0751%2018.0751%2023%2012%2023ZM12%2021C16.9706%2021%2021%2016.9706%2021%2012C21%207.02944%2016.9706%203%2012%203C7.02944%203%203%207.02944%203%2012C3%2016.9706%207.02944%2021%2012%2021ZM17%2011H10.4142L12.7071%208.70711L11.2929%207.29289L6.58579%2012L11.2929%2016.7071L12.7071%2015.2929L10.4142%2013H17V11Z%22%20fill%3D%22%23D3D3D4%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E";
    Close = "data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M13.4142%2012L19.7782%2018.364L18.364%2019.7782L12%2013.4143L5.63604%2019.7782L4.22183%2018.364L10.5858%2012L4.22183%205.63608L5.63604%204.22187L12%2010.5858L18.364%204.22187L19.7782%205.63608L13.4142%2012Z%22%20fill%3D%22%23DFDFDF%22%2F%3E%3C%2Fsvg%3E";
    Expand = "data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M12.0991%2015.6785C11.694%2016.1072%2011.0119%2016.1072%2010.6068%2015.6785L4.98828%209.73136C4.36988%209.0768%204.83393%208%205.73441%208L16.9715%208C17.872%208%2018.336%209.0768%2017.7176%209.73136L12.0991%2015.6785Z%22%20fill%3D%22%23B7B8BD%22%2F%3E%3C%2Fsvg%3E";
    ExpandLight = "data:image/svg+xml,%3Csvg%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M12.0991%2015.6785C11.694%2016.1072%2011.0119%2016.1072%2010.6068%2015.6785L4.98828%209.73136C4.36988%209.0768%204.83393%208%205.73441%208L16.9715%208C17.872%208%2018.336%209.0768%2017.7176%209.73136L12.0991%2015.6785Z%22%20fill%3D%22%23FFFFFF%22%2F%3E%3C%2Fsvg%3E";
    icons = {
      "arrow-left": {
        image: CircleArrowLeft
      },
      close: {
        image: Close
      },
      "expand-light": {
        image: ExpandLight
      },
      expand: {
        image: Expand
      }
    };
    DEFAULT_LOGO_URL$2 = "https://images.web3auth.io/web3auth-logo.svg";
    closeIcon$1 = (0, import_jsx_runtime.jsx)(Icon, {
      iconName: "close"
    }, void 0);
    closeIcon = (0, import_jsx_runtime.jsx)(Icon, {
      iconName: "close"
    }, void 0);
    walletConnectIcon = (0, import_jsx_runtime.jsx)(Image, {
      imageId: "wallet-connect",
      width: "114px"
    }, void 0);
    WalletConnect$1 = /* @__PURE__ */ (0, import_react.memo)(WalletConnect);
    Footer$1 = /* @__PURE__ */ (0, import_react.memo)(Footer);
    DEFAULT_LOGO_URL$1 = "https://images.web3auth.io/web3auth-logo.svg";
    Header$1 = /* @__PURE__ */ (0, import_react.memo)(Header, (prevProps, nextProps) => {
      if (prevProps.appLogo !== nextProps.appLogo) {
        return true;
      }
      return false;
    });
    hasLightIcons = ["apple", "github"];
    import_loglevel2.default.enableAll();
    DEFAULT_LOGO_URL = "https://images.web3auth.io/web3auth-logo.svg";
    LoginModal = class extends SafeEventEmitter {
      constructor(_ref) {
        let {
          appLogo,
          version: version17,
          adapterListener,
          theme = "light"
        } = _ref;
        super();
        _defineProperty(this, "appLogo", void 0);
        _defineProperty(this, "version", void 0);
        _defineProperty(this, "isDark", void 0);
        _defineProperty(this, "wrapper", void 0);
        _defineProperty(this, "stateEmitter", void 0);
        _defineProperty(this, "initModal", async () => {
          const darkState = {
            isDark: this.isDark
          };
          return new Promise((resolve) => {
            this.stateEmitter.once("MOUNTED", () => {
              import_loglevel2.default.info("rendered");
              this.setState({
                status: MODAL_STATUS.INITIALIZED
              });
              return resolve();
            });
            (0, import_react_dom.render)((0, import_jsx_runtime.jsx)(ThemedContext.Provider, {
              value: darkState,
              children: (0, import_jsx_runtime.jsx)(Modal, {
                closeModal: this.closeModal,
                stateListener: this.stateEmitter,
                handleShowExternalWallets: (externalWalletsInitialized) => this.handleShowExternalWallets(externalWalletsInitialized),
                handleExternalWalletClick: (params) => this.handleExternalWalletClick(params),
                handleSocialLoginClick: (params) => this.handleSocialLoginClick(params),
                appLogo: this.appLogo,
                version: this.version
              }, void 0)
            }, void 0), this.wrapper);
          });
        });
        _defineProperty(this, "addSocialLogins", (adapter, loginMethods, loginMethodsOrder) => {
          this.setState({
            socialLoginsConfig: {
              adapter,
              loginMethods,
              loginMethodsOrder
            }
          });
          import_loglevel2.default.info("addSocialLogins", adapter, loginMethods, loginMethodsOrder);
        });
        _defineProperty(this, "addWalletLogins", (externalWalletsConfig, options) => {
          this.setState({
            externalWalletsConfig,
            externalWalletsInitialized: true,
            showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly),
            externalWalletsVisibility: true
          });
        });
        _defineProperty(this, "open", () => {
          this.setState({
            modalVisibility: true
          });
          this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, true);
        });
        _defineProperty(this, "closeModal", () => {
          this.setState({
            modalVisibility: false,
            externalWalletsVisibility: false
          });
          this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, false);
        });
        _defineProperty(this, "initExternalWalletContainer", () => {
          this.setState({
            hasExternalWallets: true
          });
        });
        _defineProperty(this, "handleShowExternalWallets", (status) => {
          this.emit(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, {
            externalWalletsInitialized: status
          });
        });
        _defineProperty(this, "handleExternalWalletClick", (params) => {
          import_loglevel2.default.info("external wallet clicked", params);
          const {
            adapter
          } = params;
          this.emit(LOGIN_MODAL_EVENTS.LOGIN, {
            adapter
          });
        });
        _defineProperty(this, "handleSocialLoginClick", (params) => {
          import_loglevel2.default.info("social login clicked", params);
          const {
            adapter,
            loginParams
          } = params;
          this.emit(LOGIN_MODAL_EVENTS.LOGIN, {
            adapter,
            loginParams: {
              loginProvider: loginParams.loginProvider,
              login_hint: loginParams.login_hint
            }
          });
        });
        _defineProperty(this, "setState", (newState) => {
          this.stateEmitter.emit("STATE_UPDATED", newState);
        });
        _defineProperty(this, "updateWalletConnect", (walletConnectUri) => {
          if (!walletConnectUri)
            return;
          this.setState({
            walletConnectUri
          });
        });
        _defineProperty(this, "handleAdapterData", (adapterData) => {
          if (adapterData.adapterName === WALLET_ADAPTERS.WALLET_CONNECT_V1) {
            const walletConnectData = adapterData.data;
            this.updateWalletConnect(walletConnectData.uri);
          }
        });
        _defineProperty(this, "subscribeCoreEvents", (listener) => {
          listener.on(ADAPTER_EVENTS.CONNECTING, (data) => {
            import_loglevel2.default.info("connecting with adapter", data);
            if ((data === null || data === void 0 ? void 0 : data.adapter) !== WALLET_ADAPTERS.WALLET_CONNECT_V1 && (data === null || data === void 0 ? void 0 : data.adapter) !== WALLET_ADAPTERS.WALLET_CONNECT_V2) {
              this.setState({
                status: MODAL_STATUS.CONNECTING
              });
            }
          });
          listener.on(ADAPTER_EVENTS.CONNECTED, (data) => {
            import_loglevel2.default.debug("connected with adapter", data);
            if (!data.reconnected) {
              this.setState({
                status: MODAL_STATUS.CONNECTED,
                modalVisibility: true,
                postLoadingMessage: "You are connected with your account"
              });
            } else {
              this.setState({
                status: MODAL_STATUS.CONNECTED
              });
            }
          });
          listener.on(ADAPTER_EVENTS.ERRORED, (error) => {
            import_loglevel2.default.error("error", error, error.message);
            if (error.code === 5e3) {
              this.setState({
                modalVisibility: true,
                postLoadingMessage: error.message || "Something went wrong!",
                status: MODAL_STATUS.ERRORED
              });
            } else {
              this.setState({
                modalVisibility: true,
                status: MODAL_STATUS.INITIALIZED
              });
            }
          });
          listener.on(ADAPTER_EVENTS.DISCONNECTED, () => {
            this.setState({
              status: MODAL_STATUS.INITIALIZED,
              externalWalletsVisibility: false
            });
          });
          listener.on(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, (adapterData) => {
            this.handleAdapterData(adapterData);
          });
        });
        this.appLogo = appLogo || DEFAULT_LOGO_URL;
        this.version = version17;
        this.isDark = theme === "dark";
        this.wrapper = createWrapper();
        this.stateEmitter = new SafeEventEmitter();
        this.subscribeCoreEvents(adapterListener);
      }
    };
  }
});

// node_modules/@web3auth/web3auth/dist/web3auth.esm.js
var web3auth_esm_exports = {};
__export(web3auth_esm_exports, {
  OPENLOGIN_PROVIDERS: () => OPENLOGIN_PROVIDERS,
  Web3Auth: () => Web3Auth,
  defaultEvmDappModalConfig: () => defaultEvmDappModalConfig,
  defaultEvmWalletModalConfig: () => defaultEvmWalletModalConfig,
  defaultSolanaDappModalConfig: () => defaultSolanaDappModalConfig,
  defaultSolanaWalletModalConfig: () => defaultSolanaWalletModalConfig
});
function ownKeys$2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var import_loglevel3, defaultSolanaDappModalConfig, defaultEvmDappModalConfig, defaultSolanaWalletModalConfig, defaultEvmWalletModalConfig, OPENLOGIN_PROVIDERS, getDefaultAdapterModule, getAdapterSocialLogins, Web3Auth;
var init_web3auth_esm = __esm({
  "node_modules/@web3auth/web3auth/dist/web3auth.esm.js"() {
    init_react();
    init_openlogin_esm();
    init_base_esm();
    init_defineProperty();
    init_core_esm();
    init_ui_esm();
    import_loglevel3 = __toESM(require_loglevel());
    defaultSolanaDappModalConfig = {
      chainNamespace: CHAIN_NAMESPACES.SOLANA,
      adapters: {
        [SOLANA_ADAPTERS.TORUS_SOLANA]: {
          label: "Torus Solana Wallet",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        },
        [SOLANA_ADAPTERS.OPENLOGIN]: {
          label: "OpenLogin",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        },
        [SOLANA_ADAPTERS.PHANTOM]: {
          label: "Phantom",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        }
      }
    };
    defaultEvmDappModalConfig = {
      chainNamespace: CHAIN_NAMESPACES.EIP155,
      adapters: {
        [EVM_ADAPTERS.TORUS_EVM]: {
          label: "Torus Wallet",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        },
        [EVM_ADAPTERS.METAMASK]: {
          label: "MetaMask",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        },
        [EVM_ADAPTERS.OPENLOGIN]: {
          label: "OpenLogin",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        },
        [EVM_ADAPTERS.WALLET_CONNECT_V1]: {
          label: "Wallet Connect",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        }
      }
    };
    defaultSolanaWalletModalConfig = {
      chainNamespace: CHAIN_NAMESPACES.SOLANA,
      adapters: {
        [SOLANA_ADAPTERS.OPENLOGIN]: {
          label: "OpenLogin",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        }
      }
    };
    defaultEvmWalletModalConfig = {
      chainNamespace: CHAIN_NAMESPACES.EIP155,
      adapters: {
        [EVM_ADAPTERS.OPENLOGIN]: {
          label: "OpenLogin",
          showOnModal: true,
          showOnMobile: true,
          showOnDesktop: true
        }
      }
    };
    OPENLOGIN_PROVIDERS = [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.FACEBOOK, LOGIN_PROVIDER.TWITTER, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD, LOGIN_PROVIDER.TWITCH, LOGIN_PROVIDER.APPLE, LOGIN_PROVIDER.LINE, LOGIN_PROVIDER.GITHUB, LOGIN_PROVIDER.KAKAO, LOGIN_PROVIDER.LINKEDIN, LOGIN_PROVIDER.WEIBO, LOGIN_PROVIDER.WECHAT, LOGIN_PROVIDER.EMAIL_PASSWORDLESS];
    getDefaultAdapterModule = async (params) => {
      const {
        name: name2,
        customChainConfig,
        clientId
      } = params;
      if (!Object.values(CHAIN_NAMESPACES).includes(customChainConfig.chainNamespace))
        throw new Error("Invalid chainNamespace: ".concat(customChainConfig.chainNamespace));
      const finalChainConfig = _objectSpread$2(_objectSpread$2({}, getChainConfig(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId)), customChainConfig || {});
      if (name2 === WALLET_ADAPTERS.TORUS_EVM) {
        const {
          TorusWalletAdapter
        } = await import("/build/_shared/torusEvmAdapter.esm-USKTLBIX.js");
        const adapter = new TorusWalletAdapter({
          chainConfig: finalChainConfig
        });
        return adapter;
      } else if (name2 === WALLET_ADAPTERS.TORUS_SOLANA) {
        const {
          SolanaWalletAdapter
        } = await import("/build/_shared/torusSolanaAdapter.esm-NJLXREX6.js");
        const adapter = new SolanaWalletAdapter({
          chainConfig: finalChainConfig
        });
        return adapter;
      } else if (name2 === WALLET_ADAPTERS.METAMASK) {
        const {
          MetamaskAdapter
        } = await import("/build/_shared/metamaskAdapter.esm-DPBAN7HU.js");
        const adapter = new MetamaskAdapter({
          chainConfig: finalChainConfig
        });
        return adapter;
      } else if (name2 === WALLET_ADAPTERS.PHANTOM) {
        const {
          PhantomAdapter
        } = await import("/build/_shared/phantomAdapter.esm-VDM323S7.js");
        const adapter = new PhantomAdapter({
          chainConfig: finalChainConfig
        });
        return adapter;
      } else if (name2 === WALLET_ADAPTERS.WALLET_CONNECT_V1) {
        const {
          WalletConnectV1Adapter
        } = await import("/build/_shared/walletConnectV1Adapter.esm-NSMS4LIF.js");
        const adapter = new WalletConnectV1Adapter({
          chainConfig: finalChainConfig
        });
        return adapter;
      } else if (name2 === WALLET_ADAPTERS.OPENLOGIN) {
        const {
          OpenloginAdapter,
          getOpenloginDefaultOptions
        } = await import("/build/_shared/openloginAdapter.esm-3XSAYIYL.js");
        const defaultOptions = getOpenloginDefaultOptions(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId);
        const adapter = new OpenloginAdapter(_objectSpread$2(_objectSpread$2({}, defaultOptions), {}, {
          chainConfig: _objectSpread$2(_objectSpread$2({}, defaultOptions.chainConfig || {}), finalChainConfig),
          adapterSettings: _objectSpread$2(_objectSpread$2({}, defaultOptions.adapterSettings), {}, {
            clientId
          })
        }));
        return adapter;
      }
      throw new Error("Invalid wallet adapter name");
    };
    getAdapterSocialLogins = function(adapterName, adapter) {
      let loginMethodsConfig = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      const finalLoginMethodsConfig = {};
      if (adapterName === WALLET_ADAPTERS.OPENLOGIN) {
        OPENLOGIN_PROVIDERS.forEach((loginMethod) => {
          const currentLoginMethodConfig = loginMethodsConfig[loginMethod] || {
            name: loginMethod,
            showOnMobile: true,
            showOnModal: true,
            showOnDesktop: true
          };
          finalLoginMethodsConfig[loginMethod] = _objectSpread$1({}, currentLoginMethodConfig);
          import_loglevel3.default.debug("OpenLogin login method ui config", finalLoginMethodsConfig);
        });
      } else {
        throw new Error("".concat(adapterName, " is not a valid adapter"));
      }
      return finalLoginMethodsConfig;
    };
    import_loglevel3.default.enableAll();
    import_loglevel3.default.setLevel("debug");
    Web3Auth = class extends Web3AuthCore {
      constructor(options) {
        var _this$options$uiConfi, _this$options$uiConfi2;
        super(options);
        _defineProperty(this, "loginModal", void 0);
        _defineProperty(this, "options", void 0);
        _defineProperty(this, "modalConfig", defaultEvmDappModalConfig);
        this.options = _objectSpread3({}, options);
        const providedChainConfig = this.options.chainConfig;
        if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {
          if (options.authMode === "WALLET") {
            this.modalConfig = defaultSolanaWalletModalConfig;
          } else {
            this.modalConfig = defaultSolanaDappModalConfig;
          }
        } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {
          if (options.authMode === "WALLET") {
            this.modalConfig = defaultEvmWalletModalConfig;
          } else {
            this.modalConfig = defaultEvmDappModalConfig;
          }
        } else {
          throw new Error("Invalid chainNamespace provided: ".concat(providedChainConfig.chainNamespace));
        }
        this.loginModal = new LoginModal({
          theme: (_this$options$uiConfi = this.options.uiConfig) === null || _this$options$uiConfi === void 0 ? void 0 : _this$options$uiConfi.theme,
          appLogo: ((_this$options$uiConfi2 = this.options.uiConfig) === null || _this$options$uiConfi2 === void 0 ? void 0 : _this$options$uiConfi2.appLogo) || "",
          version: "",
          adapterListener: this
        });
        this.subscribeToLoginModalEvents();
      }
      async initModal(params) {
        super.checkInitRequirements();
        await this.loginModal.initModal();
        const providedChainConfig = this.options.chainConfig;
        const allAdapters = [.../* @__PURE__ */ new Set([...Object.keys(this.modalConfig.adapters || {}), ...Object.keys(this.walletAdapters)])];
        const adapterConfigurationPromises = allAdapters.map(async (adapterName) => {
          var _this$modalConfig$ada, _params$modalConfig, _this$modalConfig$ada2, _this$modalConfig$ada3;
          let adapterConfig = ((_this$modalConfig$ada = this.modalConfig.adapters) === null || _this$modalConfig$ada === void 0 ? void 0 : _this$modalConfig$ada[adapterName]) || {
            label: adapterName,
            showOnModal: true,
            showOnMobile: true,
            showOnDesktop: true
          };
          if (params !== null && params !== void 0 && (_params$modalConfig = params.modalConfig) !== null && _params$modalConfig !== void 0 && _params$modalConfig[adapterName]) {
            adapterConfig = _objectSpread3(_objectSpread3({}, adapterConfig), params.modalConfig[adapterName]);
          }
          this.modalConfig.adapters[adapterName] = adapterConfig;
          const adapter = this.walletAdapters[adapterName];
          import_loglevel3.default.debug("adapter config", adapterName, (_this$modalConfig$ada2 = this.modalConfig.adapters) === null || _this$modalConfig$ada2 === void 0 ? void 0 : _this$modalConfig$ada2[adapterName].showOnModal);
          if (!adapter && (_this$modalConfig$ada3 = this.modalConfig.adapters) !== null && _this$modalConfig$ada3 !== void 0 && _this$modalConfig$ada3[adapterName].showOnModal) {
            const ad = await getDefaultAdapterModule({
              name: adapterName,
              customChainConfig: this.options.chainConfig,
              clientId: this.options.clientId
            });
            this.walletAdapters[adapterName] = ad;
            return adapterName;
          } else if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.IN_APP || (adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL || adapterName === this.cachedAdapter) {
            var _this$modalConfig$ada4;
            if (!((_this$modalConfig$ada4 = this.modalConfig.adapters) !== null && _this$modalConfig$ada4 !== void 0 && _this$modalConfig$ada4[adapterName].showOnModal))
              return;
            if (adapterName === WALLET_ADAPTERS.OPENLOGIN) {
              this.walletAdapters[adapterName].setAdapterSettings({
                clientId: this.options.clientId
              });
            }
            if (!adapter.chainConfigProxy) {
              var _this$coreOptions$cha;
              const chainConfig = _objectSpread3(_objectSpread3({}, getChainConfig(providedChainConfig.chainNamespace, (_this$coreOptions$cha = this.coreOptions.chainConfig) === null || _this$coreOptions$cha === void 0 ? void 0 : _this$coreOptions$cha.chainId)), this.coreOptions.chainConfig);
              this.walletAdapters[adapterName].setChainConfig(chainConfig);
            }
            return adapterName;
          }
        });
        const adapterNames = await Promise.all(adapterConfigurationPromises);
        const hasInAppWallets = Object.values(this.walletAdapters).some((adapter) => {
          if (adapter.type !== ADAPTER_CATEGORY.IN_APP)
            return false;
          if (this.modalConfig.adapters[adapter.name].showOnModal !== true)
            return false;
          if (!this.modalConfig.adapters[adapter.name].loginMethods)
            return true;
          if (Object.values(this.modalConfig.adapters[adapter.name].loginMethods).some((method) => method.showOnModal))
            return true;
          return false;
        });
        import_loglevel3.default.debug(hasInAppWallets, this.walletAdapters, "hasInAppWallets");
        const initPromises = adapterNames.map(async (adapterName) => {
          if (!adapterName)
            return;
          try {
            const adapter = this.walletAdapters[adapterName];
            if (this.cachedAdapter !== adapterName && adapter.type === ADAPTER_CATEGORY.EXTERNAL) {
              return;
            }
            this.subscribeToAdapterEvents(adapter);
            if (adapter.status === ADAPTER_STATUS.NOT_READY)
              await adapter.init({
                autoConnect: this.cachedAdapter === adapterName
              });
            if (adapter.type === ADAPTER_CATEGORY.IN_APP) {
              this.initializeInAppWallet(adapterName);
            }
          } catch (error) {
            import_loglevel3.default.error(error, "error while initializing adapter");
          }
        });
        this.status = ADAPTER_STATUS.READY;
        await Promise.all(initPromises);
        const hasExternalWallets = allAdapters.some((adapterName) => {
          var _this$walletAdapters$, _this$modalConfig$ada5;
          return ((_this$walletAdapters$ = this.walletAdapters[adapterName]) === null || _this$walletAdapters$ === void 0 ? void 0 : _this$walletAdapters$.type) === ADAPTER_CATEGORY.EXTERNAL && ((_this$modalConfig$ada5 = this.modalConfig.adapters) === null || _this$modalConfig$ada5 === void 0 ? void 0 : _this$modalConfig$ada5[adapterName].showOnModal);
        });
        if (hasExternalWallets) {
          this.loginModal.initExternalWalletContainer();
        }
        if (!hasInAppWallets && hasExternalWallets) {
          await this.initExternalWalletAdapters(false, {
            showExternalWalletsOnly: true
          });
        }
      }
      async connect() {
        if (this.provider)
          return this.provider;
        this.loginModal.open();
        return new Promise((resolve, reject) => {
          this.once(ADAPTER_EVENTS.CONNECTED, () => {
            return resolve(this.provider);
          });
          this.once(ADAPTER_EVENTS.ERRORED, (err) => {
            return reject(err);
          });
        });
      }
      async initExternalWalletAdapters(externalWalletsInitialized, options) {
        if (externalWalletsInitialized)
          return;
        const adaptersConfig = {};
        const adaptersData = {};
        const adapterPromises = Object.keys(this.walletAdapters).map(async (adapterName) => {
          try {
            const adapter = this.walletAdapters[adapterName];
            if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL) {
              import_loglevel3.default.debug("init external wallet", this.cachedAdapter, adapterName);
              this.subscribeToAdapterEvents(adapter);
              if (this.cachedAdapter === adapterName) {
                return;
              }
              if (adapter.status === ADAPTER_STATUS.NOT_READY)
                await adapter.init({
                  autoConnect: this.cachedAdapter === adapterName
                });
              adaptersConfig[adapterName] = this.modalConfig.adapters[adapterName];
              adaptersData[adapterName] = adapter.adapterData || {};
              return adapterName;
            }
          } catch (error) {
            import_loglevel3.default.error(error, "error while initializing adapter");
          }
        });
        const adapterInitResults = await Promise.all(adapterPromises);
        const finalAdaptersConfig = {};
        adapterInitResults.forEach((result) => {
          if (result) {
            finalAdaptersConfig[result] = adaptersConfig[result];
          }
        });
        this.loginModal.addWalletLogins(finalAdaptersConfig, {
          showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly)
        });
      }
      initializeInAppWallet(adapterName) {
        import_loglevel3.default.info("adapterInitResults", adapterName);
        if (this.walletAdapters[adapterName].type === ADAPTER_CATEGORY.IN_APP) {
          var _this$modalConfig$ada6, _this$options$uiConfi3;
          this.loginModal.addSocialLogins(adapterName, getAdapterSocialLogins(adapterName, this.walletAdapters[adapterName], (_this$modalConfig$ada6 = this.modalConfig.adapters[adapterName]) === null || _this$modalConfig$ada6 === void 0 ? void 0 : _this$modalConfig$ada6.loginMethods), ((_this$options$uiConfi3 = this.options.uiConfig) === null || _this$options$uiConfi3 === void 0 ? void 0 : _this$options$uiConfi3.loginMethodsOrder) || OPENLOGIN_PROVIDERS);
        }
      }
      subscribeToLoginModalEvents() {
        this.loginModal.on(LOGIN_MODAL_EVENTS.LOGIN, async (params) => {
          try {
            await this.connectTo(params.adapter, params.loginParams);
          } catch (error) {
            import_loglevel3.default.error("Error while connecting to adapter: ".concat(params.adapter), error);
          }
        });
        this.loginModal.on(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, async (params) => {
          await this.initExternalWalletAdapters(params.externalWalletsInitialized);
        });
        this.loginModal.on(LOGIN_MODAL_EVENTS.DISCONNECT, async () => {
          try {
            await this.logout();
          } catch (error) {
            import_loglevel3.default.error("Error while disconnecting", error);
          }
        });
        this.loginModal.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, async (visibility) => {
          var _this$walletAdapters$2;
          import_loglevel3.default.debug("is login modal visible", visibility);
          this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, visibility);
          const walletConnectStatus = (_this$walletAdapters$2 = this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1]) === null || _this$walletAdapters$2 === void 0 ? void 0 : _this$walletAdapters$2.status;
          if (visibility && walletConnectStatus === ADAPTER_STATUS.READY) {
            try {
              this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1].connect();
            } catch (error) {
              import_loglevel3.default.error("Error while disconnecting to wallet connect in core", error);
            }
          }
        });
      }
    };
  }
});

// node_modules/moralis/lib/browser/Web3Connector/Web3AuthConnector.js
var require_Web3AuthConnector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/Web3AuthConnector.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Web3Auth = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _concat = _interopRequireDefault(require_concat4());
    var _promise = _interopRequireDefault(require_promise3());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Web3Auth2 = /* @__PURE__ */ function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(Web3Auth3, _AbstractWeb3Connecto);
      var _super = _createSuper(Web3Auth3);
      function Web3Auth3() {
        var _context;
        var _this;
        (0, _classCallCheck2.default)(this, Web3Auth3);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, (0, _concat.default)(_context = [this]).call(_context, args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", "web3Auth");
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "activate", /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
          var _ref2, _ref2$chainId, chainId, clientId, theme, appLogo, loginMethodsOrder, _Web3Auth, _require, _window, _window$Web3auth, ethChainConfig, web3auth, provider, _web3auth, _web3auth2, _web3auth3, isSocialLogin, ether, signer, values, providerChainId, _args = arguments;
          return _regenerator.default.wrap(function(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _ref2 = _args.length > 0 && _args[0] !== void 0 ? _args[0] : {}, _ref2$chainId = _ref2.chainId, chainId = _ref2$chainId === void 0 ? "0x1" : _ref2$chainId, clientId = _ref2.clientId, theme = _ref2.theme, appLogo = _ref2.appLogo, loginMethodsOrder = _ref2.loginMethodsOrder;
                  if (clientId) {
                    _context2.next = 3;
                    break;
                  }
                  throw new Error('"clientId" not provided, please provide clientId');
                case 3:
                  try {
                    _Web3Auth = (_require = (init_web3auth_esm(), __toCommonJS(web3auth_esm_exports))) === null || _require === void 0 ? void 0 : _require.Web3Auth;
                  } catch (_unused) {
                  }
                  if (!_Web3Auth) {
                    _Web3Auth = (_window = window) === null || _window === void 0 ? void 0 : (_window$Web3auth = _window.Web3auth) === null || _window$Web3auth === void 0 ? void 0 : _window$Web3auth.Web3Auth;
                  }
                  if (_Web3Auth) {
                    _context2.next = 7;
                    break;
                  }
                  throw new Error('"@web3auth/web3auth" not installed, please install');
                case 7:
                  ethChainConfig = {
                    chainNamespace: "eip155",
                    chainId: (0, _verifyChainId.default)(chainId)
                  };
                  try {
                    web3auth = new _Web3Auth({
                      chainConfig: ethChainConfig,
                      uiConfig: {
                        theme: theme !== null && theme !== void 0 ? theme : "dark",
                        appLogo: appLogo !== null && appLogo !== void 0 ? appLogo : "https://moralis.io/wp-content/uploads/2021/05/moralisWhiteLogo.svg",
                        loginMethodsOrder
                      },
                      clientId
                    });
                  } catch (_unused2) {
                  }
                  if (web3auth) {
                    _context2.next = 11;
                    break;
                  }
                  throw new Error("Could not connect via Web3Auth, error during initializing Web3Auth");
                case 11:
                  _context2.next = 13;
                  return web3auth.initModal();
                case 13:
                  provider = null;
                  _context2.prev = 14;
                  _context2.next = 17;
                  return web3auth.connect();
                case 17:
                  provider = _context2.sent;
                  _context2.next = 22;
                  break;
                case 20:
                  _context2.prev = 20;
                  _context2.t0 = _context2["catch"](14);
                case 22:
                  if (provider) {
                    _context2.next = 24;
                    break;
                  }
                  throw new Error("Could not connect via Web3Auth, error in connecting to provider");
                case 24:
                  _context2.prev = 24;
                  isSocialLogin = (_web3auth = web3auth) !== null && _web3auth !== void 0 && _web3auth.provider ? false : true;
                  ether = new _ethers.ethers.providers.Web3Provider((_web3auth2 = web3auth) !== null && _web3auth2 !== void 0 && _web3auth2.provider ? web3auth.provider : web3auth);
                  signer = ether.getSigner();
                  _context2.next = 30;
                  return _promise.default.all([ether.getNetwork(), signer.getAddress()]);
                case 30:
                  values = _context2.sent;
                  providerChainId = values[0].chainId;
                  _this.account = values[1].toLocaleLowerCase();
                  _this.chainId = "0x".concat(providerChainId.toString(16));
                  _this.provider = isSocialLogin ? ether : (_web3auth3 = web3auth) === null || _web3auth3 === void 0 ? void 0 : _web3auth3.provider;
                  _this.web3Instance = web3auth;
                  _this.subscribeToEvents(_this.provider);
                  return _context2.abrupt("return", {
                    chainId: _this.chainId,
                    account: _this.account,
                    provider: _this.provider
                  });
                case 40:
                  _context2.prev = 40;
                  _context2.t1 = _context2["catch"](24);
                  throw new Error("Could not connect via Web3Auth, error while authenticating");
                case 43:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee, null, [[14, 20], [24, 40]]);
        })));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "deactivate", /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
          return _regenerator.default.wrap(function(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _this.unsubscribeToEvents(_this.provider);
                  if (!_this.web3Instance) {
                    _context3.next = 4;
                    break;
                  }
                  _context3.next = 4;
                  return _this.web3Instance.logout();
                case 4:
                  _this.account = null;
                  _this.chainId = null;
                  _this.provider = null;
                case 7:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee2);
        })));
        return _this;
      }
      return (0, _createClass2.default)(Web3Auth3);
    }(_AbstractWeb3Connector.default);
    exports.Web3Auth = Web3Auth2;
  }
});

// node_modules/moralis/lib/browser/MoralisWeb3.js
var require_MoralisWeb3 = __commonJS({
  "node_modules/moralis/lib/browser/MoralisWeb3.js"(exports) {
    "use strict";
    init_react();
    var _typeof3 = require_typeof();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray = require_is_array4();
    var _WeakMap = require_weak_map3();
    var _Object$defineProperty = require_define_property3();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _filter = _interopRequireDefault(require_filter4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _concat = _interopRequireDefault(require_concat4());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _map = _interopRequireDefault(require_map9());
    var _trim = _interopRequireDefault(require_trim4());
    var _find = _interopRequireDefault(require_find4());
    var _every = _interopRequireDefault(require_every4());
    var _values = _interopRequireDefault(require_values3());
    var _bind = _interopRequireDefault(require_bind7());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    var _events = _interopRequireDefault(require_events());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _MoralisErd = _interopRequireDefault(require_MoralisErd());
    var _MoralisDot = _interopRequireDefault(require_MoralisDot());
    var _MoralisSol = _interopRequireDefault(require_MoralisSol());
    var _TransferUtils = _interopRequireDefault(require_TransferUtils());
    var _Cloud = require_Cloud();
    var _createSigningData = _interopRequireDefault(require_createSigningData());
    var _WalletConnectWeb3Connector = _interopRequireDefault(require_WalletConnectWeb3Connector());
    var _InjectedWeb3Connector = _interopRequireDefault(require_InjectedWeb3Connector());
    var _NetworkWeb3Connector = _interopRequireDefault(require_NetworkWeb3Connector());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _InternalWeb3Provider = _interopRequireWildcard(require_InternalWeb3Provider());
    var _detectProvider = _interopRequireDefault(require_dist());
    var _MagicWeb3Connector = _interopRequireDefault(require_MagicWeb3Connector());
    var _Web3AuthConnector = require_Web3AuthConnector();
    var _context30;
    var _context31;
    var _context32;
    var _context33;
    var _context34;
    var _context35;
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap();
      var cacheNodeInterop = new _WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context36;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty(_context36 = Object.prototype.toString.call(o2)).call(_context36, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var MoralisEmitter = new _events.default();
    var ERROR_WEB3_MISSING = "Missing web3 instance, make sure to call Moralis.enableWeb3() or Moralis.authenticate()";
    var MoralisWeb3 = /* @__PURE__ */ function() {
      function MoralisWeb32() {
        (0, _classCallCheck2.default)(this, MoralisWeb32);
      }
      (0, _createClass2.default)(MoralisWeb32, null, [{
        key: "addListener",
        value: function(eventName, listener) {
          MoralisEmitter.on(eventName, listener);
          return function() {
            return MoralisEmitter.removeListener(eventName, listener);
          };
        }
      }, {
        key: "on",
        value: function(eventName, listener) {
          MoralisEmitter.on(eventName, listener);
          return function() {
            return MoralisEmitter.removeListener(eventName, listener);
          };
        }
      }, {
        key: "once",
        value: function(eventName, listener) {
          MoralisEmitter.once(eventName, listener);
          return function() {
            return MoralisEmitter.removeListener(eventName, listener);
          };
        }
      }, {
        key: "removeListener",
        value: function(eventName, listener) {
          return MoralisEmitter.removeListener(eventName, listener);
        }
      }, {
        key: "off",
        value: function(eventName, listener) {
          return MoralisEmitter.off(eventName, listener);
        }
      }, {
        key: "removeAllListeners",
        value: function(eventName, listener) {
          return MoralisEmitter.removeAllListeners(eventName, listener);
        }
      }, {
        key: "isWeb3Enabled",
        value: function() {
          return this.ensureWeb3IsInstalled();
        }
      }, {
        key: "handleWeb3AccountChanged",
        value: function(account) {
          MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.ACCOUNT_CHANGED, account);
        }
      }, {
        key: "handleWeb3ChainChanged",
        value: function(chainId) {
          var _this$internalWeb3Pro;
          this.web3 = (_this$internalWeb3Pro = this.internalWeb3Provider) === null || _this$internalWeb3Pro === void 0 ? void 0 : _this$internalWeb3Pro.web3;
          MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.CHAIN_CHANGED, chainId);
        }
      }, {
        key: "handleWeb3Connect",
        value: function(connectInfo) {
          MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_CONNECT, connectInfo);
        }
      }, {
        key: "handleWeb3Disconnect",
        value: function(error) {
          if ((error === null || error === void 0 ? void 0 : error.message) === "MetaMask: Disconnected from chain. Attempting to connect.") {
            return;
          }
          this.cleanup();
          MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_DISCONNECT, error);
        }
      }, {
        key: "enableWeb3",
        value: function() {
          var _enableWeb = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(options) {
            var _this = this;
            var _options$connector, Connector, connector, anyNetwork, provider, chainId, account, internalWeb3, _yield$this$internalW, web3;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!this.isEnablingWeb3) {
                      _context.next = 2;
                      break;
                    }
                    throw new Error("Cannot execute Moralis.enableWeb3(), as Moralis Moralis.enableWeb3() already has been called, but is not finished yet ");
                  case 2:
                    _context.prev = 2;
                    this.isEnablingWeb3 = true;
                    if (this.speedyNodeApiKey) {
                      options.speedyNodeApiKey = this.speedyNodeApiKey;
                      options.provider = "network";
                    }
                    Connector = (_options$connector = options === null || options === void 0 ? void 0 : options.connector) !== null && _options$connector !== void 0 ? _options$connector : MoralisWeb32.getWeb3Connector(options === null || options === void 0 ? void 0 : options.provider);
                    connector = new Connector(options);
                    anyNetwork = (options === null || options === void 0 ? void 0 : options.anyNetwork) === true ? true : false;
                    this.internalWeb3Provider = new _InternalWeb3Provider.default(connector, anyNetwork);
                    this.internalWeb3Provider.on(_InternalWeb3Provider.InternalWeb3Events.ACCOUNT_CHANGED, function(args) {
                      return _this.handleWeb3AccountChanged(args);
                    });
                    this.internalWeb3Provider.on(_InternalWeb3Provider.InternalWeb3Events.CHAIN_CHANGED, function(args) {
                      return _this.handleWeb3ChainChanged(args);
                    });
                    this.internalWeb3Provider.on(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_CONNECT, function(args) {
                      return _this.handleWeb3Connect(args);
                    });
                    this.internalWeb3Provider.on(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_DISCONNECT, function(args) {
                      return _this.handleWeb3Disconnect(args);
                    });
                    _context.prev = 13;
                    _context.next = 16;
                    return this.internalWeb3Provider.activate(options);
                  case 16:
                    _yield$this$internalW = _context.sent;
                    provider = _yield$this$internalW.provider;
                    chainId = _yield$this$internalW.chainId;
                    account = _yield$this$internalW.account;
                    internalWeb3 = _yield$this$internalW.web3;
                    if (provider) {
                      _context.next = 23;
                      break;
                    }
                    throw new Error("Failed to activate, no provider returned");
                  case 23:
                    _context.next = 30;
                    break;
                  case 25:
                    _context.prev = 25;
                    _context.t0 = _context["catch"](13);
                    _context.next = 29;
                    return this.cleanup();
                  case 29:
                    throw _context.t0;
                  case 30:
                    web3 = internalWeb3;
                    this.web3 = internalWeb3;
                    MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.WEB3_ENABLED, {
                      chainId,
                      account,
                      connector,
                      provider,
                      web3
                    });
                    return _context.abrupt("return", web3);
                  case 36:
                    _context.prev = 36;
                    _context.t1 = _context["catch"](2);
                    throw _context.t1;
                  case 39:
                    _context.prev = 39;
                    this.isEnablingWeb3 = false;
                    return _context.finish(39);
                  case 42:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[2, 36, 39, 42], [13, 25]]);
          }));
          return function() {
            return _enableWeb.apply(this, arguments);
          };
        }()
      }, {
        key: "isDotAuth",
        value: function(options) {
          switch (options === null || options === void 0 ? void 0 : options.type) {
            case "dot":
            case "polkadot":
            case "kusama":
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "isElrondAuth",
        value: function(options) {
          switch (options === null || options === void 0 ? void 0 : options.type) {
            case "erd":
            case "elrond":
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "isSolAuth",
        value: function(options) {
          switch (options === null || options === void 0 ? void 0 : options.type) {
            case "sol":
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "getWeb3Connector",
        value: function(provider) {
          switch (provider) {
            case "walletconnect":
            case "walletConnect":
            case "wc":
              return _WalletConnectWeb3Connector.default;
            case "network":
              return _NetworkWeb3Connector.default;
            case "magicLink":
              return _MagicWeb3Connector.default;
            case "web3Auth":
              return _Web3AuthConnector.Web3Auth;
            default:
              return _InjectedWeb3Connector.default;
          }
        }
      }, {
        key: "deactivateWeb3",
        value: function() {
          var _deactivateWeb = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    return _context2.abrupt("return", this.cleanup());
                  case 1:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _deactivateWeb.apply(this, arguments);
          };
        }()
      }, {
        key: "cleanup",
        value: function() {
          var _cleanup = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (!this.isEnablingWeb3) {
                      _context3.next = 2;
                      break;
                    }
                    return _context3.abrupt("return");
                  case 2:
                    if (this.web3 && this.internalWeb3Provider) {
                      MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.WEB3_DEACTIVATED, {
                        connector: this.internalWeb3Provider.connector,
                        provider: this.internalWeb3Provider.provider
                      });
                    }
                    if (!this.internalWeb3Provider) {
                      _context3.next = 15;
                      break;
                    }
                    this.internalWeb3Provider.removeListener(_InternalWeb3Provider.InternalWeb3Events.ACCOUNT_CHANGED, this.handleWeb3AccountChanged);
                    this.internalWeb3Provider.removeListener(_InternalWeb3Provider.InternalWeb3Events.CHAIN_CHANGED, this.handleWeb3ChainChanged);
                    this.internalWeb3Provider.removeListener(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_CONNECT, this.handleWeb3Connect);
                    this.internalWeb3Provider.removeListener(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_DISCONNECT, this.handleWeb3Disconnect);
                    _context3.prev = 8;
                    _context3.next = 11;
                    return this.internalWeb3Provider.deactivate();
                  case 11:
                    _context3.next = 15;
                    break;
                  case 13:
                    _context3.prev = 13;
                    _context3.t0 = _context3["catch"](8);
                  case 15:
                    this.internalWeb3Provider = null;
                    this.web3 = null;
                  case 17:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this, [[8, 13]]);
          }));
          return function() {
            return _cleanup.apply(this, arguments);
          };
        }()
      }, {
        key: "authenticate",
        value: function() {
          var _authenticate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(options) {
            var isLoggedIn, _this$getInternalWeb, account, internalWeb3, signer, message, data, ethAddress, signature, authData, user;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return _ParseUser.default.currentAsync();
                  case 2:
                    isLoggedIn = _context4.sent;
                    if (!isLoggedIn) {
                      _context4.next = 6;
                      break;
                    }
                    _context4.next = 6;
                    return _ParseUser.default.logOut();
                  case 6:
                    if (!MoralisWeb32.isDotAuth(options)) {
                      _context4.next = 8;
                      break;
                    }
                    return _context4.abrupt("return", _MoralisDot.default.authenticate(options));
                  case 8:
                    if (!MoralisWeb32.isElrondAuth(options)) {
                      _context4.next = 10;
                      break;
                    }
                    return _context4.abrupt("return", _MoralisErd.default.authenticate(options));
                  case 10:
                    if (!MoralisWeb32.isSolAuth(options)) {
                      _context4.next = 12;
                      break;
                    }
                    return _context4.abrupt("return", _MoralisSol.default.authenticate(options));
                  case 12:
                    _context4.next = 14;
                    return this.enableWeb3(options);
                  case 14:
                    _this$getInternalWeb = this.getInternalWeb3Provider(), account = _this$getInternalWeb.account, internalWeb3 = _this$getInternalWeb.web3, signer = _this$getInternalWeb.signer;
                    if (account) {
                      _context4.next = 17;
                      break;
                    }
                    throw new Error("Cannot authenticate, no account returned from provider");
                  case 17:
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisWeb32.getSigningData();
                    _context4.next = 20;
                    return (0, _createSigningData.default)(message);
                  case 20:
                    data = _context4.sent;
                    ethAddress = account.toLowerCase();
                    if (ethAddress) {
                      _context4.next = 24;
                      break;
                    }
                    throw new Error("Address not found");
                  case 24:
                    _context4.next = 26;
                    return signer.signMessage(data);
                  case 26:
                    signature = _context4.sent;
                    if (signature) {
                      _context4.next = 29;
                      break;
                    }
                    throw new Error("Data not signed");
                  case 29:
                    authData = {
                      id: ethAddress,
                      signature,
                      data
                    };
                    _context4.next = 32;
                    return _ParseUser.default.logInWith("moralisEth", {
                      authData
                    });
                  case 32:
                    user = _context4.sent;
                    if (user) {
                      _context4.next = 35;
                      break;
                    }
                    throw new Error("Could not get user");
                  case 35:
                    _context4.next = 37;
                    return user.setACL(new _ParseACL.default(user));
                  case 37:
                    user.addAllUnique("accounts", [ethAddress]);
                    user.set("ethAddress", ethAddress);
                    _context4.next = 41;
                    return user.save(null, options);
                  case 41:
                    return _context4.abrupt("return", user);
                  case 42:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));
          return function() {
            return _authenticate.apply(this, arguments);
          };
        }()
      }, {
        key: "link",
        value: function() {
          var _link = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(account, options) {
            var _this$getInternalWeb2, signer, message, user, ethAddress, EthAddress, query, ethAddressRecord, data, signature, authData;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _this$getInternalWeb2 = this.getInternalWeb3Provider(), signer = _this$getInternalWeb2.signer;
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisWeb32.getSigningData();
                    _context5.next = 4;
                    return _ParseUser.default.currentAsync();
                  case 4:
                    user = _context5.sent;
                    ethAddress = account.toLowerCase();
                    EthAddress = _ParseObject.default.extend("_EthAddress");
                    query = new _ParseQuery.default(EthAddress);
                    _context5.next = 10;
                    return query.get(ethAddress).catch(function() {
                      return null;
                    });
                  case 10:
                    ethAddressRecord = _context5.sent;
                    if (ethAddressRecord) {
                      _context5.next = 23;
                      break;
                    }
                    _context5.next = 14;
                    return (0, _createSigningData.default)(message);
                  case 14:
                    data = _context5.sent;
                    _context5.next = 17;
                    return signer.signMessage(data);
                  case 17:
                    signature = _context5.sent;
                    if (signature) {
                      _context5.next = 20;
                      break;
                    }
                    throw new Error("Data not signed");
                  case 20:
                    authData = {
                      id: ethAddress,
                      signature,
                      data
                    };
                    _context5.next = 23;
                    return user.linkWith("moralisEth", {
                      authData
                    });
                  case 23:
                    user.addAllUnique("accounts", [ethAddress]);
                    user.set("ethAddress", ethAddress);
                    _context5.next = 27;
                    return user.save(null, options);
                  case 27:
                    return _context5.abrupt("return", user);
                  case 28:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));
          return function() {
            return _link.apply(this, arguments);
          };
        }()
      }, {
        key: "unlink",
        value: function() {
          var _unlink = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6(account) {
            var _user$get;
            var accountsLower, EthAddress, query, ethAddressRecord, user, accounts, nextAccounts;
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    accountsLower = account.toLowerCase();
                    EthAddress = _ParseObject.default.extend("_EthAddress");
                    query = new _ParseQuery.default(EthAddress);
                    _context6.next = 5;
                    return query.get(accountsLower);
                  case 5:
                    ethAddressRecord = _context6.sent;
                    _context6.next = 8;
                    return ethAddressRecord.destroy();
                  case 8:
                    _context6.next = 10;
                    return _ParseUser.default.currentAsync();
                  case 10:
                    user = _context6.sent;
                    accounts = (_user$get = user.get("accounts")) !== null && _user$get !== void 0 ? _user$get : [];
                    nextAccounts = (0, _filter.default)(accounts).call(accounts, function(v2) {
                      return v2 !== accountsLower;
                    });
                    user.set("accounts", nextAccounts);
                    user.set("ethAddress", nextAccounts[0]);
                    _context6.next = 17;
                    return user._unlinkFrom("moralisEth");
                  case 17:
                    _context6.next = 19;
                    return user.save();
                  case 19:
                    return _context6.abrupt("return", user);
                  case 20:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6);
          }));
          return function() {
            return _unlink.apply(this, arguments);
          };
        }()
      }, {
        key: "initPlugins",
        value: function() {
          var _initPlugins = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee8(installedPlugins) {
            var _this2 = this;
            var specs, allPlugins;
            return _regenerator.default.wrap(function(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    _context10.t0 = installedPlugins;
                    if (_context10.t0) {
                      _context10.next = 5;
                      break;
                    }
                    _context10.next = 4;
                    return (0, _Cloud.run)("getPluginSpecs");
                  case 4:
                    _context10.t0 = _context10.sent;
                  case 5:
                    specs = _context10.t0;
                    if (!this.Plugins)
                      this.Plugins = {};
                    if (specs) {
                      _context10.next = 9;
                      break;
                    }
                    return _context10.abrupt("return");
                  case 9:
                    allPlugins = this.Plugins;
                    (0, _forEach.default)(specs).call(specs, function(plugin) {
                      var _context7;
                      allPlugins[plugin.name] = {};
                      (0, _forEach.default)(_context7 = plugin.functions).call(_context7, function(f2) {
                        allPlugins[plugin.name][f2] = /* @__PURE__ */ function() {
                          var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7(params, options) {
                            var _context8;
                            var response, error, triggerReturn;
                            return _regenerator.default.wrap(function(_context9) {
                              while (1) {
                                switch (_context9.prev = _context9.next) {
                                  case 0:
                                    if (!options)
                                      options = {};
                                    _context9.next = 3;
                                    return (0, _Cloud.run)((0, _concat.default)(_context8 = "".concat(plugin.name, "_")).call(_context8, f2), params);
                                  case 3:
                                    response = _context9.sent;
                                    if (response.data.success) {
                                      _context9.next = 7;
                                      break;
                                    }
                                    error = (0, _stringify.default)(response.data.data, null, 2);
                                    throw new Error("Something went wrong\n".concat(error));
                                  case 7:
                                    if (!(options.disableTriggers !== true)) {
                                      _context9.next = 13;
                                      break;
                                    }
                                    _context9.next = 10;
                                    return _this2.handleTriggers(response.data.result.triggers, response.data.result.data);
                                  case 10:
                                    triggerReturn = _context9.sent;
                                    if (!triggerReturn) {
                                      _context9.next = 13;
                                      break;
                                    }
                                    return _context9.abrupt("return", triggerReturn);
                                  case 13:
                                    return _context9.abrupt("return", response.data.result);
                                  case 14:
                                  case "end":
                                    return _context9.stop();
                                }
                              }
                            }, _callee7);
                          }));
                          return function() {
                            return _ref.apply(this, arguments);
                          };
                        }();
                      });
                    });
                    this.Plugins = allPlugins;
                  case 12:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee8, this);
          }));
          return function() {
            return _initPlugins.apply(this, arguments);
          };
        }()
      }, {
        key: "handleTriggers",
        value: function() {
          var _handleTriggers = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee9(triggersArray, payload) {
            var _this3 = this;
            var _loop, i, _ret;
            return _regenerator.default.wrap(function(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    if (triggersArray) {
                      _context14.next = 2;
                      break;
                    }
                    return _context14.abrupt("return");
                  case 2:
                    _loop = /* @__PURE__ */ _regenerator.default.mark(function _loop2(i2) {
                      var _triggersArray$i, _triggersArray$i$data, _triggersArray$i2, _triggersArray$i2$dat, _triggersArray$i$data2, _triggersArray$i3, _triggersArray$i3$dat, _triggersArray$i4, _triggersArray$i4$dat, _triggersArray$i5, _triggersArray$i6, _triggersArray$i7, _triggersArray$i8, _triggersArray$i9, _triggersArray$i10, _triggersArray$i11, _triggersArray$i12, _triggersArray$i13, _triggersArray$i14, _triggersArray$i15, _triggersArray$i16, _triggersArray$i17, _triggersArray$i18, _triggersArray$i19, _triggersArray$i21, _triggersArray$i23, _triggersArray$i24, _triggersArray$i25;
                      var _response, _context11, _context12, _triggersArray$i20, _JSON$parse, domain, types, message, signature, result, _JSON$parse2, _domain, _types, _message;
                      return _regenerator.default.wrap(function(_context13) {
                        while (1) {
                          switch (_context13.prev = _context13.next) {
                            case 0:
                              _context13.t0 = triggersArray[i2].name;
                              _context13.next = _context13.t0 === "openUrl" ? 3 : _context13.t0 === "web3Transaction" ? 5 : _context13.t0 === "web3Sign" ? 18 : _context13.t0 === "callPluginEndpoint" ? 35 : _context13.t0 === "web3SignV4" ? 57 : 82;
                              break;
                            case 3:
                              if (triggersArray[i2].newTab)
                                window.open(triggersArray[i2].url);
                              else
                                window.open(triggersArray[i2].url, "_self");
                              return _context13.abrupt("break", 83);
                            case 5:
                              _context13.next = 7;
                              return _this3.getInternalWeb3Provider().signer.sendTransaction({
                                from: (_triggersArray$i = triggersArray[i2]) === null || _triggersArray$i === void 0 ? void 0 : (_triggersArray$i$data = _triggersArray$i.data) === null || _triggersArray$i$data === void 0 ? void 0 : _triggersArray$i$data.from,
                                to: (_triggersArray$i2 = triggersArray[i2]) === null || _triggersArray$i2 === void 0 ? void 0 : (_triggersArray$i2$dat = _triggersArray$i2.data) === null || _triggersArray$i2$dat === void 0 ? void 0 : _triggersArray$i2$dat.to,
                                value: _ethers.ethers.BigNumber.from((_triggersArray$i$data2 = (_triggersArray$i3 = triggersArray[i2]) === null || _triggersArray$i3 === void 0 ? void 0 : (_triggersArray$i3$dat = _triggersArray$i3.data) === null || _triggersArray$i3$dat === void 0 ? void 0 : _triggersArray$i3$dat.value) !== null && _triggersArray$i$data2 !== void 0 ? _triggersArray$i$data2 : 0),
                                data: (_triggersArray$i4 = triggersArray[i2]) === null || _triggersArray$i4 === void 0 ? void 0 : (_triggersArray$i4$dat = _triggersArray$i4.data) === null || _triggersArray$i4$dat === void 0 ? void 0 : _triggersArray$i4$dat.data
                              });
                            case 7:
                              _response = _context13.sent;
                              if (!(((_triggersArray$i5 = triggersArray[i2]) === null || _triggersArray$i5 === void 0 ? void 0 : _triggersArray$i5.shouldAwait) === true)) {
                                _context13.next = 12;
                                break;
                              }
                              _context13.next = 11;
                              return _response.wait();
                            case 11:
                              _response = _context13.sent;
                            case 12:
                              if (((_triggersArray$i6 = triggersArray[i2]) === null || _triggersArray$i6 === void 0 ? void 0 : _triggersArray$i6.saveResponse) === true)
                                _this3.memoryCard.save(_response);
                              if (!(((_triggersArray$i7 = triggersArray[i2]) === null || _triggersArray$i7 === void 0 ? void 0 : _triggersArray$i7.shouldReturnPayload) === true)) {
                                _context13.next = 15;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: {
                                  payload,
                                  response: _response
                                }
                              });
                            case 15:
                              if (!(((_triggersArray$i8 = triggersArray[i2]) === null || _triggersArray$i8 === void 0 ? void 0 : _triggersArray$i8.shouldReturnResponse) === true)) {
                                _context13.next = 17;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: _response
                              });
                            case 17:
                              return _context13.abrupt("break", 83);
                            case 18:
                              if (triggersArray[i2].message) {
                                _context13.next = 20;
                                break;
                              }
                              throw new Error("web3Sign trigger does not have a message to sign");
                            case 20:
                              if (!(!triggersArray[i2].signer || triggersArray[i2].signer)) {
                                _context13.next = 22;
                                break;
                              }
                              throw new Error("web3Sign trigger signer address missing or invalid");
                            case 22:
                              _context13.next = 24;
                              return _this3.getInternalWeb3Provider().signer.signMessage(triggersArray[i2].message);
                            case 24:
                              _response = _context13.sent;
                              if (!((_triggersArray$i9 = triggersArray[i2]) !== null && _triggersArray$i9 !== void 0 && _triggersArray$i9.shouldAwait)) {
                                _context13.next = 29;
                                break;
                              }
                              _context13.next = 28;
                              return _response.wait();
                            case 28:
                              _response = _context13.sent;
                            case 29:
                              if (((_triggersArray$i10 = triggersArray[i2]) === null || _triggersArray$i10 === void 0 ? void 0 : _triggersArray$i10.saveResponse) === true)
                                _this3.memoryCard.save(_response);
                              if (!(((_triggersArray$i11 = triggersArray[i2]) === null || _triggersArray$i11 === void 0 ? void 0 : _triggersArray$i11.shouldReturnPayload) === true)) {
                                _context13.next = 32;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: {
                                  payload,
                                  response: _response
                                }
                              });
                            case 32:
                              if (!(((_triggersArray$i12 = triggersArray[i2]) === null || _triggersArray$i12 === void 0 ? void 0 : _triggersArray$i12.shouldReturnResponse) === true)) {
                                _context13.next = 34;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: _response
                              });
                            case 34:
                              return _context13.abrupt("break", 83);
                            case 35:
                              if (triggersArray[i2].pluginName) {
                                _context13.next = 37;
                                break;
                              }
                              throw new Error("callPluginEndpoint trigger does not have an plugin name to call");
                            case 37:
                              if (triggersArray[i2].endpoint) {
                                _context13.next = 39;
                                break;
                              }
                              throw new Error("callPluginEndpoint trigger does not have an endpoint to call");
                            case 39:
                              if (!(((_triggersArray$i13 = triggersArray[i2]) === null || _triggersArray$i13 === void 0 ? void 0 : _triggersArray$i13.shouldAwait) === true)) {
                                _context13.next = 44;
                                break;
                              }
                              if (triggersArray[i2].useSavedResponse === true) {
                                triggersArray[i2].params[triggersArray[i2].savedResponseAs] = _this3.memoryCard.get(triggersArray[i2].savedResponseAt);
                              }
                              _context13.next = 43;
                              return (0, _Cloud.run)((0, _concat.default)(_context11 = "".concat(triggersArray[i2].pluginName, "_")).call(_context11, triggersArray[i2].endpoint), triggersArray[i2].params);
                            case 43:
                              _response = _context13.sent;
                            case 44:
                              if (((_triggersArray$i14 = triggersArray[i2]) === null || _triggersArray$i14 === void 0 ? void 0 : _triggersArray$i14.shouldAwait) === false) {
                                if (triggersArray[i2].useSavedResponse === true) {
                                  triggersArray[i2].params[triggersArray[i2].savedResponseAs] = _this3.memoryCard.get(triggersArray[i2].savedResponseAt);
                                }
                                _response = (0, _Cloud.run)((0, _concat.default)(_context12 = "".concat(triggersArray[i2].pluginName, "_")).call(_context12, triggersArray[i2].endpoint), triggersArray[i2].params);
                              }
                              if (!(triggersArray[i2].runResponseTrigger === true)) {
                                _context13.next = 49;
                                break;
                              }
                              _context13.next = 48;
                              return _this3.handleTriggers(_response.data.result.triggers, _response.data.result.data);
                            case 48:
                              _response = _context13.sent;
                            case 49:
                              if (((_triggersArray$i15 = triggersArray[i2]) === null || _triggersArray$i15 === void 0 ? void 0 : _triggersArray$i15.saveResponse) === true)
                                _this3.memoryCard.save(_response);
                              if (!(((_triggersArray$i16 = triggersArray[i2]) === null || _triggersArray$i16 === void 0 ? void 0 : _triggersArray$i16.runResponseTrigger) === false)) {
                                _context13.next = 52;
                                break;
                              }
                              return _context13.abrupt("return", "continue");
                            case 52:
                              if (!(((_triggersArray$i17 = triggersArray[i2]) === null || _triggersArray$i17 === void 0 ? void 0 : _triggersArray$i17.shouldReturnPayload) === true)) {
                                _context13.next = 54;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: {
                                  payload: "payload",
                                  response: _response
                                }
                              });
                            case 54:
                              if (!(((_triggersArray$i18 = triggersArray[i2]) === null || _triggersArray$i18 === void 0 ? void 0 : _triggersArray$i18.shouldReturnResponse) === true)) {
                                _context13.next = 56;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: _response
                              });
                            case 56:
                              return _context13.abrupt("break", 83);
                            case 57:
                              if (triggersArray[i2].parameters) {
                                _context13.next = 59;
                                break;
                              }
                              throw new Error("web3SignV4 trigger does not have `parameters` to sign");
                            case 59:
                              if (triggersArray[i2].from) {
                                _context13.next = 61;
                                break;
                              }
                              throw new Error("web3SignV4 trigger does not have a `from` address");
                            case 61:
                              if (!(((_triggersArray$i19 = triggersArray[i2]) === null || _triggersArray$i19 === void 0 ? void 0 : _triggersArray$i19.shouldAwait) === true)) {
                                _context13.next = 76;
                                break;
                              }
                              _context13.prev = 62;
                              _JSON$parse = JSON.parse(triggersArray[i2].parameters[1]), domain = _JSON$parse.domain, types = _JSON$parse.types, message = _JSON$parse.message;
                              if (types.EIP712Domain) {
                                delete types.EIP712Domain;
                              }
                              _context13.next = 67;
                              return _this3.getInternalWeb3Provider().signer._signTypedData(domain, types, message);
                            case 67:
                              signature = _context13.sent;
                              result = {
                                result: signature
                              };
                              if (((_triggersArray$i20 = triggersArray[i2]) === null || _triggersArray$i20 === void 0 ? void 0 : _triggersArray$i20.saveResponse) === true)
                                _this3.memoryCard.save(result);
                              _response = result;
                              _context13.next = 76;
                              break;
                            case 73:
                              _context13.prev = 73;
                              _context13.t1 = _context13["catch"](62);
                              throw new Error(_context13.t1.message || _context13.t1);
                            case 76:
                              if (((_triggersArray$i21 = triggersArray[i2]) === null || _triggersArray$i21 === void 0 ? void 0 : _triggersArray$i21.shouldAwait) === false) {
                                _JSON$parse2 = JSON.parse(triggersArray[i2].parameters[1]), _domain = _JSON$parse2.domain, _types = _JSON$parse2.types, _message = _JSON$parse2.message;
                                if (_types.EIP712Domain) {
                                  delete _types.EIP712Domain;
                                }
                                _this3.getInternalWeb3Provider().signer._signTypedData(_domain, _types, _message).then(function(signature2) {
                                  var _triggersArray$i22;
                                  var result2 = {
                                    result: signature2
                                  };
                                  if (((_triggersArray$i22 = triggersArray[i2]) === null || _triggersArray$i22 === void 0 ? void 0 : _triggersArray$i22.saveResponse) === true)
                                    _this3.memoryCard.save(result2);
                                  _response = result2;
                                }).catch(function(error) {
                                  throw new Error(error.message || error);
                                });
                              }
                              if (!(((_triggersArray$i23 = triggersArray[i2]) === null || _triggersArray$i23 === void 0 ? void 0 : _triggersArray$i23.shouldReturnPayload) === true)) {
                                _context13.next = 79;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: {
                                  payload,
                                  response: _response
                                }
                              });
                            case 79:
                              if (!(((_triggersArray$i24 = triggersArray[i2]) === null || _triggersArray$i24 === void 0 ? void 0 : _triggersArray$i24.shouldReturnResponse) === true)) {
                                _context13.next = 81;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: _response
                              });
                            case 81:
                              return _context13.abrupt("break", 83);
                            case 82:
                              throw new Error('Unknown trigger: "'.concat((_triggersArray$i25 = triggersArray[i2]) === null || _triggersArray$i25 === void 0 ? void 0 : _triggersArray$i25.name, '"'));
                            case 83:
                            case "end":
                              return _context13.stop();
                          }
                        }
                      }, _loop2, null, [[62, 73]]);
                    });
                    i = 0;
                  case 4:
                    if (!(i < triggersArray.length)) {
                      _context14.next = 14;
                      break;
                    }
                    return _context14.delegateYield(_loop(i), "t0", 6);
                  case 6:
                    _ret = _context14.t0;
                    if (!(_ret === "continue")) {
                      _context14.next = 9;
                      break;
                    }
                    return _context14.abrupt("continue", 11);
                  case 9:
                    if (!((0, _typeof2.default)(_ret) === "object")) {
                      _context14.next = 11;
                      break;
                    }
                    return _context14.abrupt("return", _ret.v);
                  case 11:
                    i++;
                    _context14.next = 4;
                    break;
                  case 14:
                    this.memoryCard.deleteSaved();
                  case 15:
                  case "end":
                    return _context14.stop();
                }
              }
            }, _callee9, this);
          }));
          return function() {
            return _handleTriggers.apply(this, arguments);
          };
        }()
      }, {
        key: "getAllERC20",
        value: function() {
          var _getAllERC = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee10() {
            var _ref2, chain, address, result, _args11 = arguments;
            return _regenerator.default.wrap(function(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    _ref2 = _args11.length > 0 && _args11[0] !== void 0 ? _args11[0] : {}, chain = _ref2.chain, address = _ref2.address;
                    _context15.next = 3;
                    return (0, _Cloud.run)("getAllERC20", {
                      chain,
                      address
                    });
                  case 3:
                    result = _context15.sent;
                    return _context15.abrupt("return", result);
                  case 5:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee10);
          }));
          return function() {
            return _getAllERC.apply(this, arguments);
          };
        }()
      }, {
        key: "getERC20",
        value: function() {
          var _getERC = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee11() {
            var _ref3, chain, address, symbol, tokenAddress, result, _args12 = arguments;
            return _regenerator.default.wrap(function(_context16) {
              while (1) {
                switch (_context16.prev = _context16.next) {
                  case 0:
                    _ref3 = _args12.length > 0 && _args12[0] !== void 0 ? _args12[0] : {}, chain = _ref3.chain, address = _ref3.address, symbol = _ref3.symbol, tokenAddress = _ref3.tokenAddress;
                    result = (0, _Cloud.run)("getERC20", {
                      chain,
                      address,
                      symbol,
                      tokenAddress
                    });
                    return _context16.abrupt("return", result);
                  case 3:
                  case "end":
                    return _context16.stop();
                }
              }
            }, _callee11);
          }));
          return function() {
            return _getERC.apply(this, arguments);
          };
        }()
      }, {
        key: "getNFTs",
        value: function() {
          var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref4$chain = _ref4.chain, chain = _ref4$chain === void 0 ? "Eth" : _ref4$chain, _ref4$address = _ref4.address, address = _ref4$address === void 0 ? "" : _ref4$address;
          return (0, _Cloud.run)("getNFTs_old", {
            chain,
            address
          });
        }
      }, {
        key: "getNFTsCount",
        value: function() {
          var _ref5 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref5$chain = _ref5.chain, chain = _ref5$chain === void 0 ? "Eth" : _ref5$chain, _ref5$address = _ref5.address, address = _ref5$address === void 0 ? "" : _ref5$address;
          return (0, _Cloud.run)("getNFTsCount_old", {
            chain,
            address
          });
        }
      }, {
        key: "getTransactions",
        value: function() {
          var _ref6 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref6$chain = _ref6.chain, chain = _ref6$chain === void 0 ? "Eth" : _ref6$chain, _ref6$address = _ref6.address, address = _ref6$address === void 0 ? "" : _ref6$address, _ref6$order = _ref6.order, order = _ref6$order === void 0 ? "desc" : _ref6$order;
          return (0, _Cloud.run)("getTransactions", {
            chain,
            address,
            order
          });
        }
      }, {
        key: "getTransactionsCount",
        value: function() {
          var _ref7 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref7$chain = _ref7.chain, chain = _ref7$chain === void 0 ? "Eth" : _ref7$chain, _ref7$address = _ref7.address, address = _ref7$address === void 0 ? "" : _ref7$address;
          return (0, _Cloud.run)("getTransactionsCount", {
            chain,
            address
          });
        }
      }, {
        key: "transfer",
        value: function() {
          var _transfer = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee12() {
            var _ref8, _ref8$type, type, _ref8$receiver, receiver, _ref8$contractAddress, contractAddress, contract_address, _ref8$amount, amount, _ref8$tokenId, tokenId, token_id, _ref8$system, system, options, _this$getInternalWeb3, internalWeb3, sender, signer, transferOperation, customToken, result, _args13 = arguments;
            return _regenerator.default.wrap(function(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    _ref8 = _args13.length > 0 && _args13[0] !== void 0 ? _args13[0] : {}, _ref8$type = _ref8.type, type = _ref8$type === void 0 ? "native" : _ref8$type, _ref8$receiver = _ref8.receiver, receiver = _ref8$receiver === void 0 ? "" : _ref8$receiver, _ref8$contractAddress = _ref8.contractAddress, contractAddress = _ref8$contractAddress === void 0 ? "" : _ref8$contractAddress, contract_address = _ref8.contract_address, _ref8$amount = _ref8.amount, amount = _ref8$amount === void 0 ? "" : _ref8$amount, _ref8$tokenId = _ref8.tokenId, tokenId = _ref8$tokenId === void 0 ? "" : _ref8$tokenId, token_id = _ref8.token_id, _ref8$system = _ref8.system, system = _ref8$system === void 0 ? "evm" : _ref8$system;
                    contractAddress = contractAddress || contract_address;
                    tokenId = tokenId || token_id;
                    options = {
                      receiver,
                      contractAddress,
                      amount,
                      tokenId,
                      system
                    };
                    _TransferUtils.default.isSupportedType(type);
                    _TransferUtils.default.validateInput(type, options);
                    _this$getInternalWeb3 = this.getInternalWeb3Provider(), internalWeb3 = _this$getInternalWeb3.web3, sender = _this$getInternalWeb3.account, signer = _this$getInternalWeb3.signer;
                    if (sender) {
                      _context17.next = 9;
                      break;
                    }
                    throw new Error("Sender address not found");
                  case 9:
                    if (tokenId)
                      _TransferUtils.default.isUint256(tokenId);
                    if (type !== "native") {
                      customToken = new _ethers.ethers.Contract(contractAddress, _TransferUtils.default.abi[type], signer);
                    }
                    _context17.t0 = type;
                    _context17.next = _context17.t0 === "native" ? 14 : _context17.t0 === "erc20" ? 16 : _context17.t0 === "erc721" ? 18 : _context17.t0 === "erc1155" ? 20 : 22;
                    break;
                  case 14:
                    transferOperation = signer.sendTransaction({
                      to: receiver,
                      value: _ethers.ethers.BigNumber.from(amount)
                    });
                    return _context17.abrupt("break", 23);
                  case 16:
                    transferOperation = customToken.transfer(receiver, amount, {
                      from: sender
                    });
                    return _context17.abrupt("break", 23);
                  case 18:
                    transferOperation = customToken.safeTransferFrom(sender, receiver, "".concat(tokenId), {
                      from: sender
                    });
                    return _context17.abrupt("break", 23);
                  case 20:
                    transferOperation = customToken.safeTransferFrom(sender, receiver, "".concat(tokenId), amount, "0x", {
                      from: sender
                    });
                    return _context17.abrupt("break", 23);
                  case 22:
                    throw new Error('Unknown transfer type: "'.concat(type, '"'));
                  case 23:
                    _context17.next = 25;
                    return transferOperation;
                  case 25:
                    result = _context17.sent;
                    return _context17.abrupt("return", result);
                  case 27:
                  case "end":
                    return _context17.stop();
                }
              }
            }, _callee12, this);
          }));
          return function() {
            return _transfer.apply(this, arguments);
          };
        }()
      }, {
        key: "executeFunction",
        value: function() {
          var _executeFunction = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee13() {
            var _functionData, _context25, _context26;
            var _ref9, contractAddress, abi, functionName, msgValue, _ref9$params, params, _ref9$overrides, overrides, contractOptions, _this$getInternalWeb4, account, internalWeb3, provider, signerOrProvider, overloadedFunction, functionData, _context18, _context19, nameWithoutTopics, topics, functionDataArray, possibleTopics, _functionDataArray, _possibleTopics, stateMutability, isReadFunction, currentAddress, errors, _iterator, _step, input, value, parsedInputs, contract, contractMethod, response, _args14 = arguments;
            return _regenerator.default.wrap(function(_context27) {
              while (1) {
                switch (_context27.prev = _context27.next) {
                  case 0:
                    _ref9 = _args14.length > 0 && _args14[0] !== void 0 ? _args14[0] : {}, contractAddress = _ref9.contractAddress, abi = _ref9.abi, functionName = _ref9.functionName, msgValue = _ref9.msgValue, _ref9$params = _ref9.params, params = _ref9$params === void 0 ? {} : _ref9$params, _ref9$overrides = _ref9.overrides, overrides = _ref9$overrides === void 0 ? {} : _ref9$overrides;
                    contractOptions = {};
                    _this$getInternalWeb4 = this.getInternalWeb3Provider(), account = _this$getInternalWeb4.account, internalWeb3 = _this$getInternalWeb4.web3, provider = _this$getInternalWeb4.provider, signerOrProvider = _this$getInternalWeb4.signerOrProvider;
                    overloadedFunction = functionName.match(/^(.+)\((.*)\)$/);
                    if (!overloadedFunction) {
                      _context27.next = 16;
                      break;
                    }
                    nameWithoutTopics = overloadedFunction[1];
                    topics = (0, _filter.default)(_context18 = (0, _map.default)(_context19 = overloadedFunction[2].split(",")).call(_context19, function(topic) {
                      return (0, _trim.default)(topic).call(topic);
                    })).call(_context18, function(topic) {
                      return !!topic;
                    });
                    functionDataArray = (0, _filter.default)(abi).call(abi, function(x2) {
                      return x2.name === nameWithoutTopics;
                    });
                    if (!(functionDataArray.length === 0)) {
                      _context27.next = 10;
                      break;
                    }
                    throw new Error("Function does not exist in abi");
                  case 10:
                    functionData = (0, _find.default)(functionDataArray).call(functionDataArray, function(data) {
                      var _data$inputs$length, _context20;
                      return ((_data$inputs$length = data === null || data === void 0 ? void 0 : data.inputs.length) !== null && _data$inputs$length !== void 0 ? _data$inputs$length : 0) === topics.length && (0, _every.default)(_context20 = data.inputs).call(_context20, function(input2, index) {
                        return input2.type === topics[index];
                      });
                    });
                    if (functionData) {
                      _context27.next = 14;
                      break;
                    }
                    possibleTopics = (0, _map.default)(functionDataArray).call(functionDataArray, function(data) {
                      var _context21, _context22;
                      return (0, _concat.default)(_context21 = "".concat(data.name, "(")).call(_context21, (0, _map.default)(_context22 = data.inputs).call(_context22, function(input2) {
                        return input2.type;
                      }).join(","), ")");
                    });
                    throw new Error("Function with the provided topic does not exist in abi. Possible funcationNames: ".concat(possibleTopics.join(" ,")));
                  case 14:
                    _context27.next = 23;
                    break;
                  case 16:
                    _functionDataArray = (0, _filter.default)(abi).call(abi, function(x2) {
                      return x2.name === functionName;
                    });
                    if (!(_functionDataArray.length === 0)) {
                      _context27.next = 19;
                      break;
                    }
                    throw new Error("Function does not exist in abi");
                  case 19:
                    if (!(_functionDataArray.length > 1)) {
                      _context27.next = 22;
                      break;
                    }
                    _possibleTopics = (0, _map.default)(_functionDataArray).call(_functionDataArray, function(data) {
                      var _context23, _context24;
                      return (0, _concat.default)(_context23 = "".concat(data.name, "(")).call(_context23, (0, _map.default)(_context24 = data.inputs).call(_context24, function(input2) {
                        return input2.type;
                      }).join(","), ")");
                    });
                    throw new Error("Multiple function definitions found in the abi. Please include the topic in the functionName. Possible funcationNames: ".concat(_possibleTopics.join(" ,")));
                  case 22:
                    functionData = _functionDataArray[0];
                  case 23:
                    stateMutability = (_functionData = functionData) === null || _functionData === void 0 ? void 0 : _functionData.stateMutability;
                    isReadFunction = stateMutability === "view" || stateMutability === "pure";
                    if (isReadFunction) {
                      _context27.next = 31;
                      break;
                    }
                    if (params.from) {
                      _context27.next = 31;
                      break;
                    }
                    currentAddress = account;
                    if (currentAddress) {
                      _context27.next = 30;
                      break;
                    }
                    throw new Error("From address is required");
                  case 30:
                    contractOptions.from = currentAddress;
                  case 31:
                    errors = [];
                    _iterator = _createForOfIteratorHelper(functionData.inputs);
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        input = _step.value;
                        value = params[input.name];
                        if (!value && typeof value !== "number" && typeof value !== "boolean") {
                          errors.push("".concat(input.name, " is required"));
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    if (!(errors.length > 0)) {
                      _context27.next = 36;
                      break;
                    }
                    throw errors;
                  case 36:
                    parsedInputs = (0, _map.default)(_context25 = functionData.inputs).call(_context25, function(x2) {
                      return params[x2.name];
                    });
                    contract = new _ethers.ethers.Contract(contractAddress, abi, signerOrProvider);
                    contractMethod = contract[functionName];
                    if (contractMethod) {
                      _context27.next = 41;
                      break;
                    }
                    throw new Error('Cannot find function "'.concat(functionName, '" on the contract'));
                  case 41:
                    _context27.next = 43;
                    return contractMethod.apply(void 0, (0, _concat.default)(_context26 = (0, _toConsumableArray2.default)((0, _values.default)(parsedInputs))).call(_context26, [msgValue ? {
                      value: _ethers.ethers.BigNumber.from("".concat(msgValue))
                    } : {}]));
                  case 43:
                    response = _context27.sent;
                    return _context27.abrupt("return", response);
                  case 45:
                  case "end":
                    return _context27.stop();
                }
              }
            }, _callee13, this);
          }));
          return function() {
            return _executeFunction.apply(this, arguments);
          };
        }()
      }, {
        key: "getSigningData",
        value: function() {
          return "Moralis Authentication";
        }
      }, {
        key: "ensureWeb3IsInstalled",
        value: function() {
          return this.internalWeb3Provider && this.internalWeb3Provider.web3 ? true : false;
        }
      }, {
        key: "getInternalWeb3Provider",
        value: function() {
          if (!this.ensureWeb3IsInstalled())
            throw new Error(ERROR_WEB3_MISSING);
          return this.internalWeb3Provider;
        }
      }, {
        key: "getInternalWeb3",
        value: function() {
          return this.getInternalWeb3Provider().web3;
        }
      }, {
        key: "provider",
        get: function() {
          var _this$internalWeb3Pro2, _this$internalWeb3Pro3;
          return (_this$internalWeb3Pro2 = (_this$internalWeb3Pro3 = this.internalWeb3Provider) === null || _this$internalWeb3Pro3 === void 0 ? void 0 : _this$internalWeb3Pro3.provider) !== null && _this$internalWeb3Pro2 !== void 0 ? _this$internalWeb3Pro2 : null;
        }
      }, {
        key: "connector",
        get: function() {
          var _this$internalWeb3Pro4, _this$internalWeb3Pro5;
          return (_this$internalWeb3Pro4 = (_this$internalWeb3Pro5 = this.internalWeb3Provider) === null || _this$internalWeb3Pro5 === void 0 ? void 0 : _this$internalWeb3Pro5.connector) !== null && _this$internalWeb3Pro4 !== void 0 ? _this$internalWeb3Pro4 : null;
        }
      }, {
        key: "connectorType",
        get: function() {
          var _this$connector$type, _this$connector;
          return (_this$connector$type = (_this$connector = this.connector) === null || _this$connector === void 0 ? void 0 : _this$connector.type) !== null && _this$connector$type !== void 0 ? _this$connector$type : null;
        }
      }, {
        key: "network",
        get: function() {
          var _this$connector$netwo, _this$connector2;
          return (_this$connector$netwo = (_this$connector2 = this.connector) === null || _this$connector2 === void 0 ? void 0 : _this$connector2.network) !== null && _this$connector$netwo !== void 0 ? _this$connector$netwo : null;
        }
      }, {
        key: "account",
        get: function() {
          var _this$internalWeb3Pro6, _this$internalWeb3Pro7;
          return (_this$internalWeb3Pro6 = (_this$internalWeb3Pro7 = this.internalWeb3Provider) === null || _this$internalWeb3Pro7 === void 0 ? void 0 : _this$internalWeb3Pro7.account) !== null && _this$internalWeb3Pro6 !== void 0 ? _this$internalWeb3Pro6 : null;
        }
      }, {
        key: "chainId",
        get: function() {
          var _this$internalWeb3Pro8, _this$internalWeb3Pro9;
          return (_this$internalWeb3Pro8 = (_this$internalWeb3Pro9 = this.internalWeb3Provider) === null || _this$internalWeb3Pro9 === void 0 ? void 0 : _this$internalWeb3Pro9.chainId) !== null && _this$internalWeb3Pro8 !== void 0 ? _this$internalWeb3Pro8 : null;
        }
      }, {
        key: "getChainId",
        value: function() {
          return this.chainId;
        }
      }, {
        key: "web3Library",
        get: function() {
          return _ethers.ethers;
        }
      }, {
        key: "_forwardToConnector",
        value: function(methodName, args) {
          var _this$getInternalWeb5 = this.getInternalWeb3Provider(), connector = _this$getInternalWeb5.connector;
          var hasMethod = Boolean(connector[methodName]);
          if (!hasMethod) {
            var _context28;
            throw new Error((0, _concat.default)(_context28 = "Cannot call ".concat(methodName, ', as it does not exist on connector type "')).call(_context28, connector.type, '"'));
          }
          return connector[methodName].apply(connector, (0, _toConsumableArray2.default)(args));
        }
      }, {
        key: "switchNetwork",
        value: function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return this._forwardToConnector("switchNetwork", args);
        }
      }, {
        key: "addNetwork",
        value: function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return this._forwardToConnector("addNetwork", args);
        }
      }, {
        key: "isMetaMaskInstalled",
        value: function() {
          var _isMetaMaskInstalled = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee14() {
            return _regenerator.default.wrap(function(_context29) {
              while (1) {
                switch (_context29.prev = _context29.next) {
                  case 0:
                    _context29.next = 2;
                    return (0, _detectProvider.default)();
                  case 2:
                    if (!_context29.sent) {
                      _context29.next = 6;
                      break;
                    }
                    _context29.t0 = true;
                    _context29.next = 7;
                    break;
                  case 6:
                    _context29.t0 = false;
                  case 7:
                    return _context29.abrupt("return", _context29.t0);
                  case 8:
                  case "end":
                    return _context29.stop();
                }
              }
            }, _callee14);
          }));
          return function() {
            return _isMetaMaskInstalled.apply(this, arguments);
          };
        }()
      }]);
      return MoralisWeb32;
    }();
    (0, _defineProperty2.default)(MoralisWeb3, "speedyNodeApiKey", void 0);
    (0, _defineProperty2.default)(MoralisWeb3, "web3", null);
    (0, _defineProperty2.default)(MoralisWeb3, "internalWeb3Provider", null);
    (0, _defineProperty2.default)(MoralisWeb3, "Plugins", {});
    (0, _defineProperty2.default)(MoralisWeb3, "isEnablingWeb3", false);
    (0, _defineProperty2.default)(MoralisWeb3, "memoryCard", {
      save: function(what) {
        this.saved = what;
      },
      get: function(where) {
        if (!this.saved)
          throw new Error("Nothing saved to memory card");
        if (where.length === 0)
          return this.getSaved();
        var tmp;
        var savedTmp = this.saved;
        for (var i = 0; i < where.length; i++) {
          tmp = savedTmp[where[i]];
          savedTmp = tmp;
        }
        return savedTmp;
      },
      getSaved: function() {
        return this.saved;
      },
      deleteSaved: function() {
        this.saved = void 0;
      }
    });
    MoralisWeb3.onConnect = (0, _bind.default)(_context30 = MoralisWeb3.on).call(_context30, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.PROVIDER_CONNECT);
    MoralisWeb3.onDisconnect = (0, _bind.default)(_context31 = MoralisWeb3.on).call(_context31, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.PROVIDER_DISCONNECT);
    MoralisWeb3.onWeb3Enabled = (0, _bind.default)(_context32 = MoralisWeb3.on).call(_context32, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.WEB3_ENABLED);
    MoralisWeb3.onWeb3Deactivated = (0, _bind.default)(_context33 = MoralisWeb3.on).call(_context33, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.WEB3_DEACTIVATED);
    MoralisWeb3.onChainChanged = (0, _bind.default)(_context34 = MoralisWeb3.on).call(_context34, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.CHAIN_CHANGED);
    MoralisWeb3.onAccountChanged = (0, _bind.default)(_context35 = MoralisWeb3.on).call(_context35, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.ACCOUNT_CHANGED);
    var _default = MoralisWeb3;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/StorageController.browser.js
var require_StorageController_browser = __commonJS({
  "node_modules/moralis/lib/browser/StorageController.browser.js"(exports, module) {
    "use strict";
    init_react();
    var StorageController = {
      async: 0,
      getItem: function(path) {
        return localStorage.getItem(path);
      },
      setItem: function(path, value) {
        try {
          localStorage.setItem(path, value);
        } catch (e) {
          console.log(e.message);
        }
      },
      removeItem: function(path) {
        localStorage.removeItem(path);
      },
      getAllKeys: function() {
        var keys = [];
        for (var i = 0; i < localStorage.length; i += 1) {
          keys.push(localStorage.key(i));
        }
        return keys;
      },
      clear: function() {
        localStorage.clear();
      }
    };
    module.exports = StorageController;
  }
});

// node_modules/moralis/lib/browser/Storage.js
var require_Storage = __commonJS({
  "node_modules/moralis/lib/browser/Storage.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _promise = _interopRequireDefault(require_promise3());
    var _concat = _interopRequireDefault(require_concat4());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var Storage = {
      async: function() {
        var controller = _CoreManager.default.getStorageController();
        return !!controller.async;
      },
      getItem: function(path) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          throw new Error("Synchronous storage is not supported by the current storage controller");
        }
        return controller.getItem(path);
      },
      getItemAsync: function(path) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          return controller.getItemAsync(path);
        }
        return _promise.default.resolve(controller.getItem(path));
      },
      setItem: function(path, value) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          throw new Error("Synchronous storage is not supported by the current storage controller");
        }
        return controller.setItem(path, value);
      },
      setItemAsync: function(path, value) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          return controller.setItemAsync(path, value);
        }
        return _promise.default.resolve(controller.setItem(path, value));
      },
      removeItem: function(path) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          throw new Error("Synchronous storage is not supported by the current storage controller");
        }
        return controller.removeItem(path);
      },
      removeItemAsync: function(path) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          return controller.removeItemAsync(path);
        }
        return _promise.default.resolve(controller.removeItem(path));
      },
      getAllKeys: function() {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          throw new Error("Synchronous storage is not supported by the current storage controller");
        }
        return controller.getAllKeys();
      },
      getAllKeysAsync: function() {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          return controller.getAllKeysAsync();
        }
        return _promise.default.resolve(controller.getAllKeys());
      },
      generatePath: function(path) {
        var _context;
        if (!_CoreManager.default.get("APPLICATION_ID")) {
          throw new Error("You need to call Moralis.start with an applicationId before using Moralis.");
        }
        if (typeof path !== "string") {
          throw new Error("Tried to get a Storage path that was not a String.");
        }
        if (path[0] === "/") {
          path = path.substr(1);
        }
        return (0, _concat.default)(_context = "Parse/".concat(_CoreManager.default.get("APPLICATION_ID"), "/")).call(_context, path);
      },
      _clear: function() {
        var controller = _CoreManager.default.getStorageController();
        if (controller.hasOwnProperty("clear")) {
          controller.clear();
        }
      }
    };
    module.exports = Storage;
    _CoreManager.default.setStorageController(require_StorageController_browser());
  }
});

// node_modules/moralis/lib/browser/ParseUser.js
var require_ParseUser = __commonJS({
  "node_modules/moralis/lib/browser/ParseUser.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty2 = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty2(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _promise = _interopRequireDefault(require_promise3());
    var _defineProperty2 = _interopRequireDefault(require_define_property3());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _get2 = _interopRequireDefault(require_get6());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _AnonymousUtils = _interopRequireDefault(require_AnonymousUtils());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _isRevocableSession = _interopRequireDefault(require_isRevocableSession());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseObject2 = _interopRequireDefault(require_ParseObject());
    var _ParseSession = _interopRequireDefault(require_ParseSession());
    var _MoralisWeb = _interopRequireDefault(require_MoralisWeb3());
    var _Storage = _interopRequireDefault(require_Storage());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var CURRENT_USER_KEY = "currentUser";
    var canUseCurrentUser = !_CoreManager.default.get("IS_NODE");
    var currentUserCacheMatchesDisk = false;
    var currentUserCache = null;
    var authProviders = {};
    var ParseUser = /* @__PURE__ */ function(_ParseObject) {
      (0, _inherits2.default)(ParseUser2, _ParseObject);
      var _super = _createSuper(ParseUser2);
      function ParseUser2(attributes) {
        var _this;
        (0, _classCallCheck2.default)(this, ParseUser2);
        _this = _super.call(this, "_User");
        if (attributes && (0, _typeof2.default)(attributes) === "object") {
          if (!_this.set(attributes || {})) {
            throw new Error("Can't create an invalid Parse User");
          }
        }
        return _this;
      }
      (0, _createClass2.default)(ParseUser2, [{
        key: "_upgradeToRevocableSession",
        value: function(options) {
          options = options || {};
          var upgradeOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            upgradeOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.upgradeToRevocableSession(this, upgradeOptions);
        }
      }, {
        key: "linkWith",
        value: function(provider, options) {
          var _this2 = this;
          var saveOpts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || "";
          var authType;
          if (typeof provider === "string") {
            authType = provider;
            if (authProviders[provider]) {
              provider = authProviders[provider];
            } else {
              var authProvider = {
                restoreAuthentication: function() {
                  return true;
                },
                getAuthType: function() {
                  return authType;
                }
              };
              authProviders[authProvider.getAuthType()] = authProvider;
              provider = authProvider;
            }
          } else {
            authType = provider.getAuthType();
          }
          if (options && options.hasOwnProperty("authData")) {
            var authData = this.get("authData") || {};
            if ((0, _typeof2.default)(authData) !== "object") {
              throw new Error("Invalid type: authData field should be an object");
            }
            authData[authType] = options.authData;
            var controller = _CoreManager.default.getUserController();
            return controller.linkWith(this, authData, saveOpts);
          }
          return new _promise.default(function(resolve, reject) {
            provider.authenticate({
              success: function(provider2, result) {
                var opts = {};
                opts.authData = result;
                _this2.linkWith(provider2, opts, saveOpts).then(function() {
                  resolve(_this2);
                }, function(error) {
                  reject(error);
                });
              },
              error: function(provider2, _error) {
                reject(_error);
              }
            });
          });
        }
      }, {
        key: "_linkWith",
        value: function(provider, options) {
          var saveOpts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          return this.linkWith(provider, options, saveOpts);
        }
      }, {
        key: "_synchronizeAuthData",
        value: function(provider) {
          if (!this.isCurrent() || !provider) {
            return;
          }
          var authType;
          if (typeof provider === "string") {
            authType = provider;
            provider = authProviders[authType];
          } else {
            authType = provider.getAuthType();
          }
          var authData = this.get("authData");
          if (!provider || !authData || (0, _typeof2.default)(authData) !== "object") {
            return;
          }
          var success = provider.restoreAuthentication(authData[authType]);
          if (!success) {
            this._unlinkFrom(provider);
          }
        }
      }, {
        key: "_synchronizeAllAuthData",
        value: function() {
          var authData = this.get("authData");
          if ((0, _typeof2.default)(authData) !== "object") {
            return;
          }
          for (var _key in authData) {
            this._synchronizeAuthData(_key);
          }
        }
      }, {
        key: "_cleanupAuthData",
        value: function() {
          if (!this.isCurrent()) {
            return;
          }
          var authData = this.get("authData");
          if ((0, _typeof2.default)(authData) !== "object") {
            return;
          }
          for (var _key2 in authData) {
            if (!authData[_key2]) {
              delete authData[_key2];
            }
          }
        }
      }, {
        key: "_unlinkFrom",
        value: function(provider, options) {
          var _this3 = this;
          return this.linkWith(provider, {
            authData: null
          }, options).then(function() {
            _this3._synchronizeAuthData(provider);
            return _promise.default.resolve(_this3);
          });
        }
      }, {
        key: "_isLinked",
        value: function(provider) {
          var authType;
          if (typeof provider === "string") {
            authType = provider;
          } else {
            authType = provider.getAuthType();
          }
          var authData = this.get("authData") || {};
          if ((0, _typeof2.default)(authData) !== "object") {
            return false;
          }
          return !!authData[authType];
        }
      }, {
        key: "_logOutWithAll",
        value: function() {
          var authData = this.get("authData");
          if ((0, _typeof2.default)(authData) !== "object") {
            return;
          }
          for (var _key3 in authData) {
            this._logOutWith(_key3);
          }
        }
      }, {
        key: "_logOutWith",
        value: function(provider) {
          if (!this.isCurrent()) {
            return;
          }
          if (typeof provider === "string") {
            provider = authProviders[provider];
          }
          if (provider && provider.deauthenticate) {
            provider.deauthenticate();
          }
        }
      }, {
        key: "_preserveFieldsOnFetch",
        value: function() {
          return {
            sessionToken: this.get("sessionToken")
          };
        }
      }, {
        key: "isCurrent",
        value: function() {
          var current = ParseUser2.current();
          return !!current && current.id === this.id;
        }
      }, {
        key: "getUsername",
        value: function() {
          var username = this.get("username");
          if (username == null || typeof username === "string") {
            return username;
          }
          return "";
        }
      }, {
        key: "setUsername",
        value: function(username) {
          var authData = this.get("authData");
          if (authData && (0, _typeof2.default)(authData) === "object" && authData.hasOwnProperty("anonymous")) {
            authData.anonymous = null;
          }
          this.set("username", username);
        }
      }, {
        key: "setPassword",
        value: function(password) {
          this.set("password", password);
        }
      }, {
        key: "getEmail",
        value: function() {
          var email = this.get("email");
          if (email == null || typeof email === "string") {
            return email;
          }
          return "";
        }
      }, {
        key: "setEmail",
        value: function(email) {
          return this.set("email", email);
        }
      }, {
        key: "getSessionToken",
        value: function() {
          var token2 = this.get("sessionToken");
          if (token2 == null || typeof token2 === "string") {
            return token2;
          }
          return "";
        }
      }, {
        key: "authenticated",
        value: function() {
          var current = ParseUser2.current();
          return !!this.get("sessionToken") && !!current && current.id === this.id;
        }
      }, {
        key: "signUp",
        value: function(attrs, options) {
          options = options || {};
          var signupOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            signupOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("installationId")) {
            signupOptions.installationId = options.installationId;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.signUp(this, attrs, signupOptions);
        }
      }, {
        key: "logIn",
        value: function(options) {
          options = options || {};
          var loginOptions = {
            usePost: true
          };
          if (options.hasOwnProperty("useMasterKey")) {
            loginOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("installationId")) {
            loginOptions.installationId = options.installationId;
          }
          if (options.hasOwnProperty("usePost")) {
            loginOptions.usePost = options.usePost;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.logIn(this, loginOptions);
        }
      }, {
        key: "save",
        value: function() {
          var _this4 = this;
          for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {
            args[_key4] = arguments[_key4];
          }
          return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser2.prototype), "save", this).apply(this, args).then(function() {
            if (_this4.isCurrent()) {
              return _CoreManager.default.getUserController().updateUserOnDisk(_this4);
            }
            return _this4;
          });
        }
      }, {
        key: "destroy",
        value: function() {
          var _this5 = this;
          for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {
            args[_key5] = arguments[_key5];
          }
          return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser2.prototype), "destroy", this).apply(this, args).then(function() {
            if (_this5.isCurrent()) {
              return _CoreManager.default.getUserController().removeUserFromDisk();
            }
            return _this5;
          });
        }
      }, {
        key: "fetch",
        value: function() {
          var _this6 = this;
          for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {
            args[_key6] = arguments[_key6];
          }
          return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser2.prototype), "fetch", this).apply(this, args).then(function() {
            if (_this6.isCurrent()) {
              return _CoreManager.default.getUserController().updateUserOnDisk(_this6);
            }
            return _this6;
          });
        }
      }, {
        key: "fetchWithInclude",
        value: function() {
          var _this7 = this;
          for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {
            args[_key7] = arguments[_key7];
          }
          return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser2.prototype), "fetchWithInclude", this).apply(this, args).then(function() {
            if (_this7.isCurrent()) {
              return _CoreManager.default.getUserController().updateUserOnDisk(_this7);
            }
            return _this7;
          });
        }
      }, {
        key: "verifyPassword",
        value: function(password, options) {
          var username = this.getUsername() || "";
          return ParseUser2.verifyPassword(username, password, options);
        }
      }], [{
        key: "readOnlyAttributes",
        value: function() {
          return ["sessionToken"];
        }
      }, {
        key: "extend",
        value: function(protoProps, classProps) {
          if (protoProps) {
            for (var _prop in protoProps) {
              if (_prop !== "className") {
                (0, _defineProperty2.default)(ParseUser2.prototype, _prop, {
                  value: protoProps[_prop],
                  enumerable: false,
                  writable: true,
                  configurable: true
                });
              }
            }
          }
          if (classProps) {
            for (var _prop2 in classProps) {
              if (_prop2 !== "className") {
                (0, _defineProperty2.default)(ParseUser2, _prop2, {
                  value: classProps[_prop2],
                  enumerable: false,
                  writable: true,
                  configurable: true
                });
              }
            }
          }
          return ParseUser2;
        }
      }, {
        key: "current",
        value: function() {
          if (!canUseCurrentUser) {
            return null;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.currentUser();
        }
      }, {
        key: "currentAsync",
        value: function() {
          if (!canUseCurrentUser) {
            return _promise.default.resolve(null);
          }
          var controller = _CoreManager.default.getUserController();
          return controller.currentUserAsync();
        }
      }, {
        key: "signUp",
        value: function(username, password, attrs, options) {
          attrs = attrs || {};
          attrs.username = username;
          attrs.password = password;
          var user = new this(attrs);
          return user.signUp({}, options);
        }
      }, {
        key: "logIn",
        value: function(username, password, options) {
          if (typeof username !== "string") {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Username must be a string."));
          }
          if (typeof password !== "string") {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Password must be a string."));
          }
          var user = new this();
          user._finishFetch({
            username,
            password
          });
          return user.logIn(options);
        }
      }, {
        key: "loginOrSignup",
        value: function(username, password) {
          var _this8 = this;
          return this.logIn(username, password).catch(function(err) {
            if (err.code === 101) {
              var newUser = new _this8();
              newUser.set("username", username);
              newUser.set("password", password);
              return newUser.signUp();
            }
            throw err;
          });
        }
      }, {
        key: "become",
        value: function(sessionToken, options) {
          if (!canUseCurrentUser) {
            throw new Error("It is not memory-safe to become a user in a server environment");
          }
          options = options || {};
          var becomeOptions = {
            sessionToken
          };
          if (options.hasOwnProperty("useMasterKey")) {
            becomeOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          var user = new this();
          return controller.become(user, becomeOptions);
        }
      }, {
        key: "me",
        value: function(sessionToken) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var controller = _CoreManager.default.getUserController();
          var meOptions = {
            sessionToken
          };
          if (options.useMasterKey) {
            meOptions.useMasterKey = options.useMasterKey;
          }
          var user = new this();
          return controller.me(user, meOptions);
        }
      }, {
        key: "hydrate",
        value: function(userJSON) {
          var controller = _CoreManager.default.getUserController();
          var user = new this();
          return controller.hydrate(user, userJSON);
        }
      }, {
        key: "logInWith",
        value: function(provider, options, saveOpts) {
          var user = new this();
          return user.linkWith(provider, options, saveOpts);
        }
      }, {
        key: "logOut",
        value: function() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var controller = _CoreManager.default.getUserController();
          return controller.logOut(options);
        }
      }, {
        key: "requestPasswordReset",
        value: function(email, options) {
          options = options || {};
          var requestOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            requestOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.requestPasswordReset(email, requestOptions);
        }
      }, {
        key: "requestEmailVerification",
        value: function(email, options) {
          options = options || {};
          var requestOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            requestOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.requestEmailVerification(email, requestOptions);
        }
      }, {
        key: "verifyPassword",
        value: function(username, password, options) {
          if (typeof username !== "string") {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Username must be a string."));
          }
          if (typeof password !== "string") {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Password must be a string."));
          }
          options = options || {};
          var verificationOption = {};
          if (options.hasOwnProperty("useMasterKey")) {
            verificationOption.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.verifyPassword(username, password, verificationOption);
        }
      }, {
        key: "allowCustomUserClass",
        value: function(isAllowed) {
          _CoreManager.default.set("PERFORM_USER_REWRITE", !isAllowed);
        }
      }, {
        key: "enableRevocableSession",
        value: function(options) {
          options = options || {};
          _CoreManager.default.set("FORCE_REVOCABLE_SESSION", true);
          if (canUseCurrentUser) {
            var current = ParseUser2.current();
            if (current) {
              return current._upgradeToRevocableSession(options);
            }
          }
          return _promise.default.resolve();
        }
      }, {
        key: "enableUnsafeCurrentUser",
        value: function() {
          canUseCurrentUser = true;
        }
      }, {
        key: "disableUnsafeCurrentUser",
        value: function() {
          canUseCurrentUser = false;
        }
      }, {
        key: "_registerAuthenticationProvider",
        value: function(provider) {
          authProviders[provider.getAuthType()] = provider;
          ParseUser2.currentAsync().then(function(current) {
            if (current) {
              current._synchronizeAuthData(provider.getAuthType());
            }
          });
        }
      }, {
        key: "_logInWith",
        value: function(provider, options, saveOpts) {
          var user = new this();
          return user.linkWith(provider, options, saveOpts);
        }
      }, {
        key: "_clearCache",
        value: function() {
          currentUserCache = null;
          currentUserCacheMatchesDisk = false;
        }
      }, {
        key: "_setCurrentUserCache",
        value: function(user) {
          currentUserCache = user;
        }
      }]);
      return ParseUser2;
    }(_ParseObject2.default);
    _ParseObject2.default.registerSubclass("_User", ParseUser);
    var DefaultController = {
      updateUserOnDisk: function(user) {
        var path = _Storage.default.generatePath(CURRENT_USER_KEY);
        var json = user.toJSON();
        delete json.password;
        json.className = "_User";
        var userData = (0, _stringify.default)(json);
        if (_CoreManager.default.get("ENCRYPTED_USER")) {
          var crypto2 = _CoreManager.default.getCryptoController();
          userData = crypto2.encrypt(json, _CoreManager.default.get("ENCRYPTED_KEY"));
        }
        return _Storage.default.setItemAsync(path, userData).then(function() {
          return user;
        });
      },
      removeUserFromDisk: function() {
        var path = _Storage.default.generatePath(CURRENT_USER_KEY);
        currentUserCacheMatchesDisk = true;
        currentUserCache = null;
        return _Storage.default.removeItemAsync(path);
      },
      setCurrentUser: function(user) {
        var _this9 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
          var currentUser;
          return _regenerator.default.wrap(function(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _this9.currentUserAsync();
                case 2:
                  currentUser = _context.sent;
                  if (!(currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser))) {
                    _context.next = 6;
                    break;
                  }
                  _context.next = 6;
                  return currentUser.destroy({
                    sessionToken: currentUser.getSessionToken()
                  });
                case 6:
                  currentUserCache = user;
                  user._cleanupAuthData();
                  user._synchronizeAllAuthData();
                  return _context.abrupt("return", DefaultController.updateUserOnDisk(user));
                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      currentUser: function() {
        if (currentUserCache) {
          return currentUserCache;
        }
        if (currentUserCacheMatchesDisk) {
          return null;
        }
        if (_Storage.default.async()) {
          throw new Error("Cannot call currentUser() when using a platform with an async storage system. Call currentUserAsync() instead.");
        }
        var path = _Storage.default.generatePath(CURRENT_USER_KEY);
        var userData = _Storage.default.getItem(path);
        currentUserCacheMatchesDisk = true;
        if (!userData) {
          currentUserCache = null;
          return null;
        }
        if (_CoreManager.default.get("ENCRYPTED_USER")) {
          var crypto2 = _CoreManager.default.getCryptoController();
          userData = crypto2.decrypt(userData, _CoreManager.default.get("ENCRYPTED_KEY"));
        }
        userData = JSON.parse(userData);
        if (!userData.className) {
          userData.className = "_User";
        }
        if (userData._id) {
          if (userData.objectId !== userData._id) {
            userData.objectId = userData._id;
          }
          delete userData._id;
        }
        if (userData._sessionToken) {
          userData.sessionToken = userData._sessionToken;
          delete userData._sessionToken;
        }
        var current = _ParseObject2.default.fromJSON(userData);
        currentUserCache = current;
        current._synchronizeAllAuthData();
        return current;
      },
      currentUserAsync: function() {
        if (currentUserCache) {
          return _promise.default.resolve(currentUserCache);
        }
        if (currentUserCacheMatchesDisk) {
          return _promise.default.resolve(null);
        }
        var path = _Storage.default.generatePath(CURRENT_USER_KEY);
        return _Storage.default.getItemAsync(path).then(function(userData) {
          currentUserCacheMatchesDisk = true;
          if (!userData) {
            currentUserCache = null;
            return _promise.default.resolve(null);
          }
          if (_CoreManager.default.get("ENCRYPTED_USER")) {
            var crypto2 = _CoreManager.default.getCryptoController();
            userData = crypto2.decrypt(userData.toString(), _CoreManager.default.get("ENCRYPTED_KEY"));
          }
          userData = JSON.parse(userData);
          if (!userData.className) {
            userData.className = "_User";
          }
          if (userData._id) {
            if (userData.objectId !== userData._id) {
              userData.objectId = userData._id;
            }
            delete userData._id;
          }
          if (userData._sessionToken) {
            userData.sessionToken = userData._sessionToken;
            delete userData._sessionToken;
          }
          var current = _ParseObject2.default.fromJSON(userData);
          currentUserCache = current;
          current._synchronizeAllAuthData();
          return _promise.default.resolve(current);
        });
      },
      signUp: function(user, attrs, options) {
        var username = attrs && attrs.username || user.get("username");
        var password = attrs && attrs.password || user.get("password");
        if (!username || !username.length) {
          return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Cannot sign up user with an empty username."));
        }
        if (!password || !password.length) {
          return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Cannot sign up user with an empty password."));
        }
        return user.save(attrs, options).then(function() {
          user._finishFetch({
            password: void 0
          });
          if (canUseCurrentUser) {
            return DefaultController.setCurrentUser(user);
          }
          return user;
        });
      },
      logIn: function(user, options) {
        var RESTController = _CoreManager.default.getRESTController();
        var stateController = _CoreManager.default.getObjectStateController();
        var auth = {
          username: user.get("username"),
          password: user.get("password")
        };
        return RESTController.request(options.usePost ? "POST" : "GET", "login", auth, options).then(function(response) {
          user._migrateId(response.objectId);
          user._setExisted(true);
          stateController.setPendingOp(user._getStateIdentifier(), "username", void 0);
          stateController.setPendingOp(user._getStateIdentifier(), "password", void 0);
          response.password = void 0;
          user._finishFetch(response);
          if (!canUseCurrentUser) {
            return _promise.default.resolve(user);
          }
          return DefaultController.setCurrentUser(user);
        });
      },
      become: function(user, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "users/me", {}, options).then(function(response) {
          user._finishFetch(response);
          user._setExisted(true);
          return DefaultController.setCurrentUser(user);
        });
      },
      hydrate: function(user, userJSON) {
        user._finishFetch(userJSON);
        user._setExisted(true);
        if (userJSON.sessionToken && canUseCurrentUser) {
          return DefaultController.setCurrentUser(user);
        }
        return _promise.default.resolve(user);
      },
      me: function(user, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "users/me", {}, options).then(function(response) {
          user._finishFetch(response);
          user._setExisted(true);
          return user;
        });
      },
      logOut: function(options) {
        var Moralis = require_Parse();
        Moralis.cleanup();
        var RESTController = _CoreManager.default.getRESTController();
        if (options.sessionToken) {
          return RESTController.request("POST", "logout", {}, options);
        }
        return DefaultController.currentUserAsync().then(function(currentUser) {
          var path = _Storage.default.generatePath(CURRENT_USER_KEY);
          var promise = _Storage.default.removeItemAsync(path);
          if (currentUser !== null) {
            var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);
            var currentSession = currentUser.getSessionToken();
            if (currentSession && (0, _isRevocableSession.default)(currentSession)) {
              promise = promise.then(function() {
                if (isAnonymous) {
                  return currentUser.destroy({
                    sessionToken: currentSession
                  });
                }
              }).then(function() {
                return RESTController.request("POST", "logout", {}, {
                  sessionToken: currentSession
                });
              });
            }
            currentUser._logOutWithAll();
            currentUser._finishFetch({
              sessionToken: void 0
            });
            currentUser._clearServerData();
          }
          currentUserCacheMatchesDisk = true;
          currentUserCache = null;
          return promise;
        });
      },
      requestPasswordReset: function(email, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("POST", "requestPasswordReset", {
          email
        }, options);
      },
      upgradeToRevocableSession: function(user, options) {
        var token2 = user.getSessionToken();
        if (!token2) {
          return _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, "Cannot upgrade a user with no session token"));
        }
        options.sessionToken = token2;
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("POST", "upgradeToRevocableSession", {}, options).then(function(result) {
          var session = new _ParseSession.default();
          session._finishFetch(result);
          user._finishFetch({
            sessionToken: session.getSessionToken()
          });
          if (user.isCurrent()) {
            return DefaultController.setCurrentUser(user);
          }
          return _promise.default.resolve(user);
        });
      },
      linkWith: function(user, authData, options) {
        return user.save({
          authData
        }, options).then(function() {
          if (canUseCurrentUser) {
            return DefaultController.setCurrentUser(user);
          }
          return user;
        });
      },
      verifyPassword: function(username, password, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "verifyPassword", {
          username,
          password
        }, options);
      },
      requestEmailVerification: function(email, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("POST", "verificationEmailRequest", {
          email
        }, options);
      }
    };
    _CoreManager.default.setUserController(DefaultController);
    var _default = ParseUser;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseACL.js
var require_ParseACL = __commonJS({
  "node_modules/moralis/lib/browser/ParseACL.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _keys = _interopRequireDefault(require_keys3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ParseRole = _interopRequireDefault(require_ParseRole());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var PUBLIC_KEY = "*";
    var ParseACL = /* @__PURE__ */ function() {
      function ParseACL2(arg1) {
        (0, _classCallCheck2.default)(this, ParseACL2);
        (0, _defineProperty2.default)(this, "permissionsById", void 0);
        this.permissionsById = {};
        if (arg1 && (0, _typeof2.default)(arg1) === "object") {
          if (arg1 instanceof _ParseUser.default) {
            this.setReadAccess(arg1, true);
            this.setWriteAccess(arg1, true);
          } else {
            for (var _userId in arg1) {
              var accessList = arg1[_userId];
              this.permissionsById[_userId] = {};
              for (var _permission in accessList) {
                var allowed = accessList[_permission];
                if (_permission !== "read" && _permission !== "write") {
                  throw new TypeError("Tried to create an ACL with an invalid permission type.");
                }
                if (typeof allowed !== "boolean") {
                  throw new TypeError("Tried to create an ACL with an invalid permission value.");
                }
                this.permissionsById[_userId][_permission] = allowed;
              }
            }
          }
        } else if (typeof arg1 === "function") {
          throw new TypeError("ParseACL constructed with a function. Did you forget ()?");
        }
      }
      (0, _createClass2.default)(ParseACL2, [{
        key: "toJSON",
        value: function() {
          var permissions = {};
          for (var p2 in this.permissionsById) {
            permissions[p2] = this.permissionsById[p2];
          }
          return permissions;
        }
      }, {
        key: "equals",
        value: function(other) {
          if (!(other instanceof ParseACL2)) {
            return false;
          }
          var users = (0, _keys.default)(this.permissionsById);
          var otherUsers = (0, _keys.default)(other.permissionsById);
          if (users.length !== otherUsers.length) {
            return false;
          }
          for (var u2 in this.permissionsById) {
            if (!other.permissionsById[u2]) {
              return false;
            }
            if (this.permissionsById[u2].read !== other.permissionsById[u2].read) {
              return false;
            }
            if (this.permissionsById[u2].write !== other.permissionsById[u2].write) {
              return false;
            }
          }
          return true;
        }
      }, {
        key: "_setAccess",
        value: function(accessType, userId, allowed) {
          if (userId instanceof _ParseUser.default) {
            userId = userId.id;
          } else if (userId instanceof _ParseRole.default) {
            var name2 = userId.getName();
            if (!name2) {
              throw new TypeError("Role must have a name");
            }
            userId = "role:".concat(name2);
          }
          if (typeof userId !== "string") {
            throw new TypeError("userId must be a string.");
          }
          if (typeof allowed !== "boolean") {
            throw new TypeError("allowed must be either true or false.");
          }
          var permissions = this.permissionsById[userId];
          if (!permissions) {
            if (!allowed) {
              return;
            }
            permissions = {};
            this.permissionsById[userId] = permissions;
          }
          if (allowed) {
            this.permissionsById[userId][accessType] = true;
          } else {
            delete permissions[accessType];
            if ((0, _keys.default)(permissions).length === 0) {
              delete this.permissionsById[userId];
            }
          }
        }
      }, {
        key: "_getAccess",
        value: function(accessType, userId) {
          if (userId instanceof _ParseUser.default) {
            userId = userId.id;
            if (!userId) {
              throw new Error("Cannot get access for a ParseUser without an ID");
            }
          } else if (userId instanceof _ParseRole.default) {
            var name2 = userId.getName();
            if (!name2) {
              throw new TypeError("Role must have a name");
            }
            userId = "role:".concat(name2);
          }
          var permissions = this.permissionsById[userId];
          if (!permissions) {
            return false;
          }
          return !!permissions[accessType];
        }
      }, {
        key: "setReadAccess",
        value: function(userId, allowed) {
          this._setAccess("read", userId, allowed);
        }
      }, {
        key: "getReadAccess",
        value: function(userId) {
          return this._getAccess("read", userId);
        }
      }, {
        key: "setWriteAccess",
        value: function(userId, allowed) {
          this._setAccess("write", userId, allowed);
        }
      }, {
        key: "getWriteAccess",
        value: function(userId) {
          return this._getAccess("write", userId);
        }
      }, {
        key: "setPublicReadAccess",
        value: function(allowed) {
          this.setReadAccess(PUBLIC_KEY, allowed);
        }
      }, {
        key: "getPublicReadAccess",
        value: function() {
          return this.getReadAccess(PUBLIC_KEY);
        }
      }, {
        key: "setPublicWriteAccess",
        value: function(allowed) {
          this.setWriteAccess(PUBLIC_KEY, allowed);
        }
      }, {
        key: "getPublicWriteAccess",
        value: function() {
          return this.getWriteAccess(PUBLIC_KEY);
        }
      }, {
        key: "getRoleReadAccess",
        value: function(role) {
          if (role instanceof _ParseRole.default) {
            role = role.getName();
          }
          if (typeof role !== "string") {
            throw new TypeError("role must be a ParseRole or a String");
          }
          return this.getReadAccess("role:".concat(role));
        }
      }, {
        key: "getRoleWriteAccess",
        value: function(role) {
          if (role instanceof _ParseRole.default) {
            role = role.getName();
          }
          if (typeof role !== "string") {
            throw new TypeError("role must be a ParseRole or a String");
          }
          return this.getWriteAccess("role:".concat(role));
        }
      }, {
        key: "setRoleReadAccess",
        value: function(role, allowed) {
          if (role instanceof _ParseRole.default) {
            role = role.getName();
          }
          if (typeof role !== "string") {
            throw new TypeError("role must be a ParseRole or a String");
          }
          this.setReadAccess("role:".concat(role), allowed);
        }
      }, {
        key: "setRoleWriteAccess",
        value: function(role, allowed) {
          if (role instanceof _ParseRole.default) {
            role = role.getName();
          }
          if (typeof role !== "string") {
            throw new TypeError("role must be a ParseRole or a String");
          }
          this.setWriteAccess("role:".concat(role), allowed);
        }
      }]);
      return ParseACL2;
    }();
    var _default = ParseACL;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/decode.js
var require_decode = __commonJS({
  "node_modules/moralis/lib/browser/decode.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = decode2;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var _ParsePolygon = _interopRequireDefault(require_ParsePolygon());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseOp = require_ParseOp();
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    function decode2(value) {
      if (value === null || (0, _typeof2.default)(value) !== "object") {
        return value;
      }
      if ((0, _isArray.default)(value)) {
        var dup = [];
        (0, _forEach.default)(value).call(value, function(v2, i) {
          dup[i] = decode2(v2);
        });
        return dup;
      }
      if (typeof value.__op === "string") {
        return (0, _ParseOp.opFromJSON)(value);
      }
      if (value.__type === "Pointer" && value.className) {
        return _ParseObject.default.fromJSON(value);
      }
      if (value.__type === "Object" && value.className) {
        return _ParseObject.default.fromJSON(value);
      }
      if (value.__type === "Relation") {
        var relation = new _ParseRelation.default(null, null);
        relation.targetClassName = value.className;
        return relation;
      }
      if (value.__type === "Date") {
        return new Date(value.iso);
      }
      if (value.__type === "File") {
        return _ParseFile.default.fromJSON(value);
      }
      if (value.__type === "GeoPoint") {
        return new _ParseGeoPoint.default({
          latitude: value.latitude,
          longitude: value.longitude
        });
      }
      if (value.__type === "Polygon") {
        return new _ParsePolygon.default(value.coordinates);
      }
      var copy2 = {};
      for (var k2 in value) {
        copy2[k2] = decode2(value[k2]);
      }
      return copy2;
    }
  }
});

// node_modules/crypto-js/core.js
var require_core = __commonJS({
  "node_modules/crypto-js/core.js"(exports, module) {
    init_react();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports, function() {
      var CryptoJS = CryptoJS || function(Math2, undefined2) {
        var crypto2;
        if (typeof window !== "undefined" && window.crypto) {
          crypto2 = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto2 = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto2 = globalThis.crypto;
        }
        if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
          crypto2 = window.msCrypto;
        }
        if (!crypto2 && typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto2 = globalThis.crypto;
        }
        if (!crypto2 && typeof __require === "function") {
          try {
            crypto2 = require_crypto();
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto2) {
            if (typeof crypto2.getRandomValues === "function") {
              try {
                return crypto2.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto2.randomBytes === "function") {
              try {
                return crypto2.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create = Object.create || function() {
          function F2() {
          }
          return function(obj) {
            var subtype;
            F2.prototype = obj;
            subtype = new F2();
            F2.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = function() {
          return {
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            init: function() {
            },
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          init: function(words2, sigBytes) {
            words2 = this.words = words2 || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words2.length * 4;
            }
          },
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var j2 = 0; j2 < thatSigBytes; j2 += 4) {
                thisWords[thisSigBytes + j2 >>> 2] = thatWords[j2 >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          clamp: function() {
            var words2 = this.words;
            var sigBytes = this.sigBytes;
            words2[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words2.length = Math2.ceil(sigBytes / 4);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          random: function(nBytes) {
            var words2 = [];
            for (var i = 0; i < nBytes; i += 4) {
              words2.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words2, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words2[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words2 = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words2[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words2, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words2[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words2 = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words2[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words2, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash3 = this._doFinalize();
            return hash3;
          },
          blockSize: 512 / 32,
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS;
    });
  }
});

// node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "node_modules/crypto-js/enc-base64.js"(exports, module) {
    init_react();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64 = C_enc.Base64 = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words2[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words2[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words2[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j2 = 0; j2 < 4 && i + j2 * 0.75 < sigBytes; j2++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j2) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j2 = 0; j2 < map.length; j2++) {
                reverseMap[map.charCodeAt(j2)] = j2;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words2 = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words2[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words2, nBytes);
        }
      })();
      return CryptoJS.enc.Base64;
    });
  }
});

// node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "node_modules/crypto-js/md5.js"(exports, module) {
    init_react();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T = [];
        (function() {
          for (var i = 0; i < 64; i++) {
            T[i] = Math2.abs(Math2.sin(i + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M2, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M2[offset_i];
              M2[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H2 = this._hash.words;
            var M_offset_0 = M2[offset + 0];
            var M_offset_1 = M2[offset + 1];
            var M_offset_2 = M2[offset + 2];
            var M_offset_3 = M2[offset + 3];
            var M_offset_4 = M2[offset + 4];
            var M_offset_5 = M2[offset + 5];
            var M_offset_6 = M2[offset + 6];
            var M_offset_7 = M2[offset + 7];
            var M_offset_8 = M2[offset + 8];
            var M_offset_9 = M2[offset + 9];
            var M_offset_10 = M2[offset + 10];
            var M_offset_11 = M2[offset + 11];
            var M_offset_12 = M2[offset + 12];
            var M_offset_13 = M2[offset + 13];
            var M_offset_14 = M2[offset + 14];
            var M_offset_15 = M2[offset + 15];
            var a2 = H2[0];
            var b2 = H2[1];
            var c2 = H2[2];
            var d2 = H2[3];
            a2 = FF(a2, b2, c2, d2, M_offset_0, 7, T[0]);
            d2 = FF(d2, a2, b2, c2, M_offset_1, 12, T[1]);
            c2 = FF(c2, d2, a2, b2, M_offset_2, 17, T[2]);
            b2 = FF(b2, c2, d2, a2, M_offset_3, 22, T[3]);
            a2 = FF(a2, b2, c2, d2, M_offset_4, 7, T[4]);
            d2 = FF(d2, a2, b2, c2, M_offset_5, 12, T[5]);
            c2 = FF(c2, d2, a2, b2, M_offset_6, 17, T[6]);
            b2 = FF(b2, c2, d2, a2, M_offset_7, 22, T[7]);
            a2 = FF(a2, b2, c2, d2, M_offset_8, 7, T[8]);
            d2 = FF(d2, a2, b2, c2, M_offset_9, 12, T[9]);
            c2 = FF(c2, d2, a2, b2, M_offset_10, 17, T[10]);
            b2 = FF(b2, c2, d2, a2, M_offset_11, 22, T[11]);
            a2 = FF(a2, b2, c2, d2, M_offset_12, 7, T[12]);
            d2 = FF(d2, a2, b2, c2, M_offset_13, 12, T[13]);
            c2 = FF(c2, d2, a2, b2, M_offset_14, 17, T[14]);
            b2 = FF(b2, c2, d2, a2, M_offset_15, 22, T[15]);
            a2 = GG(a2, b2, c2, d2, M_offset_1, 5, T[16]);
            d2 = GG(d2, a2, b2, c2, M_offset_6, 9, T[17]);
            c2 = GG(c2, d2, a2, b2, M_offset_11, 14, T[18]);
            b2 = GG(b2, c2, d2, a2, M_offset_0, 20, T[19]);
            a2 = GG(a2, b2, c2, d2, M_offset_5, 5, T[20]);
            d2 = GG(d2, a2, b2, c2, M_offset_10, 9, T[21]);
            c2 = GG(c2, d2, a2, b2, M_offset_15, 14, T[22]);
            b2 = GG(b2, c2, d2, a2, M_offset_4, 20, T[23]);
            a2 = GG(a2, b2, c2, d2, M_offset_9, 5, T[24]);
            d2 = GG(d2, a2, b2, c2, M_offset_14, 9, T[25]);
            c2 = GG(c2, d2, a2, b2, M_offset_3, 14, T[26]);
            b2 = GG(b2, c2, d2, a2, M_offset_8, 20, T[27]);
            a2 = GG(a2, b2, c2, d2, M_offset_13, 5, T[28]);
            d2 = GG(d2, a2, b2, c2, M_offset_2, 9, T[29]);
            c2 = GG(c2, d2, a2, b2, M_offset_7, 14, T[30]);
            b2 = GG(b2, c2, d2, a2, M_offset_12, 20, T[31]);
            a2 = HH(a2, b2, c2, d2, M_offset_5, 4, T[32]);
            d2 = HH(d2, a2, b2, c2, M_offset_8, 11, T[33]);
            c2 = HH(c2, d2, a2, b2, M_offset_11, 16, T[34]);
            b2 = HH(b2, c2, d2, a2, M_offset_14, 23, T[35]);
            a2 = HH(a2, b2, c2, d2, M_offset_1, 4, T[36]);
            d2 = HH(d2, a2, b2, c2, M_offset_4, 11, T[37]);
            c2 = HH(c2, d2, a2, b2, M_offset_7, 16, T[38]);
            b2 = HH(b2, c2, d2, a2, M_offset_10, 23, T[39]);
            a2 = HH(a2, b2, c2, d2, M_offset_13, 4, T[40]);
            d2 = HH(d2, a2, b2, c2, M_offset_0, 11, T[41]);
            c2 = HH(c2, d2, a2, b2, M_offset_3, 16, T[42]);
            b2 = HH(b2, c2, d2, a2, M_offset_6, 23, T[43]);
            a2 = HH(a2, b2, c2, d2, M_offset_9, 4, T[44]);
            d2 = HH(d2, a2, b2, c2, M_offset_12, 11, T[45]);
            c2 = HH(c2, d2, a2, b2, M_offset_15, 16, T[46]);
            b2 = HH(b2, c2, d2, a2, M_offset_2, 23, T[47]);
            a2 = II(a2, b2, c2, d2, M_offset_0, 6, T[48]);
            d2 = II(d2, a2, b2, c2, M_offset_7, 10, T[49]);
            c2 = II(c2, d2, a2, b2, M_offset_14, 15, T[50]);
            b2 = II(b2, c2, d2, a2, M_offset_5, 21, T[51]);
            a2 = II(a2, b2, c2, d2, M_offset_12, 6, T[52]);
            d2 = II(d2, a2, b2, c2, M_offset_3, 10, T[53]);
            c2 = II(c2, d2, a2, b2, M_offset_10, 15, T[54]);
            b2 = II(b2, c2, d2, a2, M_offset_1, 21, T[55]);
            a2 = II(a2, b2, c2, d2, M_offset_8, 6, T[56]);
            d2 = II(d2, a2, b2, c2, M_offset_15, 10, T[57]);
            c2 = II(c2, d2, a2, b2, M_offset_6, 15, T[58]);
            b2 = II(b2, c2, d2, a2, M_offset_13, 21, T[59]);
            a2 = II(a2, b2, c2, d2, M_offset_4, 6, T[60]);
            d2 = II(d2, a2, b2, c2, M_offset_11, 10, T[61]);
            c2 = II(c2, d2, a2, b2, M_offset_2, 15, T[62]);
            b2 = II(b2, c2, d2, a2, M_offset_9, 21, T[63]);
            H2[0] = H2[0] + a2 | 0;
            H2[1] = H2[1] + b2 | 0;
            H2[2] = H2[2] + c2 | 0;
            H2[3] = H2[3] + d2 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash3 = this._hash;
            var H2 = hash3.words;
            for (var i = 0; i < 4; i++) {
              var H_i = H2[i];
              H2[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash3;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function FF(a2, b2, c2, d2, x2, s2, t2) {
          var n2 = a2 + (b2 & c2 | ~b2 & d2) + x2 + t2;
          return (n2 << s2 | n2 >>> 32 - s2) + b2;
        }
        function GG(a2, b2, c2, d2, x2, s2, t2) {
          var n2 = a2 + (b2 & d2 | c2 & ~d2) + x2 + t2;
          return (n2 << s2 | n2 >>> 32 - s2) + b2;
        }
        function HH(a2, b2, c2, d2, x2, s2, t2) {
          var n2 = a2 + (b2 ^ c2 ^ d2) + x2 + t2;
          return (n2 << s2 | n2 >>> 32 - s2) + b2;
        }
        function II(a2, b2, c2, d2, x2, s2, t2) {
          var n2 = a2 + (c2 ^ (b2 | ~d2)) + x2 + t2;
          return (n2 << s2 | n2 >>> 32 - s2) + b2;
        }
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS.MD5;
    });
  }
});

// node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/crypto-js/sha1.js"(exports, module) {
    init_react();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W2 = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M2, offset) {
            var H2 = this._hash.words;
            var a2 = H2[0];
            var b2 = H2[1];
            var c2 = H2[2];
            var d2 = H2[3];
            var e = H2[4];
            for (var i = 0; i < 80; i++) {
              if (i < 16) {
                W2[i] = M2[offset + i] | 0;
              } else {
                var n2 = W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16];
                W2[i] = n2 << 1 | n2 >>> 31;
              }
              var t2 = (a2 << 5 | a2 >>> 27) + e + W2[i];
              if (i < 20) {
                t2 += (b2 & c2 | ~b2 & d2) + 1518500249;
              } else if (i < 40) {
                t2 += (b2 ^ c2 ^ d2) + 1859775393;
              } else if (i < 60) {
                t2 += (b2 & c2 | b2 & d2 | c2 & d2) - 1894007588;
              } else {
                t2 += (b2 ^ c2 ^ d2) - 899497514;
              }
              e = d2;
              d2 = c2;
              c2 = b2 << 30 | b2 >>> 2;
              b2 = a2;
              a2 = t2;
            }
            H2[0] = H2[0] + a2 | 0;
            H2[1] = H2[1] + b2 | 0;
            H2[2] = H2[2] + c2 | 0;
            H2[3] = H2[3] + d2 | 0;
            H2[4] = H2[4] + e | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS.SHA1;
    });
  }
});

// node_modules/crypto-js/hmac.js
var require_hmac = __commonJS({
  "node_modules/crypto-js/hmac.js"(exports, module) {
    init_react();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i = 0; i < hasherBlockSize; i++) {
              oKeyWords[i] ^= 1549556828;
              iKeyWords[i] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  }
});

// node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "node_modules/crypto-js/evpkdf.js"(exports, module) {
    init_react();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i = 1; i < iterations; i++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.EvpKDF;
    });
  }
});

// node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "node_modules/crypto-js/cipher-core.js"(exports, module) {
    init_react();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.lib.Cipher || function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          _createHelper: function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words2, offset, blockSize);
              cipher.encryptBlock(words2, offset);
              this._prevBlock = words2.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words2.slice(offset, offset + blockSize);
              cipher.decryptBlock(words2, offset);
              xorBlock.call(this, words2, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words2, offset, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined2;
            } else {
              block = this._prevBlock;
            }
            for (var i = 0; i < blockSize; i++) {
              words2[offset + i] ^= block[i];
            }
          }
          return CBC2;
        }();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words2, offset) {
            this._mode.processBlock(words2, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          encrypt: function(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          _parse: function(ciphertext, format) {
            if (typeof ciphertext == "string") {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          execute: function(password, keySize, ivSize, salt) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "node_modules/crypto-js/aes.js"(exports, module) {
    init_react();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d2 = [];
          for (var i = 0; i < 256; i++) {
            if (i < 128) {
              d2[i] = i << 1;
            } else {
              d2[i] = i << 1 ^ 283;
            }
          }
          var x2 = 0;
          var xi = 0;
          for (var i = 0; i < 256; i++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x2] = sx;
            INV_SBOX[sx] = x2;
            var x22 = d2[x2];
            var x4 = d2[x22];
            var x8 = d2[x4];
            var t2 = d2[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x2] = t2 << 24 | t2 >>> 8;
            SUB_MIX_1[x2] = t2 << 16 | t2 >>> 16;
            SUB_MIX_2[x2] = t2 << 8 | t2 >>> 24;
            SUB_MIX_3[x2] = t2;
            var t2 = x8 * 16843009 ^ x4 * 65537 ^ x22 * 257 ^ x2 * 16843008;
            INV_SUB_MIX_0[sx] = t2 << 24 | t2 >>> 8;
            INV_SUB_MIX_1[sx] = t2 << 16 | t2 >>> 16;
            INV_SUB_MIX_2[sx] = t2 << 8 | t2 >>> 24;
            INV_SUB_MIX_3[sx] = t2;
            if (!x2) {
              x2 = xi = 1;
            } else {
              x2 = x22 ^ d2[d2[d2[x8 ^ x22]]];
              xi ^= d2[d2[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t2;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t2 = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t2 = t2 << 8 | t2 >>> 24;
                  t2 = SBOX[t2 >>> 24] << 24 | SBOX[t2 >>> 16 & 255] << 16 | SBOX[t2 >>> 8 & 255] << 8 | SBOX[t2 & 255];
                  t2 ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t2 = SBOX[t2 >>> 24] << 24 | SBOX[t2 >>> 16 & 255] << 16 | SBOX[t2 >>> 8 & 255] << 8 | SBOX[t2 & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t2;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t2 = keySchedule[ksRow];
              } else {
                var t2 = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t2;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t2 >>> 24]] ^ INV_SUB_MIX_1[SBOX[t2 >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t2 >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t2 & 255]];
              }
            }
          },
          encryptBlock: function(M2, offset) {
            this._doCryptBlock(M2, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M2, offset) {
            var t2 = M2[offset + 1];
            M2[offset + 1] = M2[offset + 3];
            M2[offset + 3] = t2;
            this._doCryptBlock(M2, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t2 = M2[offset + 1];
            M2[offset + 1] = M2[offset + 3];
            M2[offset + 3] = t2;
          },
          _doCryptBlock: function(M2, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M2[offset] ^ keySchedule[0];
            var s1 = M2[offset + 1] ^ keySchedule[1];
            var s2 = M2[offset + 2] ^ keySchedule[2];
            var s3 = M2[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M2[offset] = t0;
            M2[offset + 1] = t1;
            M2[offset + 2] = t2;
            M2[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS.AES;
    });
  }
});

// node_modules/crypto-js/enc-utf8.js
var require_enc_utf8 = __commonJS({
  "node_modules/crypto-js/enc-utf8.js"(exports, module) {
    init_react();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      return CryptoJS.enc.Utf8;
    });
  }
});

// node_modules/moralis/lib/browser/CryptoController.js
var require_CryptoController = __commonJS({
  "node_modules/moralis/lib/browser/CryptoController.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _stringify = _interopRequireDefault(require_stringify3());
    var AES;
    var ENC;
    AES = require_aes();
    ENC = require_enc_utf8();
    var CryptoController = {
      encrypt: function(obj, secretKey) {
        var encrypted = AES.encrypt((0, _stringify.default)(obj), secretKey);
        return encrypted.toString();
      },
      decrypt: function(encryptedText, secretKey) {
        var decryptedStr = AES.decrypt(encryptedText, secretKey).toString(ENC);
        return decryptedStr;
      }
    };
    module.exports = CryptoController;
  }
});

// node_modules/moralis/lib/browser/InstallationController.js
var require_InstallationController = __commonJS({
  "node_modules/moralis/lib/browser/InstallationController.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _promise = _interopRequireDefault(require_promise3());
    var _Storage = _interopRequireDefault(require_Storage());
    var _require = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var uuidv4 = _require.v4;
    var iidCache = null;
    var InstallationController = {
      currentInstallationId: function() {
        if (typeof iidCache === "string") {
          return _promise.default.resolve(iidCache);
        }
        var path = _Storage.default.generatePath("installationId");
        return _Storage.default.getItemAsync(path).then(function(iid) {
          if (!iid) {
            iid = uuidv4();
            return _Storage.default.setItemAsync(path, iid).then(function() {
              iidCache = iid;
              return iid;
            });
          }
          iidCache = iid;
          return iid;
        });
      },
      _clearCache: function() {
        iidCache = null;
      },
      _setInstallationIdCache: function(iid) {
        iidCache = iid;
      }
    };
    module.exports = InstallationController;
  }
});

// node_modules/core-js-pure/modules/web.timers.js
var require_web_timers = __commonJS({
  "node_modules/core-js-pure/modules/web.timers.js"() {
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var apply = require_function_apply();
    var isCallable = require_is_callable();
    var userAgent = require_engine_user_agent();
    var arraySlice = require_array_slice();
    var validateArgumentsLength = require_validate_arguments_length();
    var MSIE = /MSIE .\./.test(userAgent);
    var Function2 = global2.Function;
    var wrap = function(scheduler) {
      return function(handler, timeout) {
        var boundArgs = validateArgumentsLength(arguments.length, 1) > 2;
        var fn2 = isCallable(handler) ? handler : Function2(handler);
        var args = boundArgs ? arraySlice(arguments, 2) : void 0;
        return scheduler(boundArgs ? function() {
          apply(fn2, this, args);
        } : fn2, timeout);
      };
    };
    $({ global: true, bind: true, forced: MSIE }, {
      setTimeout: wrap(global2.setTimeout),
      setInterval: wrap(global2.setInterval)
    });
  }
});

// node_modules/core-js-pure/stable/set-timeout.js
var require_set_timeout = __commonJS({
  "node_modules/core-js-pure/stable/set-timeout.js"(exports, module) {
    init_react();
    require_web_timers();
    var path = require_path();
    module.exports = path.setTimeout;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js
var require_set_timeout2 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js"(exports, module) {
    init_react();
    module.exports = require_set_timeout();
  }
});

// node_modules/moralis/lib/browser/RESTController.js
var require_RESTController = __commonJS({
  "node_modules/moralis/lib/browser/RESTController.js"(exports, module) {
    "use strict";
    init_react();
    var _Object$keys = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _promise = _interopRequireDefault(require_promise3());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _includes = _interopRequireDefault(require_includes5());
    var _setTimeout2 = _interopRequireDefault(require_set_timeout2());
    var _concat = _interopRequireDefault(require_concat4());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _promiseUtils = require_promiseUtils();
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var _context5, _context6;
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? _forEachInstanceProperty(_context5 = ownKeys4(Object(source), true)).call(_context5, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context6 = ownKeys4(Object(source))).call(_context6, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var _require = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var uuidv4 = _require.v4;
    var XHR = null;
    if (typeof XMLHttpRequest !== "undefined") {
      XHR = XMLHttpRequest;
    }
    var useXDomainRequest = false;
    if (typeof XDomainRequest !== "undefined" && !("withCredentials" in new XMLHttpRequest())) {
      useXDomainRequest = true;
    }
    function ajaxIE9(method, url, data, headers, options) {
      return new _promise.default(function(resolve, reject) {
        var xdr = new XDomainRequest();
        xdr.onload = function() {
          var response;
          try {
            response = JSON.parse(xdr.responseText);
          } catch (e) {
            reject(e);
          }
          if (response) {
            resolve({
              response
            });
          }
        };
        xdr.onerror = xdr.ontimeout = function() {
          var fakeResponse = {
            responseText: (0, _stringify.default)({
              code: _ParseError.default.X_DOMAIN_REQUEST,
              error: "IE's XDomainRequest does not supply error info."
            })
          };
          reject(fakeResponse);
        };
        xdr.onprogress = function() {
          if (options && typeof options.progress === "function") {
            options.progress(xdr.responseText);
          }
        };
        xdr.open(method, url);
        xdr.send(data);
        if (options && typeof options.requestTask === "function") {
          options.requestTask(xdr);
        }
      });
    }
    var RESTController = {
      ajax: function(method, url, data, headers, options) {
        var _context;
        if (useXDomainRequest) {
          return ajaxIE9(method, url, data, headers, options);
        }
        var promise = (0, _promiseUtils.resolvingPromise)();
        var isIdempotent = _CoreManager.default.get("IDEMPOTENCY") && (0, _includes.default)(_context = ["POST", "PUT"]).call(_context, method);
        var requestId = isIdempotent ? uuidv4() : "";
        var attempts = 0;
        var dispatch = function dispatch2() {
          if (XHR == null) {
            throw new Error("Cannot make a request: No definition of XMLHttpRequest was found.");
          }
          var handled = false;
          var xhr = new XHR();
          xhr.onreadystatechange = function() {
            if (xhr.readyState !== 4 || handled || xhr._aborted) {
              return;
            }
            handled = true;
            if (xhr.status >= 200 && xhr.status < 300) {
              var response;
              try {
                response = JSON.parse(xhr.responseText);
                if (typeof xhr.getResponseHeader === "function") {
                  var _context2;
                  if ((0, _includes.default)(_context2 = xhr.getAllResponseHeaders() || "").call(_context2, "x-parse-job-status-id: ")) {
                    response = xhr.getResponseHeader("x-parse-job-status-id");
                  }
                }
              } catch (e) {
                promise.reject(e.toString());
              }
              if (response) {
                promise.resolve({
                  response,
                  status: xhr.status,
                  xhr
                });
              }
            } else if (xhr.status >= 500 || xhr.status === 0) {
              if (++attempts < _CoreManager.default.get("REQUEST_ATTEMPT_LIMIT")) {
                var delay = Math.round(Math.random() * 125 * Math.pow(2, attempts));
                (0, _setTimeout2.default)(dispatch2, delay);
              } else if (xhr.status === 0) {
                promise.reject("Unable to connect to the Parse API");
              } else {
                promise.reject(xhr);
              }
            } else {
              promise.reject(xhr);
            }
          };
          headers = headers || {};
          if (typeof headers["Content-Type"] !== "string") {
            headers["Content-Type"] = "text/plain";
          }
          if (_CoreManager.default.get("IS_NODE")) {
            var _context3;
            headers["User-Agent"] = (0, _concat.default)(_context3 = "Parse/".concat(_CoreManager.default.get("VERSION"), " (NodeJS ")).call(_context3, process.versions.node, ")");
          }
          if (isIdempotent) {
            headers["X-Parse-Request-Id"] = requestId;
          }
          if (_CoreManager.default.get("SERVER_AUTH_TYPE") && _CoreManager.default.get("SERVER_AUTH_TOKEN")) {
            var _context4;
            headers.Authorization = (0, _concat.default)(_context4 = "".concat(_CoreManager.default.get("SERVER_AUTH_TYPE"), " ")).call(_context4, _CoreManager.default.get("SERVER_AUTH_TOKEN"));
          }
          var customHeaders = _CoreManager.default.get("REQUEST_HEADERS");
          for (var key in customHeaders) {
            headers[key] = customHeaders[key];
          }
          function handleProgress(type, event) {
            if (options && typeof options.progress === "function") {
              if (event.lengthComputable) {
                options.progress(event.loaded / event.total, event.loaded, event.total, {
                  type
                });
              } else {
                options.progress(null, null, null, {
                  type
                });
              }
            }
          }
          xhr.onprogress = function(event) {
            handleProgress("download", event);
          };
          if (xhr.upload) {
            xhr.upload.onprogress = function(event) {
              handleProgress("upload", event);
            };
          }
          xhr.open(method, url, true);
          for (var h2 in headers) {
            xhr.setRequestHeader(h2, headers[h2]);
          }
          xhr.onabort = function() {
            promise.resolve({
              response: {
                results: []
              },
              status: 0,
              xhr
            });
          };
          xhr.send(data);
          if (options && typeof options.requestTask === "function") {
            options.requestTask(xhr);
          }
        };
        dispatch();
        return promise;
      },
      request: function(method, path, data, options) {
        options = options || {};
        var url = _CoreManager.default.get("SERVER_URL");
        if (url[url.length - 1] !== "/") {
          url += "/";
        }
        url += path;
        var payload = {};
        if (data && (0, _typeof2.default)(data) === "object") {
          for (var k2 in data) {
            payload[k2] = data[k2];
          }
        }
        var _options = options, context = _options.context;
        if (context !== void 0) {
          payload._context = context;
        }
        if (method !== "POST") {
          payload._method = method;
          method = "POST";
        }
        payload._ApplicationId = _CoreManager.default.get("APPLICATION_ID");
        var jsKey = _CoreManager.default.get("JAVASCRIPT_KEY");
        if (jsKey) {
          payload._JavaScriptKey = jsKey;
        }
        payload._ClientVersion = _CoreManager.default.get("VERSION");
        var _options2 = options, useMasterKey = _options2.useMasterKey;
        if (typeof useMasterKey === "undefined") {
          useMasterKey = _CoreManager.default.get("USE_MASTER_KEY");
        }
        if (useMasterKey) {
          if (_CoreManager.default.get("MASTER_KEY")) {
            delete payload._JavaScriptKey;
            payload._MasterKey = _CoreManager.default.get("MASTER_KEY");
          }
        }
        if (_CoreManager.default.get("FORCE_REVOCABLE_SESSION")) {
          payload._RevocableSession = "1";
        }
        var _options3 = options, installationId = _options3.installationId;
        var installationIdPromise;
        if (installationId && typeof installationId === "string") {
          installationIdPromise = _promise.default.resolve(installationId);
        } else {
          var installationController = _CoreManager.default.getInstallationController();
          installationIdPromise = installationController.currentInstallationId();
        }
        return installationIdPromise.then(function(iid) {
          payload._InstallationId = iid;
          var userController = _CoreManager.default.getUserController();
          if (options && typeof options.sessionToken === "string") {
            return _promise.default.resolve(options.sessionToken);
          }
          if (userController) {
            return userController.currentUserAsync().then(function(user) {
              if (user) {
                return _promise.default.resolve(user.getSessionToken());
              }
              return _promise.default.resolve(null);
            });
          }
          return _promise.default.resolve(null);
        }).then(function(token2) {
          if (token2) {
            payload._SessionToken = token2;
          }
          var payloadString = (0, _stringify.default)(payload);
          return RESTController.ajax(method, url, payloadString, {}, options).then(function(_ref) {
            var response = _ref.response, status = _ref.status;
            if (options.returnStatus) {
              return _objectSpread4(_objectSpread4({}, response), {}, {
                _status: status
              });
            }
            return response;
          });
        }).catch(RESTController.handleError);
      },
      handleError: function(response) {
        var error;
        if (response && response.responseText) {
          try {
            var errorJSON = JSON.parse(response.responseText);
            error = new _ParseError.default(errorJSON.code, errorJSON.error);
          } catch (e) {
            error = new _ParseError.default(_ParseError.default.INVALID_JSON, "Received an error with invalid JSON from Parse: ".concat(response.responseText));
          }
        } else {
          var message = response.message ? response.message : response;
          error = new _ParseError.default(_ParseError.default.CONNECTION_FAILED, "XMLHttpRequest failed: ".concat((0, _stringify.default)(message)));
        }
        return _promise.default.reject(error);
      },
      _setXHR: function(xhr) {
        XHR = xhr;
      },
      _getXHR: function() {
        return XHR;
      }
    };
    module.exports = RESTController;
  }
});

// node_modules/moralis/lib/browser/filterConsole.js
var require_filterConsole = __commonJS({
  "node_modules/moralis/lib/browser/filterConsole.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _filter = _interopRequireDefault(require_filter4());
    var _includes = _interopRequireDefault(require_includes5());
    var filteredWarnings = [
      "Module not found: Can't resolve '@walletconnect/web3-provider'",
      "Module not found: Can't resolve 'magic-sdk'",
      "Module not found: Can't resolve '@web3auth/web3auth'"
    ];
    var filterConsole = function() {
      var preservedConsoleWarn = console.warn;
      console.warn = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var value = args ? args[0] : null;
        if (!value || typeof value !== "string") {
          return preservedConsoleWarn.apply(console, args);
        }
        value = value.replace("\u2019", "'").replace("\u2018", "'").replace("\u2019", "'");
        if ((0, _filter.default)(filteredWarnings).call(filteredWarnings, function(filter) {
          return (0, _includes.default)(value).call(value, filter);
        }).length >= 1) {
          return;
        }
        return preservedConsoleWarn.apply(console, args);
      };
    };
    module.exports = {
      filterConsole
    };
  }
});

// node_modules/core-js-pure/modules/es.number.is-nan.js
var require_es_number_is_nan = __commonJS({
  "node_modules/core-js-pure/modules/es.number.is-nan.js"() {
    init_react();
    var $ = require_export();
    $({ target: "Number", stat: true }, {
      isNaN: function isNaN2(number) {
        return number != number;
      }
    });
  }
});

// node_modules/core-js-pure/es/number/is-nan.js
var require_is_nan = __commonJS({
  "node_modules/core-js-pure/es/number/is-nan.js"(exports, module) {
    init_react();
    require_es_number_is_nan();
    var path = require_path();
    module.exports = path.Number.isNaN;
  }
});

// node_modules/core-js-pure/stable/number/is-nan.js
var require_is_nan2 = __commonJS({
  "node_modules/core-js-pure/stable/number/is-nan.js"(exports, module) {
    init_react();
    var parent = require_is_nan();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/number/is-nan.js
var require_is_nan3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/number/is-nan.js"(exports, module) {
    init_react();
    module.exports = require_is_nan2();
  }
});

// node_modules/moralis/lib/browser/utils.js
var require_utils = __commonJS({
  "node_modules/moralis/lib/browser/utils.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _map = _interopRequireDefault(require_map9());
    var _entries = _interopRequireDefault(require_entries3());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    var _isNan = _interopRequireDefault(require_is_nan3());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _RESTController = _interopRequireDefault(require_RESTController());
    var DEEP_INDEX_API_HOST = "deep-index.moralis.io";
    var DEEP_INDEX_SWAGGER_PATH = "/api-docs/v2/swagger.json";
    var fetchSwaggerJson = /* @__PURE__ */ function() {
      var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
        var _yield$RESTController, response;
        return _regenerator.default.wrap(function(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _RESTController.default.ajax("GET", "https://".concat(DEEP_INDEX_API_HOST).concat(DEEP_INDEX_SWAGGER_PATH));
              case 2:
                _yield$RESTController = _context.sent;
                response = _yield$RESTController.response;
                return _context.abrupt("return", response);
              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return function() {
        return _ref.apply(this, arguments);
      };
    }();
    var getPathByTag = function(swaggerJSON) {
      var _context2;
      var pathByTag = {};
      var pathDetails = {};
      (0, _map.default)(_context2 = (0, _entries.default)(swaggerJSON.paths)).call(_context2, function(_ref2) {
        var _context3;
        var _ref3 = (0, _slicedToArray2.default)(_ref2, 2), pathName = _ref3[0], requestData = _ref3[1];
        return (0, _forEach.default)(_context3 = (0, _entries.default)(requestData)).call(_context3, function(_ref4) {
          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2), method = _ref5[0], data = _ref5[1];
          var tags = data.tags;
          if (tags.length > 0) {
            if (!pathByTag[tags[0]]) {
              pathByTag[tags[0]] = [];
            }
            pathByTag[tags[0]].push(data.operationId);
            pathDetails[data.operationId] = {
              method,
              pathName,
              data
            };
          }
        });
      });
      return {
        pathByTag,
        pathDetails
      };
    };
    var fetchEndpoints = /* @__PURE__ */ function() {
      var _ref6 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
        var _context4;
        var swaggerJSON, _yield$getPathByTag, pathDetails, data;
        return _regenerator.default.wrap(function(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return fetchSwaggerJson();
              case 2:
                swaggerJSON = _context5.sent;
                _context5.next = 5;
                return getPathByTag(swaggerJSON);
              case 5:
                _yield$getPathByTag = _context5.sent;
                pathDetails = _yield$getPathByTag.pathDetails;
                data = [];
                (0, _forEach.default)(_context4 = (0, _keys.default)(pathDetails)).call(_context4, function(x2) {
                  var item = pathDetails[x2];
                  var endpoint = {
                    method: item.method.toUpperCase(),
                    group: item.data.tags[0],
                    name: x2,
                    url: item.pathName.split("{").join(":").split("}").join("")
                  };
                  data.push(endpoint);
                });
                return _context5.abrupt("return", data);
              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee2);
      }));
      return function() {
        return _ref6.apply(this, arguments);
      };
    }();
    var isSemanticVersionLarger = function(version1, version22) {
      var _context6, _context7;
      var _version1$split = version1.split("-"), _version1$split2 = (0, _slicedToArray2.default)(_version1$split, 2), version1Main = _version1$split2[0], version1Pre = _version1$split2[1];
      var version1Arr = (0, _map.default)(_context6 = version1Main.split(".")).call(_context6, function(s2) {
        return Number(s2);
      });
      var _version2$split = version22.split("-"), _version2$split2 = (0, _slicedToArray2.default)(_version2$split, 2), version2Main = _version2$split2[0], version2Pre = _version2$split2[1];
      var version2Arr = (0, _map.default)(_context7 = version2Main.split(".")).call(_context7, function(s2) {
        return Number(s2);
      });
      for (var index = 0; index < 3; index++) {
        var compare1 = version1Arr[index];
        var compare2 = version2Arr[index];
        if (compare1 > compare2)
          return true;
        if (compare1 < compare2)
          return false;
        if (!(0, _isNan.default)(compare1) && (0, _isNan.default)(compare2))
          return true;
        if ((0, _isNan.default)(compare1) && !(0, _isNan.default)(compare2))
          return false;
      }
      if (version1Pre && version2Pre) {
        var _version1Pre$split$, _version2Pre$split$;
        var version1PreNumber = (_version1Pre$split$ = version1Pre.split(".")[1]) !== null && _version1Pre$split$ !== void 0 ? _version1Pre$split$ : 0;
        var version2PreNumber = (_version2Pre$split$ = version2Pre.split(".")[1]) !== null && _version2Pre$split$ !== void 0 ? _version2Pre$split$ : 0;
        return version1PreNumber > version2PreNumber;
      }
      if (version2Pre) {
        return true;
      }
      return false;
    };
    var checkForSdkUpdates = /* @__PURE__ */ function() {
      var _ref7 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
        var _yield$RESTController2, response, latestVersion, installedVersion;
        return _regenerator.default.wrap(function(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.prev = 0;
                _context8.next = 3;
                return _RESTController.default.ajax("GET", "https://www.unpkg.com/moralis/package.json");
              case 3:
                _yield$RESTController2 = _context8.sent;
                response = _yield$RESTController2.response;
                latestVersion = response.version;
                installedVersion = "1.3.5";
                if (isSemanticVersionLarger(latestVersion, installedVersion))
                  console.warn("You are not using the latest version of the SDK. Please update it as soon as possible to enjoy the newest features. Most recent version: ".concat(latestVersion));
                _context8.next = 12;
                break;
              case 10:
                _context8.prev = 10;
                _context8.t0 = _context8["catch"](0);
              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee3, null, [[0, 10]]);
      }));
      return function() {
        return _ref7.apply(this, arguments);
      };
    }();
    module.exports = {
      fetchSwaggerJson,
      getPathByTag,
      fetchEndpoints,
      checkForSdkUpdates
    };
  }
});

// node_modules/moralis/lib/browser/Analytics.js
var require_Analytics = __commonJS({
  "node_modules/moralis/lib/browser/Analytics.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.track = track;
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    function track(name2, dimensions) {
      name2 = name2 || "";
      name2 = name2.replace(/^\s*/, "");
      name2 = name2.replace(/\s*$/, "");
      if (name2.length === 0) {
        throw new TypeError("A name for the custom event must be provided");
      }
      for (var _key in dimensions) {
        if (typeof _key !== "string" || typeof dimensions[_key] !== "string") {
          throw new TypeError('track() dimensions expects keys and values of type "string".');
        }
      }
      return _CoreManager.default.getAnalyticsController().track(name2, dimensions);
    }
    var DefaultController = {
      track: function(name2, dimensions) {
        var path = "events/".concat(name2);
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("POST", path, {
          dimensions
        });
      }
    };
    _CoreManager.default.setAnalyticsController(DefaultController);
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/map.js
var require_map10 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/map.js"(exports, module) {
    init_react();
    module.exports = require_map2();
  }
});

// node_modules/core-js-pure/es/array/virtual/entries.js
var require_entries4 = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/entries.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_object_to_string();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").entries;
  }
});

// node_modules/core-js-pure/stable/array/virtual/entries.js
var require_entries5 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/entries.js"(exports, module) {
    init_react();
    var parent = require_entries4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/entries.js
var require_entries6 = __commonJS({
  "node_modules/core-js-pure/stable/instance/entries.js"(exports, module) {
    init_react();
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_entries5();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module.exports = function(it) {
      var own = it.entries;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.entries || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/entries.js
var require_entries7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/entries.js"(exports, module) {
    init_react();
    module.exports = require_entries6();
  }
});

// node_modules/moralis/lib/browser/ParseCLP.js
var require_ParseCLP = __commonJS({
  "node_modules/moralis/lib/browser/ParseCLP.js"(exports) {
    "use strict";
    init_react();
    var _sliceInstanceProperty2 = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray2 = require_is_array4();
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _map = _interopRequireDefault(require_map10());
    var _includes = _interopRequireDefault(require_includes5());
    var _every = _interopRequireDefault(require_every4());
    var _entries = _interopRequireDefault(require_entries7());
    var _slice = _interopRequireDefault(require_slice4());
    var _keys = _interopRequireDefault(require_keys3());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _ParseRole = _interopRequireDefault(require_ParseRole());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var _context3, _context4;
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? _forEachInstanceProperty(_context3 = ownKeys4(Object(source), true)).call(_context3, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context4 = ownKeys4(Object(source))).call(_context4, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray2(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context2;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty2(_context2 = Object.prototype.toString.call(o2)).call(_context2, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var PUBLIC_KEY = "*";
    var VALID_PERMISSIONS = new _map.default();
    VALID_PERMISSIONS.set("get", {});
    VALID_PERMISSIONS.set("find", {});
    VALID_PERMISSIONS.set("count", {});
    VALID_PERMISSIONS.set("create", {});
    VALID_PERMISSIONS.set("update", {});
    VALID_PERMISSIONS.set("delete", {});
    VALID_PERMISSIONS.set("addField", {});
    var VALID_PERMISSIONS_EXTENDED = new _map.default();
    VALID_PERMISSIONS_EXTENDED.set("protectedFields", {});
    var ParseCLP = /* @__PURE__ */ function() {
      function ParseCLP2(userId) {
        var _this = this;
        (0, _classCallCheck2.default)(this, ParseCLP2);
        (0, _defineProperty2.default)(this, "permissionsMap", void 0);
        this.permissionsMap = {};
        var _iterator = _createForOfIteratorHelper((0, _entries.default)(VALID_PERMISSIONS).call(VALID_PERMISSIONS)), _step;
        try {
          var _loop = function() {
            var _step$value = (0, _slicedToArray2.default)(_step.value, 2), operation2 = _step$value[0], group2 = _step$value[1];
            _this.permissionsMap[operation2] = _objectSpread4({}, group2);
            var action = operation2.charAt(0).toUpperCase() + (0, _slice.default)(operation2).call(operation2, 1);
            _this["get".concat(action, "RequiresAuthentication")] = function() {
              return this._getAccess(operation2, "requiresAuthentication");
            };
            _this["set".concat(action, "RequiresAuthentication")] = function(allowed2) {
              this._setAccess(operation2, "requiresAuthentication", allowed2);
            };
            _this["get".concat(action, "PointerFields")] = function() {
              return this._getAccess(operation2, "pointerFields", false);
            };
            _this["set".concat(action, "PointerFields")] = function(pointerFields) {
              this._setArrayAccess(operation2, "pointerFields", pointerFields);
            };
            _this["get".concat(action, "Access")] = function(entity) {
              return this._getAccess(operation2, entity);
            };
            _this["set".concat(action, "Access")] = function(entity, allowed2) {
              this._setAccess(operation2, entity, allowed2);
            };
            _this["getPublic".concat(action, "Access")] = function() {
              return this["get".concat(action, "Access")](PUBLIC_KEY);
            };
            _this["setPublic".concat(action, "Access")] = function(allowed2) {
              this["set".concat(action, "Access")](PUBLIC_KEY, allowed2);
            };
            _this["getRole".concat(action, "Access")] = function(role) {
              return this["get".concat(action, "Access")](this._getRoleName(role));
            };
            _this["setRole".concat(action, "Access")] = function(role, allowed2) {
              this["set".concat(action, "Access")](this._getRoleName(role), allowed2);
            };
          };
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        var _iterator2 = _createForOfIteratorHelper((0, _entries.default)(VALID_PERMISSIONS_EXTENDED).call(VALID_PERMISSIONS_EXTENDED)), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _step2$value = (0, _slicedToArray2.default)(_step2.value, 2), operation = _step2$value[0], group = _step2$value[1];
            this.permissionsMap[operation] = _objectSpread4({}, group);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        if (userId && (0, _typeof2.default)(userId) === "object") {
          if (userId instanceof _ParseUser.default) {
            this.setReadAccess(userId, true);
            this.setWriteAccess(userId, true);
          } else if (userId instanceof _ParseRole.default) {
            this.setRoleReadAccess(userId, true);
            this.setRoleWriteAccess(userId, true);
          } else {
            for (var _permission in userId) {
              var _context;
              var users = userId[_permission];
              var isValidPermission = !!VALID_PERMISSIONS.get(_permission);
              var isValidPermissionExtended = !!VALID_PERMISSIONS_EXTENDED.get(_permission);
              var isValidGroupPermission = (0, _includes.default)(_context = ["readUserFields", "writeUserFields"]).call(_context, _permission);
              if (typeof _permission !== "string" || !(isValidPermission || isValidPermissionExtended || isValidGroupPermission)) {
                throw new TypeError("Tried to create an CLP with an invalid permission type.");
              }
              if (isValidGroupPermission) {
                if ((0, _every.default)(users).call(users, function(pointer) {
                  return typeof pointer === "string";
                })) {
                  this.permissionsMap[_permission] = users;
                  continue;
                } else {
                  throw new TypeError("Tried to create an CLP with an invalid permission value.");
                }
              }
              for (var user in users) {
                var allowed = users[user];
                if (typeof allowed !== "boolean" && !isValidPermissionExtended && user !== "pointerFields") {
                  throw new TypeError("Tried to create an CLP with an invalid permission value.");
                }
                this.permissionsMap[_permission][user] = allowed;
              }
            }
          }
        } else if (typeof userId === "function") {
          throw new TypeError("ParseCLP constructed with a function. Did you forget ()?");
        }
      }
      (0, _createClass2.default)(ParseCLP2, [{
        key: "toJSON",
        value: function() {
          return _objectSpread4({}, this.permissionsMap);
        }
      }, {
        key: "equals",
        value: function(other) {
          if (!(other instanceof ParseCLP2)) {
            return false;
          }
          var permissions = (0, _keys.default)(this.permissionsMap);
          var otherPermissions = (0, _keys.default)(other.permissionsMap);
          if (permissions.length !== otherPermissions.length) {
            return false;
          }
          for (var _permission2 in this.permissionsMap) {
            if (!other.permissionsMap[_permission2]) {
              return false;
            }
            var users = (0, _keys.default)(this.permissionsMap[_permission2]);
            var otherUsers = (0, _keys.default)(other.permissionsMap[_permission2]);
            if (users.length !== otherUsers.length) {
              return false;
            }
            for (var user in this.permissionsMap[_permission2]) {
              if (!other.permissionsMap[_permission2][user]) {
                return false;
              }
              if (this.permissionsMap[_permission2][user] !== other.permissionsMap[_permission2][user]) {
                return false;
              }
            }
          }
          return true;
        }
      }, {
        key: "_getRoleName",
        value: function(role) {
          var name2 = role;
          if (role instanceof _ParseRole.default) {
            name2 = role.getName();
          }
          if (typeof name2 !== "string") {
            throw new TypeError("role must be a Parse.Role or a String");
          }
          return "role:".concat(name2);
        }
      }, {
        key: "_parseEntity",
        value: function(entity) {
          var userId = entity;
          if (userId instanceof _ParseUser.default) {
            userId = userId.id;
            if (!userId) {
              throw new Error("Cannot get access for a Parse.User without an id.");
            }
          } else if (userId instanceof _ParseRole.default) {
            userId = this._getRoleName(userId);
          }
          if (typeof userId !== "string") {
            throw new TypeError("userId must be a string.");
          }
          return userId;
        }
      }, {
        key: "_setAccess",
        value: function(permission, userId, allowed) {
          userId = this._parseEntity(userId);
          if (typeof allowed !== "boolean") {
            throw new TypeError("allowed must be either true or false.");
          }
          var permissions = this.permissionsMap[permission][userId];
          if (!permissions) {
            if (!allowed) {
              return;
            }
            this.permissionsMap[permission][userId] = {};
          }
          if (allowed) {
            this.permissionsMap[permission][userId] = true;
          } else {
            delete this.permissionsMap[permission][userId];
          }
        }
      }, {
        key: "_getAccess",
        value: function(permission, userId) {
          var returnBoolean = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
          userId = this._parseEntity(userId);
          var permissions = this.permissionsMap[permission][userId];
          if (returnBoolean) {
            if (!permissions) {
              return false;
            }
            return !!this.permissionsMap[permission][userId];
          }
          return permissions;
        }
      }, {
        key: "_setArrayAccess",
        value: function(permission, userId, fields) {
          userId = this._parseEntity(userId);
          var permissions = this.permissionsMap[permission][userId];
          if (!permissions) {
            this.permissionsMap[permission][userId] = [];
          }
          if (!fields || (0, _isArray.default)(fields) && fields.length === 0) {
            delete this.permissionsMap[permission][userId];
          } else if ((0, _isArray.default)(fields) && (0, _every.default)(fields).call(fields, function(field) {
            return typeof field === "string";
          })) {
            this.permissionsMap[permission][userId] = fields;
          } else {
            throw new TypeError("fields must be an array of strings or undefined.");
          }
        }
      }, {
        key: "_setGroupPointerPermission",
        value: function(operation, pointerFields) {
          var fields = this.permissionsMap[operation];
          if (!fields) {
            this.permissionsMap[operation] = [];
          }
          if (!pointerFields || (0, _isArray.default)(pointerFields) && pointerFields.length === 0) {
            delete this.permissionsMap[operation];
          } else if ((0, _isArray.default)(pointerFields) && (0, _every.default)(pointerFields).call(pointerFields, function(field) {
            return typeof field === "string";
          })) {
            this.permissionsMap[operation] = pointerFields;
          } else {
            throw new TypeError("".concat(operation, ".pointerFields must be an array of strings or undefined."));
          }
        }
      }, {
        key: "_getGroupPointerPermissions",
        value: function(operation) {
          return this.permissionsMap[operation];
        }
      }, {
        key: "setReadUserFields",
        value: function(pointerFields) {
          this._setGroupPointerPermission("readUserFields", pointerFields);
        }
      }, {
        key: "getReadUserFields",
        value: function() {
          return this._getGroupPointerPermissions("readUserFields");
        }
      }, {
        key: "setWriteUserFields",
        value: function(pointerFields) {
          this._setGroupPointerPermission("writeUserFields", pointerFields);
        }
      }, {
        key: "getWriteUserFields",
        value: function() {
          return this._getGroupPointerPermissions("writeUserFields");
        }
      }, {
        key: "setProtectedFields",
        value: function(userId, fields) {
          this._setArrayAccess("protectedFields", userId, fields);
        }
      }, {
        key: "getProtectedFields",
        value: function(userId) {
          return this._getAccess("protectedFields", userId, false);
        }
      }, {
        key: "setReadAccess",
        value: function(userId, allowed) {
          this._setAccess("find", userId, allowed);
          this._setAccess("get", userId, allowed);
          this._setAccess("count", userId, allowed);
        }
      }, {
        key: "getReadAccess",
        value: function(userId) {
          return this._getAccess("find", userId) && this._getAccess("get", userId) && this._getAccess("count", userId);
        }
      }, {
        key: "setWriteAccess",
        value: function(userId, allowed) {
          this._setAccess("create", userId, allowed);
          this._setAccess("update", userId, allowed);
          this._setAccess("delete", userId, allowed);
          this._setAccess("addField", userId, allowed);
        }
      }, {
        key: "getWriteAccess",
        value: function(userId) {
          return this._getAccess("create", userId) && this._getAccess("update", userId) && this._getAccess("delete", userId) && this._getAccess("addField", userId);
        }
      }, {
        key: "setPublicReadAccess",
        value: function(allowed) {
          this.setReadAccess(PUBLIC_KEY, allowed);
        }
      }, {
        key: "getPublicReadAccess",
        value: function() {
          return this.getReadAccess(PUBLIC_KEY);
        }
      }, {
        key: "setPublicWriteAccess",
        value: function(allowed) {
          this.setWriteAccess(PUBLIC_KEY, allowed);
        }
      }, {
        key: "getPublicWriteAccess",
        value: function() {
          return this.getWriteAccess(PUBLIC_KEY);
        }
      }, {
        key: "setPublicProtectedFields",
        value: function(fields) {
          this.setProtectedFields(PUBLIC_KEY, fields);
        }
      }, {
        key: "getPublicProtectedFields",
        value: function() {
          return this.getProtectedFields(PUBLIC_KEY);
        }
      }, {
        key: "getRoleReadAccess",
        value: function(role) {
          return this.getReadAccess(this._getRoleName(role));
        }
      }, {
        key: "getRoleWriteAccess",
        value: function(role) {
          return this.getWriteAccess(this._getRoleName(role));
        }
      }, {
        key: "setRoleReadAccess",
        value: function(role, allowed) {
          this.setReadAccess(this._getRoleName(role), allowed);
        }
      }, {
        key: "setRoleWriteAccess",
        value: function(role, allowed) {
          this.setWriteAccess(this._getRoleName(role), allowed);
        }
      }, {
        key: "getRoleProtectedFields",
        value: function(role) {
          return this.getProtectedFields(this._getRoleName(role));
        }
      }, {
        key: "setRoleProtectedFields",
        value: function(role, fields) {
          this.setProtectedFields(this._getRoleName(role), fields);
        }
      }]);
      return ParseCLP2;
    }();
    var _default = ParseCLP;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseConfig.js
var require_ParseConfig = __commonJS({
  "node_modules/moralis/lib/browser/ParseConfig.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _promise = _interopRequireDefault(require_promise3());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _decode = _interopRequireDefault(require_decode());
    var _encode = _interopRequireDefault(require_encode());
    var _escape2 = _interopRequireDefault(require_escape());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _Storage = _interopRequireDefault(require_Storage());
    var ParseConfig = /* @__PURE__ */ function() {
      function ParseConfig2() {
        (0, _classCallCheck2.default)(this, ParseConfig2);
        (0, _defineProperty2.default)(this, "attributes", void 0);
        (0, _defineProperty2.default)(this, "_escapedAttributes", void 0);
        this.attributes = {};
        this._escapedAttributes = {};
      }
      (0, _createClass2.default)(ParseConfig2, [{
        key: "get",
        value: function(attr) {
          return this.attributes[attr];
        }
      }, {
        key: "escape",
        value: function(attr) {
          var html = this._escapedAttributes[attr];
          if (html) {
            return html;
          }
          var val = this.attributes[attr];
          var escaped = "";
          if (val != null) {
            escaped = (0, _escape2.default)(val.toString());
          }
          this._escapedAttributes[attr] = escaped;
          return escaped;
        }
      }], [{
        key: "current",
        value: function() {
          var controller = _CoreManager.default.getConfigController();
          return controller.current();
        }
      }, {
        key: "get",
        value: function() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var controller = _CoreManager.default.getConfigController();
          return controller.get(options);
        }
      }, {
        key: "save",
        value: function(attrs, masterKeyOnlyFlags) {
          var controller = _CoreManager.default.getConfigController();
          return controller.save(attrs, masterKeyOnlyFlags).then(function() {
            return controller.get({
              useMasterKey: true
            });
          }, function(error) {
            return _promise.default.reject(error);
          });
        }
      }, {
        key: "_clearCache",
        value: function() {
          currentConfig = null;
        }
      }]);
      return ParseConfig2;
    }();
    var currentConfig = null;
    var CURRENT_CONFIG_KEY = "currentConfig";
    function decodePayload(data) {
      try {
        var json = JSON.parse(data);
        if (json && (0, _typeof2.default)(json) === "object") {
          return (0, _decode.default)(json);
        }
      } catch (e) {
        return null;
      }
    }
    var DefaultController = {
      current: function() {
        if (currentConfig) {
          return currentConfig;
        }
        var config = new ParseConfig();
        var storagePath = _Storage.default.generatePath(CURRENT_CONFIG_KEY);
        if (!_Storage.default.async()) {
          var configData = _Storage.default.getItem(storagePath);
          if (configData) {
            var attributes = decodePayload(configData);
            if (attributes) {
              config.attributes = attributes;
              currentConfig = config;
            }
          }
          return config;
        }
        return _Storage.default.getItemAsync(storagePath).then(function(configData2) {
          if (configData2) {
            var _attributes = decodePayload(configData2);
            if (_attributes) {
              config.attributes = _attributes;
              currentConfig = config;
            }
          }
          return config;
        });
      },
      get: function() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "config", {}, options).then(function(response) {
          if (!response || !response.params) {
            var error = new _ParseError.default(_ParseError.default.INVALID_JSON, "Config JSON response invalid.");
            return _promise.default.reject(error);
          }
          var config = new ParseConfig();
          config.attributes = {};
          for (var attr in response.params) {
            config.attributes[attr] = (0, _decode.default)(response.params[attr]);
          }
          currentConfig = config;
          return _Storage.default.setItemAsync(_Storage.default.generatePath(CURRENT_CONFIG_KEY), (0, _stringify.default)(response.params)).then(function() {
            return config;
          });
        });
      },
      save: function(attrs, masterKeyOnlyFlags) {
        var RESTController = _CoreManager.default.getRESTController();
        var encodedAttrs = {};
        for (var _key in attrs) {
          encodedAttrs[_key] = (0, _encode.default)(attrs[_key]);
        }
        return RESTController.request("PUT", "config", {
          params: encodedAttrs,
          masterKeyOnly: masterKeyOnlyFlags
        }, {
          useMasterKey: true
        }).then(function(response) {
          if (response && response.result) {
            return _promise.default.resolve();
          }
          var error = new _ParseError.default(_ParseError.default.INTERNAL_SERVER_ERROR, "Error occured updating Config.");
          return _promise.default.reject(error);
        });
      }
    };
    _CoreManager.default.setConfigController(DefaultController);
    var _default = ParseConfig;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/FacebookUtils.js
var require_FacebookUtils = __commonJS({
  "node_modules/moralis/lib/browser/FacebookUtils.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var initialized = false;
    var requestedPermissions;
    var initOptions;
    var provider = {
      authenticate: function(options) {
        var _this = this;
        if (typeof FB === "undefined") {
          options.error(this, "Facebook SDK not found.");
        }
        FB.login(function(response) {
          if (response.authResponse) {
            if (options.success) {
              options.success(_this, {
                id: response.authResponse.userID,
                access_token: response.authResponse.accessToken,
                expiration_date: new Date(response.authResponse.expiresIn * 1e3 + new Date().getTime()).toJSON()
              });
            }
          } else {
            if (options.error) {
              options.error(_this, response);
            }
          }
        }, {
          scope: requestedPermissions
        });
      },
      restoreAuthentication: function(authData) {
        if (authData) {
          var newOptions = {};
          if (initOptions) {
            for (var key in initOptions) {
              newOptions[key] = initOptions[key];
            }
          }
          newOptions.status = false;
          var existingResponse = FB.getAuthResponse();
          if (existingResponse && existingResponse.userID !== authData.id) {
            FB.logout();
          }
          FB.init(newOptions);
        }
        return true;
      },
      getAuthType: function() {
        return "facebook";
      },
      deauthenticate: function() {
        this.restoreAuthentication(null);
      }
    };
    var FacebookUtils = {
      init: function(options) {
        if (typeof FB === "undefined") {
          throw new Error("The Facebook JavaScript SDK must be loaded before calling init.");
        }
        initOptions = {};
        if (options) {
          for (var key in options) {
            initOptions[key] = options[key];
          }
        }
        if (initOptions.status && typeof console !== "undefined") {
          var warn = console.warn || console.log || function() {
          };
          warn.call(console, 'The "status" flag passed into FB.init, when set to true, can interfere with Parse Facebook integration, so it has been suppressed. Please call FB.getLoginStatus() explicitly if you require this behavior.');
        }
        initOptions.status = false;
        FB.init(initOptions);
        _ParseUser.default._registerAuthenticationProvider(provider);
        initialized = true;
      },
      isLinked: function(user) {
        return user._isLinked("facebook");
      },
      logIn: function(permissions, options) {
        if (!permissions || typeof permissions === "string") {
          if (!initialized) {
            throw new Error("You must initialize FacebookUtils before calling logIn.");
          }
          requestedPermissions = permissions;
          return _ParseUser.default.logInWith("facebook", options);
        }
        return _ParseUser.default.logInWith("facebook", {
          authData: permissions
        }, options);
      },
      link: function(user, permissions, options) {
        if (!permissions || typeof permissions === "string") {
          if (!initialized) {
            throw new Error("You must initialize FacebookUtils before calling link.");
          }
          requestedPermissions = permissions;
          return user.linkWith("facebook", options);
        }
        return user.linkWith("facebook", {
          authData: permissions
        }, options);
      },
      unlink: function(user, options) {
        if (!initialized) {
          throw new Error("You must initialize FacebookUtils before calling unlink.");
        }
        return user._unlinkFrom("facebook", options);
      },
      _getAuthProvider: function() {
        return provider;
      }
    };
    var _default = FacebookUtils;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseInstallation.js
var require_ParseInstallation = __commonJS({
  "node_modules/moralis/lib/browser/ParseInstallation.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _ParseObject2 = _interopRequireDefault(require_ParseObject());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Installation = /* @__PURE__ */ function(_ParseObject) {
      (0, _inherits2.default)(Installation2, _ParseObject);
      var _super = _createSuper(Installation2);
      function Installation2(attributes) {
        var _this;
        (0, _classCallCheck2.default)(this, Installation2);
        _this = _super.call(this, "_Installation");
        if (attributes && (0, _typeof2.default)(attributes) === "object") {
          if (!_this.set(attributes || {})) {
            throw new Error("Can't create an invalid Installation");
          }
        }
        return _this;
      }
      return (0, _createClass2.default)(Installation2);
    }(_ParseObject2.default);
    exports.default = Installation;
    _ParseObject2.default.registerSubclass("_Installation", Installation);
  }
});

// node_modules/core-js-pure/modules/es.set.js
var require_es_set = __commonJS({
  "node_modules/core-js-pure/modules/es.set.js"() {
    "use strict";
    init_react();
    var collection = require_collection();
    var collectionStrong = require_collection_strong();
    collection("Set", function(init) {
      return function Set2() {
        return init(this, arguments.length ? arguments[0] : void 0);
      };
    }, collectionStrong);
  }
});

// node_modules/core-js-pure/es/set/index.js
var require_set = __commonJS({
  "node_modules/core-js-pure/es/set/index.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_object_to_string();
    require_es_set();
    require_es_string_iterator();
    var path = require_path();
    module.exports = path.Set;
  }
});

// node_modules/core-js-pure/stable/set/index.js
var require_set2 = __commonJS({
  "node_modules/core-js-pure/stable/set/index.js"(exports, module) {
    init_react();
    var parent = require_set();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/set.js
var require_set3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/set.js"(exports, module) {
    init_react();
    module.exports = require_set2();
  }
});

// node_modules/moralis/lib/browser/LocalDatastoreController.js
var require_LocalDatastoreController = __commonJS({
  "node_modules/moralis/lib/browser/LocalDatastoreController.js"(exports, module) {
    "use strict";
    init_react();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray = require_is_array4();
    var _interopRequireDefault = require_interopRequireDefault();
    var _stringify = _interopRequireDefault(require_stringify3());
    var _reduce = _interopRequireDefault(require_reduce4());
    var _promise = _interopRequireDefault(require_promise3());
    var _map = _interopRequireDefault(require_map9());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _LocalDatastoreUtils = require_LocalDatastoreUtils();
    var _Storage = _interopRequireDefault(require_Storage());
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context7;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty(_context7 = Object.prototype.toString.call(o2)).call(_context7, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var LocalDatastoreController = {
      fromPinWithName: function(name2) {
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
          var values, objects;
          return _regenerator.default.wrap(function(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _Storage.default.getItemAsync(name2);
                case 2:
                  values = _context.sent;
                  if (values) {
                    _context.next = 5;
                    break;
                  }
                  return _context.abrupt("return", []);
                case 5:
                  objects = JSON.parse(values);
                  return _context.abrupt("return", objects);
                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      pinWithName: function(name2, value) {
        var values = (0, _stringify.default)(value);
        return _Storage.default.setItemAsync(name2, values);
      },
      unPinWithName: function(name2) {
        return _Storage.default.removeItemAsync(name2);
      },
      getAllContents: function() {
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
          var keys;
          return _regenerator.default.wrap(function(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _Storage.default.getAllKeysAsync();
                case 2:
                  keys = _context3.sent;
                  return _context3.abrupt("return", (0, _reduce.default)(keys).call(keys, /* @__PURE__ */ function() {
                    var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(previousPromise, key) {
                      var LDS, value;
                      return _regenerator.default.wrap(function(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.next = 2;
                              return previousPromise;
                            case 2:
                              LDS = _context2.sent;
                              if (!(0, _LocalDatastoreUtils.isLocalDatastoreKey)(key)) {
                                _context2.next = 8;
                                break;
                              }
                              _context2.next = 6;
                              return _Storage.default.getItemAsync(key);
                            case 6:
                              value = _context2.sent;
                              try {
                                LDS[key] = JSON.parse(value);
                              } catch (error) {
                                console.error("Error getAllContents: ", error);
                              }
                            case 8:
                              return _context2.abrupt("return", LDS);
                            case 9:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }));
                    return function() {
                      return _ref.apply(this, arguments);
                    };
                  }(), _promise.default.resolve({})));
                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }))();
      },
      getRawStorage: function() {
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5() {
          var keys;
          return _regenerator.default.wrap(function(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return _Storage.default.getAllKeysAsync();
                case 2:
                  keys = _context5.sent;
                  return _context5.abrupt("return", (0, _reduce.default)(keys).call(keys, /* @__PURE__ */ function() {
                    var _ref2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(previousPromise, key) {
                      var LDS, value;
                      return _regenerator.default.wrap(function(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              _context4.next = 2;
                              return previousPromise;
                            case 2:
                              LDS = _context4.sent;
                              _context4.next = 5;
                              return _Storage.default.getItemAsync(key);
                            case 5:
                              value = _context4.sent;
                              LDS[key] = value;
                              return _context4.abrupt("return", LDS);
                            case 8:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, _callee4);
                    }));
                    return function() {
                      return _ref2.apply(this, arguments);
                    };
                  }(), _promise.default.resolve({})));
                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }))();
      },
      clear: function() {
        var _this = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6() {
          var keys, toRemove, _iterator, _step, key, promises;
          return _regenerator.default.wrap(function(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return _Storage.default.getAllKeysAsync();
                case 2:
                  keys = _context6.sent;
                  toRemove = [];
                  _iterator = _createForOfIteratorHelper(keys);
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      key = _step.value;
                      if ((0, _LocalDatastoreUtils.isLocalDatastoreKey)(key)) {
                        toRemove.push(key);
                      }
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  promises = (0, _map.default)(toRemove).call(toRemove, _this.unPinWithName);
                  return _context6.abrupt("return", _promise.default.all(promises));
                case 8:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }))();
      }
    };
    module.exports = LocalDatastoreController;
  }
});

// node_modules/moralis/lib/browser/LocalDatastore.js
var require_LocalDatastore = __commonJS({
  "node_modules/moralis/lib/browser/LocalDatastore.js"(exports, module) {
    "use strict";
    init_react();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from2 = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray2 = require_is_array4();
    var _interopRequireDefault = require_interopRequireDefault();
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _promise = _interopRequireDefault(require_promise3());
    var _set = _interopRequireDefault(require_set3());
    var _concat = _interopRequireDefault(require_concat4());
    var _filter = _interopRequireDefault(require_filter4());
    var _includes = _interopRequireDefault(require_includes5());
    var _keys2 = _interopRequireDefault(require_keys3());
    var _startsWith = _interopRequireDefault(require_starts_with4());
    var _keys3 = _interopRequireDefault(require_keys7());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _map = _interopRequireDefault(require_map9());
    var _from = _interopRequireDefault(require_from3());
    var _find = _interopRequireDefault(require_find4());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _LocalDatastoreUtils = require_LocalDatastoreUtils();
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray2(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context16;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty(_context16 = Object.prototype.toString.call(o2)).call(_context16, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from2(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var LocalDatastore = {
      isEnabled: false,
      isSyncing: false,
      fromPinWithName: function(name2) {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.fromPinWithName(name2);
      },
      pinWithName: function(name2, value) {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.pinWithName(name2, value);
      },
      unPinWithName: function(name2) {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.unPinWithName(name2);
      },
      _getAllContents: function() {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.getAllContents();
      },
      _getRawStorage: function() {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.getRawStorage();
      },
      _clear: function() {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.clear();
      },
      _handlePinAllWithName: function(name2, objects) {
        var _this = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
          var _context;
          var pinName, toPinPromises, objectKeys, _iterator, _step, parent, children, parentKey, json, objectKey, fromPinPromise, _yield$Promise$all, _yield$Promise$all2, pinned, toPin;
          return _regenerator.default.wrap(function(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  pinName = _this.getPinName(name2);
                  toPinPromises = [];
                  objectKeys = [];
                  _iterator = _createForOfIteratorHelper(objects);
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      parent = _step.value;
                      children = _this._getChildren(parent);
                      parentKey = _this.getKeyForObject(parent);
                      json = parent._toFullJSON(void 0, true);
                      if (parent._localId) {
                        json._localId = parent._localId;
                      }
                      children[parentKey] = json;
                      for (objectKey in children) {
                        objectKeys.push(objectKey);
                        toPinPromises.push(_this.pinWithName(objectKey, [children[objectKey]]));
                      }
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  fromPinPromise = _this.fromPinWithName(pinName);
                  _context2.next = 8;
                  return _promise.default.all([fromPinPromise, toPinPromises]);
                case 8:
                  _yield$Promise$all = _context2.sent;
                  _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);
                  pinned = _yield$Promise$all2[0];
                  toPin = (0, _toConsumableArray2.default)(new _set.default((0, _concat.default)(_context = []).call(_context, (0, _toConsumableArray2.default)(pinned || []), objectKeys)));
                  return _context2.abrupt("return", _this.pinWithName(pinName, toPin));
                case 13:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee);
        }))();
      },
      _handleUnPinAllWithName: function(name2, objects) {
        var _this2 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
          var localDatastore, pinName, promises, objectKeys, _iterator2, _step2, _objectKeys, _context3, parent, children, parentKey, pinned, _iterator3, _step3, objectKey, hasReference, key, pinnedObjects;
          return _regenerator.default.wrap(function(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return _this2._getAllContents();
                case 2:
                  localDatastore = _context4.sent;
                  pinName = _this2.getPinName(name2);
                  promises = [];
                  objectKeys = [];
                  _iterator2 = _createForOfIteratorHelper(objects);
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                      parent = _step2.value;
                      children = _this2._getChildren(parent);
                      parentKey = _this2.getKeyForObject(parent);
                      (_objectKeys = objectKeys).push.apply(_objectKeys, (0, _concat.default)(_context3 = [parentKey]).call(_context3, (0, _toConsumableArray2.default)((0, _keys2.default)(children))));
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                  objectKeys = (0, _toConsumableArray2.default)(new _set.default(objectKeys));
                  pinned = localDatastore[pinName] || [];
                  pinned = (0, _filter.default)(pinned).call(pinned, function(item) {
                    return !(0, _includes.default)(objectKeys).call(objectKeys, item);
                  });
                  if (pinned.length === 0) {
                    promises.push(_this2.unPinWithName(pinName));
                    delete localDatastore[pinName];
                  } else {
                    promises.push(_this2.pinWithName(pinName, pinned));
                    localDatastore[pinName] = pinned;
                  }
                  _iterator3 = _createForOfIteratorHelper(objectKeys);
                  _context4.prev = 13;
                  _iterator3.s();
                case 15:
                  if ((_step3 = _iterator3.n()).done) {
                    _context4.next = 31;
                    break;
                  }
                  objectKey = _step3.value;
                  hasReference = false;
                  _context4.t0 = (0, _keys3.default)(_regenerator.default).call(_regenerator.default, localDatastore);
                case 19:
                  if ((_context4.t1 = _context4.t0()).done) {
                    _context4.next = 28;
                    break;
                  }
                  key = _context4.t1.value;
                  if (!(key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX))) {
                    _context4.next = 26;
                    break;
                  }
                  pinnedObjects = localDatastore[key] || [];
                  if (!(0, _includes.default)(pinnedObjects).call(pinnedObjects, objectKey)) {
                    _context4.next = 26;
                    break;
                  }
                  hasReference = true;
                  return _context4.abrupt("break", 28);
                case 26:
                  _context4.next = 19;
                  break;
                case 28:
                  if (!hasReference) {
                    promises.push(_this2.unPinWithName(objectKey));
                  }
                case 29:
                  _context4.next = 15;
                  break;
                case 31:
                  _context4.next = 36;
                  break;
                case 33:
                  _context4.prev = 33;
                  _context4.t2 = _context4["catch"](13);
                  _iterator3.e(_context4.t2);
                case 36:
                  _context4.prev = 36;
                  _iterator3.f();
                  return _context4.finish(36);
                case 39:
                  return _context4.abrupt("return", _promise.default.all(promises));
                case 40:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee2, null, [[13, 33, 36, 39]]);
        }))();
      },
      _getChildren: function(object) {
        var encountered = {};
        var json = object._toFullJSON(void 0, true);
        for (var key in json) {
          if (json[key] && json[key].__type && json[key].__type === "Object") {
            this._traverse(json[key], encountered);
          }
        }
        return encountered;
      },
      _traverse: function(object, encountered) {
        if (!object.objectId) {
          return;
        }
        var objectKey = this.getKeyForObject(object);
        if (encountered[objectKey]) {
          return;
        }
        encountered[objectKey] = object;
        for (var key in object) {
          var json = object[key];
          if (!object[key]) {
            json = object;
          }
          if (json.__type && json.__type === "Object") {
            this._traverse(json, encountered);
          }
        }
      },
      _serializeObjectsFromPinName: function(name2) {
        var _this3 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
          var _ref;
          var localDatastore, allObjects, key, pinName, pinned, promises, objects;
          return _regenerator.default.wrap(function(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return _this3._getAllContents();
                case 2:
                  localDatastore = _context5.sent;
                  allObjects = [];
                  for (key in localDatastore) {
                    if ((0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.OBJECT_PREFIX)) {
                      allObjects.push(localDatastore[key][0]);
                    }
                  }
                  if (name2) {
                    _context5.next = 7;
                    break;
                  }
                  return _context5.abrupt("return", allObjects);
                case 7:
                  pinName = _this3.getPinName(name2);
                  pinned = localDatastore[pinName];
                  if ((0, _isArray.default)(pinned)) {
                    _context5.next = 11;
                    break;
                  }
                  return _context5.abrupt("return", []);
                case 11:
                  promises = (0, _map.default)(pinned).call(pinned, function(objectKey) {
                    return _this3.fromPinWithName(objectKey);
                  });
                  _context5.next = 14;
                  return _promise.default.all(promises);
                case 14:
                  objects = _context5.sent;
                  objects = (0, _concat.default)(_ref = []).apply(_ref, (0, _toConsumableArray2.default)(objects));
                  return _context5.abrupt("return", (0, _filter.default)(objects).call(objects, function(object) {
                    return object != null;
                  }));
                case 17:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee3);
        }))();
      },
      _serializeObject: function(objectKey, localDatastore) {
        var _this4 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4() {
          var LDS, root, queue, meta, uniqueId, nodeId, subTreeRoot, field, value, key, pointer;
          return _regenerator.default.wrap(function(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  LDS = localDatastore;
                  if (LDS) {
                    _context6.next = 5;
                    break;
                  }
                  _context6.next = 4;
                  return _this4._getAllContents();
                case 4:
                  LDS = _context6.sent;
                case 5:
                  if (!(!LDS[objectKey] || LDS[objectKey].length === 0)) {
                    _context6.next = 7;
                    break;
                  }
                  return _context6.abrupt("return", null);
                case 7:
                  root = LDS[objectKey][0];
                  queue = [];
                  meta = {};
                  uniqueId = 0;
                  meta[uniqueId] = root;
                  queue.push(uniqueId);
                  while (queue.length !== 0) {
                    nodeId = queue.shift();
                    subTreeRoot = meta[nodeId];
                    for (field in subTreeRoot) {
                      value = subTreeRoot[field];
                      if (value.__type && value.__type === "Object") {
                        key = _this4.getKeyForObject(value);
                        if (LDS[key] && LDS[key].length > 0) {
                          pointer = LDS[key][0];
                          uniqueId++;
                          meta[uniqueId] = pointer;
                          subTreeRoot[field] = pointer;
                          queue.push(uniqueId);
                        }
                      }
                    }
                  }
                  return _context6.abrupt("return", root);
                case 15:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee4);
        }))();
      },
      _updateObjectIfPinned: function(object) {
        var _this5 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5() {
          var objectKey, pinned;
          return _regenerator.default.wrap(function(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  if (_this5.isEnabled) {
                    _context7.next = 2;
                    break;
                  }
                  return _context7.abrupt("return");
                case 2:
                  objectKey = _this5.getKeyForObject(object);
                  _context7.next = 5;
                  return _this5.fromPinWithName(objectKey);
                case 5:
                  pinned = _context7.sent;
                  if (!(!pinned || pinned.length === 0)) {
                    _context7.next = 8;
                    break;
                  }
                  return _context7.abrupt("return");
                case 8:
                  return _context7.abrupt("return", _this5.pinWithName(objectKey, [object._toFullJSON()]));
                case 9:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee5);
        }))();
      },
      _destroyObjectIfPinned: function(object) {
        var _this6 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6() {
          var localDatastore, objectKey, pin, promises, key, pinned;
          return _regenerator.default.wrap(function(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  if (_this6.isEnabled) {
                    _context8.next = 2;
                    break;
                  }
                  return _context8.abrupt("return");
                case 2:
                  _context8.next = 4;
                  return _this6._getAllContents();
                case 4:
                  localDatastore = _context8.sent;
                  objectKey = _this6.getKeyForObject(object);
                  pin = localDatastore[objectKey];
                  if (pin) {
                    _context8.next = 9;
                    break;
                  }
                  return _context8.abrupt("return");
                case 9:
                  promises = [_this6.unPinWithName(objectKey)];
                  delete localDatastore[objectKey];
                  for (key in localDatastore) {
                    if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {
                      pinned = localDatastore[key] || [];
                      if ((0, _includes.default)(pinned).call(pinned, objectKey)) {
                        pinned = (0, _filter.default)(pinned).call(pinned, function(item) {
                          return item !== objectKey;
                        });
                        if (pinned.length === 0) {
                          promises.push(_this6.unPinWithName(key));
                          delete localDatastore[key];
                        } else {
                          promises.push(_this6.pinWithName(key, pinned));
                          localDatastore[key] = pinned;
                        }
                      }
                    }
                  }
                  return _context8.abrupt("return", _promise.default.all(promises));
                case 13:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee6);
        }))();
      },
      _updateLocalIdForObject: function(localId, object) {
        var _this7 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7() {
          var _context9, _context10;
          var localKey, objectKey, unsaved, promises, localDatastore, key, pinned;
          return _regenerator.default.wrap(function(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  if (_this7.isEnabled) {
                    _context11.next = 2;
                    break;
                  }
                  return _context11.abrupt("return");
                case 2:
                  localKey = (0, _concat.default)(_context9 = (0, _concat.default)(_context10 = "".concat(_LocalDatastoreUtils.OBJECT_PREFIX)).call(_context10, object.className, "_")).call(_context9, localId);
                  objectKey = _this7.getKeyForObject(object);
                  _context11.next = 6;
                  return _this7.fromPinWithName(localKey);
                case 6:
                  unsaved = _context11.sent;
                  if (!(!unsaved || unsaved.length === 0)) {
                    _context11.next = 9;
                    break;
                  }
                  return _context11.abrupt("return");
                case 9:
                  promises = [_this7.unPinWithName(localKey), _this7.pinWithName(objectKey, unsaved)];
                  _context11.next = 12;
                  return _this7._getAllContents();
                case 12:
                  localDatastore = _context11.sent;
                  for (key in localDatastore) {
                    if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {
                      pinned = localDatastore[key] || [];
                      if ((0, _includes.default)(pinned).call(pinned, localKey)) {
                        pinned = (0, _filter.default)(pinned).call(pinned, function(item) {
                          return item !== localKey;
                        });
                        pinned.push(objectKey);
                        promises.push(_this7.pinWithName(key, pinned));
                        localDatastore[key] = pinned;
                      }
                    }
                  }
                  return _context11.abrupt("return", _promise.default.all(promises));
                case 15:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee7);
        }))();
      },
      updateFromServer: function() {
        var _this8 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee8() {
          var _context12;
          var localDatastore, keys, key, pointersHash, _i, _keys, _key, _key$split, _key$split2, className, objectId, queryPromises, responses, objects, pinPromises;
          return _regenerator.default.wrap(function(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  if (!(!_this8.checkIfEnabled() || _this8.isSyncing)) {
                    _context13.next = 2;
                    break;
                  }
                  return _context13.abrupt("return");
                case 2:
                  _context13.next = 4;
                  return _this8._getAllContents();
                case 4:
                  localDatastore = _context13.sent;
                  keys = [];
                  for (key in localDatastore) {
                    if ((0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.OBJECT_PREFIX)) {
                      keys.push(key);
                    }
                  }
                  if (!(keys.length === 0)) {
                    _context13.next = 9;
                    break;
                  }
                  return _context13.abrupt("return");
                case 9:
                  _this8.isSyncing = true;
                  pointersHash = {};
                  _i = 0, _keys = keys;
                case 12:
                  if (!(_i < _keys.length)) {
                    _context13.next = 23;
                    break;
                  }
                  _key = _keys[_i];
                  _key$split = _key.split("_"), _key$split2 = (0, _slicedToArray2.default)(_key$split, 4), className = _key$split2[2], objectId = _key$split2[3];
                  if (_key.split("_").length === 5 && _key.split("_")[3] === "User") {
                    className = "_User";
                    objectId = _key.split("_")[4];
                  }
                  if (!(0, _startsWith.default)(objectId).call(objectId, "local")) {
                    _context13.next = 18;
                    break;
                  }
                  return _context13.abrupt("continue", 20);
                case 18:
                  if (!(className in pointersHash)) {
                    pointersHash[className] = new _set.default();
                  }
                  pointersHash[className].add(objectId);
                case 20:
                  _i++;
                  _context13.next = 12;
                  break;
                case 23:
                  queryPromises = (0, _map.default)(_context12 = (0, _keys2.default)(pointersHash)).call(_context12, function(className2) {
                    var objectIds = (0, _from.default)(pointersHash[className2]);
                    var query = new _ParseQuery.default(className2);
                    query.limit(objectIds.length);
                    if (objectIds.length === 1) {
                      query.equalTo("objectId", objectIds[0]);
                    } else {
                      query.containedIn("objectId", objectIds);
                    }
                    return (0, _find.default)(query).call(query);
                  });
                  _context13.prev = 24;
                  _context13.next = 27;
                  return _promise.default.all(queryPromises);
                case 27:
                  responses = _context13.sent;
                  objects = (0, _concat.default)([]).apply([], responses);
                  pinPromises = (0, _map.default)(objects).call(objects, function(object) {
                    var objectKey = _this8.getKeyForObject(object);
                    return _this8.pinWithName(objectKey, object._toFullJSON());
                  });
                  _context13.next = 32;
                  return _promise.default.all(pinPromises);
                case 32:
                  _this8.isSyncing = false;
                  _context13.next = 39;
                  break;
                case 35:
                  _context13.prev = 35;
                  _context13.t0 = _context13["catch"](24);
                  console.error("Error syncing LocalDatastore: ", _context13.t0);
                  _this8.isSyncing = false;
                case 39:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee8, null, [[24, 35]]);
        }))();
      },
      getKeyForObject: function(object) {
        var _context14, _context15;
        var objectId = object.objectId || object._getId();
        return (0, _concat.default)(_context14 = (0, _concat.default)(_context15 = "".concat(_LocalDatastoreUtils.OBJECT_PREFIX)).call(_context15, object.className, "_")).call(_context14, objectId);
      },
      getPinName: function(pinName) {
        if (!pinName || pinName === _LocalDatastoreUtils.DEFAULT_PIN) {
          return _LocalDatastoreUtils.DEFAULT_PIN;
        }
        return _LocalDatastoreUtils.PIN_PREFIX + pinName;
      },
      checkIfEnabled: function() {
        if (!this.isEnabled) {
          console.error("Parse.enableLocalDatastore() must be called first");
        }
        return this.isEnabled;
      }
    };
    module.exports = LocalDatastore;
    _CoreManager.default.setLocalDatastoreController(require_LocalDatastoreController());
    _CoreManager.default.setLocalDatastore(LocalDatastore);
  }
});

// node_modules/axios/lib/helpers/bind.js
var require_bind8 = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    init_react();
    module.exports = function bind(fn2, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn2.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    init_react();
    var bind = require_bind8();
    var toString2 = Object.prototype.toString;
    function isArray(val) {
      return toString2.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString2.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString2.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString2.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString2.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString2.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString2.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim2(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn2) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l2 = obj.length; i < l2; i++) {
          fn2.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn2.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge2() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge2(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge2({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l2 = arguments.length; i < l2; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a2, b2, thisArg) {
      forEach(b2, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      });
      return a2;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge: merge2,
      extend,
      trim: trim2,
      stripBOM
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    function encode2(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize4(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v2) {
            if (utils.isDate(v2)) {
              v2 = v2.toISOString();
            } else if (utils.isObject(v2)) {
              v2 = JSON.stringify(v2);
            }
            parts.push(encode2(key) + "=" + encode2(v2));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id2) {
      if (this.handlers[id2]) {
        this.handlers[id2] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn2) {
      utils.forEach(this.handlers, function forEachHandler(h2) {
        if (h2 !== null) {
          fn2(h2);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name2) {
        if (name2 !== normalizedName && name2.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name2];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/axios/lib/core/enhanceError.js"(exports, module) {
    "use strict";
    init_react();
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/axios/lib/core/createError.js"(exports, module) {
    "use strict";
    init_react();
    var enhanceError = require_enhanceError();
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    init_react();
    var createError = require_createError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name2, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name2 + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name2) {
          var match2 = document.cookie.match(new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)"));
          return match2 ? decodeURIComponent(match2[3]) : null;
        },
        remove: function remove(name2) {
          this.write(name2, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    init_react();
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    init_react();
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    init_react();
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line2) {
        i = line2.indexOf(":");
        key = utils.trim(line2.substr(0, i)).toLowerCase();
        val = utils.trim(line2.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
    "use strict";
    init_react();
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString2() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || defaults.transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns2) {
      var context = this || defaults;
      utils.forEach(fns2, function transform(fn2) {
        data = fn2.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    init_react();
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge2 = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge2(prop);
        utils.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports, module) {
    init_react();
    module.exports = {
      "version": "0.24.0"
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    init_react();
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version17, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version17 ? " in " + version17 : "")));
        }
        if (version17 && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(formatMessage(opt, " has been deprecated since v" + version17 + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    init_react();
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token2 = this;
      this.promise.then(function(cancel) {
        if (!token2._listeners)
          return;
        var i;
        var l2 = token2._listeners.length;
        for (i = 0; i < l2; i++) {
          token2._listeners[i](cancel);
        }
        token2._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token2.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token2.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token2.reason) {
          return;
        }
        token2.reason = new Cancel(message);
        resolvePromise(token2.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token2 = new CancelToken(function executor(c2) {
        cancel = c2;
      });
      return {
        token: token2,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    init_react();
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    init_react();
    module.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    init_react();
    var utils = require_utils2();
    var bind = require_bind8();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module.exports = axios;
    module.exports.default = axios;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module) {
    init_react();
    module.exports = require_axios();
  }
});

// node_modules/moralis/lib/browser/MoralisWeb3Api.js
var require_MoralisWeb3Api = __commonJS({
  "node_modules/moralis/lib/browser/MoralisWeb3Api.js"(exports) {
    "use strict";
    init_react();
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty2 = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty2 = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    var _filter = _interopRequireDefault(require_filter4());
    var _includes = _interopRequireDefault(require_includes5());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty2(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var _context42, _context43;
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? _forEachInstanceProperty2(_context42 = ownKeys4(Object(source), true)).call(_context42, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context43 = ownKeys4(Object(source))).call(_context43, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var axios = require_axios2();
    var Web3Api = /* @__PURE__ */ function() {
      function Web3Api2() {
        (0, _classCallCheck2.default)(this, Web3Api2);
      }
      (0, _createClass2.default)(Web3Api2, null, [{
        key: "initialize",
        value: function(_ref) {
          var apiKey = _ref.apiKey, serverUrl = _ref.serverUrl, _ref$Moralis = _ref.Moralis, Moralis = _ref$Moralis === void 0 ? null : _ref$Moralis;
          if (!serverUrl && !apiKey) {
            throw new Error("Web3Api.initialize failed: initialize with apiKey or serverUrl");
          }
          if (apiKey)
            this.apiKey = apiKey;
          if (serverUrl)
            this.serverUrl = serverUrl;
          this.Moralis = Moralis;
        }
      }, {
        key: "getBody",
        value: function(params, bodyParams) {
          var _this = this;
          if (!params || !bodyParams || !bodyParams.length) {
            return void 0;
          }
          var body = {};
          (0, _forEach.default)(bodyParams).call(bodyParams, function(_ref2) {
            var key = _ref2.key, type = _ref2.type, required = _ref2.required;
            if (params[key] === void 0) {
              if (required)
                throw new Error("param ".concat(key, " is required!"));
            } else if (type === _this.BodyParamTypes.setBody) {
              body = params[key];
            } else {
              body[key] = params[key];
            }
            delete params[key];
          });
          return body;
        }
      }, {
        key: "getParameterizedUrl",
        value: function(url, params) {
          var _context;
          if (!(0, _keys.default)(params).length)
            return url;
          var requiredParams = (0, _filter.default)(_context = url.split("/")).call(_context, function(s2) {
            return s2 && (0, _includes.default)(s2).call(s2, ":");
          });
          if (!requiredParams.length)
            return url;
          var parameterizedUrl = url;
          (0, _forEach.default)(requiredParams).call(requiredParams, function(p2) {
            var key = p2.substr(1);
            var value = params[key];
            if (!value) {
              throw new Error("required param ".concat(key, " not provided"));
            }
            parameterizedUrl = parameterizedUrl.replace(p2, value);
            delete params[key];
          });
          return parameterizedUrl;
        }
      }, {
        key: "getErrorMessage",
        value: function(error, url) {
          var _error$response, _error$response$data;
          return (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()) || "Web3 API error while calling ".concat(url);
        }
      }, {
        key: "fetch",
        value: function() {
          var _fetch = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(_ref3) {
            var endpoint, providedParams, params, _endpoint$method, method, url, bodyParams, _this$Moralis, User, account, user, parameterizedUrl, body, response, msg;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    endpoint = _ref3.endpoint, providedParams = _ref3.params;
                    params = _objectSpread4({}, providedParams);
                    _endpoint$method = endpoint.method, method = _endpoint$method === void 0 ? "GET" : _endpoint$method, url = endpoint.url, bodyParams = endpoint.bodyParams;
                    if (this.Moralis) {
                      _this$Moralis = this.Moralis, User = _this$Moralis.User, account = _this$Moralis.account;
                      user = User.current();
                      if (!params.address) {
                        if (user) {
                          params.address = user.get("ethAddress");
                        } else if (account) {
                          params.address = account;
                        }
                      }
                    }
                    if (this.apiKey) {
                      _context2.next = 6;
                      break;
                    }
                    return _context2.abrupt("return", this.apiCall(endpoint.name, params));
                  case 6:
                    _context2.prev = 6;
                    parameterizedUrl = this.getParameterizedUrl(url, params);
                    body = this.getBody(params, bodyParams);
                    _context2.next = 11;
                    return axios(this.baseURL + parameterizedUrl, {
                      params,
                      method,
                      body,
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                        "x-api-key": this.apiKey
                      }
                    });
                  case 11:
                    response = _context2.sent;
                    return _context2.abrupt("return", response.data);
                  case 15:
                    _context2.prev = 15;
                    _context2.t0 = _context2["catch"](6);
                    msg = this.getErrorMessage(_context2.t0, url);
                    throw new Error(msg);
                  case 19:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this, [[6, 15]]);
          }));
          return function() {
            return _fetch.apply(this, arguments);
          };
        }()
      }, {
        key: "apiCall",
        value: function() {
          var _apiCall = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(name2, options) {
            var http, response, _error$response2, _error$response2$data;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (this.serverUrl) {
                      _context3.next = 2;
                      break;
                    }
                    throw new Error("Web3Api not initialized, run Moralis.start() first");
                  case 2:
                    _context3.prev = 2;
                    http = axios.create({
                      baseURL: this.serverUrl
                    });
                    if (!options.chain)
                      options.chain = "eth";
                    _context3.next = 7;
                    return http.post("/functions/".concat(name2), options, {
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json"
                      }
                    });
                  case 7:
                    response = _context3.sent;
                    return _context3.abrupt("return", response.data.result);
                  case 11:
                    _context3.prev = 11;
                    _context3.t0 = _context3["catch"](2);
                    if (!((_error$response2 = _context3.t0.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.error)) {
                      _context3.next = 15;
                      break;
                    }
                    throw new Error(_context3.t0.response.data.error);
                  case 15:
                    throw _context3.t0;
                  case 16:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this, [[2, 11]]);
          }));
          return function() {
            return _apiCall.apply(this, arguments);
          };
        }()
      }]);
      return Web3Api2;
    }();
    (0, _defineProperty2.default)(Web3Api, "baseURL", "https://deep-index.moralis.io/api/v2");
    (0, _defineProperty2.default)(Web3Api, "BodyParamTypes", {
      setBody: "set body",
      property: "property"
    });
    (0, _defineProperty2.default)(Web3Api, "native", {
      getBlock: function() {
        var _getBlock = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
          var options, _args3 = arguments;
          return _regenerator.default.wrap(function(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  options = _args3.length > 0 && _args3[0] !== void 0 ? _args3[0] : {};
                  return _context4.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getBlock",
                      "url": "/block/:block_number_or_hash"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee3);
        }));
        return function() {
          return _getBlock.apply(this, arguments);
        };
      }(),
      getDateToBlock: function() {
        var _getDateToBlock = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4() {
          var options, _args4 = arguments;
          return _regenerator.default.wrap(function(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  options = _args4.length > 0 && _args4[0] !== void 0 ? _args4[0] : {};
                  return _context5.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getDateToBlock",
                      "url": "/dateToBlock"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee4);
        }));
        return function() {
          return _getDateToBlock.apply(this, arguments);
        };
      }(),
      getLogsByAddress: function() {
        var _getLogsByAddress = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5() {
          var options, _args5 = arguments;
          return _regenerator.default.wrap(function(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  options = _args5.length > 0 && _args5[0] !== void 0 ? _args5[0] : {};
                  return _context6.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getLogsByAddress",
                      "url": "/:address/logs"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee5);
        }));
        return function() {
          return _getLogsByAddress.apply(this, arguments);
        };
      }(),
      getNFTTransfersByBlock: function() {
        var _getNFTTransfersByBlock = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6() {
          var options, _args6 = arguments;
          return _regenerator.default.wrap(function(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  options = _args6.length > 0 && _args6[0] !== void 0 ? _args6[0] : {};
                  return _context7.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getNFTTransfersByBlock",
                      "url": "/block/:block_number_or_hash/nft/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee6);
        }));
        return function() {
          return _getNFTTransfersByBlock.apply(this, arguments);
        };
      }(),
      getTransaction: function() {
        var _getTransaction = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7() {
          var options, _args7 = arguments;
          return _regenerator.default.wrap(function(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  options = _args7.length > 0 && _args7[0] !== void 0 ? _args7[0] : {};
                  return _context8.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getTransaction",
                      "url": "/transaction/:transaction_hash"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee7);
        }));
        return function() {
          return _getTransaction.apply(this, arguments);
        };
      }(),
      getContractEvents: function() {
        var _getContractEvents = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee8() {
          var options, _args8 = arguments;
          return _regenerator.default.wrap(function(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  options = _args8.length > 0 && _args8[0] !== void 0 ? _args8[0] : {};
                  return _context9.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "POST",
                      "group": "native",
                      "name": "getContractEvents",
                      "url": "/:address/events",
                      "bodyParams": [{
                        "key": "data",
                        "type": "set body",
                        "required": false
                      }]
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee8);
        }));
        return function() {
          return _getContractEvents.apply(this, arguments);
        };
      }(),
      runContractFunction: function() {
        var _runContractFunction = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee9() {
          var options, _args9 = arguments;
          return _regenerator.default.wrap(function(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  options = _args9.length > 0 && _args9[0] !== void 0 ? _args9[0] : {};
                  return _context10.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "POST",
                      "group": "native",
                      "name": "runContractFunction",
                      "url": "/:address/function",
                      "bodyParams": [{
                        "key": "abi",
                        "type": "property",
                        "required": true
                      }, {
                        "key": "params",
                        "type": "property",
                        "required": false
                      }]
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee9);
        }));
        return function() {
          return _runContractFunction.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "account", {
      getTransactions: function() {
        var _getTransactions = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee10() {
          var options, _args10 = arguments;
          return _regenerator.default.wrap(function(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  options = _args10.length > 0 && _args10[0] !== void 0 ? _args10[0] : {};
                  return _context11.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getTransactions",
                      "url": "/:address"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee10);
        }));
        return function() {
          return _getTransactions.apply(this, arguments);
        };
      }(),
      getNativeBalance: function() {
        var _getNativeBalance = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee11() {
          var options, _args11 = arguments;
          return _regenerator.default.wrap(function(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  options = _args11.length > 0 && _args11[0] !== void 0 ? _args11[0] : {};
                  return _context12.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNativeBalance",
                      "url": "/:address/balance"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee11);
        }));
        return function() {
          return _getNativeBalance.apply(this, arguments);
        };
      }(),
      getTokenBalances: function() {
        var _getTokenBalances = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee12() {
          var options, _args12 = arguments;
          return _regenerator.default.wrap(function(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  options = _args12.length > 0 && _args12[0] !== void 0 ? _args12[0] : {};
                  return _context13.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getTokenBalances",
                      "url": "/:address/erc20"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee12);
        }));
        return function() {
          return _getTokenBalances.apply(this, arguments);
        };
      }(),
      getTokenTransfers: function() {
        var _getTokenTransfers = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee13() {
          var options, _args13 = arguments;
          return _regenerator.default.wrap(function(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  options = _args13.length > 0 && _args13[0] !== void 0 ? _args13[0] : {};
                  return _context14.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getTokenTransfers",
                      "url": "/:address/erc20/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee13);
        }));
        return function() {
          return _getTokenTransfers.apply(this, arguments);
        };
      }(),
      getNFTs: function() {
        var _getNFTs = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee14() {
          var options, _args14 = arguments;
          return _regenerator.default.wrap(function(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  options = _args14.length > 0 && _args14[0] !== void 0 ? _args14[0] : {};
                  return _context15.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNFTs",
                      "url": "/:address/nft"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee14);
        }));
        return function() {
          return _getNFTs.apply(this, arguments);
        };
      }(),
      getNFTTransfers: function() {
        var _getNFTTransfers = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee15() {
          var options, _args15 = arguments;
          return _regenerator.default.wrap(function(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  options = _args15.length > 0 && _args15[0] !== void 0 ? _args15[0] : {};
                  return _context16.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNFTTransfers",
                      "url": "/:address/nft/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee15);
        }));
        return function() {
          return _getNFTTransfers.apply(this, arguments);
        };
      }(),
      getNFTsForContract: function() {
        var _getNFTsForContract = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee16() {
          var options, _args16 = arguments;
          return _regenerator.default.wrap(function(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  options = _args16.length > 0 && _args16[0] !== void 0 ? _args16[0] : {};
                  return _context17.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNFTsForContract",
                      "url": "/:address/nft/:token_address"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee16);
        }));
        return function() {
          return _getNFTsForContract.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "token", {
      getTokenMetadata: function() {
        var _getTokenMetadata = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee17() {
          var options, _args17 = arguments;
          return _regenerator.default.wrap(function(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  options = _args17.length > 0 && _args17[0] !== void 0 ? _args17[0] : {};
                  return _context18.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenMetadata",
                      "url": "/erc20/metadata"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee17);
        }));
        return function() {
          return _getTokenMetadata.apply(this, arguments);
        };
      }(),
      getNFTTrades: function() {
        var _getNFTTrades = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee18() {
          var options, _args18 = arguments;
          return _regenerator.default.wrap(function(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  options = _args18.length > 0 && _args18[0] !== void 0 ? _args18[0] : {};
                  return _context19.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNFTTrades",
                      "url": "/nft/:address/trades"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee18);
        }));
        return function() {
          return _getNFTTrades.apply(this, arguments);
        };
      }(),
      getNFTLowestPrice: function() {
        var _getNFTLowestPrice = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee19() {
          var options, _args19 = arguments;
          return _regenerator.default.wrap(function(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  options = _args19.length > 0 && _args19[0] !== void 0 ? _args19[0] : {};
                  return _context20.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNFTLowestPrice",
                      "url": "/nft/:address/lowestprice"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee19);
        }));
        return function() {
          return _getNFTLowestPrice.apply(this, arguments);
        };
      }(),
      getTokenMetadataBySymbol: function() {
        var _getTokenMetadataBySymbol = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee20() {
          var options, _args20 = arguments;
          return _regenerator.default.wrap(function(_context21) {
            while (1) {
              switch (_context21.prev = _context21.next) {
                case 0:
                  options = _args20.length > 0 && _args20[0] !== void 0 ? _args20[0] : {};
                  return _context21.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenMetadataBySymbol",
                      "url": "/erc20/metadata/symbols"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context21.stop();
              }
            }
          }, _callee20);
        }));
        return function() {
          return _getTokenMetadataBySymbol.apply(this, arguments);
        };
      }(),
      getTokenPrice: function() {
        var _getTokenPrice = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee21() {
          var options, _args21 = arguments;
          return _regenerator.default.wrap(function(_context22) {
            while (1) {
              switch (_context22.prev = _context22.next) {
                case 0:
                  options = _args21.length > 0 && _args21[0] !== void 0 ? _args21[0] : {};
                  return _context22.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenPrice",
                      "url": "/erc20/:address/price"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context22.stop();
              }
            }
          }, _callee21);
        }));
        return function() {
          return _getTokenPrice.apply(this, arguments);
        };
      }(),
      getTokenAddressTransfers: function() {
        var _getTokenAddressTransfers = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee22() {
          var options, _args22 = arguments;
          return _regenerator.default.wrap(function(_context23) {
            while (1) {
              switch (_context23.prev = _context23.next) {
                case 0:
                  options = _args22.length > 0 && _args22[0] !== void 0 ? _args22[0] : {};
                  return _context23.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenAddressTransfers",
                      "url": "/erc20/:address/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context23.stop();
              }
            }
          }, _callee22);
        }));
        return function() {
          return _getTokenAddressTransfers.apply(this, arguments);
        };
      }(),
      getTokenAllowance: function() {
        var _getTokenAllowance = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee23() {
          var options, _args23 = arguments;
          return _regenerator.default.wrap(function(_context24) {
            while (1) {
              switch (_context24.prev = _context24.next) {
                case 0:
                  options = _args23.length > 0 && _args23[0] !== void 0 ? _args23[0] : {};
                  return _context24.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenAllowance",
                      "url": "/erc20/:address/allowance"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context24.stop();
              }
            }
          }, _callee23);
        }));
        return function() {
          return _getTokenAllowance.apply(this, arguments);
        };
      }(),
      searchNFTs: function() {
        var _searchNFTs = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee24() {
          var options, _args24 = arguments;
          return _regenerator.default.wrap(function(_context25) {
            while (1) {
              switch (_context25.prev = _context25.next) {
                case 0:
                  options = _args24.length > 0 && _args24[0] !== void 0 ? _args24[0] : {};
                  return _context25.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "searchNFTs",
                      "url": "/nft/search"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context25.stop();
              }
            }
          }, _callee24);
        }));
        return function() {
          return _searchNFTs.apply(this, arguments);
        };
      }(),
      getNftTransfersFromToBlock: function() {
        var _getNftTransfersFromToBlock = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee25() {
          var options, _args25 = arguments;
          return _regenerator.default.wrap(function(_context26) {
            while (1) {
              switch (_context26.prev = _context26.next) {
                case 0:
                  options = _args25.length > 0 && _args25[0] !== void 0 ? _args25[0] : {};
                  return _context26.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNftTransfersFromToBlock",
                      "url": "/nft/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context26.stop();
              }
            }
          }, _callee25);
        }));
        return function() {
          return _getNftTransfersFromToBlock.apply(this, arguments);
        };
      }(),
      getAllTokenIds: function() {
        var _getAllTokenIds = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee26() {
          var options, _args26 = arguments;
          return _regenerator.default.wrap(function(_context27) {
            while (1) {
              switch (_context27.prev = _context27.next) {
                case 0:
                  options = _args26.length > 0 && _args26[0] !== void 0 ? _args26[0] : {};
                  return _context27.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getAllTokenIds",
                      "url": "/nft/:address"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context27.stop();
              }
            }
          }, _callee26);
        }));
        return function() {
          return _getAllTokenIds.apply(this, arguments);
        };
      }(),
      getContractNFTTransfers: function() {
        var _getContractNFTTransfers = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee27() {
          var options, _args27 = arguments;
          return _regenerator.default.wrap(function(_context28) {
            while (1) {
              switch (_context28.prev = _context28.next) {
                case 0:
                  options = _args27.length > 0 && _args27[0] !== void 0 ? _args27[0] : {};
                  return _context28.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getContractNFTTransfers",
                      "url": "/nft/:address/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context28.stop();
              }
            }
          }, _callee27);
        }));
        return function() {
          return _getContractNFTTransfers.apply(this, arguments);
        };
      }(),
      getNFTOwners: function() {
        var _getNFTOwners = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee28() {
          var options, _args28 = arguments;
          return _regenerator.default.wrap(function(_context29) {
            while (1) {
              switch (_context29.prev = _context29.next) {
                case 0:
                  options = _args28.length > 0 && _args28[0] !== void 0 ? _args28[0] : {};
                  return _context29.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNFTOwners",
                      "url": "/nft/:address/owners"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context29.stop();
              }
            }
          }, _callee28);
        }));
        return function() {
          return _getNFTOwners.apply(this, arguments);
        };
      }(),
      getNFTMetadata: function() {
        var _getNFTMetadata = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee29() {
          var options, _args29 = arguments;
          return _regenerator.default.wrap(function(_context30) {
            while (1) {
              switch (_context30.prev = _context30.next) {
                case 0:
                  options = _args29.length > 0 && _args29[0] !== void 0 ? _args29[0] : {};
                  return _context30.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNFTMetadata",
                      "url": "/nft/:address/metadata"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context30.stop();
              }
            }
          }, _callee29);
        }));
        return function() {
          return _getNFTMetadata.apply(this, arguments);
        };
      }(),
      reSyncMetadata: function() {
        var _reSyncMetadata = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee30() {
          var options, _args30 = arguments;
          return _regenerator.default.wrap(function(_context31) {
            while (1) {
              switch (_context31.prev = _context31.next) {
                case 0:
                  options = _args30.length > 0 && _args30[0] !== void 0 ? _args30[0] : {};
                  return _context31.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "reSyncMetadata",
                      "url": "/nft/:address/:token_id/metadata/resync"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context31.stop();
              }
            }
          }, _callee30);
        }));
        return function() {
          return _reSyncMetadata.apply(this, arguments);
        };
      }(),
      syncNFTContract: function() {
        var _syncNFTContract = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee31() {
          var options, _args31 = arguments;
          return _regenerator.default.wrap(function(_context32) {
            while (1) {
              switch (_context32.prev = _context32.next) {
                case 0:
                  options = _args31.length > 0 && _args31[0] !== void 0 ? _args31[0] : {};
                  return _context32.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "PUT",
                      "group": "token",
                      "name": "syncNFTContract",
                      "url": "/nft/:address/sync"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context32.stop();
              }
            }
          }, _callee31);
        }));
        return function() {
          return _syncNFTContract.apply(this, arguments);
        };
      }(),
      getTokenIdMetadata: function() {
        var _getTokenIdMetadata = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee32() {
          var options, _args32 = arguments;
          return _regenerator.default.wrap(function(_context33) {
            while (1) {
              switch (_context33.prev = _context33.next) {
                case 0:
                  options = _args32.length > 0 && _args32[0] !== void 0 ? _args32[0] : {};
                  return _context33.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenIdMetadata",
                      "url": "/nft/:address/:token_id"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context33.stop();
              }
            }
          }, _callee32);
        }));
        return function() {
          return _getTokenIdMetadata.apply(this, arguments);
        };
      }(),
      getTokenIdOwners: function() {
        var _getTokenIdOwners = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee33() {
          var options, _args33 = arguments;
          return _regenerator.default.wrap(function(_context34) {
            while (1) {
              switch (_context34.prev = _context34.next) {
                case 0:
                  options = _args33.length > 0 && _args33[0] !== void 0 ? _args33[0] : {};
                  return _context34.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenIdOwners",
                      "url": "/nft/:address/:token_id/owners"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context34.stop();
              }
            }
          }, _callee33);
        }));
        return function() {
          return _getTokenIdOwners.apply(this, arguments);
        };
      }(),
      getWalletTokenIdTransfers: function() {
        var _getWalletTokenIdTransfers = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee34() {
          var options, _args34 = arguments;
          return _regenerator.default.wrap(function(_context35) {
            while (1) {
              switch (_context35.prev = _context35.next) {
                case 0:
                  options = _args34.length > 0 && _args34[0] !== void 0 ? _args34[0] : {};
                  return _context35.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getWalletTokenIdTransfers",
                      "url": "/nft/:address/:token_id/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context35.stop();
              }
            }
          }, _callee34);
        }));
        return function() {
          return _getWalletTokenIdTransfers.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "resolve", {
      resolveDomain: function() {
        var _resolveDomain = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee35() {
          var options, _args35 = arguments;
          return _regenerator.default.wrap(function(_context36) {
            while (1) {
              switch (_context36.prev = _context36.next) {
                case 0:
                  options = _args35.length > 0 && _args35[0] !== void 0 ? _args35[0] : {};
                  return _context36.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "resolve",
                      "name": "resolveDomain",
                      "url": "/resolve/:domain"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context36.stop();
              }
            }
          }, _callee35);
        }));
        return function() {
          return _resolveDomain.apply(this, arguments);
        };
      }(),
      resolveAddress: function() {
        var _resolveAddress = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee36() {
          var options, _args36 = arguments;
          return _regenerator.default.wrap(function(_context37) {
            while (1) {
              switch (_context37.prev = _context37.next) {
                case 0:
                  options = _args36.length > 0 && _args36[0] !== void 0 ? _args36[0] : {};
                  return _context37.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "resolve",
                      "name": "resolveAddress",
                      "url": "/resolve/:address/reverse"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context37.stop();
              }
            }
          }, _callee36);
        }));
        return function() {
          return _resolveAddress.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "defi", {
      getPairReserves: function() {
        var _getPairReserves = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee37() {
          var options, _args37 = arguments;
          return _regenerator.default.wrap(function(_context38) {
            while (1) {
              switch (_context38.prev = _context38.next) {
                case 0:
                  options = _args37.length > 0 && _args37[0] !== void 0 ? _args37[0] : {};
                  return _context38.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "defi",
                      "name": "getPairReserves",
                      "url": "/:pair_address/reserves"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context38.stop();
              }
            }
          }, _callee37);
        }));
        return function() {
          return _getPairReserves.apply(this, arguments);
        };
      }(),
      getPairAddress: function() {
        var _getPairAddress = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee38() {
          var options, _args38 = arguments;
          return _regenerator.default.wrap(function(_context39) {
            while (1) {
              switch (_context39.prev = _context39.next) {
                case 0:
                  options = _args38.length > 0 && _args38[0] !== void 0 ? _args38[0] : {};
                  return _context39.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "defi",
                      "name": "getPairAddress",
                      "url": "/:token0_address/:token1_address/pairAddress"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context39.stop();
              }
            }
          }, _callee38);
        }));
        return function() {
          return _getPairAddress.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "storage", {
      uploadFolder: function() {
        var _uploadFolder = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee39() {
          var options, _args39 = arguments;
          return _regenerator.default.wrap(function(_context40) {
            while (1) {
              switch (_context40.prev = _context40.next) {
                case 0:
                  options = _args39.length > 0 && _args39[0] !== void 0 ? _args39[0] : {};
                  return _context40.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "POST",
                      "group": "storage",
                      "name": "uploadFolder",
                      "url": "/ipfs/uploadFolder",
                      "bodyParams": [{
                        "key": "data",
                        "type": "set body",
                        "required": false
                      }]
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context40.stop();
              }
            }
          }, _callee39);
        }));
        return function() {
          return _uploadFolder.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "info", {
      web3ApiVersion: function() {
        var _web3ApiVersion = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee40() {
          var options, _args40 = arguments;
          return _regenerator.default.wrap(function(_context41) {
            while (1) {
              switch (_context41.prev = _context41.next) {
                case 0:
                  options = _args40.length > 0 && _args40[0] !== void 0 ? _args40[0] : {};
                  return _context41.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "info",
                      "name": "web3ApiVersion",
                      "url": "/web3/version"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context41.stop();
              }
            }
          }, _callee40);
        }));
        return function() {
          return _web3ApiVersion.apply(this, arguments);
        };
      }()
    });
    var _default = Web3Api;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/MoralisSolanaApi.js
var require_MoralisSolanaApi = __commonJS({
  "node_modules/moralis/lib/browser/MoralisSolanaApi.js"(exports) {
    "use strict";
    init_react();
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty2 = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty2 = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    var _filter = _interopRequireDefault(require_filter4());
    var _includes = _interopRequireDefault(require_includes5());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys4(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty2(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var _context9, _context10;
        var source = arguments[i] != null ? arguments[i] : {};
        i % 2 ? _forEachInstanceProperty2(_context9 = ownKeys4(Object(source), true)).call(_context9, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context10 = ownKeys4(Object(source))).call(_context10, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var axios = require_axios2();
    var SolanaApi = /* @__PURE__ */ function() {
      function SolanaApi2() {
        (0, _classCallCheck2.default)(this, SolanaApi2);
      }
      (0, _createClass2.default)(SolanaApi2, null, [{
        key: "initialize",
        value: function(_ref) {
          var apiKey = _ref.apiKey, serverUrl = _ref.serverUrl, _ref$Moralis = _ref.Moralis, Moralis = _ref$Moralis === void 0 ? null : _ref$Moralis;
          if (!serverUrl && !apiKey) {
            throw new Error("SolanaApi.initialize failed: initialize with apiKey or serverUrl");
          }
          if (apiKey)
            this.apiKey = apiKey;
          if (serverUrl)
            this.serverUrl = serverUrl;
          this.Moralis = Moralis;
        }
      }, {
        key: "getBody",
        value: function(params, bodyParams) {
          var _this = this;
          if (!params || !bodyParams || !bodyParams.length) {
            return void 0;
          }
          var body = {};
          (0, _forEach.default)(bodyParams).call(bodyParams, function(_ref2) {
            var key = _ref2.key, type = _ref2.type, required = _ref2.required;
            if (params[key] === void 0) {
              if (required)
                throw new Error("param ".concat(key, " is required!"));
            } else if (type === _this.BodyParamTypes.setBody) {
              body = params[key];
            } else {
              body[key] = params[key];
            }
            delete params[key];
          });
          return body;
        }
      }, {
        key: "getParameterizedUrl",
        value: function(url, params) {
          var _context;
          if (!(0, _keys.default)(params).length)
            return url;
          var requiredParams = (0, _filter.default)(_context = url.split("/")).call(_context, function(s2) {
            return s2 && (0, _includes.default)(s2).call(s2, ":");
          });
          if (!requiredParams.length)
            return url;
          var parameterizedUrl = url;
          (0, _forEach.default)(requiredParams).call(requiredParams, function(p2) {
            var key = p2.substr(1);
            var value = params[key];
            if (!value) {
              throw new Error("required param ".concat(key, " not provided"));
            }
            parameterizedUrl = parameterizedUrl.replace(p2, value);
            delete params[key];
          });
          return parameterizedUrl;
        }
      }, {
        key: "getErrorMessage",
        value: function(error, url) {
          var _error$response, _error$response$data;
          return (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()) || "Solana API error while calling ".concat(url);
        }
      }, {
        key: "fetch",
        value: function() {
          var _fetch = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(_ref3) {
            var endpoint, providedParams, params, _endpoint$method, method, url, bodyParams, User, user, parameterizedUrl, body, response, msg;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    endpoint = _ref3.endpoint, providedParams = _ref3.params;
                    params = _objectSpread4({}, providedParams);
                    _endpoint$method = endpoint.method, method = _endpoint$method === void 0 ? "GET" : _endpoint$method, url = endpoint.url, bodyParams = endpoint.bodyParams;
                    if (this.Moralis) {
                      User = this.Moralis.User;
                      user = User.current();
                      if (!params.address) {
                        if (user) {
                          params.address = user.get("solAddress");
                        }
                      }
                    }
                    if (!params.network)
                      params.network = "mainnet";
                    if (!params.responseType)
                      params.responseType = "native";
                    if (this.apiKey) {
                      _context2.next = 8;
                      break;
                    }
                    return _context2.abrupt("return", this.apiCall(endpoint.name, params));
                  case 8:
                    _context2.prev = 8;
                    parameterizedUrl = this.getParameterizedUrl(url, params);
                    body = this.getBody(params, bodyParams);
                    _context2.next = 13;
                    return axios(this.baseURL + parameterizedUrl, {
                      params,
                      method,
                      body,
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                        "x-api-key": this.apiKey
                      }
                    });
                  case 13:
                    response = _context2.sent;
                    return _context2.abrupt("return", response.data);
                  case 17:
                    _context2.prev = 17;
                    _context2.t0 = _context2["catch"](8);
                    msg = this.getErrorMessage(_context2.t0, url);
                    throw new Error(msg);
                  case 21:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this, [[8, 17]]);
          }));
          return function() {
            return _fetch.apply(this, arguments);
          };
        }()
      }, {
        key: "apiCall",
        value: function() {
          var _apiCall = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(name2, options) {
            var http, response, _error$response2, _error$response2$data;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (this.serverUrl) {
                      _context3.next = 2;
                      break;
                    }
                    throw new Error("SolanaAPI not initialized, run Moralis.start() first");
                  case 2:
                    _context3.prev = 2;
                    http = axios.create({
                      baseURL: this.serverUrl
                    });
                    _context3.next = 6;
                    return http.post("/functions/sol-".concat(name2), options, {
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json"
                      }
                    });
                  case 6:
                    response = _context3.sent;
                    return _context3.abrupt("return", response.data.result);
                  case 10:
                    _context3.prev = 10;
                    _context3.t0 = _context3["catch"](2);
                    if (!((_error$response2 = _context3.t0.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.error)) {
                      _context3.next = 14;
                      break;
                    }
                    throw new Error(_context3.t0.response.data.error);
                  case 14:
                    throw _context3.t0;
                  case 15:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this, [[2, 10]]);
          }));
          return function() {
            return _apiCall.apply(this, arguments);
          };
        }()
      }]);
      return SolanaApi2;
    }();
    (0, _defineProperty2.default)(SolanaApi, "baseURL", "https://solana-gateway.moralis.io");
    (0, _defineProperty2.default)(SolanaApi, "BodyParamTypes", {
      setBody: "set body",
      property: "property"
    });
    (0, _defineProperty2.default)(SolanaApi, "account", {
      balance: function() {
        var _balance = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
          var options, _args3 = arguments;
          return _regenerator.default.wrap(function(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  options = _args3.length > 0 && _args3[0] !== void 0 ? _args3[0] : {};
                  return _context4.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "balance",
                      "url": "/account/:network/:address/balance"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee3);
        }));
        return function() {
          return _balance.apply(this, arguments);
        };
      }(),
      getSPL: function() {
        var _getSPL = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4() {
          var options, _args4 = arguments;
          return _regenerator.default.wrap(function(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  options = _args4.length > 0 && _args4[0] !== void 0 ? _args4[0] : {};
                  return _context5.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getSPL",
                      "url": "/account/:network/:address/tokens"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee4);
        }));
        return function() {
          return _getSPL.apply(this, arguments);
        };
      }(),
      getNFTs: function() {
        var _getNFTs = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5() {
          var options, _args5 = arguments;
          return _regenerator.default.wrap(function(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  options = _args5.length > 0 && _args5[0] !== void 0 ? _args5[0] : {};
                  return _context6.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNFTs",
                      "url": "/account/:network/:address/nft"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee5);
        }));
        return function() {
          return _getNFTs.apply(this, arguments);
        };
      }(),
      getPortfolio: function() {
        var _getPortfolio = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6() {
          var options, _args6 = arguments;
          return _regenerator.default.wrap(function(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  options = _args6.length > 0 && _args6[0] !== void 0 ? _args6[0] : {};
                  return _context7.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getPortfolio",
                      "url": "/account/:network/:address/portfolio"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee6);
        }));
        return function() {
          return _getPortfolio.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(SolanaApi, "nft", {
      getNFTMetadata: function() {
        var _getNFTMetadata = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7() {
          var options, _args7 = arguments;
          return _regenerator.default.wrap(function(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  options = _args7.length > 0 && _args7[0] !== void 0 ? _args7[0] : {};
                  return _context8.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "nft",
                      "name": "getNFTMetadata",
                      "url": "/nft/:network/:address/metadata"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee7);
        }));
        return function() {
          return _getNFTMetadata.apply(this, arguments);
        };
      }()
    });
    var _default = SolanaApi;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Push.js
var require_Push = __commonJS({
  "node_modules/moralis/lib/browser/Push.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.send = send;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    function send(data) {
      if (data.where && data.where instanceof _ParseQuery.default) {
        data.where = data.where.toJSON().where;
      }
      if (data.push_time && (0, _typeof2.default)(data.push_time) === "object") {
        data.push_time = data.push_time.toJSON();
      }
      if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === "object") {
        data.expiration_time = data.expiration_time.toJSON();
      }
      if (data.expiration_time && data.expiration_interval) {
        throw new Error("expiration_time and expiration_interval cannot both be set.");
      }
      return _CoreManager.default.getPushController().send(data);
    }
    var DefaultController = {
      send: function(data) {
        return _CoreManager.default.getRESTController().request("POST", "push", data, {
          useMasterKey: true
        });
      }
    };
    _CoreManager.default.setPushController(DefaultController);
  }
});

// node_modules/moralis/lib/browser/ParseSchema.js
var require_ParseSchema = __commonJS({
  "node_modules/moralis/lib/browser/ParseSchema.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseCLP = _interopRequireDefault(require_ParseCLP());
    var FIELD_TYPES = ["String", "Number", "Boolean", "Date", "File", "GeoPoint", "Polygon", "Array", "Object", "Pointer", "Relation"];
    var ParseSchema = /* @__PURE__ */ function() {
      function ParseSchema2(className) {
        (0, _classCallCheck2.default)(this, ParseSchema2);
        (0, _defineProperty2.default)(this, "className", void 0);
        (0, _defineProperty2.default)(this, "_fields", void 0);
        (0, _defineProperty2.default)(this, "_indexes", void 0);
        (0, _defineProperty2.default)(this, "_clp", void 0);
        if (typeof className === "string") {
          if (className === "User" && _CoreManager.default.get("PERFORM_USER_REWRITE")) {
            this.className = "_User";
          } else {
            this.className = className;
          }
        }
        this._fields = {};
        this._indexes = {};
      }
      (0, _createClass2.default)(ParseSchema2, [{
        key: "get",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          return controller.get(this.className).then(function(response) {
            if (!response) {
              throw new Error("Schema not found.");
            }
            return response;
          });
        }
      }, {
        key: "save",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          var params = {
            className: this.className,
            fields: this._fields,
            indexes: this._indexes,
            classLevelPermissions: this._clp
          };
          return controller.create(this.className, params);
        }
      }, {
        key: "update",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          var params = {
            className: this.className,
            fields: this._fields,
            indexes: this._indexes,
            classLevelPermissions: this._clp
          };
          this._fields = {};
          this._indexes = {};
          return controller.update(this.className, params);
        }
      }, {
        key: "delete",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          return controller.delete(this.className);
        }
      }, {
        key: "purge",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          return controller.purge(this.className);
        }
      }, {
        key: "assertClassName",
        value: function() {
          if (!this.className) {
            throw new Error("You must set a Class Name before making any request.");
          }
        }
      }, {
        key: "setCLP",
        value: function(clp) {
          if (clp instanceof _ParseCLP.default) {
            this._clp = clp.toJSON();
          } else {
            this._clp = clp;
          }
          return this;
        }
      }, {
        key: "addField",
        value: function(name2, type) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          type = type || "String";
          if (!name2) {
            throw new Error("field name may not be null.");
          }
          if ((0, _indexOf.default)(FIELD_TYPES).call(FIELD_TYPES, type) === -1) {
            throw new Error("".concat(type, " is not a valid type."));
          }
          var fieldOptions = {
            type
          };
          if (typeof options.required === "boolean") {
            fieldOptions.required = options.required;
          }
          if (options.defaultValue !== void 0) {
            fieldOptions.defaultValue = options.defaultValue;
          }
          this._fields[name2] = fieldOptions;
          return this;
        }
      }, {
        key: "addIndex",
        value: function(name2, index) {
          if (!name2) {
            throw new Error("index name may not be null.");
          }
          if (!index) {
            throw new Error("index may not be null.");
          }
          this._indexes[name2] = index;
          return this;
        }
      }, {
        key: "addString",
        value: function(name2, options) {
          return this.addField(name2, "String", options);
        }
      }, {
        key: "addNumber",
        value: function(name2, options) {
          return this.addField(name2, "Number", options);
        }
      }, {
        key: "addBoolean",
        value: function(name2, options) {
          return this.addField(name2, "Boolean", options);
        }
      }, {
        key: "addDate",
        value: function(name2, options) {
          if (options && options.defaultValue) {
            options.defaultValue = {
              __type: "Date",
              iso: new Date(options.defaultValue)
            };
          }
          return this.addField(name2, "Date", options);
        }
      }, {
        key: "addFile",
        value: function(name2, options) {
          return this.addField(name2, "File", options);
        }
      }, {
        key: "addGeoPoint",
        value: function(name2, options) {
          return this.addField(name2, "GeoPoint", options);
        }
      }, {
        key: "addPolygon",
        value: function(name2, options) {
          return this.addField(name2, "Polygon", options);
        }
      }, {
        key: "addArray",
        value: function(name2, options) {
          return this.addField(name2, "Array", options);
        }
      }, {
        key: "addObject",
        value: function(name2, options) {
          return this.addField(name2, "Object", options);
        }
      }, {
        key: "addPointer",
        value: function(name2, targetClass) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          if (!name2) {
            throw new Error("field name may not be null.");
          }
          if (!targetClass) {
            throw new Error("You need to set the targetClass of the Pointer.");
          }
          var fieldOptions = {
            type: "Pointer",
            targetClass
          };
          if (typeof options.required === "boolean") {
            fieldOptions.required = options.required;
          }
          if (options.defaultValue !== void 0) {
            fieldOptions.defaultValue = options.defaultValue;
            if (options.defaultValue instanceof _ParseObject.default) {
              fieldOptions.defaultValue = options.defaultValue.toPointer();
            }
          }
          this._fields[name2] = fieldOptions;
          return this;
        }
      }, {
        key: "addRelation",
        value: function(name2, targetClass) {
          if (!name2) {
            throw new Error("field name may not be null.");
          }
          if (!targetClass) {
            throw new Error("You need to set the targetClass of the Relation.");
          }
          this._fields[name2] = {
            type: "Relation",
            targetClass
          };
          return this;
        }
      }, {
        key: "deleteField",
        value: function(name2) {
          this._fields[name2] = {
            __op: "Delete"
          };
          return this;
        }
      }, {
        key: "deleteIndex",
        value: function(name2) {
          this._indexes[name2] = {
            __op: "Delete"
          };
          return this;
        }
      }], [{
        key: "all",
        value: function() {
          var controller = _CoreManager.default.getSchemaController();
          return controller.get("").then(function(response) {
            if (response.results.length === 0) {
              throw new Error("Schema not found.");
            }
            return response.results;
          });
        }
      }]);
      return ParseSchema2;
    }();
    var DefaultController = {
      send: function(className, method) {
        var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request(method, "schemas/".concat(className), params, {
          useMasterKey: true
        });
      },
      get: function(className) {
        return this.send(className, "GET");
      },
      create: function(className, params) {
        return this.send(className, "POST", params);
      },
      update: function(className, params) {
        return this.send(className, "PUT", params);
      },
      delete: function(className) {
        return this.send(className, "DELETE");
      },
      purge: function(className) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("DELETE", "purge/".concat(className), {}, {
          useMasterKey: true
        });
      }
    };
    _CoreManager.default.setSchemaController(DefaultController);
    var _default = ParseSchema;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/EventEmitter.js
var require_EventEmitter = __commonJS({
  "node_modules/moralis/lib/browser/EventEmitter.js"(exports, module) {
    "use strict";
    init_react();
    module.exports = require_events().EventEmitter;
  }
});

// node_modules/core-js-pure/es/array/virtual/values.js
var require_values4 = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/values.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_object_to_string();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").values;
  }
});

// node_modules/core-js-pure/stable/array/virtual/values.js
var require_values5 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/values.js"(exports, module) {
    init_react();
    var parent = require_values4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/values.js
var require_values6 = __commonJS({
  "node_modules/core-js-pure/stable/instance/values.js"(exports, module) {
    init_react();
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_values5();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module.exports = function(it) {
      var own = it.values;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.values || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/values.js
var require_values7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/values.js"(exports, module) {
    init_react();
    module.exports = require_values6();
  }
});

// node_modules/moralis/lib/browser/LiveQuerySubscription.js
var require_LiveQuerySubscription = __commonJS({
  "node_modules/moralis/lib/browser/LiveQuerySubscription.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _EventEmitter2 = _interopRequireDefault(require_EventEmitter());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _promiseUtils = require_promiseUtils();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Subscription = /* @__PURE__ */ function(_EventEmitter) {
      (0, _inherits2.default)(Subscription2, _EventEmitter);
      var _super = _createSuper(Subscription2);
      function Subscription2(id2, query, sessionToken) {
        var _this;
        (0, _classCallCheck2.default)(this, Subscription2);
        _this = _super.call(this);
        _this.id = id2;
        _this.query = query;
        _this.sessionToken = sessionToken;
        _this.subscribePromise = (0, _promiseUtils.resolvingPromise)();
        _this.subscribed = false;
        _this.on("error", function() {
        });
        return _this;
      }
      (0, _createClass2.default)(Subscription2, [{
        key: "unsubscribe",
        value: function() {
          var _this2 = this;
          return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(function(liveQueryClient) {
            liveQueryClient.unsubscribe(_this2);
            _this2.emit("close");
          });
        }
      }]);
      return Subscription2;
    }(_EventEmitter2.default);
    var _default = Subscription;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/LiveQueryClient.js
var require_LiveQueryClient = __commonJS({
  "node_modules/moralis/lib/browser/LiveQueryClient.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray = require_is_array4();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _map = _interopRequireDefault(require_map10());
    var _keys = _interopRequireDefault(require_keys7());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _values = _interopRequireDefault(require_values7());
    var _setTimeout2 = _interopRequireDefault(require_set_timeout2());
    var _bind = _interopRequireDefault(require_bind7());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _EventEmitter2 = _interopRequireDefault(require_EventEmitter());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _LiveQuerySubscription = _interopRequireDefault(require_LiveQuerySubscription());
    var _promiseUtils = require_promiseUtils();
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context6;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty(_context6 = Object.prototype.toString.call(o2)).call(_context6, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var CLIENT_STATE = {
      INITIALIZED: "initialized",
      CONNECTING: "connecting",
      CONNECTED: "connected",
      CLOSED: "closed",
      RECONNECTING: "reconnecting",
      DISCONNECTED: "disconnected"
    };
    var OP_TYPES = {
      CONNECT: "connect",
      SUBSCRIBE: "subscribe",
      UNSUBSCRIBE: "unsubscribe",
      ERROR: "error"
    };
    var OP_EVENTS = {
      CONNECTED: "connected",
      SUBSCRIBED: "subscribed",
      UNSUBSCRIBED: "unsubscribed",
      ERROR: "error",
      CREATE: "create",
      UPDATE: "update",
      ENTER: "enter",
      LEAVE: "leave",
      DELETE: "delete"
    };
    var CLIENT_EMMITER_TYPES = {
      CLOSE: "close",
      ERROR: "error",
      OPEN: "open"
    };
    var SUBSCRIPTION_EMMITER_TYPES = {
      OPEN: "open",
      CLOSE: "close",
      ERROR: "error",
      CREATE: "create",
      UPDATE: "update",
      ENTER: "enter",
      LEAVE: "leave",
      DELETE: "delete"
    };
    var generateInterval = function(k2) {
      return Math.random() * Math.min(30, Math.pow(2, k2) - 1) * 1e3;
    };
    var LiveQueryClient = /* @__PURE__ */ function(_EventEmitter) {
      (0, _inherits2.default)(LiveQueryClient2, _EventEmitter);
      var _super = _createSuper(LiveQueryClient2);
      function LiveQueryClient2(_ref) {
        var _this;
        var applicationId = _ref.applicationId, serverURL = _ref.serverURL, javascriptKey = _ref.javascriptKey, masterKey = _ref.masterKey, sessionToken = _ref.sessionToken, installationId = _ref.installationId;
        (0, _classCallCheck2.default)(this, LiveQueryClient2);
        _this = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "attempts", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "id", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "requestId", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "applicationId", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "serverURL", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "javascriptKey", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "masterKey", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sessionToken", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "installationId", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "additionalProperties", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "connectPromise", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "subscriptions", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "socket", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", void 0);
        if (!serverURL || (0, _indexOf.default)(serverURL).call(serverURL, "ws") !== 0) {
          throw new Error("You need to set a proper Parse LiveQuery server url before using LiveQueryClient");
        }
        _this.reconnectHandle = null;
        _this.attempts = 1;
        _this.id = 0;
        _this.requestId = 1;
        _this.serverURL = serverURL;
        _this.applicationId = applicationId;
        _this.javascriptKey = javascriptKey || void 0;
        _this.masterKey = masterKey || void 0;
        _this.sessionToken = sessionToken || void 0;
        _this.installationId = installationId || void 0;
        _this.additionalProperties = true;
        _this.connectPromise = (0, _promiseUtils.resolvingPromise)();
        _this.subscriptions = new _map.default();
        _this.state = CLIENT_STATE.INITIALIZED;
        _this.on("error", function() {
        });
        return _this;
      }
      (0, _createClass2.default)(LiveQueryClient2, [{
        key: "shouldOpen",
        value: function() {
          return this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED;
        }
      }, {
        key: "subscribe",
        value: function(query, sessionToken) {
          var _this2 = this;
          if (!query) {
            return;
          }
          var className = query.className;
          var queryJSON = query.toJSON();
          var where = queryJSON.where;
          var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(",") : void 0;
          var subscribeRequest = {
            op: OP_TYPES.SUBSCRIBE,
            requestId: this.requestId,
            query: {
              className,
              where,
              fields
            }
          };
          if (sessionToken) {
            subscribeRequest.sessionToken = sessionToken;
          }
          var subscription = new _LiveQuerySubscription.default(this.requestId, query, sessionToken);
          this.subscriptions.set(this.requestId, subscription);
          this.requestId += 1;
          this.connectPromise.then(function() {
            _this2.socket.send((0, _stringify.default)(subscribeRequest));
          });
          return subscription;
        }
      }, {
        key: "unsubscribe",
        value: function(subscription) {
          var _this3 = this;
          if (!subscription) {
            return;
          }
          this.subscriptions.delete(subscription.id);
          var unsubscribeRequest = {
            op: OP_TYPES.UNSUBSCRIBE,
            requestId: subscription.id
          };
          this.connectPromise.then(function() {
            _this3.socket.send((0, _stringify.default)(unsubscribeRequest));
          });
        }
      }, {
        key: "open",
        value: function() {
          var _this4 = this;
          var WebSocketImplementation = _CoreManager.default.getWebSocketController();
          if (!WebSocketImplementation) {
            this.emit(CLIENT_EMMITER_TYPES.ERROR, "Can not find WebSocket implementation");
            return;
          }
          if (this.state !== CLIENT_STATE.RECONNECTING) {
            this.state = CLIENT_STATE.CONNECTING;
          }
          this.socket = new WebSocketImplementation(this.serverURL);
          this.socket.onopen = function() {
            _this4._handleWebSocketOpen();
          };
          this.socket.onmessage = function(event) {
            _this4._handleWebSocketMessage(event);
          };
          this.socket.onclose = function() {
            _this4._handleWebSocketClose();
          };
          this.socket.onerror = function(error) {
            _this4._handleWebSocketError(error);
          };
        }
      }, {
        key: "resubscribe",
        value: function() {
          var _context, _this5 = this;
          (0, _forEach.default)(_context = this.subscriptions).call(_context, function(subscription, requestId) {
            var query = subscription.query;
            var queryJSON = query.toJSON();
            var where = queryJSON.where;
            var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(",") : void 0;
            var className = query.className;
            var sessionToken = subscription.sessionToken;
            var subscribeRequest = {
              op: OP_TYPES.SUBSCRIBE,
              requestId,
              query: {
                className,
                where,
                fields
              }
            };
            if (sessionToken) {
              subscribeRequest.sessionToken = sessionToken;
            }
            _this5.connectPromise.then(function() {
              _this5.socket.send((0, _stringify.default)(subscribeRequest));
            });
          });
        }
      }, {
        key: "close",
        value: function() {
          var _context2;
          if (this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED) {
            return;
          }
          this.state = CLIENT_STATE.DISCONNECTED;
          this.socket.close();
          var _iterator = _createForOfIteratorHelper((0, _values.default)(_context2 = this.subscriptions).call(_context2)), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var subscription = _step.value;
              subscription.subscribed = false;
              subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          this._handleReset();
          this.emit(CLIENT_EMMITER_TYPES.CLOSE);
        }
      }, {
        key: "_handleReset",
        value: function() {
          this.attempts = 1;
          this.id = 0;
          this.requestId = 1;
          this.connectPromise = (0, _promiseUtils.resolvingPromise)();
          this.subscriptions = new _map.default();
        }
      }, {
        key: "_handleWebSocketOpen",
        value: function() {
          this.attempts = 1;
          var connectRequest = {
            op: OP_TYPES.CONNECT,
            applicationId: this.applicationId,
            javascriptKey: this.javascriptKey,
            masterKey: this.masterKey,
            sessionToken: this.sessionToken
          };
          if (this.additionalProperties) {
            connectRequest.installationId = this.installationId;
          }
          this.socket.send((0, _stringify.default)(connectRequest));
        }
      }, {
        key: "_handleWebSocketMessage",
        value: function(event) {
          var data = event.data;
          if (typeof data === "string") {
            data = JSON.parse(data);
          }
          var subscription = null;
          if (data.requestId) {
            subscription = this.subscriptions.get(data.requestId);
          }
          var response = {
            clientId: data.clientId,
            installationId: data.installationId
          };
          switch (data.op) {
            case OP_EVENTS.CONNECTED:
              if (this.state === CLIENT_STATE.RECONNECTING) {
                this.resubscribe();
              }
              this.emit(CLIENT_EMMITER_TYPES.OPEN);
              this.id = data.clientId;
              this.connectPromise.resolve();
              this.state = CLIENT_STATE.CONNECTED;
              break;
            case OP_EVENTS.SUBSCRIBED:
              if (subscription) {
                subscription.subscribed = true;
                subscription.subscribePromise.resolve();
                (0, _setTimeout2.default)(function() {
                  return subscription.emit(SUBSCRIPTION_EMMITER_TYPES.OPEN, response);
                }, 200);
              }
              break;
            case OP_EVENTS.ERROR:
              if (data.requestId) {
                if (subscription) {
                  subscription.subscribePromise.resolve();
                  (0, _setTimeout2.default)(function() {
                    return subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, data.error);
                  }, 200);
                }
              } else {
                this.emit(CLIENT_EMMITER_TYPES.ERROR, data.error);
              }
              if (data.error === "Additional properties not allowed") {
                this.additionalProperties = false;
              }
              if (data.reconnect) {
                this._handleReconnect();
              }
              break;
            case OP_EVENTS.UNSUBSCRIBED:
              break;
            default: {
              if (!subscription) {
                break;
              }
              var override = false;
              if (data.original) {
                override = true;
                delete data.original.__type;
                for (var field in data.original) {
                  if (!(field in data.object)) {
                    data.object[field] = void 0;
                  }
                }
                data.original = _ParseObject.default.fromJSON(data.original, false);
              }
              delete data.object.__type;
              var parseObject = _ParseObject.default.fromJSON(data.object, override);
              if (data.original) {
                subscription.emit(data.op, parseObject, data.original, response);
              } else {
                subscription.emit(data.op, parseObject, response);
              }
              var localDatastore = _CoreManager.default.getLocalDatastore();
              if (override && localDatastore.isEnabled) {
                localDatastore._updateObjectIfPinned(parseObject).then(function() {
                });
              }
            }
          }
        }
      }, {
        key: "_handleWebSocketClose",
        value: function() {
          var _context3;
          if (this.state === CLIENT_STATE.DISCONNECTED) {
            return;
          }
          this.state = CLIENT_STATE.CLOSED;
          this.emit(CLIENT_EMMITER_TYPES.CLOSE);
          var _iterator2 = _createForOfIteratorHelper((0, _values.default)(_context3 = this.subscriptions).call(_context3)), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var subscription = _step2.value;
              subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          this._handleReconnect();
        }
      }, {
        key: "_handleWebSocketError",
        value: function(error) {
          var _context4;
          this.emit(CLIENT_EMMITER_TYPES.ERROR, error);
          var _iterator3 = _createForOfIteratorHelper((0, _values.default)(_context4 = this.subscriptions).call(_context4)), _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
              var subscription = _step3.value;
              subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, error);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          this._handleReconnect();
        }
      }, {
        key: "_handleReconnect",
        value: function() {
          var _context5, _this6 = this;
          if (this.state === CLIENT_STATE.DISCONNECTED) {
            return;
          }
          this.state = CLIENT_STATE.RECONNECTING;
          var time = generateInterval(this.attempts);
          if (this.reconnectHandle) {
            clearTimeout(this.reconnectHandle);
          }
          this.reconnectHandle = (0, _setTimeout2.default)((0, _bind.default)(_context5 = function() {
            _this6.attempts++;
            _this6.connectPromise = (0, _promiseUtils.resolvingPromise)();
            _this6.open();
          }).call(_context5, this), time);
        }
      }]);
      return LiveQueryClient2;
    }(_EventEmitter2.default);
    _CoreManager.default.setWebSocketController(typeof WebSocket === "function" || (typeof WebSocket === "undefined" ? "undefined" : (0, _typeof2.default)(WebSocket)) === "object" ? WebSocket : null);
    var _default = LiveQueryClient;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseLiveQuery.js
var require_ParseLiveQuery = __commonJS({
  "node_modules/moralis/lib/browser/ParseLiveQuery.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _promise = _interopRequireDefault(require_promise3());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _EventEmitter = _interopRequireDefault(require_EventEmitter());
    var _LiveQueryClient = _interopRequireDefault(require_LiveQueryClient());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    function getLiveQueryClient() {
      return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();
    }
    var LiveQuery = new _EventEmitter.default();
    LiveQuery.open = /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
      var liveQueryClient;
      return _regenerator.default.wrap(function(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getLiveQueryClient();
            case 2:
              liveQueryClient = _context.sent;
              liveQueryClient.open();
            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    LiveQuery.close = /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
      var liveQueryClient;
      return _regenerator.default.wrap(function(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return getLiveQueryClient();
            case 2:
              liveQueryClient = _context2.sent;
              liveQueryClient.close();
            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    LiveQuery.on("error", function() {
    });
    var _default = LiveQuery;
    exports.default = _default;
    var defaultLiveQueryClient;
    var DefaultLiveQueryController = {
      setDefaultLiveQueryClient: function(liveQueryClient) {
        defaultLiveQueryClient = liveQueryClient;
      },
      getDefaultLiveQueryClient: function() {
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
          var _yield$Promise$all, _yield$Promise$all2, currentUser, installationId, sessionToken, liveQueryServerURL, serverURL, protocol, host, applicationId, javascriptKey, masterKey;
          return _regenerator.default.wrap(function(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!defaultLiveQueryClient) {
                    _context3.next = 2;
                    break;
                  }
                  return _context3.abrupt("return", defaultLiveQueryClient);
                case 2:
                  _context3.next = 4;
                  return _promise.default.all([_CoreManager.default.getUserController().currentUserAsync(), _CoreManager.default.getInstallationController().currentInstallationId()]);
                case 4:
                  _yield$Promise$all = _context3.sent;
                  _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2);
                  currentUser = _yield$Promise$all2[0];
                  installationId = _yield$Promise$all2[1];
                  sessionToken = currentUser ? currentUser.getSessionToken() : void 0;
                  liveQueryServerURL = _CoreManager.default.get("LIVEQUERY_SERVER_URL");
                  if (!(liveQueryServerURL && (0, _indexOf.default)(liveQueryServerURL).call(liveQueryServerURL, "ws") !== 0)) {
                    _context3.next = 12;
                    break;
                  }
                  throw new Error("You need to set a proper Parse LiveQuery server url before using LiveQueryClient");
                case 12:
                  if (!liveQueryServerURL) {
                    serverURL = _CoreManager.default.get("SERVER_URL");
                    protocol = (0, _indexOf.default)(serverURL).call(serverURL, "https") === 0 ? "wss://" : "ws://";
                    host = serverURL.replace(/^https?:\/\//, "");
                    liveQueryServerURL = protocol + host;
                    _CoreManager.default.set("LIVEQUERY_SERVER_URL", liveQueryServerURL);
                  }
                  applicationId = _CoreManager.default.get("APPLICATION_ID");
                  javascriptKey = _CoreManager.default.get("JAVASCRIPT_KEY");
                  masterKey = _CoreManager.default.get("MASTER_KEY");
                  defaultLiveQueryClient = new _LiveQueryClient.default({
                    applicationId,
                    serverURL: liveQueryServerURL,
                    javascriptKey,
                    masterKey,
                    sessionToken,
                    installationId
                  });
                  defaultLiveQueryClient.on("error", function(error) {
                    LiveQuery.emit("error", error);
                  });
                  defaultLiveQueryClient.on("open", function() {
                    LiveQuery.emit("open");
                  });
                  defaultLiveQueryClient.on("close", function() {
                    LiveQuery.emit("close");
                  });
                  return _context3.abrupt("return", defaultLiveQueryClient);
                case 21:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }))();
      },
      _clearCachedDefaultClient: function() {
        defaultLiveQueryClient = null;
      }
    };
    _CoreManager.default.setLiveQueryController(DefaultLiveQueryController);
  }
});

// node_modules/moralis/lib/browser/UnitConvert.js
var require_UnitConvert = __commonJS({
  "node_modules/moralis/lib/browser/UnitConvert.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    var UnitConverter = /* @__PURE__ */ function() {
      function UnitConverter2() {
        (0, _classCallCheck2.default)(this, UnitConverter2);
      }
      (0, _createClass2.default)(UnitConverter2, null, [{
        key: "ETH",
        value: function(value) {
          return _ethers.ethers.utils.parseEther("".concat(value)).toString();
        }
      }, {
        key: "Token",
        value: function(value) {
          var decimals = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 18;
          return _ethers.ethers.utils.parseUnits("".concat(value), +decimals).toString();
        }
      }, {
        key: "FromWei",
        value: function(value) {
          var decimals = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 18;
          var result = _ethers.ethers.utils.formatUnits(value, decimals);
          var splitResult = result.split(".");
          if (splitResult[1] === "0") {
            return splitResult[0];
          }
          return result;
        }
      }]);
      return UnitConverter2;
    }();
    module.exports = UnitConverter;
  }
});

// node_modules/moralis/lib/browser/MoralisUI.js
var require_MoralisUI = __commonJS({
  "node_modules/moralis/lib/browser/MoralisUI.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var MoralisUI = {
      openPrompt: function() {
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
          return _regenerator.default.wrap(function(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  console.warn("No prompt supplied");
                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      }
    };
    var _default = MoralisUI;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Chains.js
var require_Chains = __commonJS({
  "node_modules/moralis/lib/browser/Chains.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var Chains = {
      ETH_MAINENT: "0x1",
      ETH_ROPSTEN: "0x3",
      ETH_GOERLI: "0x5",
      ETH_KOVAN: "0x2a",
      ETH_RINKBEY: "0x4",
      ETH_LOCALDEVCHAIN: "0x539",
      POLYGON_MAINNET: "0x89",
      POLYGON_MUMBAI: "0x13881",
      BSC_MAINNET: "0x38",
      BSC_TESTNET: "0x61",
      AVAX_MAINNET: "0xa86a",
      AVAX_TESTNET: "0xa869",
      FANTOM_MAINNET: "0xfa"
    };
    var _default = Chains;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Parse.js
var require_Parse = __commonJS({
  "node_modules/moralis/lib/browser/Parse.js"(exports, module) {
    "use strict";
    init_react();
    var _typeof = require_typeof();
    var _Reflect$construct = require_construct3();
    var _WeakMap = require_weak_map3();
    var _Object$defineProperty = require_define_property3();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _interopRequireDefault = require_interopRequireDefault();
    var _promise = _interopRequireDefault(require_promise3());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _decode = _interopRequireDefault(require_decode());
    var _encode = _interopRequireDefault(require_encode());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _CryptoController = _interopRequireDefault(require_CryptoController());
    var _InstallationController = _interopRequireDefault(require_InstallationController());
    var ParseOp = _interopRequireWildcard(require_ParseOp());
    var _RESTController2 = _interopRequireDefault(require_RESTController());
    var _MoralisWeb2 = _interopRequireDefault(require_MoralisWeb3());
    var _ethers = (init_lib31(), __toCommonJS(lib_exports5));
    var _filterConsole = require_filterConsole();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap();
      var cacheNodeInterop = new _WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _require = require_utils();
    var checkForSdkUpdates = _require.checkForSdkUpdates;
    var Moralis = /* @__PURE__ */ function(_MoralisWeb) {
      (0, _inherits2.default)(Moralis2, _MoralisWeb);
      var _super = _createSuper(Moralis2);
      function Moralis2() {
        (0, _classCallCheck2.default)(this, Moralis2);
        return _super.apply(this, arguments);
      }
      (0, _createClass2.default)(Moralis2, null, [{
        key: "start",
        value: function() {
          var _start = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(options) {
            var appId, serverUrl, plugins, javascriptKey, masterKey, moralisSecret, apiKey, _yield$this$getApiKey, web3ApiKey, speedyNodeApiKey;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    appId = options.appId, serverUrl = options.serverUrl, plugins = options.plugins, javascriptKey = options.javascriptKey, masterKey = options.masterKey, moralisSecret = options.moralisSecret;
                    if (serverUrl) {
                      _context.next = 4;
                      break;
                    }
                    throw new Error("Moralis.start failed: serverUrl is required");
                  case 4:
                    if (appId) {
                      _context.next = 6;
                      break;
                    }
                    throw new Error("Moralis.start failed: appId is required");
                  case 6:
                    if (moralisSecret) {
                      console.warn("Moralis.start warning: Using moralisSecret on the browser enviroment reveals critical information.");
                    }
                    _context.next = 18;
                    break;
                  case 9:
                    if (!moralisSecret) {
                      _context.next = 18;
                      break;
                    }
                    this.moralisSecret = moralisSecret;
                    _context.next = 13;
                    return this.getApiKeys(moralisSecret);
                  case 13:
                    _yield$this$getApiKey = _context.sent;
                    web3ApiKey = _yield$this$getApiKey.web3ApiKey;
                    speedyNodeApiKey = _yield$this$getApiKey.speedyNodeApiKey;
                    apiKey = web3ApiKey;
                    this.speedyNodeApiKey = speedyNodeApiKey;
                  case 18:
                    this.initialize(appId, javascriptKey, masterKey);
                    this.serverURL = serverUrl;
                    this.Web3API.initialize({
                      serverUrl,
                      apiKey,
                      Moralis: Moralis2
                    });
                    this.SolanaAPI.initialize({
                      serverUrl,
                      apiKey,
                      Moralis: Moralis2
                    });
                    if (!(appId && serverUrl)) {
                      _context.next = 25;
                      break;
                    }
                    _context.next = 25;
                    return this.initPlugins(plugins);
                  case 25:
                    checkForSdkUpdates();
                  case 26:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _start.apply(this, arguments);
          };
        }()
      }, {
        key: "getApiKeys",
        value: function() {
          var _getApiKeys = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(moralisSecret) {
            var _RESTController, response;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.prev = 0;
                    _RESTController = _CoreManager.default.getRESTController();
                    _context2.next = 4;
                    return _RESTController.ajax("GET", "https://admin.moralis.io/api/publics/apiKeys", null, {
                      "moralis-secret": moralisSecret,
                      Accept: "application/json",
                      "Content-Type": "application/json"
                    });
                  case 4:
                    response = _context2.sent;
                    return _context2.abrupt("return", response.response.result);
                  case 8:
                    _context2.prev = 8;
                    _context2.t0 = _context2["catch"](0);
                    throw new Error("Could not fetch keys with moralisSecret");
                  case 11:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, null, [[0, 8]]);
          }));
          return function() {
            return _getApiKeys.apply(this, arguments);
          };
        }()
      }, {
        key: "initialize",
        value: function(applicationId, javaScriptKey) {
          if (_CoreManager.default.get("IS_NODE") && !process.env.SERVER_RENDERING) {
            console.log("It looks like you're using the browser version of the SDK in a node.js environment. You should require('parse/node') instead.");
          }
          Moralis2._initialize(applicationId, javaScriptKey);
        }
      }, {
        key: "_initialize",
        value: function(applicationId, javaScriptKey, masterKey) {
          _CoreManager.default.set("APPLICATION_ID", applicationId);
          _CoreManager.default.set("JAVASCRIPT_KEY", javaScriptKey);
          _CoreManager.default.set("MASTER_KEY", masterKey);
          _CoreManager.default.set("USE_MASTER_KEY", false);
        }
      }, {
        key: "setAsyncStorage",
        value: function(storage) {
          _CoreManager.default.setAsyncStorage(storage);
        }
      }, {
        key: "setLocalDatastoreController",
        value: function(controller) {
          _CoreManager.default.setLocalDatastoreController(controller);
        }
      }, {
        key: "applicationId",
        get: function() {
          return _CoreManager.default.get("APPLICATION_ID");
        },
        set: function(value) {
          _CoreManager.default.set("APPLICATION_ID", value);
        }
      }, {
        key: "javaScriptKey",
        get: function() {
          return _CoreManager.default.get("JAVASCRIPT_KEY");
        },
        set: function(value) {
          _CoreManager.default.set("JAVASCRIPT_KEY", value);
        }
      }, {
        key: "masterKey",
        get: function() {
          return _CoreManager.default.get("MASTER_KEY");
        },
        set: function(value) {
          _CoreManager.default.set("MASTER_KEY", value);
        }
      }, {
        key: "serverURL",
        get: function() {
          return _CoreManager.default.get("SERVER_URL");
        },
        set: function(value) {
          _CoreManager.default.set("SERVER_URL", value);
        }
      }, {
        key: "serverAuthToken",
        get: function() {
          return _CoreManager.default.get("SERVER_AUTH_TOKEN");
        },
        set: function(value) {
          _CoreManager.default.set("SERVER_AUTH_TOKEN", value);
        }
      }, {
        key: "serverAuthType",
        get: function() {
          return _CoreManager.default.get("SERVER_AUTH_TYPE");
        },
        set: function(value) {
          _CoreManager.default.set("SERVER_AUTH_TYPE", value);
        }
      }, {
        key: "liveQueryServerURL",
        get: function() {
          return _CoreManager.default.get("LIVEQUERY_SERVER_URL");
        },
        set: function(value) {
          _CoreManager.default.set("LIVEQUERY_SERVER_URL", value);
        }
      }, {
        key: "encryptedUser",
        get: function() {
          return _CoreManager.default.get("ENCRYPTED_USER");
        },
        set: function(value) {
          _CoreManager.default.set("ENCRYPTED_USER", value);
        }
      }, {
        key: "secret",
        get: function() {
          return _CoreManager.default.get("ENCRYPTED_KEY");
        },
        set: function(value) {
          _CoreManager.default.set("ENCRYPTED_KEY", value);
        }
      }, {
        key: "idempotency",
        get: function() {
          return _CoreManager.default.get("IDEMPOTENCY");
        },
        set: function(value) {
          _CoreManager.default.set("IDEMPOTENCY", value);
        }
      }]);
      return Moralis2;
    }(_MoralisWeb2.default);
    Moralis.ACL = require_ParseACL().default;
    Moralis.Analytics = require_Analytics();
    Moralis.AnonymousUtils = require_AnonymousUtils().default;
    Moralis.Cloud = require_Cloud();
    Moralis.CLP = require_ParseCLP().default;
    Moralis.CoreManager = require_CoreManager();
    Moralis.Config = require_ParseConfig().default;
    Moralis.Error = require_ParseError().default;
    Moralis.FacebookUtils = require_FacebookUtils().default;
    Moralis.File = require_ParseFile().default;
    Moralis.GeoPoint = require_ParseGeoPoint().default;
    Moralis.Polygon = require_ParsePolygon().default;
    Moralis.Installation = require_ParseInstallation().default;
    Moralis.LocalDatastore = require_LocalDatastore();
    Moralis.Object = require_ParseObject().default;
    Moralis.Op = {
      Set: ParseOp.SetOp,
      Unset: ParseOp.UnsetOp,
      Increment: ParseOp.IncrementOp,
      Add: ParseOp.AddOp,
      Remove: ParseOp.RemoveOp,
      AddUnique: ParseOp.AddUniqueOp,
      Relation: ParseOp.RelationOp
    };
    Moralis.Web3API = require_MoralisWeb3Api().default;
    Moralis.SolanaAPI = require_MoralisSolanaApi().default;
    Moralis.Push = require_Push();
    Moralis.Query = require_ParseQuery().default;
    Moralis.Relation = require_ParseRelation().default;
    Moralis.Role = require_ParseRole().default;
    Moralis.Schema = require_ParseSchema().default;
    Moralis.Session = require_ParseSession().default;
    Moralis.Storage = require_Storage();
    Moralis.User = require_ParseUser().default;
    Moralis.LiveQuery = require_ParseLiveQuery().default;
    Moralis.LiveQueryClient = require_LiveQueryClient().default;
    Moralis.Web3 = Moralis;
    Moralis.Units = require_UnitConvert();
    Moralis.Elrond = require_MoralisErd().default;
    Moralis.Erd = Moralis.Elrond;
    Moralis.Dot = require_MoralisDot().default;
    Moralis.UI = require_MoralisUI().default;
    Moralis.Chains = require_Chains().default;
    Moralis.AbstractWeb3Connector = require_AbstractWeb3Connector().default;
    (0, _filterConsole.filterConsole)();
    Moralis._request = function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _CoreManager.default.getRESTController().request.apply(null, args);
    };
    Moralis._ajax = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _CoreManager.default.getRESTController().ajax.apply(null, args);
    };
    Moralis._decode = function(_2, value) {
      return (0, _decode.default)(value);
    };
    Moralis._encode = function(value, _2, disallowObjects) {
      return (0, _encode.default)(value, disallowObjects);
    };
    Moralis._getInstallationId = function() {
      return _CoreManager.default.getInstallationController().currentInstallationId();
    };
    Moralis.enableLocalDatastore = function() {
      Moralis.LocalDatastore.isEnabled = true;
    };
    Moralis.isLocalDatastoreEnabled = function() {
      return Moralis.LocalDatastore.isEnabled;
    };
    Moralis.dumpLocalDatastore = function() {
      if (!Moralis.LocalDatastore.isEnabled) {
        console.log("Moralis.enableLocalDatastore() must be called first");
        return _promise.default.resolve({});
      }
      return Moralis.LocalDatastore._getAllContents();
    };
    Moralis.enableEncryptedUser = function() {
      Moralis.encryptedUser = true;
    };
    Moralis.isEncryptedUserEnabled = function() {
      return Moralis.encryptedUser;
    };
    _CoreManager.default.setCryptoController(_CryptoController.default);
    _CoreManager.default.setInstallationController(_InstallationController.default);
    _CoreManager.default.setRESTController(_RESTController2.default);
    Moralis.Moralis = Moralis;
    module.exports = Moralis;
  }
});

// node_modules/moralis/index.js
var require_moralis = __commonJS({
  "node_modules/moralis/index.js"(exports, module) {
    init_react();
    module.exports = require_Parse();
  }
});

// node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development2 = __commonJS({
  "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    init_react();
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment5 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment5;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/hoist-non-react-statics/node_modules/react-is/index.js
var require_react_is2 = __commonJS({
  "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    init_react();
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development2();
    }
  }
});

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
    "use strict";
    init_react();
    var reactIs = require_react_is2();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics;
  }
});

// node_modules/react-moralis/lib/index.esm.js
init_react();
var import_react2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_moralis = __toESM(require_moralis());
var extendStatics = function(d2, b2) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
    d3.__proto__ = b3;
  } || function(d3, b3) {
    for (var p2 in b3)
      if (Object.prototype.hasOwnProperty.call(b3, p2))
        d3[p2] = b3[p2];
  };
  return extendStatics(d2, b2);
};
function __extends(d2, b2) {
  if (typeof b2 !== "function" && b2 !== null)
    throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
  extendStatics(d2, b2);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t2) {
    for (var s2, i = 1, n2 = arguments.length; i < n2; i++) {
      s2 = arguments[i];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __rest(s2, e) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s2); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i]))
        t2[p2[i]] = s2[p2[i]];
    }
  return t2;
}
function __awaiter15(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var Plugin;
(function(Plugin2) {
  Plugin2["ONE_INCH"] = "oneInch";
  Plugin2["OPEN_SEA"] = "opensea";
  Plugin2["FIAT"] = "fiat";
  Plugin2["RARIBLE"] = "rarible";
})(Plugin || (Plugin = {}));
var currencyFormatter = new Intl.NumberFormat("en-us", {
  style: "currency",
  currency: "USD",
  minimumFractionDigits: 2,
  maximumFractionDigits: 2
});
var decimalFormatter = new Intl.NumberFormat("en-us", {
  style: "decimal",
  minimumSignificantDigits: 1,
  maximumSignificantDigits: 4
});
var MoralisContext = (0, import_react2.createContext)(null);
var ReactMoralisError = function(_super) {
  __extends(ReactMoralisError2, _super);
  function ReactMoralisError2(message) {
    var _this = _super.call(this, "[react-moralis]: ".concat(message)) || this;
    _this.name = "ReactMoralisError";
    _this.message = message;
    return _this;
  }
  ReactMoralisError2.isReactMoraliserrpr = true;
  return ReactMoralisError2;
}(Error);
var NoMoralisContextProviderError = function(_super) {
  __extends(NoMoralisContextProviderError2, _super);
  function NoMoralisContextProviderError2(message) {
    var _this = _super.call(this, message) || this;
    _this.name = "NoMoralisContextProviderError";
    return _this;
  }
  return NoMoralisContextProviderError2;
}(ReactMoralisError);
var NotAuthenticatedError = function(_super) {
  __extends(NotAuthenticatedError2, _super);
  function NotAuthenticatedError2(message) {
    var _this = _super.call(this, message) || this;
    _this.name = "NotAuthenticatedError";
    return _this;
  }
  return NotAuthenticatedError2;
}(ReactMoralisError);
var ValidationError = function(_super) {
  __extends(ValidationError2, _super);
  function ValidationError2(message) {
    var _this = _super.call(this, message) || this;
    _this.name = "ValidationError";
    return _this;
  }
  return ValidationError2;
}(ReactMoralisError);
var useMoralis = function() {
  var moralisContext = (0, import_react2.useContext)(MoralisContext);
  if (!moralisContext) {
    throw new NoMoralisContextProviderError("Make sure to only call useMoralis within a  <MoralisProvider>");
  }
  return moralisContext;
};
function n(n2) {
  for (var t2 = arguments.length, r2 = Array(t2 > 1 ? t2 - 1 : 0), e = 1; e < t2; e++)
    r2[e - 1] = arguments[e];
  if (true) {
    var i = Y[n2], o2 = i ? typeof i == "function" ? i.apply(null, r2) : i : "unknown error nr: " + n2;
    throw Error("[Immer] " + o2);
  }
  throw Error("[Immer] minified error nr: " + n2 + (r2.length ? " " + r2.map(function(n3) {
    return "'" + n3 + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function t(n2) {
  return !!n2 && !!n2[Q];
}
function r(n2) {
  return !!n2 && (function(n3) {
    if (!n3 || typeof n3 != "object")
      return false;
    var t2 = Object.getPrototypeOf(n3);
    if (t2 === null)
      return true;
    var r2 = Object.hasOwnProperty.call(t2, "constructor") && t2.constructor;
    return r2 === Object || typeof r2 == "function" && Function.toString.call(r2) === Z;
  }(n2) || Array.isArray(n2) || !!n2[L] || !!n2.constructor[L] || s(n2) || v(n2));
}
function i$1(n2, t2, r2) {
  r2 === void 0 && (r2 = false), o(n2) === 0 ? (r2 ? Object.keys : nn)(n2).forEach(function(e) {
    r2 && typeof e == "symbol" || t2(e, n2[e], n2);
  }) : n2.forEach(function(r3, e) {
    return t2(e, r3, n2);
  });
}
function o(n2) {
  var t2 = n2[Q];
  return t2 ? t2.i > 3 ? t2.i - 4 : t2.i : Array.isArray(n2) ? 1 : s(n2) ? 2 : v(n2) ? 3 : 0;
}
function u(n2, t2) {
  return o(n2) === 2 ? n2.has(t2) : Object.prototype.hasOwnProperty.call(n2, t2);
}
function a(n2, t2) {
  return o(n2) === 2 ? n2.get(t2) : n2[t2];
}
function f(n2, t2, r2) {
  var e = o(n2);
  e === 2 ? n2.set(t2, r2) : e === 3 ? (n2.delete(t2), n2.add(r2)) : n2[t2] = r2;
}
function c(n2, t2) {
  return n2 === t2 ? n2 !== 0 || 1 / n2 == 1 / t2 : n2 != n2 && t2 != t2;
}
function s(n2) {
  return X && n2 instanceof Map;
}
function v(n2) {
  return q && n2 instanceof Set;
}
function p(n2) {
  return n2.o || n2.t;
}
function l(n2) {
  if (Array.isArray(n2))
    return Array.prototype.slice.call(n2);
  var t2 = tn(n2);
  delete t2[Q];
  for (var r2 = nn(t2), e = 0; e < r2.length; e++) {
    var i = r2[e], o2 = t2[i];
    o2.writable === false && (o2.writable = true, o2.configurable = true), (o2.get || o2.set) && (t2[i] = { configurable: true, writable: true, enumerable: o2.enumerable, value: n2[i] });
  }
  return Object.create(Object.getPrototypeOf(n2), t2);
}
function d(n2, e) {
  return e === void 0 && (e = false), y(n2) || t(n2) || !r(n2) ? n2 : (o(n2) > 1 && (n2.set = n2.add = n2.clear = n2.delete = h), Object.freeze(n2), e && i$1(n2, function(n3, t2) {
    return d(t2, true);
  }, true), n2);
}
function h() {
  n(2);
}
function y(n2) {
  return n2 == null || typeof n2 != "object" || Object.isFrozen(n2);
}
function b(t2) {
  var r2 = rn[t2];
  return r2 || n(18, t2), r2;
}
function _() {
  return U || n(0), U;
}
function j(n2, t2) {
  t2 && (b("Patches"), n2.u = [], n2.s = [], n2.v = t2);
}
function O(n2) {
  g(n2), n2.p.forEach(S), n2.p = null;
}
function g(n2) {
  n2 === U && (U = n2.l);
}
function w(n2) {
  return U = { p: [], l: U, h: n2, m: true, _: 0 };
}
function S(n2) {
  var t2 = n2[Q];
  t2.i === 0 || t2.i === 1 ? t2.j() : t2.O = true;
}
function P(t2, e) {
  e._ = e.p.length;
  var i = e.p[0], o2 = t2 !== void 0 && t2 !== i;
  return e.h.g || b("ES5").S(e, t2, o2), o2 ? (i[Q].P && (O(e), n(4)), r(t2) && (t2 = M(e, t2), e.l || x(e, t2)), e.u && b("Patches").M(i[Q], t2, e.u, e.s)) : t2 = M(e, i, []), O(e), e.u && e.v(e.u, e.s), t2 !== H ? t2 : void 0;
}
function M(n2, t2, r2) {
  if (y(t2))
    return t2;
  var e = t2[Q];
  if (!e)
    return i$1(t2, function(i, o3) {
      return A(n2, e, t2, i, o3, r2);
    }, true), t2;
  if (e.A !== n2)
    return t2;
  if (!e.P)
    return x(n2, e.t, true), e.t;
  if (!e.I) {
    e.I = true, e.A._--;
    var o2 = e.i === 4 || e.i === 5 ? e.o = l(e.k) : e.o;
    i$1(e.i === 3 ? new Set(o2) : o2, function(t3, i) {
      return A(n2, e, o2, t3, i, r2);
    }), x(n2, o2, false), r2 && n2.u && b("Patches").R(e, r2, n2.u, n2.s);
  }
  return e.o;
}
function A(e, i, o2, a2, c2, s2) {
  if (c2 === o2 && n(5), t(c2)) {
    var v2 = M(e, c2, s2 && i && i.i !== 3 && !u(i.D, a2) ? s2.concat(a2) : void 0);
    if (f(o2, a2, v2), !t(v2))
      return;
    e.m = false;
  }
  if (r(c2) && !y(c2)) {
    if (!e.h.F && e._ < 1)
      return;
    M(e, c2), i && i.A.l || x(e, c2);
  }
}
function x(n2, t2, r2) {
  r2 === void 0 && (r2 = false), n2.h.F && n2.m && d(t2, r2);
}
function z(n2, t2) {
  var r2 = n2[Q];
  return (r2 ? p(r2) : n2)[t2];
}
function I(n2, t2) {
  if (t2 in n2)
    for (var r2 = Object.getPrototypeOf(n2); r2; ) {
      var e = Object.getOwnPropertyDescriptor(r2, t2);
      if (e)
        return e;
      r2 = Object.getPrototypeOf(r2);
    }
}
function k(n2) {
  n2.P || (n2.P = true, n2.l && k(n2.l));
}
function E(n2) {
  n2.o || (n2.o = l(n2.t));
}
function R(n2, t2, r2) {
  var e = s(t2) ? b("MapSet").N(t2, r2) : v(t2) ? b("MapSet").T(t2, r2) : n2.g ? function(n3, t3) {
    var r3 = Array.isArray(n3), e2 = { i: r3 ? 1 : 0, A: t3 ? t3.A : _(), P: false, I: false, D: {}, l: t3, t: n3, k: null, o: null, j: null, C: false }, i = e2, o2 = en;
    r3 && (i = [e2], o2 = on);
    var u2 = Proxy.revocable(i, o2), a2 = u2.revoke, f2 = u2.proxy;
    return e2.k = f2, e2.j = a2, f2;
  }(t2, r2) : b("ES5").J(t2, r2);
  return (r2 ? r2.A : _()).p.push(e), e;
}
function D(e) {
  return t(e) || n(22, e), function n2(t2) {
    if (!r(t2))
      return t2;
    var e2, u2 = t2[Q], c2 = o(t2);
    if (u2) {
      if (!u2.P && (u2.i < 4 || !b("ES5").K(u2)))
        return u2.t;
      u2.I = true, e2 = F(t2, c2), u2.I = false;
    } else
      e2 = F(t2, c2);
    return i$1(e2, function(t3, r2) {
      u2 && a(u2.t, t3) === r2 || f(e2, t3, n2(r2));
    }), c2 === 3 ? new Set(e2) : e2;
  }(e);
}
function F(n2, t2) {
  switch (t2) {
    case 2:
      return new Map(n2);
    case 3:
      return Array.from(n2);
  }
  return l(n2);
}
var G;
var U;
var W = typeof Symbol != "undefined" && typeof Symbol("x") == "symbol";
var X = typeof Map != "undefined";
var q = typeof Set != "undefined";
var B = typeof Proxy != "undefined" && Proxy.revocable !== void 0 && typeof Reflect != "undefined";
var H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G);
var L = W ? Symbol.for("immer-draftable") : "__$immer_draftable";
var Q = W ? Symbol.for("immer-state") : "__$immer_state";
var Y = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n2) {
  return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n2;
}, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n2) {
  return "Cannot apply patch, path doesn't resolve: " + n2;
}, 16: 'Sets cannot have "replace" patches.', 17: function(n2) {
  return "Unsupported patch operation: " + n2;
}, 18: function(n2) {
  return "The plugin for '" + n2 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n2 + "()` when initializing your application.";
}, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n2) {
  return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n2 + "'";
}, 22: function(n2) {
  return "'current' expects a draft, got: " + n2;
}, 23: function(n2) {
  return "'original' expects a draft, got: " + n2;
}, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
var Z = "" + Object.prototype.constructor;
var nn = typeof Reflect != "undefined" && Reflect.ownKeys ? Reflect.ownKeys : Object.getOwnPropertySymbols !== void 0 ? function(n2) {
  return Object.getOwnPropertyNames(n2).concat(Object.getOwnPropertySymbols(n2));
} : Object.getOwnPropertyNames;
var tn = Object.getOwnPropertyDescriptors || function(n2) {
  var t2 = {};
  return nn(n2).forEach(function(r2) {
    t2[r2] = Object.getOwnPropertyDescriptor(n2, r2);
  }), t2;
};
var rn = {};
var en = { get: function(n2, t2) {
  if (t2 === Q)
    return n2;
  var e = p(n2);
  if (!u(e, t2))
    return function(n3, t3, r2) {
      var e2, i2 = I(t3, r2);
      return i2 ? "value" in i2 ? i2.value : (e2 = i2.get) === null || e2 === void 0 ? void 0 : e2.call(n3.k) : void 0;
    }(n2, e, t2);
  var i = e[t2];
  return n2.I || !r(i) ? i : i === z(n2.t, t2) ? (E(n2), n2.o[t2] = R(n2.A.h, i, n2)) : i;
}, has: function(n2, t2) {
  return t2 in p(n2);
}, ownKeys: function(n2) {
  return Reflect.ownKeys(p(n2));
}, set: function(n2, t2, r2) {
  var e = I(p(n2), t2);
  if (e == null ? void 0 : e.set)
    return e.set.call(n2.k, r2), true;
  if (!n2.P) {
    var i = z(p(n2), t2), o2 = i == null ? void 0 : i[Q];
    if (o2 && o2.t === r2)
      return n2.o[t2] = r2, n2.D[t2] = false, true;
    if (c(r2, i) && (r2 !== void 0 || u(n2.t, t2)))
      return true;
    E(n2), k(n2);
  }
  return n2.o[t2] === r2 && typeof r2 != "number" && (r2 !== void 0 || t2 in n2.o) || (n2.o[t2] = r2, n2.D[t2] = true, true);
}, deleteProperty: function(n2, t2) {
  return z(n2.t, t2) !== void 0 || t2 in n2.t ? (n2.D[t2] = false, E(n2), k(n2)) : delete n2.D[t2], n2.o && delete n2.o[t2], true;
}, getOwnPropertyDescriptor: function(n2, t2) {
  var r2 = p(n2), e = Reflect.getOwnPropertyDescriptor(r2, t2);
  return e ? { writable: true, configurable: n2.i !== 1 || t2 !== "length", enumerable: e.enumerable, value: r2[t2] } : e;
}, defineProperty: function() {
  n(11);
}, getPrototypeOf: function(n2) {
  return Object.getPrototypeOf(n2.t);
}, setPrototypeOf: function() {
  n(12);
} };
var on = {};
i$1(en, function(n2, t2) {
  on[n2] = function() {
    return arguments[0] = arguments[0][0], t2.apply(this, arguments);
  };
}), on.deleteProperty = function(t2, r2) {
  return isNaN(parseInt(r2)) && n(13), en.deleteProperty.call(this, t2[0], r2);
}, on.set = function(t2, r2, e) {
  return r2 !== "length" && isNaN(parseInt(r2)) && n(14), en.set.call(this, t2[0], r2, e, t2[0]);
};
var un = function() {
  function e(t2) {
    var e2 = this;
    this.g = B, this.F = true, this.produce = function(t3, i2, o2) {
      if (typeof t3 == "function" && typeof i2 != "function") {
        var u2 = i2;
        i2 = t3;
        var a2 = e2;
        return function(n2) {
          var t4 = this;
          n2 === void 0 && (n2 = u2);
          for (var r2 = arguments.length, e3 = Array(r2 > 1 ? r2 - 1 : 0), o3 = 1; o3 < r2; o3++)
            e3[o3 - 1] = arguments[o3];
          return a2.produce(n2, function(n3) {
            var r3;
            return (r3 = i2).call.apply(r3, [t4, n3].concat(e3));
          });
        };
      }
      var f2;
      if (typeof i2 != "function" && n(6), o2 !== void 0 && typeof o2 != "function" && n(7), r(t3)) {
        var c2 = w(e2), s2 = R(e2, t3, void 0), v2 = true;
        try {
          f2 = i2(s2), v2 = false;
        } finally {
          v2 ? O(c2) : g(c2);
        }
        return typeof Promise != "undefined" && f2 instanceof Promise ? f2.then(function(n2) {
          return j(c2, o2), P(n2, c2);
        }, function(n2) {
          throw O(c2), n2;
        }) : (j(c2, o2), P(f2, c2));
      }
      if (!t3 || typeof t3 != "object") {
        if ((f2 = i2(t3)) === H)
          return;
        return f2 === void 0 && (f2 = t3), e2.F && d(f2, true), f2;
      }
      n(21, t3);
    }, this.produceWithPatches = function(n2, t3) {
      return typeof n2 == "function" ? function(t4) {
        for (var r3 = arguments.length, i3 = Array(r3 > 1 ? r3 - 1 : 0), o2 = 1; o2 < r3; o2++)
          i3[o2 - 1] = arguments[o2];
        return e2.produceWithPatches(t4, function(t5) {
          return n2.apply(void 0, [t5].concat(i3));
        });
      } : [e2.produce(n2, t3, function(n3, t4) {
        r2 = n3, i2 = t4;
      }), r2, i2];
      var r2, i2;
    }, typeof (t2 == null ? void 0 : t2.useProxies) == "boolean" && this.setUseProxies(t2.useProxies), typeof (t2 == null ? void 0 : t2.autoFreeze) == "boolean" && this.setAutoFreeze(t2.autoFreeze);
  }
  var i = e.prototype;
  return i.createDraft = function(e2) {
    r(e2) || n(8), t(e2) && (e2 = D(e2));
    var i2 = w(this), o2 = R(this, e2, void 0);
    return o2[Q].C = true, g(i2), o2;
  }, i.finishDraft = function(t2, r2) {
    var e2 = t2 && t2[Q];
    e2 && e2.C || n(9), e2.I && n(10);
    var i2 = e2.A;
    return j(i2, r2), P(void 0, i2);
  }, i.setAutoFreeze = function(n2) {
    this.F = n2;
  }, i.setUseProxies = function(t2) {
    t2 && !B && n(20), this.g = t2;
  }, i.applyPatches = function(n2, r2) {
    var e2;
    for (e2 = r2.length - 1; e2 >= 0; e2--) {
      var i2 = r2[e2];
      if (i2.path.length === 0 && i2.op === "replace") {
        n2 = i2.value;
        break;
      }
    }
    e2 > -1 && (r2 = r2.slice(e2 + 1));
    var o2 = b("Patches").$;
    return t(n2) ? o2(n2, r2) : this.produce(n2, function(n3) {
      return o2(n3, r2);
    });
  }, e;
}();
var an = new un();
var fn = an.produce;
an.produceWithPatches.bind(an);
an.setAutoFreeze.bind(an);
an.setUseProxies.bind(an);
an.applyPatches.bind(an);
an.createDraft.bind(an);
an.finishDraft.bind(an);
var setMultipleDataToUser = function(data, user) {
  var password = data.password, email = data.email, username = data.username, restData = __rest(data, ["password", "email", "username"]);
  if (password !== void 0) {
    if (typeof password !== "string") {
      throw new ValidationError("password can only be a string type");
    }
    user.setPassword(password);
  }
  if (email !== void 0) {
    if (typeof email !== "string") {
      throw new ValidationError("email can only be a string type");
    }
    user.setEmail(email);
  }
  if (username !== void 0) {
    if (typeof username !== "string") {
      throw new ValidationError("username can only be a string type");
    }
    user.setUsername(username);
  }
  Object.entries(restData).filter(function(_a) {
    var value = _a[1];
    return value !== void 0;
  }).forEach(function(_a) {
    var key = _a[0], value = _a[1];
    user.set(key, value);
  });
};
var AuthenticationState;
(function(AuthenticationState2) {
  AuthenticationState2["UNDEFINED"] = "undefined";
  AuthenticationState2["UNAUTHENTICATED"] = "unauthenticated";
  AuthenticationState2["AUTHENTICATED"] = "authenticated";
  AuthenticationState2["AUTHENTICATING"] = "authenticating";
  AuthenticationState2["LOGGING_OUT"] = "logging_out";
  AuthenticationState2["ERROR"] = "error";
})(AuthenticationState || (AuthenticationState = {}));
var initialAuth = {
  state: AuthenticationState.UNDEFINED,
  error: null
};
var defaultUseMoralisAuthOptions = function(moralis) {
  return {
    setUser: function() {
    },
    Moralis: moralis,
    environment: "browser"
  };
};
var _useMoralisAuth = function(options) {
  var _a = __assign(__assign({}, defaultUseMoralisAuthOptions(options.Moralis)), options), onAccountChanged = _a.onAccountChanged, Moralis = _a.Moralis, environment = _a.environment, _setIsWeb3Enabled = _a._setIsWeb3Enabled, _setIsWeb3EnableLoading = _a._setIsWeb3EnableLoading;
  var setUser = options.setUser;
  var _b = (0, import_react2.useState)(initialAuth), auth = _b[0], setAuth = _b[1];
  var _c = (0, import_react2.useState)(false), hasOnAccountChangeListener = _c[0], setHasOnAccountChangeListener = _c[1];
  var authenticate = (0, import_react2.useCallback)(function(_a2) {
    if (_a2 === void 0) {
      _a2 = {};
    }
    return __awaiter15(void 0, void 0, void 0, function() {
      var user, error_1;
      var onComplete = _a2.onComplete, onError = _a2.onError, onSuccess = _a2.onSuccess, throwOnError = _a2.throwOnError, rest = __rest(_a2, ["onComplete", "onError", "onSuccess", "throwOnError"]);
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            setAuth({
              state: AuthenticationState.AUTHENTICATING,
              error: null
            });
            if (_setIsWeb3EnableLoading) {
              _setIsWeb3EnableLoading(true);
            }
            _b2.label = 1;
          case 1:
            _b2.trys.push([1, 3, 4, 5]);
            return [4, Moralis.authenticate(rest)];
          case 2:
            user = _b2.sent();
            setUser(user);
            if (_setIsWeb3Enabled) {
              _setIsWeb3Enabled(true);
            }
            setAuth({
              state: AuthenticationState.AUTHENTICATED,
              error: null
            });
            if (onSuccess) {
              onSuccess(user);
            }
            return [2, user];
          case 3:
            error_1 = _b2.sent();
            setAuth({ state: AuthenticationState.ERROR, error: error_1 });
            setUser(null);
            if (onError) {
              onError(error_1);
            }
            if (throwOnError) {
              throw error_1;
            }
            return [3, 5];
          case 4:
            if (_setIsWeb3EnableLoading) {
              _setIsWeb3EnableLoading(false);
            }
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, [_setIsWeb3Enabled, _setIsWeb3EnableLoading]);
  var signup = (0, import_react2.useCallback)(function(username, password, email, otherFields, _a2) {
    if (otherFields === void 0) {
      otherFields = {};
    }
    var _b2 = _a2 === void 0 ? {} : _a2, throwOnError = _b2.throwOnError, onSuccess = _b2.onSuccess, onError = _b2.onError, onComplete = _b2.onComplete;
    return __awaiter15(void 0, void 0, void 0, function() {
      var newUser, user, error_2;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            setAuth({
              state: AuthenticationState.AUTHENTICATING,
              error: null
            });
            newUser = new Moralis.User();
            setMultipleDataToUser(__assign({ username, password, email }, otherFields), newUser);
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, 4, 5]);
            return [4, newUser.signUp()];
          case 2:
            user = _c2.sent();
            setAuth({
              state: AuthenticationState.AUTHENTICATED,
              error: null
            });
            setUser(user);
            if (onSuccess) {
              onSuccess(user);
            }
            return [2, user];
          case 3:
            error_2 = _c2.sent();
            setAuth({ state: AuthenticationState.ERROR, error: error_2 });
            if (throwOnError) {
              throw error_2;
            }
            if (onError) {
              onError(error_2);
            }
            return [3, 5];
          case 4:
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, []);
  var login = (0, import_react2.useCallback)(function(username, password, _a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, usePost = _b2.usePost, throwOnError = _b2.throwOnError, onError = _b2.onError, onSuccess = _b2.onSuccess, onComplete = _b2.onComplete;
    return __awaiter15(void 0, void 0, void 0, function() {
      var user, error_3;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            setAuth({
              state: AuthenticationState.AUTHENTICATING,
              error: null
            });
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, 4, 5]);
            return [4, Moralis.User.logIn(username, password, {
              usePost
            })];
          case 2:
            user = _c2.sent();
            setAuth({
              state: AuthenticationState.AUTHENTICATED,
              error: null
            });
            setUser(user);
            if (onSuccess) {
              onSuccess(user);
            }
            return [2, user];
          case 3:
            error_3 = _c2.sent();
            setAuth({ state: AuthenticationState.ERROR, error: error_3 });
            if (throwOnError) {
              throw error_3;
            }
            if (onError) {
              onError(error_3);
            }
            return [3, 5];
          case 4:
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, []);
  var logout = (0, import_react2.useCallback)(function(_a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, throwOnError = _b2.throwOnError, onError = _b2.onError, onSuccess = _b2.onSuccess, onComplete = _b2.onComplete;
    return __awaiter15(void 0, void 0, void 0, function() {
      var error_4;
      var _c2;
      return __generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            setAuth({
              state: AuthenticationState.AUTHENTICATING,
              error: null
            });
            _d.label = 1;
          case 1:
            _d.trys.push([1, 3, 4, 5]);
            return [4, Moralis.User.logOut()];
          case 2:
            _d.sent();
            setAuth({ state: AuthenticationState.UNAUTHENTICATED, error: null });
            setUser(null);
            if (onSuccess) {
              onSuccess();
            }
            return [3, 5];
          case 3:
            error_4 = _d.sent();
            setAuth({ state: AuthenticationState.ERROR, error: error_4 });
            setUser((_c2 = Moralis.User.current()) !== null && _c2 !== void 0 ? _c2 : null);
            if (throwOnError) {
              throw error_4;
            }
            if (onError) {
              onError(error_4);
            }
            return [3, 5];
          case 4:
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, []);
  (0, import_react2.useEffect)(function() {
    try {
      var currentUser = Moralis.User.current();
      if (currentUser) {
        setAuth({
          state: AuthenticationState.AUTHENTICATED,
          error: null
        });
        setUser(currentUser);
      } else {
        throw new Error("Let it catch");
      }
    } catch (error) {
      setAuth({
        state: AuthenticationState.UNAUTHENTICATED,
        error: null
      });
      setUser(null);
    }
  }, []);
  (0, import_react2.useEffect)(function() {
    if (hasOnAccountChangeListener) {
      return;
    }
    if (environment !== "browser") {
      return;
    }
    if (!window) {
      console.warn("No window object found");
      return;
    }
    try {
      var ethereum = window.ethereum;
      if (!ethereum) {
        console.warn("No window.ethereum found");
        return;
      }
      ethereum.on("accountsChanged", function(accounts) {
        return __awaiter15(void 0, void 0, void 0, function() {
          var account;
          return __generator(this, function(_a2) {
            account = accounts[0];
            if (onAccountChanged) {
              onAccountChanged(account);
            }
            return [2];
          });
        });
      });
    } catch (error) {
      console.warn(error.message);
    }
    setHasOnAccountChangeListener(true);
  }, [hasOnAccountChangeListener]);
  var isAuthenticated = auth.state === AuthenticationState.AUTHENTICATED;
  var isUnauthenticated = auth.state === AuthenticationState.UNAUTHENTICATED;
  var isAuthenticating = auth.state === AuthenticationState.AUTHENTICATING;
  var hasAuthError = auth.state === AuthenticationState.ERROR;
  var isLoggingOut = auth.state === AuthenticationState.LOGGING_OUT;
  var isAuthUndefined = auth.state === AuthenticationState.UNDEFINED;
  return {
    auth,
    authenticate,
    signup,
    login,
    logout,
    authError: auth.error,
    isAuthenticated,
    isUnauthenticated,
    isAuthenticating,
    hasAuthError,
    isLoggingOut,
    isAuthUndefined
  };
};
var _useMoralisInit = function(_a) {
  var appId = _a.appId, serverUrl = _a.serverUrl, jsKey = _a.jsKey, dangerouslyUseOfMasterKey = _a.dangerouslyUseOfMasterKey, plugins = _a.plugins, _b = _a.environment, environment = _b === void 0 ? "browser" : _b, _c = _a.getMoralis, getMoralis = _c === void 0 ? function() {
    return import_moralis.default;
  } : _c, initializeOnMount = _a.initializeOnMount, setAppId = _a.setAppId, setServerUrl = _a.setServerUrl;
  var _d = (0, import_react2.useState)(false), isInitialized = _d[0], setIsInitialized = _d[1];
  var _e = (0, import_react2.useState)(false), isInitializing = _e[0], setIsInitializing = _e[1];
  var _f = (0, import_react2.useState)(false), shouldInitialize = _f[0], setShouldInitialize = _f[1];
  var Moralis = (0, import_react2.useRef)(getMoralis());
  var _initialize = (0, import_react2.useCallback)(function(_a2) {
    var serverUrl2 = _a2.serverUrl, appId2 = _a2.appId, javascriptKey = _a2.javascriptKey, masterKey = _a2.masterKey, plugins2 = _a2.plugins;
    return __awaiter15(void 0, void 0, void 0, function() {
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            if (isInitialized) {
              return [2];
            }
            if (!appId2) {
              throw new ReactMoralisError('Provide a "appId" provided to <MoralisProvider>');
            }
            if (!serverUrl2) {
              throw new ReactMoralisError('Provide a "serverUrl" provided to <MoralisProvider>');
            }
            setIsInitializing(true);
            return [4, Moralis.current.start({
              serverUrl: serverUrl2,
              appId: appId2,
              javascriptKey,
              masterKey,
              plugins: plugins2
            })];
          case 1:
            _b2.sent();
            setIsInitializing(false);
            setIsInitialized(true);
            return [2];
        }
      });
    });
  }, []);
  (0, import_react2.useEffect)(function() {
    if (isInitialized) {
      return;
    }
    if (!initializeOnMount && !shouldInitialize) {
      return;
    }
    _initialize({
      appId,
      serverUrl,
      masterKey: dangerouslyUseOfMasterKey,
      javascriptKey: jsKey,
      plugins
    });
    setIsInitialized(true);
  }, [
    appId,
    serverUrl,
    dangerouslyUseOfMasterKey,
    jsKey,
    plugins,
    isInitialized,
    initializeOnMount,
    shouldInitialize
  ]);
  var initialize = (0, import_react2.useCallback)(function(_a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, newAppId = _b2.appId, newServerUrl = _b2.serverUrl;
    if (newAppId) {
      setAppId(newAppId);
    }
    if (newServerUrl) {
      setServerUrl(newServerUrl);
    }
    if (!newAppId && !appId) {
      throw new Error("No appId is provided. Please provide an appId to the Moralis.Provider or as argument in initialize()");
    }
    if (!newServerUrl && !serverUrl) {
      throw new Error("No serverUrl is provided. Please provide an serverUrl to the Moralis.Provider or as argument in initialize()");
    }
    setShouldInitialize(true);
  }, [appId, serverUrl]);
  return {
    isInitialized,
    isInitializing,
    initialize,
    Moralis: Moralis.current,
    environment
  };
};
var _useMoralisUser = function(Moralis) {
  var _a = (0, import_react2.useState)(null), user = _a[0], setUser = _a[1];
  var _b = (0, import_react2.useState)(false), isUpdating = _b[0], setIsUpdating = _b[1];
  var _c = (0, import_react2.useState)(null), error = _c[0], setError = _c[1];
  var setUserData = (0, import_react2.useCallback)(function(data, _a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, throwOnError = _b2.throwOnError, onComplete = _b2.onComplete, onError = _b2.onError, onSuccess = _b2.onSuccess;
    return __awaiter15(void 0, void 0, void 0, function() {
      var userHasLocallyUpdated, currentUser, error_1;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            if (!user) {
              throw new NotAuthenticatedError("User needs to be authenticated before setting new data");
            }
            setIsUpdating(true);
            setError(null);
            userHasLocallyUpdated = false;
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, 4, 5]);
            setMultipleDataToUser(data, user);
            userHasLocallyUpdated = true;
            return [4, user.save()];
          case 2:
            _c2.sent();
            currentUser = Moralis.User.current();
            if (!currentUser) {
              throw new ReactMoralisError("No user data found after save");
            }
            setUser(currentUser);
            if (onSuccess) {
              onSuccess(user);
            }
            return [2, user];
          case 3:
            error_1 = _c2.sent();
            if (userHasLocallyUpdated) {
              user.revert();
            }
            setError(error_1);
            if (throwOnError) {
              throw error_1;
            }
            if (onError) {
              onError(error_1);
            }
            return [3, 5];
          case 4:
            setIsUpdating(false);
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, [user]);
  var refetchUserData = (0, import_react2.useCallback)(function(_a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, throwOnError = _b2.throwOnError, onComplete = _b2.onComplete, onError = _b2.onError, onSuccess = _b2.onSuccess;
    return __awaiter15(void 0, void 0, void 0, function() {
      var newUserData, error_2;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            if (!user) {
              throw new NotAuthenticatedError("User needs to be authenticated before refetching");
            }
            setIsUpdating(true);
            setError(null);
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, 4, 5]);
            return [4, user.fetch()];
          case 2:
            newUserData = _c2.sent();
            if (!newUserData) {
              throw new ReactMoralisError("No user data found after refetch");
            }
            setUser(newUserData);
            if (onSuccess) {
              onSuccess(newUserData);
            }
            return [2, newUserData];
          case 3:
            error_2 = _c2.sent();
            setError(error_2);
            if (throwOnError) {
              throw error_2;
            }
            if (onError) {
              onError(error_2);
            }
            return [3, 5];
          case 4:
            setIsUpdating(false);
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, [user]);
  return {
    setUserData,
    setUser,
    refetchUserData,
    user,
    _setUser: setUser,
    isUserUpdating: isUpdating,
    userError: error
  };
};
var _useMoralisWeb3 = function(Moralis) {
  var _a = (0, import_react2.useState)(false), isWeb3Enabled = _a[0], _setIsWeb3Enabled = _a[1];
  var _b = (0, import_react2.useState)(null), web3EnableError = _b[0], setEnableWeb3Error = _b[1];
  var _c = (0, import_react2.useState)(false), isWeb3EnableLoading = _c[0], _setIsWeb3EnableLoading = _c[1];
  var _d = (0, import_react2.useState)(null), web3 = _d[0], setWeb3 = _d[1];
  var _e = (0, import_react2.useState)(null), chainId = _e[0], setChainId = _e[1];
  var _f = (0, import_react2.useState)(null), account = _f[0], setAccount = _f[1];
  var _g = (0, import_react2.useState)(null), connector = _g[0], setConnector = _g[1];
  var _h = (0, import_react2.useState)(null), provider = _h[0], setProvider = _h[1];
  (0, import_react2.useEffect)(function() {
    var handleConnect = function(_a2) {
      var web32 = _a2.web3, chainId2 = _a2.chainId, account2 = _a2.account, connector2 = _a2.connector, provider2 = _a2.provider;
      setWeb3(web32);
      setChainId(chainId2);
      setAccount(account2);
      setConnector(connector2);
      setProvider(provider2);
    };
    var handleDisconnect = function() {
      setWeb3(null);
      _setIsWeb3Enabled(false);
      setChainId(null);
      setAccount(null);
      setConnector(null);
      setProvider(null);
    };
    var handleChainChanged = function(chainId2) {
      setChainId(chainId2);
      setWeb3(Moralis.web3);
    };
    var unsubChainChanged = Moralis.onChainChanged(handleChainChanged);
    var unsubAccountChanged = Moralis.onAccountChanged(setAccount);
    var unsubEnable = Moralis.onWeb3Enabled(handleConnect);
    var unsubDeactivate = Moralis.onWeb3Deactivated(handleDisconnect);
    var unsubDisconnect = Moralis.onDisconnect(handleDisconnect);
    return function() {
      unsubChainChanged();
      unsubAccountChanged();
      unsubEnable();
      unsubDeactivate();
      unsubDisconnect();
    };
  }, [Moralis]);
  var enableWeb3 = (0, import_react2.useCallback)(function(_a2) {
    if (_a2 === void 0) {
      _a2 = {};
    }
    return __awaiter15(void 0, void 0, void 0, function() {
      var currentWeb3, error_1;
      var throwOnError = _a2.throwOnError, onComplete = _a2.onComplete, onError = _a2.onError, onSuccess = _a2.onSuccess, rest = __rest(_a2, ["throwOnError", "onComplete", "onError", "onSuccess"]);
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            _setIsWeb3EnableLoading(true);
            setEnableWeb3Error(null);
            _b2.label = 1;
          case 1:
            _b2.trys.push([1, 3, 4, 5]);
            return [4, Moralis.enableWeb3(rest)];
          case 2:
            currentWeb3 = _b2.sent();
            _setIsWeb3Enabled(true);
            if (onSuccess) {
              onSuccess(currentWeb3);
            }
            return [2, currentWeb3];
          case 3:
            error_1 = _b2.sent();
            setEnableWeb3Error(error_1);
            if (throwOnError) {
              throw error_1;
            }
            if (onError) {
              onError(error_1);
            }
            return [3, 5];
          case 4:
            _setIsWeb3EnableLoading(false);
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, []);
  var deactivateWeb3 = (0, import_react2.useCallback)(function() {
    return __awaiter15(void 0, void 0, void 0, function() {
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, Moralis.deactivateWeb3()];
          case 1:
            _a2.sent();
            return [2];
        }
      });
    });
  }, []);
  var network = (0, import_react2.useMemo)(function() {
    var _a2;
    return (_a2 = connector === null || connector === void 0 ? void 0 : connector.network) !== null && _a2 !== void 0 ? _a2 : null;
  }, [connector]);
  var connectorType = (0, import_react2.useMemo)(function() {
    var _a2;
    return (_a2 = connector === null || connector === void 0 ? void 0 : connector.type) !== null && _a2 !== void 0 ? _a2 : null;
  }, [connector]);
  return {
    enableWeb3,
    web3,
    isWeb3Enabled,
    web3EnableError,
    isWeb3EnableLoading,
    _setIsWeb3Enabled,
    _setIsWeb3EnableLoading,
    chainId,
    account,
    network,
    connector,
    connectorType,
    deactivateWeb3,
    provider
  };
};
var MoralisProvider = function(_a) {
  var children = _a.children, _appId = _a.appId, _serverUrl = _a.serverUrl, jsKey = _a.jsKey, dangerouslyUseOfMasterKey = _a.dangerouslyUseOfMasterKey, plugins = _a.plugins, environment = _a.environment, getMoralis = _a.getMoralis, _b = _a.options, _c = _b === void 0 ? {} : _b, onAccountChanged = _c.onAccountChanged, _d = _a.initializeOnMount, initializeOnMount = _d === void 0 ? true : _d;
  var _e = (0, import_react2.useState)(_appId !== null && _appId !== void 0 ? _appId : null), appId = _e[0], setAppId = _e[1];
  var _f = (0, import_react2.useState)(_serverUrl !== null && _serverUrl !== void 0 ? _serverUrl : null), serverUrl = _f[0], setServerUrl = _f[1];
  var moralisInit = _useMoralisInit({
    appId,
    serverUrl,
    jsKey,
    dangerouslyUseOfMasterKey,
    plugins,
    environment,
    getMoralis,
    initializeOnMount,
    setAppId,
    setServerUrl
  });
  var _g = _useMoralisWeb3(moralisInit.Moralis), _setIsWeb3Enabled = _g._setIsWeb3Enabled, _setIsWeb3EnableLoading = _g._setIsWeb3EnableLoading, moralisWeb3 = __rest(_g, ["_setIsWeb3Enabled", "_setIsWeb3EnableLoading"]);
  var _h = _useMoralisUser(moralisInit.Moralis), setUser = _h.setUser, moralisUser = __rest(_h, ["setUser"]);
  var moralisAuth = _useMoralisAuth({
    onAccountChanged,
    setUser,
    Moralis: moralisInit.Moralis,
    environment: moralisInit.environment,
    _setIsWeb3Enabled,
    _setIsWeb3EnableLoading
  });
  return (0, import_jsx_runtime2.jsx)(MoralisContext.Provider, __assign({ value: __assign(__assign(__assign(__assign(__assign({}, moralisInit), moralisAuth), moralisUser), moralisWeb3), { appId, serverUrl }) }, { children }), void 0);
};
var useMoralisWeb3Api = function() {
  var Moralis = useMoralis().Moralis;
  return __assign({ Web3API: Moralis.Web3API }, Moralis.Web3API);
};

// node_modules/@mantine/styles/esm/theme/MantineProvider.js
init_react();
var import_react7 = __toESM(require_react());

// node_modules/@emotion/react/dist/emotion-react.browser.esm.js
init_react();
var React3 = __toESM(require_react());
var import_react4 = __toESM(require_react());

// node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
init_react();

// node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
init_react();
function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }
  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  }
}
function createStyleElement(options) {
  var tag = document.createElement("style");
  tag.setAttribute("data-emotion", options.key);
  if (options.nonce !== void 0) {
    tag.setAttribute("nonce", options.nonce);
  }
  tag.appendChild(document.createTextNode(""));
  tag.setAttribute("data-s", "");
  return tag;
}
var StyleSheet = /* @__PURE__ */ function() {
  function StyleSheet2(options) {
    var _this = this;
    this._insertTag = function(tag) {
      var before;
      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }
      _this.container.insertBefore(tag, before);
      _this.tags.push(tag);
    };
    this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce;
    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }
  var _proto = StyleSheet2.prototype;
  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };
  _proto.insert = function insert(rule) {
    if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }
    var tag = this.tags[this.tags.length - 1];
    if (true) {
      var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
      if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
        console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
      }
      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
    }
    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);
      try {
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
        if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
          console.error('There was a problem inserting the following rule: "' + rule + '"', e);
        }
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }
    this.ctr++;
  };
  _proto.flush = function flush() {
    this.tags.forEach(function(tag) {
      return tag.parentNode && tag.parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
    if (true) {
      this._alreadyInsertedOrderInsensitiveRule = false;
    }
  };
  return StyleSheet2;
}();

// node_modules/stylis/src/Enum.js
init_react();
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";

// node_modules/stylis/src/Utility.js
init_react();
var abs = Math.abs;
var from = String.fromCharCode;
var assign = Object.assign;
function hash2(value, length2) {
  return (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3);
}
function trim(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search) {
  return value.indexOf(search);
}
function charat(value, index) {
  return value.charCodeAt(index) | 0;
}
function substr(value, begin, end) {
  return value.slice(begin, end);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback) {
  return array.map(callback).join("");
}

// node_modules/stylis/src/Parser.js
init_react();

// node_modules/stylis/src/Tokenizer.js
init_react();
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root, parent, type, props, children, length2) {
  return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
}
function copy(root, props) {
  return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end) {
  return substr(characters, begin, end);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index) {
  while (!token(peek()))
    next();
  return slice(index, position);
}

// node_modules/stylis/src/Parser.js
function compile(value) {
  return dealloc(parse2("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse2(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index = 0;
  var offset = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 40:
        if (previous != 108 && characters2.charCodeAt(length2 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root, parent), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset:
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append(reference = ruleset(characters2, root, parent, index, offset, rules, points, type, props = [], children = [], length2), rulesets);
            if (character2 === 123)
              if (offset === 0)
                parse2(characters2, root, reference, reference, props, rulesets, length2, points, children);
              else
                switch (atrule) {
                  case 100:
                  case 109:
                  case 115:
                    parse2(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                    break;
                  default:
                    parse2(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
        break;
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          case 38:
            ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length2) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [""];
  var size2 = sizeof(rule);
  for (var i = 0, j2 = 0, k2 = 0; i < index; ++i)
    for (var x2 = 0, y2 = substr(value, post + 1, post = abs(j2 = points[i])), z2 = value; x2 < size2; ++x2)
      if (z2 = trim(j2 > 0 ? rule[x2] + " " + y2 : replace(y2, /&\f/g, rule[x2])))
        props[k2++] = z2;
  return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length2);
}
function comment(value, root, parent) {
  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
}
function declaration(value, root, parent, length2) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
}

// node_modules/stylis/src/Prefixer.js
init_react();
function prefix(value, length2) {
  switch (hash2(value, length2)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length2 > 6)
        switch (charat(value, length2 + 1)) {
          case 109:
            if (charat(value, length2 + 4) !== 45)
              break;
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
        }
      break;
    case 4949:
      if (charat(value, length2 + 1) !== 115)
        break;
    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
        case 107:
          return replace(value, ":", ":" + WEBKIT) + value;
        case 101:
          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
      }
      break;
    case 5936:
      switch (charat(value, length2 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
      return WEBKIT + value + MS + value + value;
  }
  return value;
}

// node_modules/stylis/src/Serializer.js
init_react();
function serialize3(children, callback) {
  var output = "";
  var length2 = sizeof(children);
  for (var i = 0; i < length2; i++)
    output += callback(children[i], i, children, callback) || "";
  return output;
}
function stringify(element, index, children, callback) {
  switch (element.type) {
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize3(element.children, callback) + "}";
    case RULESET:
      element.value = element.props.join(",");
  }
  return strlen(children = serialize3(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}

// node_modules/stylis/src/Middleware.js
init_react();
function middleware(collection) {
  var length2 = sizeof(collection);
  return function(element, index, children, callback) {
    var output = "";
    for (var i = 0; i < length2; i++)
      output += collection[i](element, index, children, callback) || "";
    return output;
  };
}
function prefixer(element, index, children, callback) {
  if (element.length > -1) {
    if (!element.return)
      switch (element.type) {
        case DECLARATION:
          element.return = prefix(element.value, element.length);
          break;
        case KEYFRAMES:
          return serialize3([copy(element, { value: replace(element.value, "@", "@" + WEBKIT) })], callback);
        case RULESET:
          if (element.length)
            return combine(element.props, function(value) {
              switch (match(value, /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  return serialize3([copy(element, { props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")] })], callback);
                case "::placeholder":
                  return serialize3([
                    copy(element, { props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")] }),
                    copy(element, { props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")] }),
                    copy(element, { props: [replace(value, /:(plac\w+)/, MS + "input-$1")] })
                  ], callback);
              }
              return "";
            });
      }
  }
}

// node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.esm.js
init_react();

// node_modules/@emotion/memoize/dist/emotion-memoize.browser.esm.js
init_react();
function memoize(fn2) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn2(arg);
    return cache[arg];
  };
}
var emotion_memoize_browser_esm_default = memoize;

// node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
var last = function last2(arr) {
  return arr.length ? arr[arr.length - 1] : null;
};
var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
  var previous = 0;
  var character2 = 0;
  while (true) {
    previous = character2;
    character2 = peek();
    if (previous === 38 && character2 === 12) {
      points[index] = 1;
    }
    if (token(character2)) {
      break;
    }
    next();
  }
  return slice(begin, position);
};
var toRules = function toRules2(parsed, points) {
  var index = -1;
  var character2 = 44;
  do {
    switch (token(character2)) {
      case 0:
        if (character2 === 38 && peek() === 12) {
          points[index] = 1;
        }
        parsed[index] += identifierWithPointTracking(position - 1, points, index);
        break;
      case 2:
        parsed[index] += delimit(character2);
        break;
      case 4:
        if (character2 === 44) {
          parsed[++index] = peek() === 58 ? "&\f" : "";
          points[index] = parsed[index].length;
          break;
        }
      default:
        parsed[index] += from(character2);
    }
  } while (character2 = next());
  return parsed;
};
var getRules = function getRules2(value, points) {
  return dealloc(toRules(alloc(value), points));
};
var fixedElements = /* @__PURE__ */ new WeakMap();
var compat = function compat2(element) {
  if (element.type !== "rule" || !element.parent || element.length < 1) {
    return;
  }
  var value = element.value, parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;
  while (parent.type !== "rule") {
    parent = parent.parent;
    if (!parent)
      return;
  }
  if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
    return;
  }
  if (isImplicitRule) {
    return;
  }
  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;
  for (var i = 0, k2 = 0; i < rules.length; i++) {
    for (var j2 = 0; j2 < parentRules.length; j2++, k2++) {
      element.props[k2] = points[i] ? rules[i].replace(/&\f/g, parentRules[j2]) : parentRules[j2] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel2(element) {
  if (element.type === "decl") {
    var value = element.value;
    if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
      element["return"] = "";
      element.value = "";
    }
  }
};
var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
var isIgnoringComment = function isIgnoringComment2(element) {
  return !!element && element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
};
var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
  return function(element, index, children) {
    if (element.type !== "rule")
      return;
    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
    if (unsafePseudoClasses && cache.compat !== true) {
      var prevElement = index > 0 ? children[index - 1] : null;
      if (prevElement && isIgnoringComment(last(prevElement.children))) {
        return;
      }
      unsafePseudoClasses.forEach(function(unsafePseudoClass) {
        console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
      });
    }
  };
};
var isImportRule = function isImportRule2(element) {
  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};
var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
  for (var i = index - 1; i >= 0; i--) {
    if (!isImportRule(children[i])) {
      return true;
    }
  }
  return false;
};
var nullifyElement = function nullifyElement2(element) {
  element.type = "";
  element.value = "";
  element["return"] = "";
  element.children = "";
  element.props = "";
};
var incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
  if (!isImportRule(element)) {
    return;
  }
  if (element.parent) {
    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
    nullifyElement(element);
  } else if (isPrependedWithRegularRules(index, children)) {
    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
    nullifyElement(element);
  }
};
var defaultStylisPlugins = [prefixer];
var createCache = function createCache2(options) {
  var key = options.key;
  if (!key) {
    throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
  }
  if (key === "css") {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(ssrStyles, function(node2) {
      var dataEmotionAttribute = node2.getAttribute("data-emotion");
      if (dataEmotionAttribute.indexOf(" ") === -1) {
        return;
      }
      document.head.appendChild(node2);
      node2.setAttribute("data-s", "");
    });
  }
  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
  if (true) {
    if (/[^a-z-]/.test(key)) {
      throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
    }
  }
  var inserted = {};
  var container;
  var nodesToHydrate = [];
  {
    container = options.container || document.head;
    Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node2) {
      var attrib = node2.getAttribute("data-emotion").split(" ");
      for (var i = 1; i < attrib.length; i++) {
        inserted[attrib[i]] = true;
      }
      nodesToHydrate.push(node2);
    });
  }
  var _insert;
  var omnipresentPlugins = [compat, removeLabel];
  if (true) {
    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
      get compat() {
        return cache.compat;
      }
    }), incorrectImportAlarm);
  }
  {
    var currentSheet;
    var finalizingPlugins = [stringify, true ? function(element) {
      if (!element.root) {
        if (element["return"]) {
          currentSheet.insert(element["return"]);
        } else if (element.value && element.type !== COMMENT) {
          currentSheet.insert(element.value + "{}");
        }
      }
    } : rulesheet(function(rule) {
      currentSheet.insert(rule);
    })];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis2(styles2) {
      return serialize3(compile(styles2), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;
      if (serialized.map !== void 0) {
        currentSheet = {
          insert: function insert2(rule) {
            sheet.insert(rule + serialized.map);
          }
        };
      }
      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  }
  var cache = {
    key,
    sheet: new StyleSheet({
      key,
      container,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};
var emotion_cache_browser_esm_default = createCache;

// node_modules/@emotion/react/dist/emotion-element-cbed451f.browser.esm.js
init_react();
var React2 = __toESM(require_react());
var import_react3 = __toESM(require_react());
init_extends();

// node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
init_react();
var isBrowser = true;
function getRegisteredStyles(registered, registeredStyles, classNames2) {
  var rawClassName = "";
  classNames2.split(" ").forEach(function(className) {
    if (registered[className] !== void 0) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;
  if ((isStringTag === false || isBrowser === false) && cache.registered[className] === void 0) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;
  if (cache.inserted[serialized.name] === void 0) {
    var current = serialized;
    do {
      var maybeStyles = cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
      current = current.next;
    } while (current !== void 0);
  }
};

// node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
init_react();

// node_modules/@emotion/hash/dist/hash.browser.esm.js
init_react();
function murmur2(str) {
  var h2 = 0;
  var k2, i = 0, len = str.length;
  for (; len >= 4; ++i, len -= 4) {
    k2 = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
    k2 = (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
    k2 ^= k2 >>> 24;
    h2 = (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h2 ^= (str.charCodeAt(i + 2) & 255) << 16;
    case 2:
      h2 ^= (str.charCodeAt(i + 1) & 255) << 8;
    case 1:
      h2 ^= str.charCodeAt(i) & 255;
      h2 = (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
  }
  h2 ^= h2 >>> 13;
  h2 = (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
  return ((h2 ^ h2 >>> 15) >>> 0).toString(36);
}
var hash_browser_esm_default = murmur2;

// node_modules/@emotion/unitless/dist/unitless.browser.esm.js
init_react();
var unitlessKeys = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
var unitless_browser_esm_default = unitlessKeys;

// node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty2(property) {
  return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue2(value) {
  return value != null && typeof value !== "boolean";
};
var processStyleName = /* @__PURE__ */ emotion_memoize_browser_esm_default(function(styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
});
var processStyleValue = function processStyleValue2(key, value) {
  switch (key) {
    case "animation":
    case "animationName": {
      if (typeof value === "string") {
        return value.replace(animationRegex, function(match2, p1, p2) {
          cursor = {
            name: p1,
            styles: p2,
            next: cursor
          };
          return p1;
        });
      }
    }
  }
  if (unitless_browser_esm_default[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
    return value + "px";
  }
  return value;
};
if (true) {
  contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
  contentValues = ["normal", "none", "initial", "inherit", "unset"];
  oldProcessStyleValue = processStyleValue;
  msPattern = /^-ms-/;
  hyphenPattern = /-(.)/g;
  hyphenatedCache = {};
  processStyleValue = function processStyleValue3(key, value) {
    if (key === "content") {
      if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
        throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
      }
    }
    var processed = oldProcessStyleValue(key, value);
    if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
      hyphenatedCache[key] = true;
      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
        return _char.toUpperCase();
      }) + "?");
    }
    return processed;
  };
}
var contentValuePattern;
var contentValues;
var oldProcessStyleValue;
var msPattern;
var hyphenPattern;
var hyphenatedCache;
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return "";
  }
  if (interpolation.__emotion_styles !== void 0) {
    if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
      throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
    }
    return interpolation;
  }
  switch (typeof interpolation) {
    case "boolean": {
      return "";
    }
    case "object": {
      if (interpolation.anim === 1) {
        cursor = {
          name: interpolation.name,
          styles: interpolation.styles,
          next: cursor
        };
        return interpolation.name;
      }
      if (interpolation.styles !== void 0) {
        var next2 = interpolation.next;
        if (next2 !== void 0) {
          while (next2 !== void 0) {
            cursor = {
              name: next2.name,
              styles: next2.styles,
              next: cursor
            };
            next2 = next2.next;
          }
        }
        var styles2 = interpolation.styles + ";";
        if (interpolation.map !== void 0) {
          styles2 += interpolation.map;
        }
        return styles2;
      }
      return createStringFromObject(mergedProps, registered, interpolation);
    }
    case "function": {
      if (mergedProps !== void 0) {
        var previousCursor = cursor;
        var result = interpolation(mergedProps);
        cursor = previousCursor;
        return handleInterpolation(mergedProps, registered, result);
      } else if (true) {
        console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
      }
      break;
    }
    case "string":
      if (true) {
        var matched = [];
        var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
          var fakeVarName = "animation" + matched.length;
          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
          return "${" + fakeVarName + "}";
        });
        if (matched.length) {
          console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
        }
      }
      break;
  }
  if (registered == null) {
    return interpolation;
  }
  var cached = registered[interpolation];
  return cached !== void 0 ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string = "";
  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];
      if (typeof value !== "object") {
        if (registered != null && registered[value] !== void 0) {
          string += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === "NO_COMPONENT_SELECTOR" && true) {
          throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
        }
        if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);
          switch (_key) {
            case "animation":
            case "animationName": {
              string += processStyleName(_key) + ":" + interpolated + ";";
              break;
            }
            default: {
              if (_key === "undefined") {
                console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
              }
              string += _key + "{" + interpolated + "}";
            }
          }
        }
      }
    }
  }
  return string;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;
if (true) {
  sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
}
var cursor;
var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
    return args[0];
  }
  var stringMode = true;
  var styles2 = "";
  cursor = void 0;
  var strings = args[0];
  if (strings == null || strings.raw === void 0) {
    stringMode = false;
    styles2 += handleInterpolation(mergedProps, registered, strings);
  } else {
    if (strings[0] === void 0) {
      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
    }
    styles2 += strings[0];
  }
  for (var i = 1; i < args.length; i++) {
    styles2 += handleInterpolation(mergedProps, registered, args[i]);
    if (stringMode) {
      if (strings[i] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles2 += strings[i];
    }
  }
  var sourceMap;
  if (true) {
    styles2 = styles2.replace(sourceMapPattern, function(match3) {
      sourceMap = match3;
      return "";
    });
  }
  labelPattern.lastIndex = 0;
  var identifierName = "";
  var match2;
  while ((match2 = labelPattern.exec(styles2)) !== null) {
    identifierName += "-" + match2[1];
  }
  var name2 = hash_browser_esm_default(styles2) + identifierName;
  if (true) {
    return {
      name: name2,
      styles: styles2,
      map: sourceMap,
      next: cursor,
      toString: function toString2() {
        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
      }
    };
  }
  return {
    name: name2,
    styles: styles2,
    next: cursor
  };
};

// node_modules/@emotion/react/dist/emotion-element-cbed451f.browser.esm.js
var hasOwnProperty = {}.hasOwnProperty;
var EmotionCacheContext = /* @__PURE__ */ (0, import_react3.createContext)(typeof HTMLElement !== "undefined" ? /* @__PURE__ */ emotion_cache_browser_esm_default({
  key: "css"
}) : null);
if (true) {
  EmotionCacheContext.displayName = "EmotionCacheContext";
}
var CacheProvider = EmotionCacheContext.Provider;
var withEmotionCache = function withEmotionCache2(func) {
  return /* @__PURE__ */ (0, import_react3.forwardRef)(function(props, ref) {
    var cache = (0, import_react3.useContext)(EmotionCacheContext);
    return func(props, cache, ref);
  });
};
var ThemeContext = /* @__PURE__ */ (0, import_react3.createContext)({});
if (true) {
  ThemeContext.displayName = "EmotionThemeContext";
}
var useInsertionEffect2 = React2["useInsertionEffect"] ? React2["useInsertionEffect"] : function useInsertionEffect3(create) {
  create();
};
function useInsertionEffectMaybe(create) {
  useInsertionEffect2(create);
}
var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
var Insertion = function Insertion2(_ref) {
  var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  var rules = useInsertionEffectMaybe(function() {
    return insertStyles(cache, serialized, isStringTag);
  });
  return null;
};
var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
  var cssProp = props.css;
  if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
    cssProp = cache.registered[cssProp];
  }
  var WrappedComponent = props[typePropName];
  var registeredStyles = [cssProp];
  var className = "";
  if (typeof props.className === "string") {
    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }
  var serialized = serializeStyles(registeredStyles, void 0, (0, import_react3.useContext)(ThemeContext));
  if (serialized.name.indexOf("-") === -1) {
    var labelFromStack = props[labelPropName];
    if (labelFromStack) {
      serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
    }
  }
  className += cache.key + "-" + serialized.name;
  var newProps = {};
  for (var key in props) {
    if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
      newProps[key] = props[key];
    }
  }
  newProps.ref = ref;
  newProps.className = className;
  return /* @__PURE__ */ (0, import_react3.createElement)(import_react3.Fragment, null, /* @__PURE__ */ (0, import_react3.createElement)(Insertion, {
    cache,
    serialized,
    isStringTag: typeof WrappedComponent === "string"
  }), /* @__PURE__ */ (0, import_react3.createElement)(WrappedComponent, newProps));
});
if (true) {
  Emotion.displayName = "EmotionCssPropInternal";
}

// node_modules/@emotion/react/dist/emotion-react.browser.esm.js
init_extends();
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
var pkg = {
  name: "@emotion/react",
  version: "11.8.1",
  main: "dist/emotion-react.cjs.js",
  module: "dist/emotion-react.esm.js",
  browser: {
    "./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
    "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
  },
  types: "types/index.d.ts",
  files: [
    "src",
    "dist",
    "jsx-runtime",
    "jsx-dev-runtime",
    "_isolated-hnrs",
    "types/*.d.ts",
    "macro.js",
    "macro.d.ts",
    "macro.js.flow"
  ],
  sideEffects: false,
  author: "Emotion Contributors",
  license: "MIT",
  scripts: {
    "test:typescript": "dtslint types"
  },
  dependencies: {
    "@babel/runtime": "^7.13.10",
    "@emotion/babel-plugin": "^11.7.1",
    "@emotion/cache": "^11.7.1",
    "@emotion/serialize": "^1.0.2",
    "@emotion/sheet": "^1.1.0",
    "@emotion/utils": "^1.1.0",
    "@emotion/weak-memoize": "^0.2.5",
    "hoist-non-react-statics": "^3.3.1"
  },
  peerDependencies: {
    "@babel/core": "^7.0.0",
    react: ">=16.8.0"
  },
  peerDependenciesMeta: {
    "@babel/core": {
      optional: true
    },
    "@types/react": {
      optional: true
    }
  },
  devDependencies: {
    "@babel/core": "^7.13.10",
    "@emotion/css": "11.7.1",
    "@emotion/css-prettifier": "1.0.1",
    "@emotion/server": "11.4.0",
    "@emotion/styled": "11.8.1",
    "@types/react": "^16.9.11",
    dtslint: "^0.3.0",
    "html-tag-names": "^1.1.2",
    react: "16.14.0",
    "svg-tag-names": "^1.1.1"
  },
  repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
  publishConfig: {
    access: "public"
  },
  "umd:main": "dist/emotion-react.umd.min.js",
  preconstruct: {
    entrypoints: [
      "./index.js",
      "./jsx-runtime.js",
      "./jsx-dev-runtime.js",
      "./_isolated-hnrs.js"
    ],
    umdName: "emotionReact"
  }
};
var useInsertionEffect5 = React3["useInsertionEffect"] ? React3["useInsertionEffect"] : import_react4.useLayoutEffect;
var warnedAboutCssPropForGlobal = false;
var Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
  if (!warnedAboutCssPropForGlobal && (props.className || props.css)) {
    console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
    warnedAboutCssPropForGlobal = true;
  }
  var styles2 = props.styles;
  var serialized = serializeStyles([styles2], void 0, (0, import_react4.useContext)(ThemeContext));
  var sheetRef = (0, import_react4.useRef)();
  useInsertionEffect5(function() {
    var key = cache.key + "-global";
    var sheet = new StyleSheet({
      key,
      nonce: cache.sheet.nonce,
      container: cache.sheet.container,
      speedy: cache.sheet.isSpeedy
    });
    var rehydrating = false;
    var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
    if (cache.sheet.tags.length) {
      sheet.before = cache.sheet.tags[0];
    }
    if (node2 !== null) {
      rehydrating = true;
      node2.setAttribute("data-emotion", key);
      sheet.hydrate([node2]);
    }
    sheetRef.current = [sheet, rehydrating];
    return function() {
      sheet.flush();
    };
  }, [cache]);
  useInsertionEffect5(function() {
    var sheetRefCurrent = sheetRef.current;
    var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
    if (rehydrating) {
      sheetRefCurrent[1] = false;
      return;
    }
    if (serialized.next !== void 0) {
      insertStyles(cache, serialized.next, true);
    }
    if (sheet.tags.length) {
      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
      sheet.before = element;
      sheet.flush();
    }
    cache.insert("", serialized, sheet, false);
  }, [cache, serialized.name]);
  return null;
});
if (true) {
  Global.displayName = "EmotionGlobal";
}
var classnames = function classnames2(args) {
  var len = args.length;
  var i = 0;
  var cls = "";
  for (; i < len; i++) {
    var arg = args[i];
    if (arg == null)
      continue;
    var toAdd = void 0;
    switch (typeof arg) {
      case "boolean":
        break;
      case "object": {
        if (Array.isArray(arg)) {
          toAdd = classnames2(arg);
        } else {
          if (arg.styles !== void 0 && arg.name !== void 0) {
            console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
          }
          toAdd = "";
          for (var k2 in arg) {
            if (arg[k2] && k2) {
              toAdd && (toAdd += " ");
              toAdd += k2;
            }
          }
        }
        break;
      }
      default: {
        toAdd = arg;
      }
    }
    if (toAdd) {
      cls && (cls += " ");
      cls += toAdd;
    }
  }
  return cls;
};
function merge(registered, css, className) {
  var registeredStyles = [];
  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
  if (registeredStyles.length < 2) {
    return className;
  }
  return rawClassName + css(registeredStyles);
}
var Insertion3 = function Insertion4(_ref) {
  var cache = _ref.cache, serializedArr = _ref.serializedArr;
  var rules = useInsertionEffectMaybe(function() {
    for (var i = 0; i < serializedArr.length; i++) {
      var res = insertStyles(cache, serializedArr[i], false);
    }
  });
  return null;
};
var ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
  var hasRendered = false;
  var serializedArr = [];
  var css = function css2() {
    if (hasRendered && true) {
      throw new Error("css can only be used during render");
    }
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var serialized = serializeStyles(args, cache.registered);
    serializedArr.push(serialized);
    registerStyles(cache, serialized, false);
    return cache.key + "-" + serialized.name;
  };
  var cx = function cx2() {
    if (hasRendered && true) {
      throw new Error("cx can only be used during render");
    }
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return merge(cache.registered, css, classnames(args));
  };
  var content = {
    css,
    cx,
    theme: (0, import_react4.useContext)(ThemeContext)
  };
  var ele = props.children(content);
  hasRendered = true;
  return /* @__PURE__ */ (0, import_react4.createElement)(import_react4.Fragment, null, /* @__PURE__ */ (0, import_react4.createElement)(Insertion3, {
    cache,
    serializedArr
  }), ele);
});
if (true) {
  ClassNames.displayName = "EmotionClassNames";
}
if (true) {
  isBrowser2 = true;
  isJest = typeof jest !== "undefined";
  if (isBrowser2 && !isJest) {
    globalContext = typeof globalThis !== "undefined" ? globalThis : isBrowser2 ? window : globalThis;
    globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
    if (globalContext[globalKey]) {
      console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
    }
    globalContext[globalKey] = true;
  }
}
var isBrowser2;
var isJest;
var globalContext;
var globalKey;

// node_modules/@mantine/styles/esm/theme/default-theme.js
init_react();

// node_modules/@mantine/styles/esm/theme/default-colors.js
init_react();
var DEFAULT_COLORS = {
  dark: [
    "#C1C2C5",
    "#A6A7AB",
    "#909296",
    "#5c5f66",
    "#373A40",
    "#2C2E33",
    "#25262b",
    "#1A1B1E",
    "#141517",
    "#101113"
  ],
  gray: [
    "#f8f9fa",
    "#f1f3f5",
    "#e9ecef",
    "#dee2e6",
    "#ced4da",
    "#adb5bd",
    "#868e96",
    "#495057",
    "#343a40",
    "#212529"
  ],
  red: [
    "#fff5f5",
    "#ffe3e3",
    "#ffc9c9",
    "#ffa8a8",
    "#ff8787",
    "#ff6b6b",
    "#fa5252",
    "#f03e3e",
    "#e03131",
    "#c92a2a"
  ],
  pink: [
    "#fff0f6",
    "#ffdeeb",
    "#fcc2d7",
    "#faa2c1",
    "#f783ac",
    "#f06595",
    "#e64980",
    "#d6336c",
    "#c2255c",
    "#a61e4d"
  ],
  grape: [
    "#f8f0fc",
    "#f3d9fa",
    "#eebefa",
    "#e599f7",
    "#da77f2",
    "#cc5de8",
    "#be4bdb",
    "#ae3ec9",
    "#9c36b5",
    "#862e9c"
  ],
  violet: [
    "#f3f0ff",
    "#e5dbff",
    "#d0bfff",
    "#b197fc",
    "#9775fa",
    "#845ef7",
    "#7950f2",
    "#7048e8",
    "#6741d9",
    "#5f3dc4"
  ],
  indigo: [
    "#edf2ff",
    "#dbe4ff",
    "#bac8ff",
    "#91a7ff",
    "#748ffc",
    "#5c7cfa",
    "#4c6ef5",
    "#4263eb",
    "#3b5bdb",
    "#364fc7"
  ],
  blue: [
    "#e7f5ff",
    "#d0ebff",
    "#a5d8ff",
    "#74c0fc",
    "#4dabf7",
    "#339af0",
    "#228be6",
    "#1c7ed6",
    "#1971c2",
    "#1864ab"
  ],
  cyan: [
    "#e3fafc",
    "#c5f6fa",
    "#99e9f2",
    "#66d9e8",
    "#3bc9db",
    "#22b8cf",
    "#15aabf",
    "#1098ad",
    "#0c8599",
    "#0b7285"
  ],
  teal: [
    "#e6fcf5",
    "#c3fae8",
    "#96f2d7",
    "#63e6be",
    "#38d9a9",
    "#20c997",
    "#12b886",
    "#0ca678",
    "#099268",
    "#087f5b"
  ],
  green: [
    "#ebfbee",
    "#d3f9d8",
    "#b2f2bb",
    "#8ce99a",
    "#69db7c",
    "#51cf66",
    "#40c057",
    "#37b24d",
    "#2f9e44",
    "#2b8a3e"
  ],
  lime: [
    "#f4fce3",
    "#e9fac8",
    "#d8f5a2",
    "#c0eb75",
    "#a9e34b",
    "#94d82d",
    "#82c91e",
    "#74b816",
    "#66a80f",
    "#5c940d"
  ],
  yellow: [
    "#fff9db",
    "#fff3bf",
    "#ffec99",
    "#ffe066",
    "#ffd43b",
    "#fcc419",
    "#fab005",
    "#f59f00",
    "#f08c00",
    "#e67700"
  ],
  orange: [
    "#fff4e6",
    "#ffe8cc",
    "#ffd8a8",
    "#ffc078",
    "#ffa94d",
    "#ff922b",
    "#fd7e14",
    "#f76707",
    "#e8590c",
    "#d9480f"
  ]
};

// node_modules/@mantine/styles/esm/theme/functions/attach-functions.js
init_react();

// node_modules/@mantine/styles/esm/theme/functions/fns/index.js
init_react();

// node_modules/@mantine/styles/esm/theme/functions/fns/font-styles/font-styles.js
init_react();
function fontStyles(theme) {
  return () => ({
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale",
    fontFamily: theme.fontFamily || "sans-serif"
  });
}

// node_modules/@mantine/styles/esm/theme/functions/fns/focus-styles/focus-styles.js
init_react();
function focusStyles(theme) {
  return () => ({
    WebkitTapHighlightColor: "transparent",
    "&:focus": {
      outline: "none",
      boxShadow: `0 0 0 2px ${theme.colorScheme === "dark" ? theme.colors.dark[9] : theme.white}, 0 0 0 4px ${theme.colors[theme.primaryColor][theme.colorScheme === "dark" ? 7 : 5]}`
    },
    "&:focus:not(:focus-visible)": {
      boxShadow: "none"
    }
  });
}

// node_modules/@mantine/styles/esm/theme/functions/fns/theme-color/theme-color.js
init_react();
function themeColor(theme) {
  return (color, shade, primaryFallback = true) => {
    const primaryShades = theme.colors[theme.primaryColor];
    return color in theme.colors ? theme.colors[color][shade] : primaryFallback ? primaryShades[shade] : color;
  };
}

// node_modules/@mantine/styles/esm/theme/functions/fns/gradient/gradient.js
init_react();

// node_modules/@mantine/styles/esm/theme/functions/fns/gradient/get-gradient-color-stops/get-gradient-color-stops.js
init_react();
function getGradientColorStops(colors) {
  let stops = "";
  for (let i = 1; i < colors.length - 1; i += 1) {
    stops += `${colors[i]} ${i / (colors.length - 1) * 100}%, `;
  }
  return `${colors[0]} 0%, ${stops}${colors[colors.length - 1]} 100%`;
}

// node_modules/@mantine/styles/esm/theme/functions/fns/gradient/gradient.js
function linearGradient(deg, ...colors) {
  return `linear-gradient(${deg}deg, ${getGradientColorStops(colors)})`;
}
function radialGradient(...colors) {
  return `radial-gradient(circle, ${getGradientColorStops(colors)})`;
}

// node_modules/@mantine/styles/esm/theme/functions/fns/breakpoints/breakpoints.js
init_react();

// node_modules/@mantine/styles/esm/theme/functions/fns/size/size.js
init_react();
function size(props) {
  if (typeof props.size === "number") {
    return props.size;
  }
  return props.sizes[props.size] || props.size || props.sizes.md;
}

// node_modules/@mantine/styles/esm/theme/functions/fns/breakpoints/breakpoints.js
function largerThan(theme) {
  return (breakpoint) => `@media (min-width: ${size({ size: breakpoint, sizes: theme.breakpoints }) + 1}px)`;
}
function smallerThan(theme) {
  return (breakpoint) => `@media (max-width: ${size({ size: breakpoint, sizes: theme.breakpoints })}px)`;
}

// node_modules/@mantine/styles/esm/theme/functions/fns/rgba/rgba.js
init_react();

// node_modules/@mantine/styles/esm/theme/utils/to-rgba/to-rgba.js
init_react();
function isHexColor(hex) {
  const replaced = hex.replace("#", "");
  return typeof replaced === "string" && replaced.length === 6 && !Number.isNaN(Number(`0x${replaced}`));
}
function hexToRgba(color) {
  const replaced = color.replace("#", "");
  const parsed = parseInt(replaced, 16);
  const r2 = parsed >> 16 & 255;
  const g2 = parsed >> 8 & 255;
  const b2 = parsed & 255;
  return {
    r: r2,
    g: g2,
    b: b2,
    a: 1
  };
}
function rgbStringToRgba(color) {
  const [r2, g2, b2, a2] = color.replace(/[^0-9,.]/g, "").split(",").map(Number);
  return { r: r2, g: g2, b: b2, a: a2 || 1 };
}
function toRgba(color) {
  if (isHexColor(color)) {
    return hexToRgba(color);
  }
  if (color.startsWith("rgb")) {
    return rgbStringToRgba(color);
  }
  return {
    r: 0,
    g: 0,
    b: 0,
    a: 1
  };
}

// node_modules/@mantine/styles/esm/theme/functions/fns/rgba/rgba.js
function rgba(color, alpha) {
  if (typeof color !== "string" || alpha > 1 || alpha < 0) {
    return "rgba(0, 0, 0, 1)";
  }
  const { r: r2, g: g2, b: b2 } = toRgba(color);
  return `rgba(${r2}, ${g2}, ${b2}, ${alpha})`;
}

// node_modules/@mantine/styles/esm/theme/functions/fns/cover/cover.js
init_react();
function cover(offset = 0) {
  return {
    position: "absolute",
    top: offset,
    right: offset,
    left: offset,
    bottom: offset
  };
}

// node_modules/@mantine/styles/esm/theme/functions/fns/darken/darken.js
init_react();
function darken(color, alpha) {
  const { r: r2, g: g2, b: b2, a: a2 } = toRgba(color);
  const f2 = 1 - alpha;
  const dark = (input) => Math.round(input * f2);
  return `rgba(${dark(r2)}, ${dark(g2)}, ${dark(b2)}, ${a2})`;
}

// node_modules/@mantine/styles/esm/theme/functions/fns/lighten/lighten.js
init_react();
function lighten(color, alpha) {
  const { r: r2, g: g2, b: b2, a: a2 } = toRgba(color);
  const light = (input) => Math.round(input + (255 - input) * alpha);
  return `rgba(${light(r2)}, ${light(g2)}, ${light(b2)}, ${a2})`;
}

// node_modules/@mantine/styles/esm/theme/functions/fns/index.js
var fns = {
  fontStyles,
  themeColor,
  focusStyles,
  linearGradient,
  radialGradient,
  smallerThan,
  largerThan,
  rgba,
  size,
  cover,
  darken,
  lighten
};

// node_modules/@mantine/styles/esm/theme/functions/attach-functions.js
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a2, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
function attachFunctions(themeBase) {
  return __spreadProps(__spreadValues({}, themeBase), {
    fn: {
      fontStyles: fns.fontStyles(themeBase),
      themeColor: fns.themeColor(themeBase),
      focusStyles: fns.focusStyles(themeBase),
      largerThan: fns.largerThan(themeBase),
      smallerThan: fns.smallerThan(themeBase),
      radialGradient: fns.radialGradient,
      linearGradient: fns.linearGradient,
      rgba: fns.rgba,
      size: fns.size,
      cover: fns.cover,
      lighten: fns.lighten,
      darken: fns.darken
    }
  });
}

// node_modules/@mantine/styles/esm/theme/default-theme.js
var MANTINE_COLORS = Object.keys(DEFAULT_COLORS);
var _DEFAULT_THEME = {
  dir: "ltr",
  loader: "oval",
  dateFormat: "MMMM D, YYYY",
  colorScheme: "light",
  white: "#fff",
  black: "#000",
  transitionTimingFunction: "cubic-bezier(.51,.3,0,1.21)",
  colors: DEFAULT_COLORS,
  lineHeight: 1.55,
  fontFamily: "-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji",
  fontFamilyMonospace: "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, Liberation Mono, Courier New, monospace",
  primaryColor: "blue",
  shadows: {
    xs: "0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.1)",
    sm: "0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0px 10px 15px -5px, rgba(0, 0, 0, 0.04) 0px 7px 7px -5px",
    md: "0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0px 20px 25px -5px, rgba(0, 0, 0, 0.04) 0px 10px 10px -5px",
    lg: "0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0px 28px 23px -7px, rgba(0, 0, 0, 0.04) 0px 12px 12px -7px",
    xl: "0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0px 36px 28px -7px, rgba(0, 0, 0, 0.04) 0px 17px 17px -7px"
  },
  fontSizes: {
    xs: 12,
    sm: 14,
    md: 16,
    lg: 18,
    xl: 20
  },
  radius: {
    xs: 2,
    sm: 4,
    md: 8,
    lg: 16,
    xl: 32
  },
  spacing: {
    xs: 10,
    sm: 12,
    md: 16,
    lg: 20,
    xl: 24
  },
  breakpoints: {
    xs: 576,
    sm: 768,
    md: 992,
    lg: 1200,
    xl: 1400
  },
  headings: {
    fontFamily: "-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji",
    fontWeight: 700,
    sizes: {
      h1: { fontSize: 34, lineHeight: 1.3 },
      h2: { fontSize: 26, lineHeight: 1.35 },
      h3: { fontSize: 22, lineHeight: 1.4 },
      h4: { fontSize: 18, lineHeight: 1.45 },
      h5: { fontSize: 16, lineHeight: 1.5 },
      h6: { fontSize: 14, lineHeight: 1.5 }
    }
  },
  other: {},
  datesLocale: "en"
};
var DEFAULT_THEME = attachFunctions(_DEFAULT_THEME);

// node_modules/@mantine/styles/esm/theme/utils/merge-theme/merge-theme.js
init_react();
var __defProp2 = Object.defineProperty;
var __defProps2 = Object.defineProperties;
var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues2 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp2.call(b2, prop))
      __defNormalProp2(a2, prop, b2[prop]);
  if (__getOwnPropSymbols2)
    for (var prop of __getOwnPropSymbols2(b2)) {
      if (__propIsEnum2.call(b2, prop))
        __defNormalProp2(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps2 = (a2, b2) => __defProps2(a2, __getOwnPropDescs2(b2));
function mergeTheme(currentTheme, themeOverride) {
  if (!themeOverride) {
    return attachFunctions(currentTheme);
  }
  return attachFunctions(Object.keys(currentTheme).reduce((acc, key) => {
    if (key === "headings" && themeOverride.headings) {
      const sizes3 = themeOverride.headings.sizes ? Object.keys(currentTheme.headings.sizes).reduce((headingsAcc, h2) => {
        headingsAcc[h2] = __spreadValues2(__spreadValues2({}, currentTheme.headings.sizes[h2]), themeOverride.headings.sizes[h2]);
        return headingsAcc;
      }, {}) : currentTheme.headings.sizes;
      return __spreadProps2(__spreadValues2({}, acc), {
        headings: __spreadProps2(__spreadValues2(__spreadValues2({}, currentTheme.headings), themeOverride.headings), {
          sizes: sizes3
        })
      });
    }
    acc[key] = typeof themeOverride[key] === "object" ? __spreadValues2(__spreadValues2({}, currentTheme[key]), themeOverride[key]) : themeOverride[key] || currentTheme[key];
    return acc;
  }, {}));
}

// node_modules/@mantine/styles/esm/theme/NormalizeCSS.js
init_react();
var import_react5 = __toESM(require_react());
var styles = {
  html: {
    fontFamily: "sans-serif",
    lineHeight: "1.15",
    textSizeAdjust: "100%"
  },
  body: {
    margin: 0
  },
  "article, aside, footer, header, nav, section, figcaption, figure, main": {
    display: "block"
  },
  h1: {
    fontSize: "2em"
  },
  hr: {
    boxSizing: "content-box",
    height: 0,
    overflow: "visible"
  },
  pre: {
    fontFamily: "monospace, monospace",
    fontSize: "1em"
  },
  a: {
    background: "transparent",
    textDecorationSkip: "objects"
  },
  "a:active, a:hover": {
    outlineWidth: 0
  },
  "abbr[title]": {
    borderBottom: "none",
    textDecoration: "underline"
  },
  "b, strong": {
    fontWeight: "bolder"
  },
  "code, kbp, samp": {
    fontFamily: "monospace, monospace",
    fontSize: "1em"
  },
  dfn: {
    fontStyle: "italic"
  },
  mark: {
    backgroundColor: "#ff0",
    color: "#000"
  },
  small: {
    fontSize: "80%"
  },
  "sub, sup": {
    fontSize: "75%",
    lineHeight: 0,
    position: "relative",
    verticalAlign: "baseline"
  },
  sup: {
    top: "-0.5em"
  },
  sub: {
    bottom: "-0.25em"
  },
  "audio, video": {
    display: "inline-block"
  },
  "audio:not([controls])": {
    display: "none",
    height: 0
  },
  img: {
    borderStyle: "none",
    verticalAlign: "middle"
  },
  "svg:not(:root)": {
    overflow: "hidden"
  },
  "button, input, optgroup, select, textarea": {
    fontFamily: "sans-serif",
    fontSize: "100%",
    lineHeight: "1.15",
    margin: 0
  },
  "button, input": {
    overflow: "visible"
  },
  "button, select": {
    textTransform: "none"
  },
  "button, [type=reset], [type=submit]": {
    WebkitAppearance: "button"
  },
  "button::-moz-focus-inner, [type=button]::-moz-focus-inner, [type=reset]::-moz-focus-inner, [type=submit]::-moz-focus-inner": {
    borderStyle: "none",
    padding: 0
  },
  "button:-moz-focusring, [type=button]:-moz-focusring, [type=reset]:-moz-focusring, [type=submit]:-moz-focusring": {
    outline: "1px dotted ButtonText"
  },
  legend: {
    boxSizing: "border-box",
    color: "inherit",
    display: "table",
    maxWidth: "100%",
    padding: 0,
    whiteSpace: "normal"
  },
  progress: {
    display: "inline-block",
    verticalAlign: "baseline"
  },
  textarea: {
    overflow: "auto"
  },
  "[type=checkbox], [type=radio]": {
    boxSizing: "border-box",
    padding: 0
  },
  "[type=number]::-webkit-inner-spin-button, [type=number]::-webkit-outer-spin-button": {
    height: "auto"
  },
  "[type=search]": {
    appearance: "textfield",
    outlineOffset: "-2px"
  },
  "[type=search]::-webkit-search-cancel-button, [type=search]::-webkit-search-decoration": {
    appearance: "none"
  },
  "::-webkit-file-upload-button": {
    appearance: "button",
    font: "inherit"
  },
  "details, menu": {
    display: "block"
  },
  summary: {
    display: "list-item"
  },
  canvas: {
    display: "inline-block"
  },
  template: {
    display: "none"
  },
  "[hidden]": {
    display: "none"
  }
};
function NormalizeCSS() {
  return /* @__PURE__ */ import_react5.default.createElement(Global, {
    styles
  });
}

// node_modules/@mantine/styles/esm/theme/MantineProvider.js
var __defProp3 = Object.defineProperty;
var __defProps3 = Object.defineProperties;
var __getOwnPropDescs3 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols3 = Object.getOwnPropertySymbols;
var __hasOwnProp3 = Object.prototype.hasOwnProperty;
var __propIsEnum3 = Object.prototype.propertyIsEnumerable;
var __defNormalProp3 = (obj, key, value) => key in obj ? __defProp3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues3 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp3.call(b2, prop))
      __defNormalProp3(a2, prop, b2[prop]);
  if (__getOwnPropSymbols3)
    for (var prop of __getOwnPropSymbols3(b2)) {
      if (__propIsEnum3.call(b2, prop))
        __defNormalProp3(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps3 = (a2, b2) => __defProps3(a2, __getOwnPropDescs3(b2));
var MantineThemeContext = (0, import_react7.createContext)({
  theme: DEFAULT_THEME,
  styles: {},
  emotionOptions: { key: "mantine", prepend: true }
});
function useMantineTheme() {
  var _a;
  return ((_a = (0, import_react7.useContext)(MantineThemeContext)) == null ? void 0 : _a.theme) || DEFAULT_THEME;
}
function useMantineThemeStyles() {
  var _a;
  return ((_a = (0, import_react7.useContext)(MantineThemeContext)) == null ? void 0 : _a.styles) || {};
}
function useMantineEmotionOptions() {
  var _a;
  return ((_a = (0, import_react7.useContext)(MantineThemeContext)) == null ? void 0 : _a.emotionOptions) || { key: "mantine", prepend: true };
}
function GlobalStyles() {
  const theme = useMantineTheme();
  return /* @__PURE__ */ import_react7.default.createElement(Global, {
    styles: {
      "*, *::before, *::after": {
        boxSizing: "border-box"
      },
      body: __spreadProps3(__spreadValues3({}, theme.fn.fontStyles()), {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
        color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
        lineHeight: theme.lineHeight,
        fontSize: theme.fontSizes.md
      })
    }
  });
}
function MantineProvider({
  theme,
  styles: styles2 = {},
  emotionOptions,
  withNormalizeCSS = false,
  withGlobalStyles = false,
  children
}) {
  return /* @__PURE__ */ import_react7.default.createElement(MantineThemeContext.Provider, {
    value: { theme: mergeTheme(DEFAULT_THEME, theme), styles: styles2, emotionOptions }
  }, withNormalizeCSS && /* @__PURE__ */ import_react7.default.createElement(NormalizeCSS, null), withGlobalStyles && /* @__PURE__ */ import_react7.default.createElement(GlobalStyles, null), children);
}
MantineProvider.displayName = "@mantine/core/MantineProvider";

// node_modules/@mantine/styles/esm/index.js
init_react();

// node_modules/@mantine/styles/esm/theme/utils/get-default-z-index/get-default-z-index.js
init_react();
var elevations = {
  app: 100,
  modal: 200,
  popover: 300,
  overlay: 400
};
function getDefaultZIndex(level) {
  return elevations[level];
}

// node_modules/@mantine/styles/esm/theme/utils/get-shared-color-scheme/get-shared-color-scheme.js
init_react();
var DEFAULT_GRADIENT = {
  from: "indigo",
  to: "cyan",
  deg: 45
};
function getSharedColorScheme({ color, theme, variant, gradient }) {
  if (variant === "light") {
    return {
      border: "transparent",
      background: theme.fn.rgba(theme.fn.themeColor(color, theme.colorScheme === "dark" ? 8 : 0), theme.colorScheme === "dark" ? 0.35 : 1),
      color: color === "dark" ? theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.dark[9] : theme.fn.themeColor(color, theme.colorScheme === "dark" ? 2 : 6),
      hover: theme.fn.rgba(theme.fn.themeColor(color, theme.colorScheme === "dark" ? 7 : 1), theme.colorScheme === "dark" ? 0.45 : 0.65)
    };
  }
  if (variant === "default") {
    return {
      border: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[4],
      background: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.white,
      color: theme.colorScheme === "dark" ? theme.white : theme.black,
      hover: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[0]
    };
  }
  if (variant === "white") {
    return {
      border: "transparent",
      background: theme.white,
      color: theme.fn.themeColor(color, 7),
      hover: null
    };
  }
  if (variant === "outline") {
    return {
      border: theme.fn.rgba(theme.fn.themeColor(color, theme.colorScheme === "dark" ? 4 : 7), 0.75),
      background: "transparent",
      color: theme.fn.themeColor(color, theme.colorScheme === "dark" ? 4 : 7),
      hover: theme.colorScheme === "dark" ? theme.fn.rgba(theme.fn.themeColor(color, 4), 0.05) : theme.fn.rgba(theme.fn.themeColor(color, 0), 0.35)
    };
  }
  if (variant === "gradient") {
    const merged = {
      from: (gradient == null ? void 0 : gradient.from) || DEFAULT_GRADIENT.from,
      to: (gradient == null ? void 0 : gradient.to) || DEFAULT_GRADIENT.to,
      deg: (gradient == null ? void 0 : gradient.deg) || DEFAULT_GRADIENT.deg
    };
    return {
      background: `linear-gradient(${merged.deg}deg, ${theme.fn.themeColor(merged.from, 6)} 0%, ${theme.fn.themeColor(merged.to, 6)} 100%)`,
      color: theme.white,
      border: "transparent",
      hover: null
    };
  }
  if (variant === "subtle") {
    return {
      border: "transparent",
      background: "transparent",
      color: color === "dark" ? theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.dark[9] : theme.fn.themeColor(color, theme.colorScheme === "dark" ? 2 : 6),
      hover: theme.fn.rgba(theme.fn.themeColor(color, theme.colorScheme === "dark" ? 8 : 0), theme.colorScheme === "dark" ? 0.35 : 1)
    };
  }
  return {
    border: "transparent",
    background: theme.fn.themeColor(color, theme.colorScheme === "dark" ? 8 : 6),
    color: theme.white,
    hover: theme.fn.themeColor(color, 7)
  };
}

// node_modules/@mantine/styles/esm/theme/utils/extract-margins/extract-margins.js
init_react();
var __getOwnPropSymbols4 = Object.getOwnPropertySymbols;
var __hasOwnProp4 = Object.prototype.hasOwnProperty;
var __propIsEnum4 = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp4.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols4)
    for (var prop of __getOwnPropSymbols4(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum4.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function extractMargins(others) {
  const _a = others, { m, mx, my, mt, mb, ml, mr } = _a, rest = __objRest(_a, ["m", "mx", "my", "mt", "mb", "ml", "mr"]);
  const margins = { m, mx, my, mt, mb, ml, mr };
  Object.keys(margins).forEach((key) => {
    if (margins[key] === void 0) {
      delete margins[key];
    }
  });
  return { margins, rest };
}

// node_modules/@mantine/styles/esm/tss/create-styles.js
init_react();

// node_modules/@mantine/styles/esm/tss/utils/from-entries/from-entries.js
init_react();
function fromEntries(entries) {
  const o2 = {};
  Object.keys(entries).forEach((key) => {
    const [k2, v2] = entries[key];
    o2[k2] = v2;
  });
  return o2;
}

// node_modules/@mantine/styles/esm/tss/use-css.js
init_react();

// node_modules/clsx/dist/clsx.m.js
init_react();
function toVal(mix) {
  var k2, y2, str = "";
  if (typeof mix === "string" || typeof mix === "number") {
    str += mix;
  } else if (typeof mix === "object") {
    if (Array.isArray(mix)) {
      for (k2 = 0; k2 < mix.length; k2++) {
        if (mix[k2]) {
          if (y2 = toVal(mix[k2])) {
            str && (str += " ");
            str += y2;
          }
        }
      }
    } else {
      for (k2 in mix) {
        if (mix[k2]) {
          str && (str += " ");
          str += k2;
        }
      }
    }
  }
  return str;
}
function clsx_m_default() {
  var i = 0, tmp, x2, str = "";
  while (i < arguments.length) {
    if (tmp = arguments[i++]) {
      if (x2 = toVal(tmp)) {
        str && (str += " ");
        str += x2;
      }
    }
  }
  return str;
}

// node_modules/@mantine/styles/esm/tss/utils/use-guaranteed-memo/use-guaranteed-memo.js
init_react();
var import_react9 = __toESM(require_react());
function useGuaranteedMemo(fn2, deps) {
  const ref = (0, import_react9.useRef)();
  if (!ref.current || deps.length !== ref.current.prevDeps.length || ref.current.prevDeps.map((v2, i) => v2 === deps[i]).indexOf(false) >= 0) {
    ref.current = {
      v: fn2(),
      prevDeps: [...deps]
    };
  }
  return ref.current.v;
}

// node_modules/@mantine/styles/esm/tss/use-emotion-cache.js
init_react();
var defaultCacheOptions = {
  key: "mantine",
  prepend: true
};
var { getCache } = (() => {
  let cache;
  let _key = defaultCacheOptions.key;
  function _getCache(options) {
    if (cache === void 0 || _key !== (options == null ? void 0 : options.key)) {
      _key = (options == null ? void 0 : options.key) || "mantine";
      cache = emotion_cache_browser_esm_default(options || defaultCacheOptions);
    }
    return cache;
  }
  return { getCache: _getCache };
})();
function useEmotionCache() {
  const options = useMantineEmotionOptions();
  return getCache(options);
}

// node_modules/@mantine/styles/esm/tss/use-css.js
var __defProp4 = Object.defineProperty;
var __getOwnPropSymbols5 = Object.getOwnPropertySymbols;
var __hasOwnProp5 = Object.prototype.hasOwnProperty;
var __propIsEnum5 = Object.prototype.propertyIsEnumerable;
var __defNormalProp4 = (obj, key, value) => key in obj ? __defProp4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues4 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp5.call(b2, prop))
      __defNormalProp4(a2, prop, b2[prop]);
  if (__getOwnPropSymbols5)
    for (var prop of __getOwnPropSymbols5(b2)) {
      if (__propIsEnum5.call(b2, prop))
        __defNormalProp4(a2, prop, b2[prop]);
    }
  return a2;
};
var refPropertyName = "ref";
function getRef(args) {
  let ref;
  if (args.length !== 1) {
    return { args, ref };
  }
  const [arg] = args;
  if (!(arg instanceof Object)) {
    return { args, ref };
  }
  if (!(refPropertyName in arg)) {
    return { args, ref };
  }
  ref = arg[refPropertyName];
  const argCopy = __spreadValues4({}, arg);
  delete argCopy[refPropertyName];
  return { args: [argCopy], ref };
}
var { cssFactory } = (() => {
  function merge2(registered, css, className) {
    const registeredStyles = [];
    const rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css(registeredStyles);
  }
  function _cssFactory(params) {
    const { cache } = params;
    const css = (...styles2) => {
      const { ref, args } = getRef(styles2);
      const serialized = serializeStyles(args, cache.registered);
      insertStyles(cache, serialized, false);
      return `${cache.key}-${serialized.name}${ref === void 0 ? "" : ` ${ref}`}`;
    };
    const cx = (...args) => merge2(cache.registered, css, clsx_m_default(args));
    return { css, cx };
  }
  return { cssFactory: _cssFactory };
})();
function useCss() {
  const cache = useEmotionCache();
  return useGuaranteedMemo(() => cssFactory({ cache }), [cache]);
}

// node_modules/@mantine/styles/esm/tss/utils/merge-class-names/merge-class-names.js
init_react();
function mergeClassNames(cx, classes, classNames2, name2) {
  return Object.keys(classes).reduce((acc, className) => {
    acc[className] = cx(classes[className], classNames2 != null && classNames2[className], name2 ? `mantine-${name2}-${className}` : null);
    return acc;
  }, {});
}

// node_modules/@mantine/styles/esm/tss/create-styles.js
function createStyles(getCssObjectOrCssObject) {
  const getCssObject = typeof getCssObjectOrCssObject === "function" ? getCssObjectOrCssObject : () => getCssObjectOrCssObject;
  function useStyles6(params, options) {
    const theme = useMantineTheme();
    const themeStyles = useMantineThemeStyles()[options == null ? void 0 : options.name];
    const { css, cx } = useCss();
    let count = 0;
    function createRef(refName) {
      count += 1;
      return `mantine-ref_${refName || ""}_${count}`;
    }
    const cssObject = getCssObject(theme, params, createRef);
    const _styles = typeof (options == null ? void 0 : options.styles) === "function" ? options == null ? void 0 : options.styles(theme) : (options == null ? void 0 : options.styles) || {};
    const _themeStyles = typeof themeStyles === "function" ? themeStyles(theme) : themeStyles || {};
    const classes = fromEntries(Object.keys(cssObject).map((key) => {
      const mergedStyles = cx(css(cssObject[key]), css(_themeStyles[key]), css(_styles[key]));
      return [key, mergedStyles];
    }));
    return { classes: mergeClassNames(cx, classes, options == null ? void 0 : options.classNames, options == null ? void 0 : options.name), cx, theme };
  }
  return useStyles6;
}

// node_modules/@mantine/core/esm/components/AppShell/Header/Header.js
init_react();
var import_react11 = __toESM(require_react());

// node_modules/@mantine/core/esm/components/AppShell/Header/Header.styles.js
init_react();
var __defProp5 = Object.defineProperty;
var __defProps4 = Object.defineProperties;
var __getOwnPropDescs4 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols6 = Object.getOwnPropertySymbols;
var __hasOwnProp6 = Object.prototype.hasOwnProperty;
var __propIsEnum6 = Object.prototype.propertyIsEnumerable;
var __defNormalProp5 = (obj, key, value) => key in obj ? __defProp5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues5 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp6.call(b2, prop))
      __defNormalProp5(a2, prop, b2[prop]);
  if (__getOwnPropSymbols6)
    for (var prop of __getOwnPropSymbols6(b2)) {
      if (__propIsEnum6.call(b2, prop))
        __defNormalProp5(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps4 = (a2, b2) => __defProps4(a2, __getOwnPropDescs4(b2));
var useStyles = createStyles((theme, { height, padding, fixed, position: position2, zIndex }) => ({
  root: __spreadProps4(__spreadValues5(__spreadValues5({}, theme.fn.fontStyles()), position2), {
    zIndex,
    height,
    maxHeight: height,
    position: fixed ? "fixed" : "static",
    boxSizing: "border-box",
    padding: theme.fn.size({ size: padding, sizes: theme.spacing }),
    backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
    borderBottom: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[2]}`
  })
}));
var Header_styles_default = useStyles;

// node_modules/@mantine/core/esm/components/Box/Box.js
init_react();
var import_react10 = __toESM(require_react());

// node_modules/@mantine/core/esm/components/Box/use-sx/use-sx.js
init_react();

// node_modules/@mantine/core/esm/components/Box/use-sx/get-margins/get-margins.js
init_react();
function isValidMargin(margin) {
  return typeof margin === "string" || typeof margin === "number";
}
var MARGINS = {
  m: "margin",
  mt: "marginTop",
  mb: "marginBottom",
  ml: "marginLeft",
  mr: "marginRight"
};
function getMargins(margins, theme) {
  const styles2 = {};
  if (isValidMargin(margins.my)) {
    const margin = theme.fn.size({ size: margins.my, sizes: theme.spacing });
    styles2.marginTop = margin;
    styles2.marginBottom = margin;
  }
  if (isValidMargin(margins.mx)) {
    const margin = theme.fn.size({ size: margins.mx, sizes: theme.spacing });
    styles2.marginLeft = margin;
    styles2.marginRight = margin;
  }
  Object.keys(MARGINS).forEach((margin) => {
    if (isValidMargin(margins[margin])) {
      styles2[MARGINS[margin]] = theme.fn.size({
        size: margins[margin],
        sizes: theme.spacing
      });
    }
  });
  return styles2;
}

// node_modules/@mantine/core/esm/components/Box/use-sx/use-sx.js
function extractSx(sx, theme) {
  return typeof sx === "function" ? sx(theme) : sx;
}
function useSx(sx, margins, className) {
  const theme = useMantineTheme();
  const { css, cx } = useCss();
  if (Array.isArray(sx)) {
    return cx(className, css(getMargins(margins, theme)), sx.map((partial) => css(extractSx(partial, theme))));
  }
  return cx(className, css(extractSx(sx, theme)), css(getMargins(margins, theme)));
}

// node_modules/@mantine/core/esm/components/Box/Box.js
var __defProp6 = Object.defineProperty;
var __getOwnPropSymbols7 = Object.getOwnPropertySymbols;
var __hasOwnProp7 = Object.prototype.hasOwnProperty;
var __propIsEnum7 = Object.prototype.propertyIsEnumerable;
var __defNormalProp6 = (obj, key, value) => key in obj ? __defProp6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues6 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp7.call(b2, prop))
      __defNormalProp6(a2, prop, b2[prop]);
  if (__getOwnPropSymbols7)
    for (var prop of __getOwnPropSymbols7(b2)) {
      if (__propIsEnum7.call(b2, prop))
        __defNormalProp6(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp7.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols7)
    for (var prop of __getOwnPropSymbols7(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum7.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var Box = (0, import_react10.forwardRef)((_a, ref) => {
  var _b = _a, { className, component, style, sx } = _b, others = __objRest2(_b, ["className", "component", "style", "sx"]);
  const { margins, rest } = extractMargins(others);
  const Element = component || "div";
  return /* @__PURE__ */ import_react10.default.createElement(Element, __spreadValues6({
    ref,
    className: useSx(sx, margins, className),
    style
  }, rest));
});
Box.displayName = "@mantine/core/Box";

// node_modules/@mantine/core/esm/components/AppShell/Header/Header.js
var __defProp7 = Object.defineProperty;
var __getOwnPropSymbols8 = Object.getOwnPropertySymbols;
var __hasOwnProp8 = Object.prototype.hasOwnProperty;
var __propIsEnum8 = Object.prototype.propertyIsEnumerable;
var __defNormalProp7 = (obj, key, value) => key in obj ? __defProp7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues7 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp8.call(b2, prop))
      __defNormalProp7(a2, prop, b2[prop]);
  if (__getOwnPropSymbols8)
    for (var prop of __getOwnPropSymbols8(b2)) {
      if (__propIsEnum8.call(b2, prop))
        __defNormalProp7(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest3 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp8.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols8)
    for (var prop of __getOwnPropSymbols8(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum8.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var Header2 = (0, import_react11.forwardRef)((_a, ref) => {
  var _b = _a, {
    children,
    className,
    classNames: classNames2,
    styles: styles2,
    height,
    padding = 0,
    fixed = false,
    position: position2 = { top: 0, left: 0, right: 0 },
    zIndex = getDefaultZIndex("app")
  } = _b, others = __objRest3(_b, [
    "children",
    "className",
    "classNames",
    "styles",
    "height",
    "padding",
    "fixed",
    "position",
    "zIndex"
  ]);
  const { classes, cx } = Header_styles_default({ height, padding, fixed, position: position2, zIndex }, { name: "Header", classNames: classNames2, styles: styles2 });
  return /* @__PURE__ */ import_react11.default.createElement(Box, __spreadValues7({
    component: "nav",
    className: cx(classes.root, className),
    ref
  }, others), children);
});
Header2.displayName = "@mantine/core/Header";

// node_modules/@mantine/core/esm/components/AppShell/AppShell.js
init_react();
var import_react12 = __toESM(require_react());

// node_modules/@mantine/core/esm/components/AppShell/AppShell.styles.js
init_react();
var __defProp8 = Object.defineProperty;
var __getOwnPropSymbols9 = Object.getOwnPropertySymbols;
var __hasOwnProp9 = Object.prototype.hasOwnProperty;
var __propIsEnum9 = Object.prototype.propertyIsEnumerable;
var __defNormalProp8 = (obj, key, value) => key in obj ? __defProp8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues8 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp9.call(b2, prop))
      __defNormalProp8(a2, prop, b2[prop]);
  if (__getOwnPropSymbols9)
    for (var prop of __getOwnPropSymbols9(b2)) {
      if (__propIsEnum9.call(b2, prop))
        __defNormalProp8(a2, prop, b2[prop]);
    }
  return a2;
};
function getPositionStyles(props, theme) {
  const padding = theme.fn.size({ size: props.padding, sizes: theme.spacing });
  const offset = props.navbarOffsetBreakpoint ? theme.fn.size({ size: props.navbarOffsetBreakpoint, sizes: theme.breakpoints }) : null;
  if (!props.fixed) {
    return { padding };
  }
  const queries = props.navbarBreakpoints.reduce((acc, [breakpoint, breakpointSize]) => {
    acc[`@media (min-width: ${breakpoint + 1}px)`] = {
      paddingLeft: `calc(${breakpointSize}px + ${padding}px)`
    };
    return acc;
  }, {});
  if (offset) {
    queries[`@media (max-width: ${offset}px)`] = {
      paddingLeft: padding
    };
  }
  return __spreadValues8({
    minHeight: "100vh",
    paddingTop: `calc(${props.headerHeight} + ${padding}px)`,
    paddingLeft: `calc(${props.navbarWidth} + ${padding}px)`,
    paddingRight: theme.fn.size({ size: padding, sizes: theme.spacing }),
    paddingBottom: theme.fn.size({ size: padding, sizes: theme.spacing })
  }, queries);
}
var useStyles2 = createStyles((theme, props) => ({
  root: {
    boxSizing: "border-box"
  },
  body: {
    display: "flex",
    boxSizing: "border-box"
  },
  main: __spreadValues8({
    flex: 1,
    width: "100vw",
    boxSizing: "border-box"
  }, getPositionStyles(props, theme))
}));
var AppShell_styles_default = useStyles2;

// node_modules/@mantine/core/esm/components/AppShell/utils/get-navbar-breakpoints/get-navbar-breakpoints.js
init_react();

// node_modules/@mantine/core/esm/components/AppShell/utils/get-sorted-breakpoints/get-sorted-breakpoints.js
init_react();
function getSortedBreakpoints(breakpoints, theme) {
  if (!breakpoints) {
    return [];
  }
  const values = Object.keys(breakpoints).filter((breakpoint) => breakpoint !== "base").map((breakpoint) => [
    theme.fn.size({ size: breakpoint, sizes: theme.breakpoints }),
    breakpoints[breakpoint]
  ]);
  values.sort((a2, b2) => a2[0] - b2[0]);
  return values;
}

// node_modules/@mantine/core/esm/components/AppShell/utils/get-navbar-breakpoints/get-navbar-breakpoints.js
function getNavbarBreakpoints(element, theme) {
  var _a;
  const breakpoints = (_a = element == null ? void 0 : element.props) == null ? void 0 : _a.width;
  return breakpoints != null ? getSortedBreakpoints(breakpoints, theme) : [];
}

// node_modules/@mantine/core/esm/components/AppShell/utils/get-navbar-base-width/get-navbar-base-width.js
init_react();
function getNavbarBaseWidth(element) {
  var _a, _b;
  const width = (_b = (_a = element == null ? void 0 : element.props) == null ? void 0 : _a.width) == null ? void 0 : _b.base;
  return typeof width === "number" ? `${width}px` : typeof width === "string" ? width : "0px";
}

// node_modules/@mantine/core/esm/components/AppShell/utils/get-element-height/get-element-height.js
init_react();
function getElementHeight(element) {
  var _a;
  const height = (_a = element == null ? void 0 : element.props) == null ? void 0 : _a.height;
  return typeof height === "number" ? `${height}px` : typeof height === "string" ? height : "0px";
}

// node_modules/@mantine/core/esm/components/AppShell/AppShell.js
var __defProp9 = Object.defineProperty;
var __getOwnPropSymbols10 = Object.getOwnPropertySymbols;
var __hasOwnProp10 = Object.prototype.hasOwnProperty;
var __propIsEnum10 = Object.prototype.propertyIsEnumerable;
var __defNormalProp9 = (obj, key, value) => key in obj ? __defProp9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues9 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp10.call(b2, prop))
      __defNormalProp9(a2, prop, b2[prop]);
  if (__getOwnPropSymbols10)
    for (var prop of __getOwnPropSymbols10(b2)) {
      if (__propIsEnum10.call(b2, prop))
        __defNormalProp9(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest4 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp10.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols10)
    for (var prop of __getOwnPropSymbols10(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum10.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var AppShell = (0, import_react12.forwardRef)((_a, ref) => {
  var _b = _a, {
    children,
    navbar,
    header,
    fixed = false,
    zIndex = getDefaultZIndex("app"),
    padding = "md",
    navbarOffsetBreakpoint,
    className,
    styles: styles2,
    classNames: classNames2
  } = _b, others = __objRest4(_b, [
    "children",
    "navbar",
    "header",
    "fixed",
    "zIndex",
    "padding",
    "navbarOffsetBreakpoint",
    "className",
    "styles",
    "classNames"
  ]);
  const theme = useMantineTheme();
  const navbarBreakpoints = getNavbarBreakpoints(navbar, theme);
  const navbarWidth = getNavbarBaseWidth(navbar);
  const headerHeight = getElementHeight(header);
  const navbarHeight = getElementHeight(navbar);
  const { classes, cx } = AppShell_styles_default({
    padding,
    fixed,
    navbarWidth,
    headerHeight,
    navbarBreakpoints,
    navbarOffsetBreakpoint
  }, { styles: styles2, classNames: classNames2, name: "AppShell" });
  const _header = header ? import_react12.default.cloneElement(header, { fixed, zIndex }) : null;
  const _navbar = navbar ? import_react12.default.cloneElement(navbar, {
    fixed,
    zIndex,
    height: navbarHeight !== "0px" ? navbarHeight : `calc(100vh - ${headerHeight})`,
    position: { top: headerHeight, left: 0 }
  }) : null;
  return /* @__PURE__ */ import_react12.default.createElement(Box, __spreadValues9({
    className: cx(classes.root, className),
    ref
  }, others), _header, /* @__PURE__ */ import_react12.default.createElement("div", {
    className: classes.body
  }, _navbar, /* @__PURE__ */ import_react12.default.createElement("main", {
    className: classes.main
  }, children)));
});
AppShell.displayName = "@mantine/core/AppShell";

// node_modules/@mantine/core/esm/components/Button/Button.js
init_react();
var import_react17 = __toESM(require_react());

// node_modules/@mantine/core/esm/components/Button/Button.styles.js
init_react();

// node_modules/@mantine/core/esm/components/Input/Input.styles.js
init_react();
var __defProp10 = Object.defineProperty;
var __defProps5 = Object.defineProperties;
var __getOwnPropDescs5 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols11 = Object.getOwnPropertySymbols;
var __hasOwnProp11 = Object.prototype.hasOwnProperty;
var __propIsEnum11 = Object.prototype.propertyIsEnumerable;
var __defNormalProp10 = (obj, key, value) => key in obj ? __defProp10(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues10 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp11.call(b2, prop))
      __defNormalProp10(a2, prop, b2[prop]);
  if (__getOwnPropSymbols11)
    for (var prop of __getOwnPropSymbols11(b2)) {
      if (__propIsEnum11.call(b2, prop))
        __defNormalProp10(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps5 = (a2, b2) => __defProps5(a2, __getOwnPropDescs5(b2));
var sizes = {
  xs: 30,
  sm: 36,
  md: 42,
  lg: 50,
  xl: 60
};
var useStyles3 = createStyles((theme, {
  size: size2,
  multiline,
  radius,
  variant,
  invalid,
  rightSectionWidth,
  withRightSection,
  iconWidth
}) => {
  const invalidColor = theme.colors.red[theme.colorScheme === "dark" ? 6 : 7];
  const sizeStyles = variant === "default" || variant === "filled" ? {
    minHeight: theme.fn.size({ size: size2, sizes }),
    paddingLeft: theme.fn.size({ size: size2, sizes }) / 3,
    paddingRight: withRightSection ? rightSectionWidth : theme.fn.size({ size: size2, sizes }) / 3,
    borderRadius: theme.fn.size({ size: radius, sizes: theme.radius })
  } : null;
  return {
    wrapper: {
      position: "relative"
    },
    input: variant === "headless" ? {} : __spreadProps5(__spreadValues10(__spreadProps5(__spreadValues10({}, theme.fn.fontStyles()), {
      height: multiline ? variant === "unstyled" ? void 0 : "auto" : theme.fn.size({ size: size2, sizes }),
      WebkitTapHighlightColor: "transparent",
      lineHeight: multiline ? theme.lineHeight : `${theme.fn.size({ size: size2, sizes }) - 2}px`,
      appearance: "none",
      resize: "none",
      boxSizing: "border-box",
      fontSize: theme.fn.size({ size: size2, sizes: theme.fontSizes }),
      width: "100%",
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      display: "block",
      textAlign: "left"
    }), sizeStyles), {
      "&:disabled": {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[1],
        color: theme.colors.dark[2],
        opacity: 0.6,
        cursor: "not-allowed",
        "&::placeholder": {
          color: theme.colors.dark[2]
        }
      },
      "&::placeholder": {
        opacity: 1,
        userSelect: "none",
        color: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[5]
      },
      "&::-webkit-inner-spin-button, &::-webkit-outer-spin-button, &::-webkit-search-decoration, &::-webkit-search-cancel-button, &::-webkit-search-results-button, &::-webkit-search-results-decoration": {
        appearance: "none"
      },
      "&[type=number]": {
        MozAppearance: "textfield"
      }
    }),
    defaultVariant: {
      border: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[4]}`,
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[8] : theme.white,
      transition: "border-color 100ms ease",
      "&:focus, &:focus-within": {
        outline: "none",
        borderColor: theme.colors[theme.primaryColor][theme.colorScheme === "dark" ? 8 : 5]
      }
    },
    filledVariant: {
      border: "1px solid transparent",
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[1],
      "&:focus, &:focus-within": {
        outline: "none",
        borderColor: `${theme.colors[theme.primaryColor][theme.colorScheme === "dark" ? 8 : 5]} !important`
      }
    },
    unstyledVariant: {
      borderWidth: 0,
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      backgroundColor: "transparent",
      minHeight: 28,
      outline: 0,
      "&:focus, &:focus-within": {
        outline: "none",
        borderColor: "transparent"
      },
      "&:disabled": {
        backgroundColor: "transparent",
        "&:focus, &:focus-within": {
          outline: "none",
          borderColor: "transparent"
        }
      }
    },
    withIcon: {
      paddingLeft: typeof iconWidth === "number" ? iconWidth : theme.fn.size({ size: size2, sizes })
    },
    invalid: {
      color: invalidColor,
      borderColor: invalidColor,
      "&::placeholder": {
        opacity: 1,
        color: invalidColor
      }
    },
    disabled: {
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[1],
      color: theme.colors.dark[2],
      opacity: 0.6,
      cursor: "not-allowed",
      "&::placeholder": {
        color: theme.colors.dark[2]
      }
    },
    icon: {
      pointerEvents: "none",
      position: "absolute",
      zIndex: 1,
      left: 0,
      top: 0,
      bottom: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      width: theme.fn.size({ size: size2, sizes }),
      color: invalid ? theme.colors.red[theme.colorScheme === "dark" ? 6 : 7] : theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[5]
    },
    rightSection: {
      position: "absolute",
      top: 0,
      bottom: 0,
      right: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      width: rightSectionWidth
    }
  };
});

// node_modules/@mantine/core/esm/components/Button/Button.styles.js
var __defProp11 = Object.defineProperty;
var __defProps6 = Object.defineProperties;
var __getOwnPropDescs6 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols12 = Object.getOwnPropertySymbols;
var __hasOwnProp12 = Object.prototype.hasOwnProperty;
var __propIsEnum12 = Object.prototype.propertyIsEnumerable;
var __defNormalProp11 = (obj, key, value) => key in obj ? __defProp11(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues11 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp12.call(b2, prop))
      __defNormalProp11(a2, prop, b2[prop]);
  if (__getOwnPropSymbols12)
    for (var prop of __getOwnPropSymbols12(b2)) {
      if (__propIsEnum12.call(b2, prop))
        __defNormalProp11(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps6 = (a2, b2) => __defProps6(a2, __getOwnPropDescs6(b2));
var sizes2 = {
  xs: {
    height: sizes.xs,
    padding: "0 14px"
  },
  sm: {
    height: sizes.sm,
    padding: "0 18px"
  },
  md: {
    height: sizes.md,
    padding: "0 22px"
  },
  lg: {
    height: sizes.lg,
    padding: "0 26px"
  },
  xl: {
    height: sizes.xl,
    padding: "0 32px"
  },
  "compact-xs": {
    height: 22,
    padding: "0 7px"
  },
  "compact-sm": {
    height: 26,
    padding: "0 8px"
  },
  "compact-md": {
    height: 30,
    padding: "0 10px"
  },
  "compact-lg": {
    height: 34,
    padding: "0 12px"
  },
  "compact-xl": {
    height: 40,
    padding: "0 14px"
  }
};
var heights = Object.keys(sizes2).reduce((acc, size2) => {
  acc[size2] = sizes2[size2].height;
  return acc;
}, {});
var getSizeStyles = ({ compact, size: size2 }) => {
  if (!compact) {
    return sizes2[size2];
  }
  return sizes2[`compact-${size2}`];
};
var getWidthStyles = (fullWidth) => ({
  display: fullWidth ? "block" : "inline-block",
  width: fullWidth ? "100%" : "auto"
});
function getVariantStyles({ variant, theme, color }) {
  const colors = getSharedColorScheme({
    theme,
    color,
    variant
  });
  return {
    border: `1px solid ${colors.border}`,
    backgroundColor: colors.background,
    backgroundImage: colors.background,
    color: colors.color,
    "&:hover": {
      backgroundColor: colors.hover
    }
  };
}
var useStyles4 = createStyles((theme, {
  color,
  size: size2,
  radius,
  fullWidth,
  compact,
  gradientFrom,
  gradientTo,
  gradientDeg
}, getRef2) => {
  const loading = getRef2("loading");
  const gradient = getSharedColorScheme({
    theme,
    color,
    variant: "gradient",
    gradient: { from: gradientFrom, to: gradientTo, deg: gradientDeg }
  });
  return {
    loading: {
      ref: loading,
      pointerEvents: "none",
      "&::before": {
        content: '""',
        position: "absolute",
        top: -1,
        left: -1,
        right: -1,
        bottom: -1,
        backgroundColor: theme.colorScheme === "dark" ? theme.fn.rgba(theme.colors.dark[7], 0.5) : "rgba(255, 255, 255, .5)",
        borderRadius: theme.fn.size({ size: radius, sizes: theme.radius }) - 1,
        cursor: "not-allowed"
      }
    },
    outline: getVariantStyles({ variant: "outline", theme, color }),
    filled: getVariantStyles({ variant: "filled", theme, color }),
    light: getVariantStyles({ variant: "light", theme, color }),
    default: getVariantStyles({ variant: "default", theme, color }),
    white: getVariantStyles({ variant: "white", theme, color }),
    subtle: getVariantStyles({ variant: "subtle", theme, color }),
    gradient: {
      border: 0,
      backgroundImage: gradient.background,
      color: gradient.color,
      "&:hover": {
        backgroundSize: "200%"
      }
    },
    root: __spreadProps6(__spreadValues11(__spreadValues11(__spreadValues11(__spreadValues11({}, getSizeStyles({ compact, size: size2 })), theme.fn.fontStyles()), theme.fn.focusStyles()), getWidthStyles(fullWidth)), {
      borderRadius: theme.fn.size({ size: radius, sizes: theme.radius }),
      fontWeight: 600,
      position: "relative",
      lineHeight: 1,
      fontSize: theme.fn.size({ size: size2, sizes: theme.fontSizes }),
      WebkitTapHighlightColor: "transparent",
      userSelect: "none",
      boxSizing: "border-box",
      textDecoration: "none",
      cursor: "pointer",
      appearance: "none",
      WebkitAppearance: "none",
      "&:not(:disabled):active": {
        transform: "translateY(1px)"
      },
      [`&:not(.${loading}):disabled`]: {
        borderColor: "transparent",
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
        color: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[5],
        cursor: "not-allowed"
      }
    }),
    icon: {
      display: "flex",
      alignItems: "center"
    },
    leftIcon: {
      marginRight: 10
    },
    rightIcon: {
      marginLeft: 10
    },
    inner: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      height: "100%",
      overflow: "visible"
    },
    label: {
      whiteSpace: "nowrap",
      height: "100%",
      overflow: "hidden",
      display: "flex",
      alignItems: "center"
    }
  };
});
var Button_styles_default = useStyles4;

// node_modules/@mantine/core/esm/components/Loader/Loader.js
init_react();
var import_react16 = __toESM(require_react());

// node_modules/@mantine/core/esm/components/Loader/loaders/Bars.js
init_react();
var import_react13 = __toESM(require_react());
var __defProp12 = Object.defineProperty;
var __getOwnPropSymbols13 = Object.getOwnPropertySymbols;
var __hasOwnProp13 = Object.prototype.hasOwnProperty;
var __propIsEnum13 = Object.prototype.propertyIsEnumerable;
var __defNormalProp12 = (obj, key, value) => key in obj ? __defProp12(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues12 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp13.call(b2, prop))
      __defNormalProp12(a2, prop, b2[prop]);
  if (__getOwnPropSymbols13)
    for (var prop of __getOwnPropSymbols13(b2)) {
      if (__propIsEnum13.call(b2, prop))
        __defNormalProp12(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest5 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp13.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols13)
    for (var prop of __getOwnPropSymbols13(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum13.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function Bars(_a) {
  var _b = _a, { size: size2, color } = _b, others = __objRest5(_b, ["size", "color"]);
  return /* @__PURE__ */ import_react13.default.createElement("svg", __spreadValues12({
    viewBox: "0 0 135 140",
    xmlns: "http://www.w3.org/2000/svg",
    fill: color,
    width: `${size2}px`
  }, others), /* @__PURE__ */ import_react13.default.createElement("rect", {
    y: "10",
    width: "15",
    height: "120",
    rx: "6"
  }, /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "height",
    begin: "0.5s",
    dur: "1s",
    values: "120;110;100;90;80;70;60;50;40;140;120",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "y",
    begin: "0.5s",
    dur: "1s",
    values: "10;15;20;25;30;35;40;45;50;0;10",
    calcMode: "linear",
    repeatCount: "indefinite"
  })), /* @__PURE__ */ import_react13.default.createElement("rect", {
    x: "30",
    y: "10",
    width: "15",
    height: "120",
    rx: "6"
  }, /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "height",
    begin: "0.25s",
    dur: "1s",
    values: "120;110;100;90;80;70;60;50;40;140;120",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "y",
    begin: "0.25s",
    dur: "1s",
    values: "10;15;20;25;30;35;40;45;50;0;10",
    calcMode: "linear",
    repeatCount: "indefinite"
  })), /* @__PURE__ */ import_react13.default.createElement("rect", {
    x: "60",
    width: "15",
    height: "140",
    rx: "6"
  }, /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "height",
    begin: "0s",
    dur: "1s",
    values: "120;110;100;90;80;70;60;50;40;140;120",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "y",
    begin: "0s",
    dur: "1s",
    values: "10;15;20;25;30;35;40;45;50;0;10",
    calcMode: "linear",
    repeatCount: "indefinite"
  })), /* @__PURE__ */ import_react13.default.createElement("rect", {
    x: "90",
    y: "10",
    width: "15",
    height: "120",
    rx: "6"
  }, /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "height",
    begin: "0.25s",
    dur: "1s",
    values: "120;110;100;90;80;70;60;50;40;140;120",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "y",
    begin: "0.25s",
    dur: "1s",
    values: "10;15;20;25;30;35;40;45;50;0;10",
    calcMode: "linear",
    repeatCount: "indefinite"
  })), /* @__PURE__ */ import_react13.default.createElement("rect", {
    x: "120",
    y: "10",
    width: "15",
    height: "120",
    rx: "6"
  }, /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "height",
    begin: "0.5s",
    dur: "1s",
    values: "120;110;100;90;80;70;60;50;40;140;120",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), /* @__PURE__ */ import_react13.default.createElement("animate", {
    attributeName: "y",
    begin: "0.5s",
    dur: "1s",
    values: "10;15;20;25;30;35;40;45;50;0;10",
    calcMode: "linear",
    repeatCount: "indefinite"
  })));
}

// node_modules/@mantine/core/esm/components/Loader/loaders/Oval.js
init_react();
var import_react14 = __toESM(require_react());
var __defProp13 = Object.defineProperty;
var __getOwnPropSymbols14 = Object.getOwnPropertySymbols;
var __hasOwnProp14 = Object.prototype.hasOwnProperty;
var __propIsEnum14 = Object.prototype.propertyIsEnumerable;
var __defNormalProp13 = (obj, key, value) => key in obj ? __defProp13(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues13 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp14.call(b2, prop))
      __defNormalProp13(a2, prop, b2[prop]);
  if (__getOwnPropSymbols14)
    for (var prop of __getOwnPropSymbols14(b2)) {
      if (__propIsEnum14.call(b2, prop))
        __defNormalProp13(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest6 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp14.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols14)
    for (var prop of __getOwnPropSymbols14(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum14.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function Oval(_a) {
  var _b = _a, { size: size2, color } = _b, others = __objRest6(_b, ["size", "color"]);
  return /* @__PURE__ */ import_react14.default.createElement("svg", __spreadValues13({
    width: `${size2}px`,
    height: `${size2}px`,
    viewBox: "0 0 38 38",
    xmlns: "http://www.w3.org/2000/svg",
    stroke: color
  }, others), /* @__PURE__ */ import_react14.default.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /* @__PURE__ */ import_react14.default.createElement("g", {
    transform: "translate(2.5 2.5)",
    strokeWidth: "5"
  }, /* @__PURE__ */ import_react14.default.createElement("circle", {
    strokeOpacity: ".5",
    cx: "16",
    cy: "16",
    r: "16"
  }), /* @__PURE__ */ import_react14.default.createElement("path", {
    d: "M32 16c0-9.94-8.06-16-16-16"
  }, /* @__PURE__ */ import_react14.default.createElement("animateTransform", {
    attributeName: "transform",
    type: "rotate",
    from: "0 16 16",
    to: "360 16 16",
    dur: "1s",
    repeatCount: "indefinite"
  })))));
}

// node_modules/@mantine/core/esm/components/Loader/loaders/Dots.js
init_react();
var import_react15 = __toESM(require_react());
var __defProp14 = Object.defineProperty;
var __getOwnPropSymbols15 = Object.getOwnPropertySymbols;
var __hasOwnProp15 = Object.prototype.hasOwnProperty;
var __propIsEnum15 = Object.prototype.propertyIsEnumerable;
var __defNormalProp14 = (obj, key, value) => key in obj ? __defProp14(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues14 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp15.call(b2, prop))
      __defNormalProp14(a2, prop, b2[prop]);
  if (__getOwnPropSymbols15)
    for (var prop of __getOwnPropSymbols15(b2)) {
      if (__propIsEnum15.call(b2, prop))
        __defNormalProp14(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest7 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp15.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols15)
    for (var prop of __getOwnPropSymbols15(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum15.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function Dots(_a) {
  var _b = _a, { size: size2, color } = _b, others = __objRest7(_b, ["size", "color"]);
  return /* @__PURE__ */ import_react15.default.createElement("svg", __spreadValues14({
    width: `${size2}px`,
    height: `${size2 / 4}px`,
    viewBox: "0 0 120 30",
    xmlns: "http://www.w3.org/2000/svg",
    fill: color
  }, others), /* @__PURE__ */ import_react15.default.createElement("circle", {
    cx: "15",
    cy: "15",
    r: "15"
  }, /* @__PURE__ */ import_react15.default.createElement("animate", {
    attributeName: "r",
    from: "15",
    to: "15",
    begin: "0s",
    dur: "0.8s",
    values: "15;9;15",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), /* @__PURE__ */ import_react15.default.createElement("animate", {
    attributeName: "fill-opacity",
    from: "1",
    to: "1",
    begin: "0s",
    dur: "0.8s",
    values: "1;.5;1",
    calcMode: "linear",
    repeatCount: "indefinite"
  })), /* @__PURE__ */ import_react15.default.createElement("circle", {
    cx: "60",
    cy: "15",
    r: "9",
    fillOpacity: "0.3"
  }, /* @__PURE__ */ import_react15.default.createElement("animate", {
    attributeName: "r",
    from: "9",
    to: "9",
    begin: "0s",
    dur: "0.8s",
    values: "9;15;9",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), /* @__PURE__ */ import_react15.default.createElement("animate", {
    attributeName: "fill-opacity",
    from: "0.5",
    to: "0.5",
    begin: "0s",
    dur: "0.8s",
    values: ".5;1;.5",
    calcMode: "linear",
    repeatCount: "indefinite"
  })), /* @__PURE__ */ import_react15.default.createElement("circle", {
    cx: "105",
    cy: "15",
    r: "15"
  }, /* @__PURE__ */ import_react15.default.createElement("animate", {
    attributeName: "r",
    from: "15",
    to: "15",
    begin: "0s",
    dur: "0.8s",
    values: "15;9;15",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), /* @__PURE__ */ import_react15.default.createElement("animate", {
    attributeName: "fill-opacity",
    from: "1",
    to: "1",
    begin: "0s",
    dur: "0.8s",
    values: "1;.5;1",
    calcMode: "linear",
    repeatCount: "indefinite"
  })));
}

// node_modules/@mantine/core/esm/components/Loader/Loader.js
var __defProp15 = Object.defineProperty;
var __getOwnPropSymbols16 = Object.getOwnPropertySymbols;
var __hasOwnProp16 = Object.prototype.hasOwnProperty;
var __propIsEnum16 = Object.prototype.propertyIsEnumerable;
var __defNormalProp15 = (obj, key, value) => key in obj ? __defProp15(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues15 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp16.call(b2, prop))
      __defNormalProp15(a2, prop, b2[prop]);
  if (__getOwnPropSymbols16)
    for (var prop of __getOwnPropSymbols16(b2)) {
      if (__propIsEnum16.call(b2, prop))
        __defNormalProp15(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest8 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp16.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols16)
    for (var prop of __getOwnPropSymbols16(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum16.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var LOADERS = {
  bars: Bars,
  oval: Oval,
  dots: Dots
};
var LOADER_SIZES = {
  xs: 18,
  sm: 22,
  md: 36,
  lg: 44,
  xl: 58
};
function Loader2(_a) {
  var _b = _a, { size: size2 = "md", color, variant } = _b, others = __objRest8(_b, ["size", "color", "variant"]);
  const theme = useMantineTheme();
  const defaultLoader = variant in LOADERS ? variant : theme.loader;
  const _color = color || theme.primaryColor;
  return /* @__PURE__ */ import_react16.default.createElement(Box, __spreadValues15({
    role: "presentation",
    component: LOADERS[defaultLoader] || LOADERS.bars,
    size: theme.fn.size({ size: size2, sizes: LOADER_SIZES }),
    color: _color in theme.colors ? theme.fn.themeColor(_color, theme.colorScheme === "dark" ? 4 : 6) : color
  }, others));
}
Loader2.displayName = "@mantine/core/Loader";

// node_modules/@mantine/core/esm/components/Button/Button.js
var __defProp16 = Object.defineProperty;
var __getOwnPropSymbols17 = Object.getOwnPropertySymbols;
var __hasOwnProp17 = Object.prototype.hasOwnProperty;
var __propIsEnum17 = Object.prototype.propertyIsEnumerable;
var __defNormalProp16 = (obj, key, value) => key in obj ? __defProp16(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues16 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp17.call(b2, prop))
      __defNormalProp16(a2, prop, b2[prop]);
  if (__getOwnPropSymbols17)
    for (var prop of __getOwnPropSymbols17(b2)) {
      if (__propIsEnum17.call(b2, prop))
        __defNormalProp16(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest9 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp17.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols17)
    for (var prop of __getOwnPropSymbols17(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum17.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var Button = (0, import_react17.forwardRef)((_a, ref) => {
  var _b = _a, {
    className,
    size: size2 = "sm",
    color,
    type = "button",
    disabled,
    children,
    leftIcon,
    rightIcon,
    fullWidth = false,
    variant = "filled",
    radius = "sm",
    component,
    uppercase = false,
    compact = false,
    loading = false,
    loaderPosition = "left",
    loaderProps,
    gradient = { from: "blue", to: "cyan", deg: 45 },
    classNames: classNames2,
    styles: styles2
  } = _b, others = __objRest9(_b, [
    "className",
    "size",
    "color",
    "type",
    "disabled",
    "children",
    "leftIcon",
    "rightIcon",
    "fullWidth",
    "variant",
    "radius",
    "component",
    "uppercase",
    "compact",
    "loading",
    "loaderPosition",
    "loaderProps",
    "gradient",
    "classNames",
    "styles"
  ]);
  const { classes, cx, theme } = Button_styles_default({
    radius,
    color,
    size: size2,
    fullWidth,
    compact,
    gradientFrom: gradient.from,
    gradientTo: gradient.to,
    gradientDeg: gradient.deg
  }, { classNames: classNames2, styles: styles2, name: "Button" });
  const colors = getSharedColorScheme({ color, theme, variant });
  const loader = /* @__PURE__ */ import_react17.default.createElement(Loader2, __spreadValues16({
    color: colors.color,
    size: theme.fn.size({ size: size2, sizes: heights }) / 2
  }, loaderProps));
  return /* @__PURE__ */ import_react17.default.createElement(Box, __spreadValues16({
    component: component || "button",
    className: cx(classes[variant], { [classes.loading]: loading }, classes.root, className),
    type,
    disabled: disabled || loading,
    ref,
    onTouchStart: () => {
    }
  }, others), /* @__PURE__ */ import_react17.default.createElement("div", {
    className: classes.inner
  }, (leftIcon || loading && loaderPosition === "left") && /* @__PURE__ */ import_react17.default.createElement("span", {
    className: cx(classes.icon, classes.leftIcon)
  }, loading && loaderPosition === "left" ? loader : leftIcon), /* @__PURE__ */ import_react17.default.createElement("span", {
    className: classes.label,
    style: { textTransform: uppercase ? "uppercase" : void 0 }
  }, children), (rightIcon || loading && loaderPosition === "right") && /* @__PURE__ */ import_react17.default.createElement("span", {
    className: cx(classes.icon, classes.rightIcon)
  }, loading && loaderPosition === "right" ? loader : rightIcon)));
});
Button.displayName = "@mantine/core/Button";

// node_modules/@mantine/core/esm/index.js
init_react();

// node_modules/@mantine/core/esm/components/Table/Table.js
init_react();
var import_react18 = __toESM(require_react());

// node_modules/@mantine/core/esm/components/Table/Table.styles.js
init_react();
var __defProp17 = Object.defineProperty;
var __defProps7 = Object.defineProperties;
var __getOwnPropDescs7 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols18 = Object.getOwnPropertySymbols;
var __hasOwnProp18 = Object.prototype.hasOwnProperty;
var __propIsEnum18 = Object.prototype.propertyIsEnumerable;
var __defNormalProp17 = (obj, key, value) => key in obj ? __defProp17(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues17 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp18.call(b2, prop))
      __defNormalProp17(a2, prop, b2[prop]);
  if (__getOwnPropSymbols18)
    for (var prop of __getOwnPropSymbols18(b2)) {
      if (__propIsEnum18.call(b2, prop))
        __defNormalProp17(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps7 = (a2, b2) => __defProps7(a2, __getOwnPropDescs7(b2));
var useStyles5 = createStyles((theme, { captionSide, horizontalSpacing, verticalSpacing }, getRef2) => {
  const striped = { ref: getRef2("striped") };
  const hover = { ref: getRef2("hover") };
  return {
    striped,
    hover,
    root: __spreadProps7(__spreadValues17({}, theme.fn.fontStyles()), {
      width: "100%",
      borderCollapse: "collapse",
      captionSide,
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      lineHeight: theme.lineHeight,
      "& caption": {
        marginTop: captionSide === "top" ? 0 : theme.spacing.xs,
        marginBottom: captionSide === "bottom" ? 0 : theme.spacing.xs,
        fontSize: theme.fontSizes.sm,
        color: theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6]
      },
      "& thead tr th, & tfoot tr th": {
        textAlign: "left",
        fontWeight: "bold",
        color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.gray[7],
        fontSize: 14,
        padding: `${theme.fn.size({
          size: verticalSpacing,
          sizes: theme.spacing
        })}px ${theme.fn.size({ size: horizontalSpacing, sizes: theme.spacing })}px`
      },
      "& thead tr th": {
        borderBottom: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`
      },
      "& tfoot tr th": {
        borderTop: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`
      },
      "& tbody tr td": {
        padding: `${theme.fn.size({
          size: verticalSpacing,
          sizes: theme.spacing
        })}px ${theme.fn.size({ size: horizontalSpacing, sizes: theme.spacing })}px`,
        borderBottom: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`,
        fontSize: 14
      },
      "& tbody tr:last-of-type td": {
        borderBottom: "none"
      },
      [`&.${striped.ref} tbody tr:nth-of-type(odd)`]: {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[0]
      },
      [`&.${hover.ref} tbody tr:hover`]: {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[1]
      }
    })
  };
});
var Table_styles_default = useStyles5;

// node_modules/@mantine/core/esm/components/Table/Table.js
var __defProp18 = Object.defineProperty;
var __defProps8 = Object.defineProperties;
var __getOwnPropDescs8 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols19 = Object.getOwnPropertySymbols;
var __hasOwnProp19 = Object.prototype.hasOwnProperty;
var __propIsEnum19 = Object.prototype.propertyIsEnumerable;
var __defNormalProp18 = (obj, key, value) => key in obj ? __defProp18(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues18 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp19.call(b2, prop))
      __defNormalProp18(a2, prop, b2[prop]);
  if (__getOwnPropSymbols19)
    for (var prop of __getOwnPropSymbols19(b2)) {
      if (__propIsEnum19.call(b2, prop))
        __defNormalProp18(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps8 = (a2, b2) => __defProps8(a2, __getOwnPropDescs8(b2));
var __objRest10 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp19.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols19)
    for (var prop of __getOwnPropSymbols19(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum19.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var Table = (0, import_react18.forwardRef)((_a, ref) => {
  var _b = _a, {
    className,
    children,
    striped = false,
    highlightOnHover = false,
    captionSide = "top",
    horizontalSpacing = "xs",
    verticalSpacing = 7
  } = _b, others = __objRest10(_b, [
    "className",
    "children",
    "striped",
    "highlightOnHover",
    "captionSide",
    "horizontalSpacing",
    "verticalSpacing"
  ]);
  const { classes, cx } = Table_styles_default({ captionSide, verticalSpacing, horizontalSpacing }, { name: "Table" });
  return /* @__PURE__ */ import_react18.default.createElement(Box, __spreadProps8(__spreadValues18({}, others), {
    component: "table",
    ref,
    className: cx(classes.root, { [classes.striped]: striped, [classes.hover]: highlightOnHover }, className)
  }), children);
});
Table.displayName = "@mantine/core/Table";

export {
  useMoralis,
  MoralisProvider,
  useMoralisWeb3Api,
  MantineProvider,
  Header2 as Header,
  AppShell,
  Button,
  Table
};
/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=/build/_shared/chunk-LUXWXEAB.js.map
