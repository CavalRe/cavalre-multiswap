{
  "version": 3,
  "sources": ["../../../app/components/Dashboard/Header/index.tsx", "../../../app/utils/index.ts", "../../../app/components/Dashboard/RequireAuth/index.tsx", "../../../app/components/Dashboard/index.tsx", "../../../app/components/Dashboard/Swap/index.tsx", "../../../app/components/Dashboard/Swap/PayComponent/index.tsx", "../../../app/components/Dashboard/Swap/ReceiveComponent/index.tsx", "../../../app/components/Dashboard/Swap/TokenSelect/index.tsx", "../../../app/components/Dashboard/Swap/TokenSelect/TokenItem/index.tsx"],
  "sourcesContent": ["import { useMoralis } from \"react-moralis\";\r\nimport {\r\n    Button,\r\n    Header\r\n} from '@mantine/core';\r\nimport { BigNumber } from \"ethers\";\r\n\r\nimport type { PoolToken, AssetToken } from \"~/moralis.server\";\r\nimport { tokenAbi } from \"~/utils\";\r\nimport type { Dict } from \"~/utils\";\r\n\r\ntype HeaderProps = {\r\n    poolToken: PoolToken\r\n    assetTokens: Dict<AssetToken>\r\n};\r\n\r\nconst DashboardHeader = (props: HeaderProps) => {\r\n    const { poolToken, assetTokens } = props;\r\n    const {\r\n        isAuthenticated,\r\n        authenticate,\r\n        logout,\r\n        Moralis\r\n    } = useMoralis();\r\n\r\n    const handleLogin = async () => { await authenticate(); };\r\n\r\n    const handleLogout = async () => { await logout(); };\r\n\r\n    const handleSendTokens = async () => {\r\n        Object.values(assetTokens).forEach(async (asset: AssetToken) => {\r\n            const n = parseInt(asset.symbol.slice(1));\r\n            await Moralis.executeFunction({\r\n                contractAddress: asset.address,\r\n                functionName: \"mint\",\r\n                abi: tokenAbi,\r\n                params: {\r\n                    amount: BigNumber.from((n*10**(5+asset.decimals)).toLocaleString('fullwide',{useGrouping:false})),\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Header height={60} p=\"xs\">\r\n            {isAuthenticated ?\r\n                <>\r\n                    <Button\r\n                        onClick={handleLogout}\r\n                        ml=\"md\"\r\n                        size=\"md\"\r\n                    >\r\n                        Logout\r\n                    </Button>\r\n                    <Button\r\n                        onClick={handleSendTokens}\r\n                        ml=\"md\"\r\n                        size=\"md\"\r\n                    >\r\n                        Send Tokens\r\n                    </Button>\r\n                </> :\r\n                <Button\r\n                    onClick={handleLogin}\r\n                    ml=\"md\"\r\n                    size=\"md\"\r\n                >\r\n                    Connect Wallet\r\n                </Button>\r\n            }\r\n        </Header>\r\n    )\r\n};\r\n\r\nexport default DashboardHeader;\r\n", "export const decimalNumber = (value: string, decimals: string = \"18\") => {\n    return parseInt(value) / (10 ** parseInt(decimals));\n};\n\nexport type Dict<T> = {\n    [key: string]: T\n};\n\nexport { abi as poolAbi } from \"../../../artifacts/contracts/Pool.sol/Pool.json\";\n\nexport { abi as tokenAbi } from \"../../../artifacts/contracts/Token.sol/Token.json\";\n", "import { useMoralis } from \"react-moralis\";\nimport { Button } from '@mantine/core';\n\nconst RequireAuth = ({ children }: any) => {\n    const { isAuthenticated, authenticate } = useMoralis();\n\n    const handleLogin = async () => { await authenticate(); };\n\n    return (\n        <>\n            {isAuthenticated ?\n                children :\n                <Button onClick={handleLogin}>Connect Wallet</Button>\n            }\n        </>\n    );\n};\n\nexport default RequireAuth;\n", "import { useEffect, useState } from \"react\";\r\nimport { useMoralis } from \"react-moralis\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    Container,\r\n    Group,\r\n    Modal,\r\n    NativeSelect,\r\n    SimpleGrid,\r\n    Table,\r\n    Text,\r\n    Title\r\n} from '@mantine/core';\r\nimport type { MantineSize } from \"@mantine/core\";\r\nimport type { PoolToken, AssetToken } from \"~/moralis.server\";\r\nimport { decimalNumber } from \"~/utils\";\r\nimport type { Dict } from \"~/utils\";\r\nimport { Swap } from \"~/components/Dashboard\";\r\n\r\ntype Numeraire = {\r\n    name: string,\r\n    symbol: string,\r\n    price: number\r\n};\r\n\r\nexport { default as Header } from \"~/components/Dashboard/Header\";\r\nexport { default as NavBar } from \"~/components/Dashboard/NavBar\";\r\nexport { default as RequireAuth } from \"~/components/Dashboard/RequireAuth\";\r\nexport { default as Swap } from \"~/components/Dashboard/Swap\";\r\n\r\ntype DashboardProps = {\r\n    chain: string\r\n    poolToken: PoolToken\r\n    assetTokens: Dict<AssetToken>\r\n};\r\n\r\nconst Dashboard = (props: DashboardProps) => {\r\n    const {\r\n        isAuthenticated,\r\n        isWeb3Enabled,\r\n        enableWeb3,\r\n        account,\r\n        Moralis\r\n    } = useMoralis();\r\n    const { chain, poolToken, assetTokens } = props;\r\n    const [opened, setOpened] = useState<boolean>(false);\r\n    const [_, setTotalBalance] = useState<number>(0);\r\n\r\n    const setBalances = async () => {\r\n        if (account) {\r\n            await Moralis.Web3API.account.getTokenBalances({\r\n                account,\r\n                chain\r\n            }).then((balanceData: any) => {\r\n                let totalBalance = 0;\r\n                balanceData.forEach(async (b: any) => {\r\n                    const balance = decimalNumber(b.balance, b.decimals);\r\n                    totalBalance += balance;\r\n                    if (b.token_address in assetTokens) {\r\n                        assetTokens[b.token_address].accountBalance = balance;\r\n                    } else if (b.token_address == poolToken.address) {\r\n                        poolToken.accountBalance = balance;\r\n                    } else {\r\n                        assetTokens[b.token_address] = {\r\n                            address: b.token_address,\r\n                            name: b.name,\r\n                            symbol: b.symbol,\r\n                            decimals: parseInt(b.decimals),\r\n                            k: 1,\r\n                            fee: .01,\r\n                            weight: 0,\r\n                            contractBalance: 0,\r\n                            accountBalance: balance,\r\n                            allowance: 0,\r\n                            amount: 0,\r\n                            allocation: 0,\r\n                            selection: \"Not in Pool\"\r\n                        };\r\n                    };\r\n                });\r\n                setTotalBalance(totalBalance);\r\n            });\r\n        }\r\n    };\r\n\r\n    const setAllowances = async () => {\r\n        if (account) {\r\n            await Moralis.Web3API.token.getTokenAllowance({\r\n                owner_address: account,\r\n                spender_address: poolToken.address,\r\n                address: poolToken.address,\r\n                chain\r\n            }).then(({ allowance }) => {\r\n                poolToken.allowance = decimalNumber(allowance, poolToken.decimals.toString());\r\n            });\r\n\r\n            Object.values(assetTokens).forEach(async (asset: AssetToken) => {\r\n                await Moralis.Web3API.token.getTokenAllowance({\r\n                    owner_address: account,\r\n                    spender_address: poolToken.address,\r\n                    address: asset.address,\r\n                    chain\r\n                }).then(({ allowance }) => {\r\n                    assetTokens[asset.address].allowance = decimalNumber(allowance, asset.decimals.toString());\r\n                });\r\n            });\r\n        };\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated) {\r\n            if (!isWeb3Enabled) {\r\n                enableWeb3();\r\n            } else {\r\n                setBalances();\r\n                setAllowances();\r\n            };\r\n        }\r\n    }, [isAuthenticated, isWeb3Enabled, account])\r\n\r\n    const contractBalance = poolToken.accountBalance;\r\n    const poolTokens = poolToken.contractBalance;\r\n\r\n    const price = (asset: AssetToken) => {\r\n        return poolTokens * asset.weight / asset.contractBalance;\r\n    };\r\n\r\n    const balance = (asset: AssetToken) => {\r\n        return asset.accountBalance;\r\n    };\r\n\r\n    const poolTokenNumeraire = { name: poolToken.name, symbol: poolToken.symbol, price: 1 }\r\n    const [numeraire, setNumeraire] = useState<Numeraire>(poolTokenNumeraire);\r\n\r\n    const numeraires = [poolTokenNumeraire, ...Object.values(assetTokens)?.map((a: AssetToken) => {\r\n        return { name: a.name, symbol: a.symbol, price: price(a) }\r\n    })];\r\n    const numeraireMap: Dict<Numeraire> = {};\r\n    numeraires.forEach((n: Numeraire) => { numeraireMap[`${n.name} (${n.symbol})`] = n; });\r\n\r\n    const handleNumeraire = (value: string) => {\r\n        setNumeraire(numeraireMap[value]);\r\n    };\r\n\r\n    const numberOptions = {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n    };\r\n\r\n    const cellTextSize: MantineSize = \"md\";\r\n    const headerTextSize: MantineSize = \"lg\";\r\n    const subTextSize: MantineSize = \"sm\";\r\n    const rows = Object.values(assetTokens)?.filter((a: AssetToken) => (a.contractBalance > 0 && a.k !== undefined && a.fee !== undefined)).map((a: AssetToken, i: number) => (\r\n        <tr key={a.address}>\r\n            <td><span><Text size={cellTextSize} color=\"bold\" component=\"span\">{`${a.name}`}</Text><Text size=\"xs\" color=\"dimmed\" component=\"span\">{` (${a.symbol})`}</Text></span></td>\r\n            {isAuthenticated ? <td align=\"right\"><Text size={cellTextSize}>{(balance(a) / numeraire.price).toLocaleString(undefined, numberOptions)}</Text></td> : null}\r\n            <td align=\"right\"><Text size={cellTextSize}>{(price(a) / numeraire.price).toLocaleString(undefined, numberOptions)}</Text></td>\r\n            <td align=\"right\"><Text size={cellTextSize}>{(a.contractBalance / numeraire.price).toLocaleString(undefined, numberOptions)}</Text></td>\r\n            <td align=\"right\"><Text size={cellTextSize}>{(10000 * a.fee).toLocaleString()}</Text></td>\r\n            <td align=\"right\"><Text size={cellTextSize}>{a.k.toLocaleString()}</Text></td>\r\n        </tr>\r\n    ));\r\n\r\n    return (\r\n        <Container>\r\n            <Title>Liquidity Pool</Title>\r\n            <Button onClick={() => setOpened(true)} mt=\"xl\">Swap</Button>\r\n            <Modal\r\n                size=\"800px\"\r\n                opened={opened}\r\n                onClose={() => setOpened(false)}\r\n                radius=\"lg\"\r\n                title={<Title align=\"center\" order={3}>Mulit-Asset Swap</Title>}\r\n            >\r\n                <Swap\r\n                    poolToken={poolToken}\r\n                    assetTokens={assetTokens}\r\n                    chain={chain}\r\n                    address={account}\r\n                />\r\n            </Modal>\r\n            <Card withBorder p=\"xl\" radius=\"md\" mt=\"lg\">\r\n                <Title order={3}>Pool Tokens</Title>\r\n                <SimpleGrid cols={isAuthenticated ? 4 : 3}>\r\n                    {isAuthenticated ?\r\n                        (<div>\r\n                            <Text size=\"xl\" mt=\"md\">{(contractBalance / numeraire.price).toLocaleString() + \" \" + numeraire.symbol}</Text>\r\n                            <Text size={subTextSize} color=\"dimmed\">Balance</Text>\r\n                        </div>) : null}\r\n                    <div>\r\n                        <Text size=\"xl\" mt=\"md\">{(poolTokens / numeraire.price).toLocaleString() + \" \" + numeraire.symbol}</Text>\r\n                        <Text size={subTextSize} color=\"dimmed\">TVL</Text>\r\n                    </div>\r\n                    <div>\r\n                        <Text size=\"xl\" mt=\"md\">{poolTokens?.toLocaleString()}</Text>\r\n                        <Text size={subTextSize} color=\"dimmed\">Outstanding</Text>\r\n                    </div>\r\n                    <div>\r\n                        <NativeSelect\r\n                            mt=\"md\"\r\n                            value={`${numeraire.name} (${numeraire.symbol})`}\r\n                            onChange={(event) => handleNumeraire(event.currentTarget.value)}\r\n                            data={numeraires.map(n => `${n.name} (${n.symbol})`)}\r\n                            description=\"Select numeraire\"\r\n                            // label=\"Select numeraire\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                </SimpleGrid>\r\n            </Card>\r\n            <Card withBorder p=\"xl\" radius=\"md\" mt=\"lg\">\r\n                <Title order={3}>Asset Tokens</Title>\r\n                <Text size=\"xl\" mt=\"md\">{Object.values(assetTokens).reduce(\r\n                    (acc, a) => acc + (a.selection !== \"Not in Pool\" ? 1 : 0), 0\r\n                ).toLocaleString()}</Text>\r\n                <Text size={subTextSize} color=\"dimmed\">Number of assets</Text>\r\n                <Group mt=\"lg\">\r\n                    <Table\r\n                        verticalSpacing=\"sm\"\r\n                        style={{ width: \"100%\" }}\r\n                        highlightOnHover\r\n                    >\r\n                        <thead>\r\n                            <tr>\r\n                                {/* <th>#</th> */}\r\n                                <th><Text size={headerTextSize}>Name</Text></th>\r\n                                {isAuthenticated ?\r\n                                    <th><Text size={headerTextSize}>Balance ({numeraire.symbol})</Text></th> : null}\r\n                                <th><Text size={headerTextSize}>Price ({numeraire.symbol})</Text></th>\r\n                                {/* <th><Text size={headerTextSize}>Weight</Text></th> */}\r\n                                <th><Text size={headerTextSize}>Reserves ({numeraire.symbol})</Text></th>\r\n                                <th><Text size={headerTextSize}>Fee (bps)</Text></th>\r\n                                <th><Text size={headerTextSize}>Tuning (k)</Text></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>{rows}</tbody>\r\n                    </Table>\r\n                </Group>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n", "import { useState } from \"react\";\nimport { useMoralis } from \"react-moralis\";\nimport {\n    Button,\n    SimpleGrid,\n    Text\n} from \"@mantine/core\";\nimport { BigNumber } from \"ethers\";\nimport type { PoolToken, AssetToken, Token } from \"~/moralis.server\";\nimport { poolAbi } from \"~/utils\";\nimport type { Dict } from \"~/utils\";\nimport PayComponent from \"./PayComponent\";\nimport ReceiveComponent from \"./ReceiveComponent\";\nimport TokenSelect from \"./TokenSelect\";\n\nexport type SwapState = {\n    poolToken: PoolToken\n    assetTokens: Dict<AssetToken>\n}\n\ntype SwapProps = {\n    poolToken: PoolToken\n    assetTokens: Dict<AssetToken>\n    chain: string\n    address: string | null\n};\n\nconst Swap = (props: SwapProps) => {\n    const { chain, address } = props;\n    const [swapState, setSwapState] = useState<SwapState>(props);\n    const { poolToken, assetTokens } = swapState;\n    const [isApproved, setIsApproved] = useState<boolean>(true);\n    const {\n        isAuthenticated,\n        authenticate,\n        Moralis\n    } = useMoralis();\n\n    const getPreTradePrice = (asset: AssetToken) => {\n        return asset.weight * poolToken.contractBalance / asset.contractBalance;\n    };\n\n    const getPostTradePrice = (asset: AssetToken, newPoolTokens: number) => {\n        return asset.weight * newPoolTokens / (asset.contractBalance + asset.amount);\n    };\n\n    const getAssetAmount = (assets: AssetToken[], newPoolTokens: number) => {\n        return assets.reduce(\n            (total: number, asset: AssetToken) => total + asset.amount * getPostTradePrice(asset, newPoolTokens),\n            0\n        );\n    };\n\n    const getQuote = (swapState: SwapState) => {\n        const { poolToken, assetTokens } = swapState;\n\n        const poolTokensPreAlloc: number = poolToken.contractBalance - (poolToken.selection == \"Pay\" ? poolToken.amount : 0); // check\n\n        const selectedAssetPayTokens = Object.values(assetTokens).filter(\n            (asset: AssetToken) => asset.selection == \"Pay\"\n        );\n\n        const selectedAssetReceiveTokens = Object.values(assetTokens).filter(\n            (asset: AssetToken) => asset.selection == \"Receive\"\n        )\n\n        const assetAmountInPreAlloc: number = getAssetAmount(selectedAssetPayTokens, poolTokensPreAlloc); // check\n\n        const totalAmountInPreAlloc: number = assetAmountInPreAlloc + (poolToken.selection == \"Pay\" ? poolToken.amount : 0); // check\n\n        let poolTokens = poolTokensPreAlloc;\n        let totalAmountOut = totalAmountInPreAlloc;\n\n        if (poolToken.allocation !== 0) {\n            const factor: number = 1 / poolToken.allocation -\n                getAssetAmount(selectedAssetPayTokens, 1);\n\n            const totalAmountOutNoFee = totalAmountInPreAlloc / factor;\n\n            const poolTokensOutNoFee = poolToken.allocation * totalAmountOutNoFee;\n\n            const poolTokensOut = (1 - poolToken.fee) * poolTokensOutNoFee;\n\n            poolToken.amount = -poolTokensOut;\n\n            poolTokens = poolToken.contractBalance + poolTokensOut;\n\n            totalAmountOut = totalAmountOutNoFee;\n        };\n\n        const quotes = selectedAssetReceiveTokens.map(\n            (token: AssetToken) => {\n                const allocation = token.allocation;\n                const factor = (1 - token.fee) * allocation * totalAmountOut / (token.weight * poolTokens);\n                const amountOut = factor * token.contractBalance / (1 + factor);\n                token.amount = -amountOut;\n                const preTradePrice = getPreTradePrice(token);\n                const postTradePrice = getPostTradePrice(token, poolTokens);\n\n                return {\n                    token,\n                    preTradePrice,\n                    postTradePrice,\n                    amountOut\n                }\n            }\n        );\n        setSwapState({ poolToken, assetTokens });\n        return quotes;\n    };\n\n    const swap = async (address: string, payTokens: Token[], receiveTokens: Token[]) => {\n        const totalAllocation = receiveTokens.reduce((acc: number, t: Token) => acc + t.allocation, 0);\n        if (Math.abs(totalAllocation - 1) > 0.0001) {\n            console.log(`Allocation must be 1: ${totalAllocation}`);\n            return { error: \"Allocation must add up to 1\" };\n        };\n\n        if (payTokens.length == 0) {\n            console.log(\"No pay tokens\");\n            return { error: \"Must select at least one pay token\" };\n        };\n\n        if (receiveTokens.length == 0) {\n            console.log(\"Must select at least one receive token\");\n            return { error: \"Must select at least one receive token\" };\n        }\n\n        const payAddresses: string[] = payTokens.map((t: Token) => t.address);\n        const amounts: BigNumber[] = payTokens.map((t: Token) => \n            BigNumber.from((t.amount*10**t.decimals).toLocaleString('fullwide',{useGrouping:false}))\n        );\n\n        const receiveAddresses: string[] = receiveTokens.map((t: Token) => t.address);\n        const allocations: BigNumber[] = receiveTokens.map((t: Token) => \n            BigNumber.from((t.allocation*10**18).toLocaleString('fullwide',{useGrouping:false}))\n        );\n \n        // const { allowance } = await Moralis.Web3API.token.getTokenAllowance(\n        //     {\n        //         chain,\n        //         owner_address: address,\n        //         spender_address: poolToken.address,\n        //         address: payTokens[0].address\n        //     }\n        // );\n        // console.log(`allowance: ${decimalNumber(allowance)}`);\n        // console.log(`amount: ${payTokens[0].amount}`);\n        // if (decimalNumber(allowance) < payTokens[0].amount) {\n        //     // await Moralis.Web3API.native.runContractFunction({\n\n        //     // })\n        // }\n        // // Moralis.authenticate({\n        // //     chain,\n        // //     address,\n        // // })\n\n        if (payTokens.length == 1 && receiveTokens.length == 1) {\n            if (receiveAddresses.includes(poolToken.address)) {\n                await Moralis.executeFunction({\n                    contractAddress: poolToken.address,\n                    functionName: \"stake\",\n                    abi: poolAbi,\n                    params: {\n                        payToken: payTokens[0].address,\n                        amountIn: BigNumber.from((payTokens[0].amount*10**payTokens[0].decimals).toLocaleString('fullwide',{useGrouping:false})),\n                        addressTo: address\n                    }\n                });\n                return { result: \"Staking\" };\n            } else if (payAddresses.includes(poolToken.address)) {\n                await Moralis.executeFunction({\n                    contractAddress: poolToken.address,\n                    functionName: \"unstake\",\n                    abi: poolAbi,\n                    params: {\n                        receiveToken: receiveTokens[0].address,\n                        amountIn: BigNumber.from((payTokens[0].amount*10**payTokens[0].decimals).toLocaleString('fullwide',{useGrouping:false})),\n                        addressTo: address\n                    }\n                });\n                return { result: \"Unstaking\" };\n            } else {\n                await Moralis.executeFunction({\n                    contractAddress: poolToken.address,\n                    functionName: \"swap\",\n                    abi: poolAbi,\n                    params: {\n                        payToken: payTokens[0].address,\n                        receiveToken: receiveTokens[0].address,\n                        amountIn: BigNumber.from((payTokens[0].amount*10**payTokens[0].decimals).toLocaleString('fullwide',{useGrouping:false})),\n                        addressTo: address\n                    }\n                });\n                return { result: \"Swapping\" };\n            };\n        } else {\n            await Moralis.executeFunction({\n                contractAddress: poolToken.address,\n                functionName: \"multiswap\",\n                abi: poolAbi,\n                params: {\n                    payTokens: payAddresses,\n                    amounts,\n                    receiveTokens: receiveAddresses,\n                    allocations\n                }\n            });\n            return { result: \"Swapping\" };\n        };\n    };\n\n    const totalAllocation = Object.values(assetTokens).reduce(\n        (total: number, { allocation }) => total + allocation,\n        poolToken.allocation\n    );\n\n    const handleSwap = () => {\n        getQuote(swapState);\n        const payTokens: Token[] = [];\n        const receiveTokens: Token[] = [];\n\n        if (poolToken.selection == \"Pay\") {\n            payTokens.push(poolToken);\n        } else if (poolToken.selection == \"Receive\") {\n            receiveTokens.push(poolToken);\n        };\n\n        Object.values(assetTokens).forEach(\n            (asset: AssetToken) => {\n                if (asset.selection == \"Pay\") {\n                    payTokens.push(asset);\n                } else if (asset.selection == \"Receive\") {\n                    receiveTokens.push(asset);\n                }\n            }\n        );\n\n        address && swap(address, payTokens, receiveTokens);\n    };\n\n    const handleLogin = async () => await authenticate();\n\n    const checkAllocations = () => {\n        let isApproved = poolToken.amount <= poolToken.allowance;\n        Object.values(assetTokens).forEach((asset: AssetToken) => {\n            isApproved = isApproved && asset.amount <= asset.allowance;\n        });\n        return isApproved;\n    };\n\n    const handleIncreaseAllowance = async () => {\n        const increaseAmount = poolToken.amount - poolToken.allowance;\n        if (increaseAmount > 0) {\n            await Moralis.executeFunction({\n                contractAddress: poolToken.address,\n                functionName: \"approve\",\n                abi: poolAbi,\n                params: {\n                    spender: poolToken.address,\n                    amount: BigNumber.from((increaseAmount*10**poolToken.decimals).toLocaleString('fullwide',{useGrouping:false}))\n                }\n            });\n        };\n        Object.values(assetTokens).forEach(async (asset: AssetToken) => {\n            const increaseAmount = asset.amount - asset.allowance;\n            if (increaseAmount > 0) {\n                await Moralis.executeFunction({\n                    contractAddress: asset.address,\n                    functionName: \"approve\",\n                    abi: poolAbi,\n                    params: {\n                        spender: poolToken.address,\n                        amount: BigNumber.from((increaseAmount*10**asset.decimals).toLocaleString('fullwide',{useGrouping:false}))\n                    }\n                });\n            };\n        });\n    };\n\n    return (\n        <>\n            <SimpleGrid cols={2}>\n                <TokenSelect\n                    title=\"Pay Tokens\"\n                    swapState={swapState}\n                    getQuote={getQuote}\n                    tokenComponent={PayComponent}\n                    isPay={true}\n                    placeholder=\"Select tokens to deposit:\"\n                />\n                <TokenSelect\n                    title=\"Receive Tokens\"\n                    swapState={swapState}\n                    getQuote={getQuote}\n                    tokenComponent={ReceiveComponent}\n                    isPay={false}\n                    placeholder=\"Select tokens to withdraw:\"\n                />\n            </SimpleGrid>\n            <Text>{`Total allocation: ${(100 * totalAllocation).toFixed(2)}%`}</Text>\n            {isAuthenticated ? \n                checkAllocations() ?\n                        <Button\n                            type=\"submit\"\n                            onClick={handleSwap}\n                            mt=\"xl\"\n                            size=\"md\"\n                            disabled={(Math.abs(totalAllocation - 1) > .0001)}\n                        >\n                            Execute Swap\n                        </Button> :\n                        <Button\n                            type=\"submit\"\n                            onClick={handleIncreaseAllowance}\n                            mt=\"xl\"\n                            size=\"md\"\n                        >\n                            Increase Allowances\n                        </Button> :\n                <Button\n                    type=\"submit\"\n                    onClick={handleLogin}\n                    mt=\"xl\"\n                    size=\"md\"\n                >\n                        Connect Wallet\n                </Button>\n            }\n        </>\n    );\n};\n\nexport default Swap;\n", "\nimport { FC } from \"react\";\nimport {\n    Card,\n    Group,\n    NumberInput,\n    Text\n} from \"@mantine/core\";\n\nimport type { TokenComponentProps } from \"../TokenSelect\";\n\nconst PayComponent: FC<TokenComponentProps> = (props: TokenComponentProps) => {\n    const { token, swapState, getQuote } = props;\n    const { poolToken, assetTokens } = swapState;\n\n    const handleAmountChange = (amount: number) => {\n        if (token.address == poolToken.address) {\n            poolToken.amount = amount;\n        } else {\n            assetTokens[token.address].amount = amount;\n        }\n        getQuote({ poolToken, assetTokens });\n    };\n\n    return (\n        <Card radius=\"md\" mt=\"xs\">\n            <input type=\"hidden\" name=\"address\" />\n            <input type=\"hidden\" name=\"payToken\" value={JSON.stringify(token)} />\n            <NumberInput\n                precision={2}\n                size=\"lg\"\n                icon={<Text size=\"md\">{token.symbol}</Text>}\n                hideControls\n                value={token.amount}\n                onChange={(a: number) => handleAmountChange(a)}\n                min={0}\n                error={token.amount > token.allowance ? \"Insufficient allowance (\"+token.symbol+\" \"+token.allowance+\")\" : false}\n            />\n            <Group mt=\"xs\" position=\"left\">\n                <Text>Pool Balance:</Text>\n                <Text>{token.contractBalance.toLocaleString()}</Text>\n                <Text>{token.symbol}</Text>\n            </Group>\n            <Group mt=\"xs\" position=\"left\">\n                <Text>Account Balance:</Text>\n                <Text>{token.accountBalance.toLocaleString()}</Text>\n                <Text>{token.symbol}</Text>\n            </Group>\n        </Card>\n    );\n};\n\nexport default PayComponent;\n", "import { FC } from \"react\";\nimport {\n    Card,\n    Group,\n    NumberInput,\n    Text\n} from \"@mantine/core\";\n\nimport type { TokenComponentProps } from \"../TokenSelect\";\n\nconst ReceiveComponent: FC<TokenComponentProps> = (props: TokenComponentProps) => {\n    const { token, swapState, getQuote } = props;\n    const { poolToken, assetTokens } = swapState;\n\n    const handleAllocationChange = (allocation: number) => {\n        if (token.address === poolToken.address) {\n            poolToken.allocation = allocation / 100;\n        } else {\n            assetTokens[token.address].allocation = allocation / 100;\n        }\n        getQuote({ poolToken, assetTokens });\n    };\n\n    return (\n        <Card radius=\"md\" mt=\"xs\">\n            <input type=\"hidden\" name=\"receiveToken\" value={JSON.stringify(token)} />\n            <Text size=\"md\" mt=\"sm\" component=\"span\" color=\"dimmed\">\n                {token.symbol}\n            </Text>\n            <Text size=\"lg\" mt=\"sm\" component=\"span\" ml=\"md\">\n                {(-token.amount).toFixed(4)}\n            </Text>\n            <Group mt=\"xs\">\n                <Text\n                    component=\"span\"\n                    size=\"md\"\n                    styles={{ width: \"50%\" }}\n                >\n                    Allocation:\n                </Text>\n                <NumberInput\n                    precision={2}\n                    size=\"md\"\n                    value={100 * token.allocation}\n                    onChange={(a: number) => handleAllocationChange(a)}\n                    rightSection={<>%</>}\n                    styles={{ root: { width: \"50%\" } }}\n                    min={0}\n                />\n            </Group>\n            <Group mt=\"xs\" position=\"left\">\n                <Text>Pool Balance:</Text>\n                <Text>{token.contractBalance.toLocaleString()}</Text>\n                <Text>{token.symbol}</Text>\n            </Group>\n        </Card>\n    );\n};\n\nexport default ReceiveComponent;\n", "import { useState } from \"react\";\r\nimport type { FC } from \"react\";\r\nimport {\r\n    MultiSelect,\r\n    Paper,\r\n    SelectItem,\r\n    Title,\r\n} from \"@mantine/core\";\r\n\r\nimport type { AssetToken, Token } from \"~/moralis.server\";\r\nimport type { SwapState } from \"../../Swap\";\r\n\r\nimport TokenItem from \"./TokenItem\";\r\n\r\nexport type TokenComponentProps = {\r\n    token: Token\r\n    swapState: SwapState\r\n    getQuote: Function\r\n};\r\n\r\ntype TokenSelectProps = {\r\n    title: string\r\n    swapState: SwapState\r\n    getQuote: Function\r\n    tokenComponent: FC<TokenComponentProps>\r\n    isPay: boolean\r\n    placeholder: string\r\n};\r\n\r\nconst TokenSelect = (props: TokenSelectProps) => {\r\n    const {\r\n        title,\r\n        swapState,\r\n        getQuote,\r\n        tokenComponent,\r\n        isPay,\r\n        placeholder,\r\n    } = props;\r\n    const { poolToken, assetTokens } = swapState;\r\n    const [selected, setSelected] = useState<string[]>(\r\n        () => {\r\n            let selected: string[] = [];\r\n            if ((isPay && poolToken.selection == \"Pay\") || (!isPay && poolToken.selection == \"Receive\")) {\r\n                selected.push(poolToken.address);\r\n            };\r\n            Object.values(assetTokens).forEach(\r\n                (asset: AssetToken) => {\r\n                    if ((isPay && asset.selection == \"Pay\") || (!isPay && asset.selection == \"Receive\")) {\r\n                        selected.push(asset.address);\r\n                    };\r\n                }\r\n            );\r\n            return selected;\r\n        }\r\n    );\r\n\r\n    const TokenComponent: FC<TokenComponentProps> = tokenComponent;\r\n\r\n    const getItems = () => {\r\n        let items: SelectItem[] = [];\r\n        if ((isPay && poolToken.selection !== \"Receive\") || (!isPay && poolToken.selection !== \"Pay\")) {\r\n            items.push({\r\n                label: `${poolToken.name} (${poolToken.symbol})`,\r\n                value: poolToken.address,\r\n                token: poolToken,\r\n                group: \"Pool Token\"\r\n            })\r\n        };\r\n        items = items.concat(\r\n            Object.values(\r\n                assetTokens\r\n            ).filter(\r\n                (t: AssetToken) => isPay ? t.selection !== \"Receive\" : t.selection !== \"Pay\"\r\n            ).map((t: AssetToken) => {\r\n                return {\r\n                    label: `${t.name} (${t.symbol})`,\r\n                    value: t.address,\r\n                    token: t,\r\n                    group: t.contractBalance > 0 ? \"Asset Tokens\" : \"Not in Pool\",\r\n                    disabled: isPay && t.contractBalance == 0\r\n                }\r\n            })\r\n        );\r\n        return items;\r\n    };\r\n\r\n    const items: SelectItem[] = getItems();\r\n\r\n    const setToken = (v: string[], token: Token, totalAllocation: number) => {\r\n        if (isPay && v.includes(token.address)) {\r\n                token.selection = \"Pay\";\r\n                token.amount = token.amount == 0 ? 1 : token.amount;\r\n        } else if (!isPay && v.includes(token.address)) {\r\n                token.selection = \"Receive\";\r\n                token.allocation = token.allocation == 0 ? Math.max(0,1-totalAllocation) : Math.min(token.allocation,1-totalAllocation);\r\n         } else if ((isPay && token.selection == \"Pay\") || (!isPay && token.selection == \"Receive\")) {\r\n            token.selection = \"Neither\";\r\n            token.amount = 0;\r\n            token.allocation = 0;\r\n        };\r\n\r\n        return totalAllocation+token.allocation;\r\n    };\r\n\r\n    const handleSelect = ((v: string[]) => {\r\n        let totalAllocation = setToken(v,poolToken,0);\r\n\r\n        Object.values(assetTokens).forEach((asset: AssetToken) => {\r\n            totalAllocation = setToken(v,asset,totalAllocation);\r\n        });\r\n\r\n        getQuote({ poolToken, assetTokens });\r\n        setSelected(v);\r\n    });\r\n\r\n    return (\r\n        <Paper withBorder p=\"xl\" radius=\"md\" mt=\"lg\">\r\n            <Title order={4} align=\"center\">{title}</Title>\r\n            {\r\n                selected.includes(poolToken.address) ?\r\n                    <TokenComponent\r\n                        token={poolToken}\r\n                        swapState={swapState}\r\n                        getQuote={getQuote}\r\n                        key={poolToken.address}\r\n                    /> : null\r\n            }\r\n            {\r\n                Object.values(assetTokens)\r\n                    .filter((token: AssetToken) => isPay ? token.selection == \"Pay\" : token.selection == \"Receive\")\r\n                    .map((token: AssetToken, i: number) => {\r\n                        return (\r\n                            <TokenComponent\r\n                                token={token}\r\n                                swapState={swapState}\r\n                                getQuote={getQuote}\r\n                                key={token.address}\r\n                            />\r\n                        )\r\n                    })\r\n            }\r\n            <MultiSelect\r\n                data={items}\r\n                itemComponent={TokenItem}\r\n                value={selected}\r\n                onChange={handleSelect}\r\n                mt=\"xs\"\r\n                size=\"md\"\r\n                placeholder={placeholder}\r\n                searchable\r\n                nothingFound=\"Nothing found\"\r\n                clearable\r\n                clearButtonLabel=\"Clear selected tokens\"\r\n            />\r\n        </Paper >\r\n    );\r\n};\r\n\r\nexport default TokenSelect;\r\n", "import { forwardRef } from \"react\";\nimport {\n    Text,\n} from \"@mantine/core\";\n\nimport type { Token } from \"~/moralis.server\";\n\ntype TokenItemProps = {\n    label: string,\n    value: string,\n    token: Token\n};\n\nconst TokenItem = forwardRef<HTMLDivElement, TokenItemProps>(\n    ({ label, value, token, ...others }: TokenItemProps, ref) => {\n        return (\n            <div ref={ref} style={{ width: \"100%\" }} {...others}>\n                <span>\n                    <Text size=\"md\" color=\"bold\" component=\"span\">\n                        {`${token.name}`}\n                    </Text>\n                    <Text size=\"xs\" color=\"dimmed\" component=\"span\">\n                        {` (${token.symbol})`}\n                    </Text>\n                </span>\n            </div>\n        );\n    }\n);\n\nexport default TokenItem;\n"],
  "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",
  "names": []
}
