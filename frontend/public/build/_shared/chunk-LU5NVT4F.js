import {
  init_lib,
  init_web3auth_esm,
  lib_exports,
  require_aes,
  require_axios,
  require_enc_utf8,
  require_jsx_runtime,
  web3auth_esm_exports
} from "/build/_shared/chunk-JRUQFYTH.js";
import {
  require_dist
} from "/build/_shared/chunk-VJL6IW7N.js";
import {
  esm_browser_exports,
  init_esm_browser
} from "/build/_shared/chunk-Q4OQB5CY.js";
import {
  require_runtime
} from "/build/_shared/chunk-LT2KR7O7.js";
import {
  require_events
} from "/build/_shared/chunk-I33PHKBI.js";
import {
  __commonJS,
  __require,
  __toCommonJS,
  __toESM,
  init_react,
  require_react
} from "/build/_shared/chunk-6CGL4AQG.js";

// node_modules/core-js-pure/internals/global.js
var require_global = __commonJS({
  "node_modules/core-js-pure/internals/global.js"(exports, module) {
    init_react();
    var check = function(it) {
      return it && it.Math == Math && it;
    };
    module.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof globalThis == "object" && globalThis) || function() {
      return this;
    }() || Function("return this")();
  }
});

// node_modules/core-js-pure/internals/fails.js
var require_fails = __commonJS({
  "node_modules/core-js-pure/internals/fails.js"(exports, module) {
    init_react();
    module.exports = function(exec) {
      try {
        return !!exec();
      } catch (error) {
        return true;
      }
    };
  }
});

// node_modules/core-js-pure/internals/function-bind-native.js
var require_function_bind_native = __commonJS({
  "node_modules/core-js-pure/internals/function-bind-native.js"(exports, module) {
    init_react();
    var fails = require_fails();
    module.exports = !fails(function() {
      var test = function() {
      }.bind();
      return typeof test != "function" || test.hasOwnProperty("prototype");
    });
  }
});

// node_modules/core-js-pure/internals/function-apply.js
var require_function_apply = __commonJS({
  "node_modules/core-js-pure/internals/function-apply.js"(exports, module) {
    init_react();
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var apply = FunctionPrototype.apply;
    var call = FunctionPrototype.call;
    module.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
      return call.apply(apply, arguments);
    });
  }
});

// node_modules/core-js-pure/internals/function-uncurry-this.js
var require_function_uncurry_this = __commonJS({
  "node_modules/core-js-pure/internals/function-uncurry-this.js"(exports, module) {
    init_react();
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var bind = FunctionPrototype.bind;
    var call = FunctionPrototype.call;
    var uncurryThis = NATIVE_BIND && bind.bind(call, call);
    module.exports = NATIVE_BIND ? function(fn2) {
      return fn2 && uncurryThis(fn2);
    } : function(fn2) {
      return fn2 && function() {
        return call.apply(fn2, arguments);
      };
    };
  }
});

// node_modules/core-js-pure/internals/is-callable.js
var require_is_callable = __commonJS({
  "node_modules/core-js-pure/internals/is-callable.js"(exports, module) {
    init_react();
    module.exports = function(argument) {
      return typeof argument == "function";
    };
  }
});

// node_modules/core-js-pure/internals/descriptors.js
var require_descriptors = __commonJS({
  "node_modules/core-js-pure/internals/descriptors.js"(exports, module) {
    init_react();
    var fails = require_fails();
    module.exports = !fails(function() {
      return Object.defineProperty({}, 1, { get: function() {
        return 7;
      } })[1] != 7;
    });
  }
});

// node_modules/core-js-pure/internals/function-call.js
var require_function_call = __commonJS({
  "node_modules/core-js-pure/internals/function-call.js"(exports, module) {
    init_react();
    var NATIVE_BIND = require_function_bind_native();
    var call = Function.prototype.call;
    module.exports = NATIVE_BIND ? call.bind(call) : function() {
      return call.apply(call, arguments);
    };
  }
});

// node_modules/core-js-pure/internals/object-property-is-enumerable.js
var require_object_property_is_enumerable = __commonJS({
  "node_modules/core-js-pure/internals/object-property-is-enumerable.js"(exports) {
    "use strict";
    init_react();
    var $propertyIsEnumerable = {}.propertyIsEnumerable;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
    exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
      var descriptor = getOwnPropertyDescriptor(this, V);
      return !!descriptor && descriptor.enumerable;
    } : $propertyIsEnumerable;
  }
});

// node_modules/core-js-pure/internals/create-property-descriptor.js
var require_create_property_descriptor = __commonJS({
  "node_modules/core-js-pure/internals/create-property-descriptor.js"(exports, module) {
    init_react();
    module.exports = function(bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value
      };
    };
  }
});

// node_modules/core-js-pure/internals/classof-raw.js
var require_classof_raw = __commonJS({
  "node_modules/core-js-pure/internals/classof-raw.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var toString2 = uncurryThis({}.toString);
    var stringSlice = uncurryThis("".slice);
    module.exports = function(it) {
      return stringSlice(toString2(it), 8, -1);
    };
  }
});

// node_modules/core-js-pure/internals/indexed-object.js
var require_indexed_object = __commonJS({
  "node_modules/core-js-pure/internals/indexed-object.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var classof = require_classof_raw();
    var Object2 = global2.Object;
    var split = uncurryThis("".split);
    module.exports = fails(function() {
      return !Object2("z").propertyIsEnumerable(0);
    }) ? function(it) {
      return classof(it) == "String" ? split(it, "") : Object2(it);
    } : Object2;
  }
});

// node_modules/core-js-pure/internals/require-object-coercible.js
var require_require_object_coercible = __commonJS({
  "node_modules/core-js-pure/internals/require-object-coercible.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var TypeError2 = global2.TypeError;
    module.exports = function(it) {
      if (it == void 0)
        throw TypeError2("Can't call method on " + it);
      return it;
    };
  }
});

// node_modules/core-js-pure/internals/to-indexed-object.js
var require_to_indexed_object = __commonJS({
  "node_modules/core-js-pure/internals/to-indexed-object.js"(exports, module) {
    init_react();
    var IndexedObject = require_indexed_object();
    var requireObjectCoercible = require_require_object_coercible();
    module.exports = function(it) {
      return IndexedObject(requireObjectCoercible(it));
    };
  }
});

// node_modules/core-js-pure/internals/is-object.js
var require_is_object = __commonJS({
  "node_modules/core-js-pure/internals/is-object.js"(exports, module) {
    init_react();
    var isCallable = require_is_callable();
    module.exports = function(it) {
      return typeof it == "object" ? it !== null : isCallable(it);
    };
  }
});

// node_modules/core-js-pure/internals/path.js
var require_path = __commonJS({
  "node_modules/core-js-pure/internals/path.js"(exports, module) {
    init_react();
    module.exports = {};
  }
});

// node_modules/core-js-pure/internals/get-built-in.js
var require_get_built_in = __commonJS({
  "node_modules/core-js-pure/internals/get-built-in.js"(exports, module) {
    init_react();
    var path = require_path();
    var global2 = require_global();
    var isCallable = require_is_callable();
    var aFunction = function(variable) {
      return isCallable(variable) ? variable : void 0;
    };
    module.exports = function(namespace, method) {
      return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global2[namespace]) : path[namespace] && path[namespace][method] || global2[namespace] && global2[namespace][method];
    };
  }
});

// node_modules/core-js-pure/internals/object-is-prototype-of.js
var require_object_is_prototype_of = __commonJS({
  "node_modules/core-js-pure/internals/object-is-prototype-of.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    module.exports = uncurryThis({}.isPrototypeOf);
  }
});

// node_modules/core-js-pure/internals/engine-user-agent.js
var require_engine_user_agent = __commonJS({
  "node_modules/core-js-pure/internals/engine-user-agent.js"(exports, module) {
    init_react();
    var getBuiltIn = require_get_built_in();
    module.exports = getBuiltIn("navigator", "userAgent") || "";
  }
});

// node_modules/core-js-pure/internals/engine-v8-version.js
var require_engine_v8_version = __commonJS({
  "node_modules/core-js-pure/internals/engine-v8-version.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var userAgent = require_engine_user_agent();
    var process2 = global2.process;
    var Deno = global2.Deno;
    var versions = process2 && process2.versions || Deno && Deno.version;
    var v8 = versions && versions.v8;
    var match;
    var version;
    if (v8) {
      match = v8.split(".");
      version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
    }
    if (!version && userAgent) {
      match = userAgent.match(/Edge\/(\d+)/);
      if (!match || match[1] >= 74) {
        match = userAgent.match(/Chrome\/(\d+)/);
        if (match)
          version = +match[1];
      }
    }
    module.exports = version;
  }
});

// node_modules/core-js-pure/internals/native-symbol.js
var require_native_symbol = __commonJS({
  "node_modules/core-js-pure/internals/native-symbol.js"(exports, module) {
    init_react();
    var V8_VERSION = require_engine_v8_version();
    var fails = require_fails();
    module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
      var symbol = Symbol();
      return !String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
    });
  }
});

// node_modules/core-js-pure/internals/use-symbol-as-uid.js
var require_use_symbol_as_uid = __commonJS({
  "node_modules/core-js-pure/internals/use-symbol-as-uid.js"(exports, module) {
    init_react();
    var NATIVE_SYMBOL = require_native_symbol();
    module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
  }
});

// node_modules/core-js-pure/internals/is-symbol.js
var require_is_symbol = __commonJS({
  "node_modules/core-js-pure/internals/is-symbol.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var getBuiltIn = require_get_built_in();
    var isCallable = require_is_callable();
    var isPrototypeOf = require_object_is_prototype_of();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var Object2 = global2.Object;
    module.exports = USE_SYMBOL_AS_UID ? function(it) {
      return typeof it == "symbol";
    } : function(it) {
      var $Symbol = getBuiltIn("Symbol");
      return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object2(it));
    };
  }
});

// node_modules/core-js-pure/internals/try-to-string.js
var require_try_to_string = __commonJS({
  "node_modules/core-js-pure/internals/try-to-string.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var String2 = global2.String;
    module.exports = function(argument) {
      try {
        return String2(argument);
      } catch (error) {
        return "Object";
      }
    };
  }
});

// node_modules/core-js-pure/internals/a-callable.js
var require_a_callable = __commonJS({
  "node_modules/core-js-pure/internals/a-callable.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isCallable = require_is_callable();
    var tryToString = require_try_to_string();
    var TypeError2 = global2.TypeError;
    module.exports = function(argument) {
      if (isCallable(argument))
        return argument;
      throw TypeError2(tryToString(argument) + " is not a function");
    };
  }
});

// node_modules/core-js-pure/internals/get-method.js
var require_get_method = __commonJS({
  "node_modules/core-js-pure/internals/get-method.js"(exports, module) {
    init_react();
    var aCallable = require_a_callable();
    module.exports = function(V, P2) {
      var func = V[P2];
      return func == null ? void 0 : aCallable(func);
    };
  }
});

// node_modules/core-js-pure/internals/ordinary-to-primitive.js
var require_ordinary_to_primitive = __commonJS({
  "node_modules/core-js-pure/internals/ordinary-to-primitive.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var call = require_function_call();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var TypeError2 = global2.TypeError;
    module.exports = function(input, pref) {
      var fn2, val;
      if (pref === "string" && isCallable(fn2 = input.toString) && !isObject(val = call(fn2, input)))
        return val;
      if (isCallable(fn2 = input.valueOf) && !isObject(val = call(fn2, input)))
        return val;
      if (pref !== "string" && isCallable(fn2 = input.toString) && !isObject(val = call(fn2, input)))
        return val;
      throw TypeError2("Can't convert object to primitive value");
    };
  }
});

// node_modules/core-js-pure/internals/is-pure.js
var require_is_pure = __commonJS({
  "node_modules/core-js-pure/internals/is-pure.js"(exports, module) {
    init_react();
    module.exports = true;
  }
});

// node_modules/core-js-pure/internals/set-global.js
var require_set_global = __commonJS({
  "node_modules/core-js-pure/internals/set-global.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var defineProperty = Object.defineProperty;
    module.exports = function(key, value) {
      try {
        defineProperty(global2, key, { value, configurable: true, writable: true });
      } catch (error) {
        global2[key] = value;
      }
      return value;
    };
  }
});

// node_modules/core-js-pure/internals/shared-store.js
var require_shared_store = __commonJS({
  "node_modules/core-js-pure/internals/shared-store.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var setGlobal = require_set_global();
    var SHARED = "__core-js_shared__";
    var store = global2[SHARED] || setGlobal(SHARED, {});
    module.exports = store;
  }
});

// node_modules/core-js-pure/internals/shared.js
var require_shared = __commonJS({
  "node_modules/core-js-pure/internals/shared.js"(exports, module) {
    init_react();
    var IS_PURE = require_is_pure();
    var store = require_shared_store();
    (module.exports = function(key, value) {
      return store[key] || (store[key] = value !== void 0 ? value : {});
    })("versions", []).push({
      version: "3.21.1",
      mode: IS_PURE ? "pure" : "global",
      copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",
      license: "https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",
      source: "https://github.com/zloirock/core-js"
    });
  }
});

// node_modules/core-js-pure/internals/to-object.js
var require_to_object = __commonJS({
  "node_modules/core-js-pure/internals/to-object.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var requireObjectCoercible = require_require_object_coercible();
    var Object2 = global2.Object;
    module.exports = function(argument) {
      return Object2(requireObjectCoercible(argument));
    };
  }
});

// node_modules/core-js-pure/internals/has-own-property.js
var require_has_own_property = __commonJS({
  "node_modules/core-js-pure/internals/has-own-property.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var toObject = require_to_object();
    var hasOwnProperty = uncurryThis({}.hasOwnProperty);
    module.exports = Object.hasOwn || function hasOwn(it, key) {
      return hasOwnProperty(toObject(it), key);
    };
  }
});

// node_modules/core-js-pure/internals/uid.js
var require_uid = __commonJS({
  "node_modules/core-js-pure/internals/uid.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var id = 0;
    var postfix = Math.random();
    var toString2 = uncurryThis(1 .toString);
    module.exports = function(key) {
      return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString2(++id + postfix, 36);
    };
  }
});

// node_modules/core-js-pure/internals/well-known-symbol.js
var require_well_known_symbol = __commonJS({
  "node_modules/core-js-pure/internals/well-known-symbol.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var shared = require_shared();
    var hasOwn = require_has_own_property();
    var uid = require_uid();
    var NATIVE_SYMBOL = require_native_symbol();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var WellKnownSymbolsStore = shared("wks");
    var Symbol2 = global2.Symbol;
    var symbolFor = Symbol2 && Symbol2["for"];
    var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
    module.exports = function(name) {
      if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == "string")) {
        var description = "Symbol." + name;
        if (NATIVE_SYMBOL && hasOwn(Symbol2, name)) {
          WellKnownSymbolsStore[name] = Symbol2[name];
        } else if (USE_SYMBOL_AS_UID && symbolFor) {
          WellKnownSymbolsStore[name] = symbolFor(description);
        } else {
          WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
        }
      }
      return WellKnownSymbolsStore[name];
    };
  }
});

// node_modules/core-js-pure/internals/to-primitive.js
var require_to_primitive = __commonJS({
  "node_modules/core-js-pure/internals/to-primitive.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var call = require_function_call();
    var isObject = require_is_object();
    var isSymbol = require_is_symbol();
    var getMethod = require_get_method();
    var ordinaryToPrimitive = require_ordinary_to_primitive();
    var wellKnownSymbol = require_well_known_symbol();
    var TypeError2 = global2.TypeError;
    var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
    module.exports = function(input, pref) {
      if (!isObject(input) || isSymbol(input))
        return input;
      var exoticToPrim = getMethod(input, TO_PRIMITIVE);
      var result;
      if (exoticToPrim) {
        if (pref === void 0)
          pref = "default";
        result = call(exoticToPrim, input, pref);
        if (!isObject(result) || isSymbol(result))
          return result;
        throw TypeError2("Can't convert object to primitive value");
      }
      if (pref === void 0)
        pref = "number";
      return ordinaryToPrimitive(input, pref);
    };
  }
});

// node_modules/core-js-pure/internals/to-property-key.js
var require_to_property_key = __commonJS({
  "node_modules/core-js-pure/internals/to-property-key.js"(exports, module) {
    init_react();
    var toPrimitive = require_to_primitive();
    var isSymbol = require_is_symbol();
    module.exports = function(argument) {
      var key = toPrimitive(argument, "string");
      return isSymbol(key) ? key : key + "";
    };
  }
});

// node_modules/core-js-pure/internals/document-create-element.js
var require_document_create_element = __commonJS({
  "node_modules/core-js-pure/internals/document-create-element.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isObject = require_is_object();
    var document2 = global2.document;
    var EXISTS = isObject(document2) && isObject(document2.createElement);
    module.exports = function(it) {
      return EXISTS ? document2.createElement(it) : {};
    };
  }
});

// node_modules/core-js-pure/internals/ie8-dom-define.js
var require_ie8_dom_define = __commonJS({
  "node_modules/core-js-pure/internals/ie8-dom-define.js"(exports, module) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    var createElement = require_document_create_element();
    module.exports = !DESCRIPTORS && !fails(function() {
      return Object.defineProperty(createElement("div"), "a", {
        get: function() {
          return 7;
        }
      }).a != 7;
    });
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-descriptor.js
var require_object_get_own_property_descriptor = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-descriptor.js"(exports) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var call = require_function_call();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var createPropertyDescriptor = require_create_property_descriptor();
    var toIndexedObject = require_to_indexed_object();
    var toPropertyKey = require_to_property_key();
    var hasOwn = require_has_own_property();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O2, P2) {
      O2 = toIndexedObject(O2);
      P2 = toPropertyKey(P2);
      if (IE8_DOM_DEFINE)
        try {
          return $getOwnPropertyDescriptor(O2, P2);
        } catch (error) {
        }
      if (hasOwn(O2, P2))
        return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O2, P2), O2[P2]);
    };
  }
});

// node_modules/core-js-pure/internals/is-forced.js
var require_is_forced = __commonJS({
  "node_modules/core-js-pure/internals/is-forced.js"(exports, module) {
    init_react();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var replacement = /#|\.prototype\./;
    var isForced = function(feature, detection) {
      var value = data[normalize(feature)];
      return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
    };
    var normalize = isForced.normalize = function(string) {
      return String(string).replace(replacement, ".").toLowerCase();
    };
    var data = isForced.data = {};
    var NATIVE = isForced.NATIVE = "N";
    var POLYFILL = isForced.POLYFILL = "P";
    module.exports = isForced;
  }
});

// node_modules/core-js-pure/internals/function-bind-context.js
var require_function_bind_context = __commonJS({
  "node_modules/core-js-pure/internals/function-bind-context.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var NATIVE_BIND = require_function_bind_native();
    var bind = uncurryThis(uncurryThis.bind);
    module.exports = function(fn2, that) {
      aCallable(fn2);
      return that === void 0 ? fn2 : NATIVE_BIND ? bind(fn2, that) : function() {
        return fn2.apply(that, arguments);
      };
    };
  }
});

// node_modules/core-js-pure/internals/v8-prototype-define-bug.js
var require_v8_prototype_define_bug = __commonJS({
  "node_modules/core-js-pure/internals/v8-prototype-define-bug.js"(exports, module) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    module.exports = DESCRIPTORS && fails(function() {
      return Object.defineProperty(function() {
      }, "prototype", {
        value: 42,
        writable: false
      }).prototype != 42;
    });
  }
});

// node_modules/core-js-pure/internals/an-object.js
var require_an_object = __commonJS({
  "node_modules/core-js-pure/internals/an-object.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isObject = require_is_object();
    var String2 = global2.String;
    var TypeError2 = global2.TypeError;
    module.exports = function(argument) {
      if (isObject(argument))
        return argument;
      throw TypeError2(String2(argument) + " is not an object");
    };
  }
});

// node_modules/core-js-pure/internals/object-define-property.js
var require_object_define_property = __commonJS({
  "node_modules/core-js-pure/internals/object-define-property.js"(exports) {
    init_react();
    var global2 = require_global();
    var DESCRIPTORS = require_descriptors();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var anObject = require_an_object();
    var toPropertyKey = require_to_property_key();
    var TypeError2 = global2.TypeError;
    var $defineProperty = Object.defineProperty;
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var ENUMERABLE = "enumerable";
    var CONFIGURABLE = "configurable";
    var WRITABLE = "writable";
    exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O2, P2, Attributes) {
      anObject(O2);
      P2 = toPropertyKey(P2);
      anObject(Attributes);
      if (typeof O2 === "function" && P2 === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
        var current = $getOwnPropertyDescriptor(O2, P2);
        if (current && current[WRITABLE]) {
          O2[P2] = Attributes.value;
          Attributes = {
            configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
            enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
            writable: false
          };
        }
      }
      return $defineProperty(O2, P2, Attributes);
    } : $defineProperty : function defineProperty(O2, P2, Attributes) {
      anObject(O2);
      P2 = toPropertyKey(P2);
      anObject(Attributes);
      if (IE8_DOM_DEFINE)
        try {
          return $defineProperty(O2, P2, Attributes);
        } catch (error) {
        }
      if ("get" in Attributes || "set" in Attributes)
        throw TypeError2("Accessors not supported");
      if ("value" in Attributes)
        O2[P2] = Attributes.value;
      return O2;
    };
  }
});

// node_modules/core-js-pure/internals/create-non-enumerable-property.js
var require_create_non_enumerable_property = __commonJS({
  "node_modules/core-js-pure/internals/create-non-enumerable-property.js"(exports, module) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module.exports = DESCRIPTORS ? function(object, key, value) {
      return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
    } : function(object, key, value) {
      object[key] = value;
      return object;
    };
  }
});

// node_modules/core-js-pure/internals/export.js
var require_export = __commonJS({
  "node_modules/core-js-pure/internals/export.js"(exports, module) {
    "use strict";
    init_react();
    var global2 = require_global();
    var apply = require_function_apply();
    var uncurryThis = require_function_uncurry_this();
    var isCallable = require_is_callable();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var isForced = require_is_forced();
    var path = require_path();
    var bind = require_function_bind_context();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var wrapConstructor = function(NativeConstructor) {
      var Wrapper = function(a2, b2, c2) {
        if (this instanceof Wrapper) {
          switch (arguments.length) {
            case 0:
              return new NativeConstructor();
            case 1:
              return new NativeConstructor(a2);
            case 2:
              return new NativeConstructor(a2, b2);
          }
          return new NativeConstructor(a2, b2, c2);
        }
        return apply(NativeConstructor, this, arguments);
      };
      Wrapper.prototype = NativeConstructor.prototype;
      return Wrapper;
    };
    module.exports = function(options, source) {
      var TARGET = options.target;
      var GLOBAL = options.global;
      var STATIC = options.stat;
      var PROTO = options.proto;
      var nativeSource = GLOBAL ? global2 : STATIC ? global2[TARGET] : (global2[TARGET] || {}).prototype;
      var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];
      var targetPrototype = target.prototype;
      var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
      var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
      for (key in source) {
        FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
        USE_NATIVE = !FORCED && nativeSource && hasOwn(nativeSource, key);
        targetProperty = target[key];
        if (USE_NATIVE)
          if (options.noTargetGet) {
            descriptor = getOwnPropertyDescriptor(nativeSource, key);
            nativeProperty = descriptor && descriptor.value;
          } else
            nativeProperty = nativeSource[key];
        sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
        if (USE_NATIVE && typeof targetProperty == typeof sourceProperty)
          continue;
        if (options.bind && USE_NATIVE)
          resultProperty = bind(sourceProperty, global2);
        else if (options.wrap && USE_NATIVE)
          resultProperty = wrapConstructor(sourceProperty);
        else if (PROTO && isCallable(sourceProperty))
          resultProperty = uncurryThis(sourceProperty);
        else
          resultProperty = sourceProperty;
        if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
          createNonEnumerableProperty(resultProperty, "sham", true);
        }
        createNonEnumerableProperty(target, key, resultProperty);
        if (PROTO) {
          VIRTUAL_PROTOTYPE = TARGET + "Prototype";
          if (!hasOwn(path, VIRTUAL_PROTOTYPE)) {
            createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
          }
          createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key, sourceProperty);
          if (options.real && targetPrototype && !targetPrototype[key]) {
            createNonEnumerableProperty(targetPrototype, key, sourceProperty);
          }
        }
      }
    };
  }
});

// node_modules/core-js-pure/internals/is-array.js
var require_is_array = __commonJS({
  "node_modules/core-js-pure/internals/is-array.js"(exports, module) {
    init_react();
    var classof = require_classof_raw();
    module.exports = Array.isArray || function isArray(argument) {
      return classof(argument) == "Array";
    };
  }
});

// node_modules/core-js-pure/internals/to-integer-or-infinity.js
var require_to_integer_or_infinity = __commonJS({
  "node_modules/core-js-pure/internals/to-integer-or-infinity.js"(exports, module) {
    init_react();
    var ceil = Math.ceil;
    var floor = Math.floor;
    module.exports = function(argument) {
      var number = +argument;
      return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
    };
  }
});

// node_modules/core-js-pure/internals/to-length.js
var require_to_length = __commonJS({
  "node_modules/core-js-pure/internals/to-length.js"(exports, module) {
    init_react();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var min = Math.min;
    module.exports = function(argument) {
      return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
    };
  }
});

// node_modules/core-js-pure/internals/length-of-array-like.js
var require_length_of_array_like = __commonJS({
  "node_modules/core-js-pure/internals/length-of-array-like.js"(exports, module) {
    init_react();
    var toLength = require_to_length();
    module.exports = function(obj) {
      return toLength(obj.length);
    };
  }
});

// node_modules/core-js-pure/internals/create-property.js
var require_create_property = __commonJS({
  "node_modules/core-js-pure/internals/create-property.js"(exports, module) {
    "use strict";
    init_react();
    var toPropertyKey = require_to_property_key();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module.exports = function(object, key, value) {
      var propertyKey = toPropertyKey(key);
      if (propertyKey in object)
        definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
      else
        object[propertyKey] = value;
    };
  }
});

// node_modules/core-js-pure/internals/to-string-tag-support.js
var require_to_string_tag_support = __commonJS({
  "node_modules/core-js-pure/internals/to-string-tag-support.js"(exports, module) {
    init_react();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var test = {};
    test[TO_STRING_TAG] = "z";
    module.exports = String(test) === "[object z]";
  }
});

// node_modules/core-js-pure/internals/classof.js
var require_classof = __commonJS({
  "node_modules/core-js-pure/internals/classof.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var isCallable = require_is_callable();
    var classofRaw = require_classof_raw();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var Object2 = global2.Object;
    var CORRECT_ARGUMENTS = classofRaw(function() {
      return arguments;
    }()) == "Arguments";
    var tryGet = function(it, key) {
      try {
        return it[key];
      } catch (error) {
      }
    };
    module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
      var O2, tag, result;
      return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O2 = Object2(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O2) : (result = classofRaw(O2)) == "Object" && isCallable(O2.callee) ? "Arguments" : result;
    };
  }
});

// node_modules/core-js-pure/internals/inspect-source.js
var require_inspect_source = __commonJS({
  "node_modules/core-js-pure/internals/inspect-source.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var isCallable = require_is_callable();
    var store = require_shared_store();
    var functionToString = uncurryThis(Function.toString);
    if (!isCallable(store.inspectSource)) {
      store.inspectSource = function(it) {
        return functionToString(it);
      };
    }
    module.exports = store.inspectSource;
  }
});

// node_modules/core-js-pure/internals/is-constructor.js
var require_is_constructor = __commonJS({
  "node_modules/core-js-pure/internals/is-constructor.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var classof = require_classof();
    var getBuiltIn = require_get_built_in();
    var inspectSource = require_inspect_source();
    var noop = function() {
    };
    var empty = [];
    var construct = getBuiltIn("Reflect", "construct");
    var constructorRegExp = /^\s*(?:class|function)\b/;
    var exec = uncurryThis(constructorRegExp.exec);
    var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
    var isConstructorModern = function isConstructor(argument) {
      if (!isCallable(argument))
        return false;
      try {
        construct(noop, empty, argument);
        return true;
      } catch (error) {
        return false;
      }
    };
    var isConstructorLegacy = function isConstructor(argument) {
      if (!isCallable(argument))
        return false;
      switch (classof(argument)) {
        case "AsyncFunction":
        case "GeneratorFunction":
        case "AsyncGeneratorFunction":
          return false;
      }
      try {
        return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
      } catch (error) {
        return true;
      }
    };
    isConstructorLegacy.sham = true;
    module.exports = !construct || fails(function() {
      var called;
      return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
        called = true;
      }) || called;
    }) ? isConstructorLegacy : isConstructorModern;
  }
});

// node_modules/core-js-pure/internals/array-species-constructor.js
var require_array_species_constructor = __commonJS({
  "node_modules/core-js-pure/internals/array-species-constructor.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isArray = require_is_array();
    var isConstructor = require_is_constructor();
    var isObject = require_is_object();
    var wellKnownSymbol = require_well_known_symbol();
    var SPECIES = wellKnownSymbol("species");
    var Array2 = global2.Array;
    module.exports = function(originalArray) {
      var C;
      if (isArray(originalArray)) {
        C = originalArray.constructor;
        if (isConstructor(C) && (C === Array2 || isArray(C.prototype)))
          C = void 0;
        else if (isObject(C)) {
          C = C[SPECIES];
          if (C === null)
            C = void 0;
        }
      }
      return C === void 0 ? Array2 : C;
    };
  }
});

// node_modules/core-js-pure/internals/array-species-create.js
var require_array_species_create = __commonJS({
  "node_modules/core-js-pure/internals/array-species-create.js"(exports, module) {
    init_react();
    var arraySpeciesConstructor = require_array_species_constructor();
    module.exports = function(originalArray, length) {
      return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
    };
  }
});

// node_modules/core-js-pure/internals/array-method-has-species-support.js
var require_array_method_has_species_support = __commonJS({
  "node_modules/core-js-pure/internals/array-method-has-species-support.js"(exports, module) {
    init_react();
    var fails = require_fails();
    var wellKnownSymbol = require_well_known_symbol();
    var V8_VERSION = require_engine_v8_version();
    var SPECIES = wellKnownSymbol("species");
    module.exports = function(METHOD_NAME) {
      return V8_VERSION >= 51 || !fails(function() {
        var array = [];
        var constructor = array.constructor = {};
        constructor[SPECIES] = function() {
          return { foo: 1 };
        };
        return array[METHOD_NAME](Boolean).foo !== 1;
      });
    };
  }
});

// node_modules/core-js-pure/modules/es.array.concat.js
var require_es_array_concat = __commonJS({
  "node_modules/core-js-pure/modules/es.array.concat.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var fails = require_fails();
    var isArray = require_is_array();
    var isObject = require_is_object();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var createProperty = require_create_property();
    var arraySpeciesCreate = require_array_species_create();
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var wellKnownSymbol = require_well_known_symbol();
    var V8_VERSION = require_engine_v8_version();
    var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAXIMUM_ALLOWED_INDEX_EXCEEDED = "Maximum allowed index exceeded";
    var TypeError2 = global2.TypeError;
    var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
      var array = [];
      array[IS_CONCAT_SPREADABLE] = false;
      return array.concat()[0] !== array;
    });
    var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");
    var isConcatSpreadable = function(O2) {
      if (!isObject(O2))
        return false;
      var spreadable = O2[IS_CONCAT_SPREADABLE];
      return spreadable !== void 0 ? !!spreadable : isArray(O2);
    };
    var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
    $({ target: "Array", proto: true, forced: FORCED }, {
      concat: function concat(arg) {
        var O2 = toObject(this);
        var A2 = arraySpeciesCreate(O2, 0);
        var n2 = 0;
        var i2, k2, length, len, E2;
        for (i2 = -1, length = arguments.length; i2 < length; i2++) {
          E2 = i2 === -1 ? O2 : arguments[i2];
          if (isConcatSpreadable(E2)) {
            len = lengthOfArrayLike(E2);
            if (n2 + len > MAX_SAFE_INTEGER)
              throw TypeError2(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
            for (k2 = 0; k2 < len; k2++, n2++)
              if (k2 in E2)
                createProperty(A2, n2, E2[k2]);
          } else {
            if (n2 >= MAX_SAFE_INTEGER)
              throw TypeError2(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
            createProperty(A2, n2++, E2);
          }
        }
        A2.length = n2;
        return A2;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.object.to-string.js
var require_es_object_to_string = __commonJS({
  "node_modules/core-js-pure/modules/es.object.to-string.js"() {
    init_react();
  }
});

// node_modules/core-js-pure/internals/to-string.js
var require_to_string = __commonJS({
  "node_modules/core-js-pure/internals/to-string.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var classof = require_classof();
    var String2 = global2.String;
    module.exports = function(argument) {
      if (classof(argument) === "Symbol")
        throw TypeError("Cannot convert a Symbol value to a string");
      return String2(argument);
    };
  }
});

// node_modules/core-js-pure/internals/to-absolute-index.js
var require_to_absolute_index = __commonJS({
  "node_modules/core-js-pure/internals/to-absolute-index.js"(exports, module) {
    init_react();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var max = Math.max;
    var min = Math.min;
    module.exports = function(index, length) {
      var integer = toIntegerOrInfinity(index);
      return integer < 0 ? max(integer + length, 0) : min(integer, length);
    };
  }
});

// node_modules/core-js-pure/internals/array-includes.js
var require_array_includes = __commonJS({
  "node_modules/core-js-pure/internals/array-includes.js"(exports, module) {
    init_react();
    var toIndexedObject = require_to_indexed_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var createMethod = function(IS_INCLUDES) {
      return function($this, el, fromIndex) {
        var O2 = toIndexedObject($this);
        var length = lengthOfArrayLike(O2);
        var index = toAbsoluteIndex(fromIndex, length);
        var value;
        if (IS_INCLUDES && el != el)
          while (length > index) {
            value = O2[index++];
            if (value != value)
              return true;
          }
        else
          for (; length > index; index++) {
            if ((IS_INCLUDES || index in O2) && O2[index] === el)
              return IS_INCLUDES || index || 0;
          }
        return !IS_INCLUDES && -1;
      };
    };
    module.exports = {
      includes: createMethod(true),
      indexOf: createMethod(false)
    };
  }
});

// node_modules/core-js-pure/internals/hidden-keys.js
var require_hidden_keys = __commonJS({
  "node_modules/core-js-pure/internals/hidden-keys.js"(exports, module) {
    init_react();
    module.exports = {};
  }
});

// node_modules/core-js-pure/internals/object-keys-internal.js
var require_object_keys_internal = __commonJS({
  "node_modules/core-js-pure/internals/object-keys-internal.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var hasOwn = require_has_own_property();
    var toIndexedObject = require_to_indexed_object();
    var indexOf = require_array_includes().indexOf;
    var hiddenKeys = require_hidden_keys();
    var push = uncurryThis([].push);
    module.exports = function(object, names) {
      var O2 = toIndexedObject(object);
      var i2 = 0;
      var result = [];
      var key;
      for (key in O2)
        !hasOwn(hiddenKeys, key) && hasOwn(O2, key) && push(result, key);
      while (names.length > i2)
        if (hasOwn(O2, key = names[i2++])) {
          ~indexOf(result, key) || push(result, key);
        }
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/enum-bug-keys.js
var require_enum_bug_keys = __commonJS({
  "node_modules/core-js-pure/internals/enum-bug-keys.js"(exports, module) {
    init_react();
    module.exports = [
      "constructor",
      "hasOwnProperty",
      "isPrototypeOf",
      "propertyIsEnumerable",
      "toLocaleString",
      "toString",
      "valueOf"
    ];
  }
});

// node_modules/core-js-pure/internals/object-keys.js
var require_object_keys = __commonJS({
  "node_modules/core-js-pure/internals/object-keys.js"(exports, module) {
    init_react();
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    module.exports = Object.keys || function keys(O2) {
      return internalObjectKeys(O2, enumBugKeys);
    };
  }
});

// node_modules/core-js-pure/internals/object-define-properties.js
var require_object_define_properties = __commonJS({
  "node_modules/core-js-pure/internals/object-define-properties.js"(exports) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var definePropertyModule = require_object_define_property();
    var anObject = require_an_object();
    var toIndexedObject = require_to_indexed_object();
    var objectKeys = require_object_keys();
    exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O2, Properties) {
      anObject(O2);
      var props = toIndexedObject(Properties);
      var keys = objectKeys(Properties);
      var length = keys.length;
      var index = 0;
      var key;
      while (length > index)
        definePropertyModule.f(O2, key = keys[index++], props[key]);
      return O2;
    };
  }
});

// node_modules/core-js-pure/internals/html.js
var require_html = __commonJS({
  "node_modules/core-js-pure/internals/html.js"(exports, module) {
    init_react();
    var getBuiltIn = require_get_built_in();
    module.exports = getBuiltIn("document", "documentElement");
  }
});

// node_modules/core-js-pure/internals/shared-key.js
var require_shared_key = __commonJS({
  "node_modules/core-js-pure/internals/shared-key.js"(exports, module) {
    init_react();
    var shared = require_shared();
    var uid = require_uid();
    var keys = shared("keys");
    module.exports = function(key) {
      return keys[key] || (keys[key] = uid(key));
    };
  }
});

// node_modules/core-js-pure/internals/object-create.js
var require_object_create = __commonJS({
  "node_modules/core-js-pure/internals/object-create.js"(exports, module) {
    init_react();
    var anObject = require_an_object();
    var definePropertiesModule = require_object_define_properties();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = require_hidden_keys();
    var html = require_html();
    var documentCreateElement = require_document_create_element();
    var sharedKey = require_shared_key();
    var GT = ">";
    var LT = "<";
    var PROTOTYPE = "prototype";
    var SCRIPT = "script";
    var IE_PROTO = sharedKey("IE_PROTO");
    var EmptyConstructor = function() {
    };
    var scriptTag = function(content) {
      return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
    };
    var NullProtoObjectViaActiveX = function(activeXDocument2) {
      activeXDocument2.write(scriptTag(""));
      activeXDocument2.close();
      var temp = activeXDocument2.parentWindow.Object;
      activeXDocument2 = null;
      return temp;
    };
    var NullProtoObjectViaIFrame = function() {
      var iframe = documentCreateElement("iframe");
      var JS = "java" + SCRIPT + ":";
      var iframeDocument;
      iframe.style.display = "none";
      html.appendChild(iframe);
      iframe.src = String(JS);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(scriptTag("document.F=Object"));
      iframeDocument.close();
      return iframeDocument.F;
    };
    var activeXDocument;
    var NullProtoObject = function() {
      try {
        activeXDocument = new ActiveXObject("htmlfile");
      } catch (error) {
      }
      NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
      var length = enumBugKeys.length;
      while (length--)
        delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
      return NullProtoObject();
    };
    hiddenKeys[IE_PROTO] = true;
    module.exports = Object.create || function create(O2, Properties) {
      var result;
      if (O2 !== null) {
        EmptyConstructor[PROTOTYPE] = anObject(O2);
        result = new EmptyConstructor();
        EmptyConstructor[PROTOTYPE] = null;
        result[IE_PROTO] = O2;
      } else
        result = NullProtoObject();
      return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
    };
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-names.js
var require_object_get_own_property_names = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-names.js"(exports) {
    init_react();
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = enumBugKeys.concat("length", "prototype");
    exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O2) {
      return internalObjectKeys(O2, hiddenKeys);
    };
  }
});

// node_modules/core-js-pure/internals/array-slice-simple.js
var require_array_slice_simple = __commonJS({
  "node_modules/core-js-pure/internals/array-slice-simple.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var createProperty = require_create_property();
    var Array2 = global2.Array;
    var max = Math.max;
    module.exports = function(O2, start, end) {
      var length = lengthOfArrayLike(O2);
      var k2 = toAbsoluteIndex(start, length);
      var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
      var result = Array2(max(fin - k2, 0));
      for (var n2 = 0; k2 < fin; k2++, n2++)
        createProperty(result, n2, O2[k2]);
      result.length = n2;
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-names-external.js
var require_object_get_own_property_names_external = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-names-external.js"(exports, module) {
    init_react();
    var classof = require_classof_raw();
    var toIndexedObject = require_to_indexed_object();
    var $getOwnPropertyNames = require_object_get_own_property_names().f;
    var arraySlice = require_array_slice_simple();
    var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    var getWindowNames = function(it) {
      try {
        return $getOwnPropertyNames(it);
      } catch (error) {
        return arraySlice(windowNames);
      }
    };
    module.exports.f = function getOwnPropertyNames(it) {
      return windowNames && classof(it) == "Window" ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
    };
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-symbols.js
var require_object_get_own_property_symbols = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-symbols.js"(exports) {
    init_react();
    exports.f = Object.getOwnPropertySymbols;
  }
});

// node_modules/core-js-pure/internals/array-slice.js
var require_array_slice = __commonJS({
  "node_modules/core-js-pure/internals/array-slice.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    module.exports = uncurryThis([].slice);
  }
});

// node_modules/core-js-pure/internals/redefine.js
var require_redefine = __commonJS({
  "node_modules/core-js-pure/internals/redefine.js"(exports, module) {
    init_react();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    module.exports = function(target, key, value, options) {
      if (options && options.enumerable)
        target[key] = value;
      else
        createNonEnumerableProperty(target, key, value);
    };
  }
});

// node_modules/core-js-pure/internals/well-known-symbol-wrapped.js
var require_well_known_symbol_wrapped = __commonJS({
  "node_modules/core-js-pure/internals/well-known-symbol-wrapped.js"(exports) {
    init_react();
    var wellKnownSymbol = require_well_known_symbol();
    exports.f = wellKnownSymbol;
  }
});

// node_modules/core-js-pure/internals/define-well-known-symbol.js
var require_define_well_known_symbol = __commonJS({
  "node_modules/core-js-pure/internals/define-well-known-symbol.js"(exports, module) {
    init_react();
    var path = require_path();
    var hasOwn = require_has_own_property();
    var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    var defineProperty = require_object_define_property().f;
    module.exports = function(NAME) {
      var Symbol2 = path.Symbol || (path.Symbol = {});
      if (!hasOwn(Symbol2, NAME))
        defineProperty(Symbol2, NAME, {
          value: wrappedWellKnownSymbolModule.f(NAME)
        });
    };
  }
});

// node_modules/core-js-pure/internals/object-to-string.js
var require_object_to_string = __commonJS({
  "node_modules/core-js-pure/internals/object-to-string.js"(exports, module) {
    "use strict";
    init_react();
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var classof = require_classof();
    module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString2() {
      return "[object " + classof(this) + "]";
    };
  }
});

// node_modules/core-js-pure/internals/set-to-string-tag.js
var require_set_to_string_tag = __commonJS({
  "node_modules/core-js-pure/internals/set-to-string-tag.js"(exports, module) {
    init_react();
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var defineProperty = require_object_define_property().f;
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var toString2 = require_object_to_string();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    module.exports = function(it, TAG, STATIC, SET_METHOD) {
      if (it) {
        var target = STATIC ? it : it.prototype;
        if (!hasOwn(target, TO_STRING_TAG)) {
          defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
        }
        if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
          createNonEnumerableProperty(target, "toString", toString2);
        }
      }
    };
  }
});

// node_modules/core-js-pure/internals/native-weak-map.js
var require_native_weak_map = __commonJS({
  "node_modules/core-js-pure/internals/native-weak-map.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isCallable = require_is_callable();
    var inspectSource = require_inspect_source();
    var WeakMap = global2.WeakMap;
    module.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));
  }
});

// node_modules/core-js-pure/internals/internal-state.js
var require_internal_state = __commonJS({
  "node_modules/core-js-pure/internals/internal-state.js"(exports, module) {
    init_react();
    var NATIVE_WEAK_MAP = require_native_weak_map();
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    var isObject = require_is_object();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var shared = require_shared_store();
    var sharedKey = require_shared_key();
    var hiddenKeys = require_hidden_keys();
    var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
    var TypeError2 = global2.TypeError;
    var WeakMap = global2.WeakMap;
    var set;
    var get;
    var has;
    var enforce = function(it) {
      return has(it) ? get(it) : set(it, {});
    };
    var getterFor = function(TYPE) {
      return function(it) {
        var state;
        if (!isObject(it) || (state = get(it)).type !== TYPE) {
          throw TypeError2("Incompatible receiver, " + TYPE + " required");
        }
        return state;
      };
    };
    if (NATIVE_WEAK_MAP || shared.state) {
      store = shared.state || (shared.state = new WeakMap());
      wmget = uncurryThis(store.get);
      wmhas = uncurryThis(store.has);
      wmset = uncurryThis(store.set);
      set = function(it, metadata) {
        if (wmhas(store, it))
          throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        wmset(store, it, metadata);
        return metadata;
      };
      get = function(it) {
        return wmget(store, it) || {};
      };
      has = function(it) {
        return wmhas(store, it);
      };
    } else {
      STATE = sharedKey("state");
      hiddenKeys[STATE] = true;
      set = function(it, metadata) {
        if (hasOwn(it, STATE))
          throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        createNonEnumerableProperty(it, STATE, metadata);
        return metadata;
      };
      get = function(it) {
        return hasOwn(it, STATE) ? it[STATE] : {};
      };
      has = function(it) {
        return hasOwn(it, STATE);
      };
    }
    var store;
    var wmget;
    var wmhas;
    var wmset;
    var STATE;
    module.exports = {
      set,
      get,
      has,
      enforce,
      getterFor
    };
  }
});

// node_modules/core-js-pure/internals/array-iteration.js
var require_array_iteration = __commonJS({
  "node_modules/core-js-pure/internals/array-iteration.js"(exports, module) {
    init_react();
    var bind = require_function_bind_context();
    var uncurryThis = require_function_uncurry_this();
    var IndexedObject = require_indexed_object();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var arraySpeciesCreate = require_array_species_create();
    var push = uncurryThis([].push);
    var createMethod = function(TYPE) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var IS_FILTER_REJECT = TYPE == 7;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      return function($this, callbackfn, that, specificCreate) {
        var O2 = toObject($this);
        var self2 = IndexedObject(O2);
        var boundFunction = bind(callbackfn, that);
        var length = lengthOfArrayLike(self2);
        var index = 0;
        var create = specificCreate || arraySpeciesCreate;
        var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : void 0;
        var value, result;
        for (; length > index; index++)
          if (NO_HOLES || index in self2) {
            value = self2[index];
            result = boundFunction(value, index, O2);
            if (TYPE) {
              if (IS_MAP)
                target[index] = result;
              else if (result)
                switch (TYPE) {
                  case 3:
                    return true;
                  case 5:
                    return value;
                  case 6:
                    return index;
                  case 2:
                    push(target, value);
                }
              else
                switch (TYPE) {
                  case 4:
                    return false;
                  case 7:
                    push(target, value);
                }
            }
          }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
      };
    };
    module.exports = {
      forEach: createMethod(0),
      map: createMethod(1),
      filter: createMethod(2),
      some: createMethod(3),
      every: createMethod(4),
      find: createMethod(5),
      findIndex: createMethod(6),
      filterReject: createMethod(7)
    };
  }
});

// node_modules/core-js-pure/modules/es.symbol.js
var require_es_symbol = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var getBuiltIn = require_get_built_in();
    var apply = require_function_apply();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var IS_PURE = require_is_pure();
    var DESCRIPTORS = require_descriptors();
    var NATIVE_SYMBOL = require_native_symbol();
    var fails = require_fails();
    var hasOwn = require_has_own_property();
    var isArray = require_is_array();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var isPrototypeOf = require_object_is_prototype_of();
    var isSymbol = require_is_symbol();
    var anObject = require_an_object();
    var toObject = require_to_object();
    var toIndexedObject = require_to_indexed_object();
    var toPropertyKey = require_to_property_key();
    var $toString = require_to_string();
    var createPropertyDescriptor = require_create_property_descriptor();
    var nativeObjectCreate = require_object_create();
    var objectKeys = require_object_keys();
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertyNamesExternal = require_object_get_own_property_names_external();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var definePropertyModule = require_object_define_property();
    var definePropertiesModule = require_object_define_properties();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var arraySlice = require_array_slice();
    var redefine = require_redefine();
    var shared = require_shared();
    var sharedKey = require_shared_key();
    var hiddenKeys = require_hidden_keys();
    var uid = require_uid();
    var wellKnownSymbol = require_well_known_symbol();
    var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    var setToStringTag = require_set_to_string_tag();
    var InternalStateModule = require_internal_state();
    var $forEach = require_array_iteration().forEach;
    var HIDDEN = sharedKey("hidden");
    var SYMBOL = "Symbol";
    var PROTOTYPE = "prototype";
    var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(SYMBOL);
    var ObjectPrototype = Object[PROTOTYPE];
    var $Symbol = global2.Symbol;
    var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
    var TypeError2 = global2.TypeError;
    var QObject = global2.QObject;
    var $stringify = getBuiltIn("JSON", "stringify");
    var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var nativeDefineProperty = definePropertyModule.f;
    var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
    var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
    var push = uncurryThis([].push);
    var AllSymbols = shared("symbols");
    var ObjectPrototypeSymbols = shared("op-symbols");
    var StringToSymbolRegistry = shared("string-to-symbol-registry");
    var SymbolToStringRegistry = shared("symbol-to-string-registry");
    var WellKnownSymbolsStore = shared("wks");
    var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
    var setSymbolDescriptor = DESCRIPTORS && fails(function() {
      return nativeObjectCreate(nativeDefineProperty({}, "a", {
        get: function() {
          return nativeDefineProperty(this, "a", { value: 7 }).a;
        }
      })).a != 7;
    }) ? function(O2, P2, Attributes) {
      var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P2);
      if (ObjectPrototypeDescriptor)
        delete ObjectPrototype[P2];
      nativeDefineProperty(O2, P2, Attributes);
      if (ObjectPrototypeDescriptor && O2 !== ObjectPrototype) {
        nativeDefineProperty(ObjectPrototype, P2, ObjectPrototypeDescriptor);
      }
    } : nativeDefineProperty;
    var wrap = function(tag, description) {
      var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
      setInternalState(symbol, {
        type: SYMBOL,
        tag,
        description
      });
      if (!DESCRIPTORS)
        symbol.description = description;
      return symbol;
    };
    var $defineProperty = function defineProperty(O2, P2, Attributes) {
      if (O2 === ObjectPrototype)
        $defineProperty(ObjectPrototypeSymbols, P2, Attributes);
      anObject(O2);
      var key = toPropertyKey(P2);
      anObject(Attributes);
      if (hasOwn(AllSymbols, key)) {
        if (!Attributes.enumerable) {
          if (!hasOwn(O2, HIDDEN))
            nativeDefineProperty(O2, HIDDEN, createPropertyDescriptor(1, {}));
          O2[HIDDEN][key] = true;
        } else {
          if (hasOwn(O2, HIDDEN) && O2[HIDDEN][key])
            O2[HIDDEN][key] = false;
          Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
        }
        return setSymbolDescriptor(O2, key, Attributes);
      }
      return nativeDefineProperty(O2, key, Attributes);
    };
    var $defineProperties = function defineProperties(O2, Properties) {
      anObject(O2);
      var properties = toIndexedObject(Properties);
      var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
      $forEach(keys, function(key) {
        if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key))
          $defineProperty(O2, key, properties[key]);
      });
      return O2;
    };
    var $create = function create(O2, Properties) {
      return Properties === void 0 ? nativeObjectCreate(O2) : $defineProperties(nativeObjectCreate(O2), Properties);
    };
    var $propertyIsEnumerable = function propertyIsEnumerable(V) {
      var P2 = toPropertyKey(V);
      var enumerable = call(nativePropertyIsEnumerable, this, P2);
      if (this === ObjectPrototype && hasOwn(AllSymbols, P2) && !hasOwn(ObjectPrototypeSymbols, P2))
        return false;
      return enumerable || !hasOwn(this, P2) || !hasOwn(AllSymbols, P2) || hasOwn(this, HIDDEN) && this[HIDDEN][P2] ? enumerable : true;
    };
    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O2, P2) {
      var it = toIndexedObject(O2);
      var key = toPropertyKey(P2);
      if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key))
        return;
      var descriptor = nativeGetOwnPropertyDescriptor(it, key);
      if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
        descriptor.enumerable = true;
      }
      return descriptor;
    };
    var $getOwnPropertyNames = function getOwnPropertyNames(O2) {
      var names = nativeGetOwnPropertyNames(toIndexedObject(O2));
      var result = [];
      $forEach(names, function(key) {
        if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key))
          push(result, key);
      });
      return result;
    };
    var $getOwnPropertySymbols = function getOwnPropertySymbols(O2) {
      var IS_OBJECT_PROTOTYPE = O2 === ObjectPrototype;
      var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O2));
      var result = [];
      $forEach(names, function(key) {
        if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
          push(result, AllSymbols[key]);
        }
      });
      return result;
    };
    if (!NATIVE_SYMBOL) {
      $Symbol = function Symbol2() {
        if (isPrototypeOf(SymbolPrototype, this))
          throw TypeError2("Symbol is not a constructor");
        var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString(arguments[0]);
        var tag = uid(description);
        var setter = function(value) {
          if (this === ObjectPrototype)
            call(setter, ObjectPrototypeSymbols, value);
          if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag))
            this[HIDDEN][tag] = false;
          setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
        };
        if (DESCRIPTORS && USE_SETTER)
          setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
        return wrap(tag, description);
      };
      SymbolPrototype = $Symbol[PROTOTYPE];
      redefine(SymbolPrototype, "toString", function toString2() {
        return getInternalState(this).tag;
      });
      redefine($Symbol, "withoutSetter", function(description) {
        return wrap(uid(description), description);
      });
      propertyIsEnumerableModule.f = $propertyIsEnumerable;
      definePropertyModule.f = $defineProperty;
      definePropertiesModule.f = $defineProperties;
      getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
      getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
      getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
      wrappedWellKnownSymbolModule.f = function(name) {
        return wrap(wellKnownSymbol(name), name);
      };
      if (DESCRIPTORS) {
        nativeDefineProperty(SymbolPrototype, "description", {
          configurable: true,
          get: function description() {
            return getInternalState(this).description;
          }
        });
        if (!IS_PURE) {
          redefine(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, { unsafe: true });
        }
      }
    }
    $({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
      Symbol: $Symbol
    });
    $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
      defineWellKnownSymbol(name);
    });
    $({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
      "for": function(key) {
        var string = $toString(key);
        if (hasOwn(StringToSymbolRegistry, string))
          return StringToSymbolRegistry[string];
        var symbol = $Symbol(string);
        StringToSymbolRegistry[string] = symbol;
        SymbolToStringRegistry[symbol] = string;
        return symbol;
      },
      keyFor: function keyFor(sym) {
        if (!isSymbol(sym))
          throw TypeError2(sym + " is not a symbol");
        if (hasOwn(SymbolToStringRegistry, sym))
          return SymbolToStringRegistry[sym];
      },
      useSetter: function() {
        USE_SETTER = true;
      },
      useSimple: function() {
        USE_SETTER = false;
      }
    });
    $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
      create: $create,
      defineProperty: $defineProperty,
      defineProperties: $defineProperties,
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor
    });
    $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL }, {
      getOwnPropertyNames: $getOwnPropertyNames,
      getOwnPropertySymbols: $getOwnPropertySymbols
    });
    $({ target: "Object", stat: true, forced: fails(function() {
      getOwnPropertySymbolsModule.f(1);
    }) }, {
      getOwnPropertySymbols: function getOwnPropertySymbols(it) {
        return getOwnPropertySymbolsModule.f(toObject(it));
      }
    });
    if ($stringify) {
      FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function() {
        var symbol = $Symbol();
        return $stringify([symbol]) != "[null]" || $stringify({ a: symbol }) != "{}" || $stringify(Object(symbol)) != "{}";
      });
      $({ target: "JSON", stat: true, forced: FORCED_JSON_STRINGIFY }, {
        stringify: function stringify(it, replacer, space) {
          var args = arraySlice(arguments);
          var $replacer = replacer;
          if (!isObject(replacer) && it === void 0 || isSymbol(it))
            return;
          if (!isArray(replacer))
            replacer = function(key, value) {
              if (isCallable($replacer))
                value = call($replacer, this, key, value);
              if (!isSymbol(value))
                return value;
            };
          args[1] = replacer;
          return apply($stringify, null, args);
        }
      });
    }
    var FORCED_JSON_STRINGIFY;
    if (!SymbolPrototype[TO_PRIMITIVE]) {
      valueOf = SymbolPrototype.valueOf;
      redefine(SymbolPrototype, TO_PRIMITIVE, function(hint) {
        return call(valueOf, this);
      });
    }
    var valueOf;
    setToStringTag($Symbol, SYMBOL);
    hiddenKeys[HIDDEN] = true;
  }
});

// node_modules/core-js-pure/modules/es.symbol.async-iterator.js
var require_es_symbol_async_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.async-iterator.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("asyncIterator");
  }
});

// node_modules/core-js-pure/modules/es.symbol.description.js
var require_es_symbol_description = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.description.js"() {
    init_react();
  }
});

// node_modules/core-js-pure/modules/es.symbol.has-instance.js
var require_es_symbol_has_instance = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.has-instance.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("hasInstance");
  }
});

// node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js
var require_es_symbol_is_concat_spreadable = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("isConcatSpreadable");
  }
});

// node_modules/core-js-pure/modules/es.symbol.iterator.js
var require_es_symbol_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.iterator.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("iterator");
  }
});

// node_modules/core-js-pure/modules/es.symbol.match.js
var require_es_symbol_match = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.match.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("match");
  }
});

// node_modules/core-js-pure/modules/es.symbol.match-all.js
var require_es_symbol_match_all = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.match-all.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("matchAll");
  }
});

// node_modules/core-js-pure/modules/es.symbol.replace.js
var require_es_symbol_replace = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.replace.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("replace");
  }
});

// node_modules/core-js-pure/modules/es.symbol.search.js
var require_es_symbol_search = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.search.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("search");
  }
});

// node_modules/core-js-pure/modules/es.symbol.species.js
var require_es_symbol_species = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.species.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("species");
  }
});

// node_modules/core-js-pure/modules/es.symbol.split.js
var require_es_symbol_split = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.split.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("split");
  }
});

// node_modules/core-js-pure/modules/es.symbol.to-primitive.js
var require_es_symbol_to_primitive = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.to-primitive.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("toPrimitive");
  }
});

// node_modules/core-js-pure/modules/es.symbol.to-string-tag.js
var require_es_symbol_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.to-string-tag.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("toStringTag");
  }
});

// node_modules/core-js-pure/modules/es.symbol.unscopables.js
var require_es_symbol_unscopables = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.unscopables.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("unscopables");
  }
});

// node_modules/core-js-pure/modules/es.json.to-string-tag.js
var require_es_json_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.json.to-string-tag.js"() {
    init_react();
    var global2 = require_global();
    var setToStringTag = require_set_to_string_tag();
    setToStringTag(global2.JSON, "JSON", true);
  }
});

// node_modules/core-js-pure/modules/es.math.to-string-tag.js
var require_es_math_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.math.to-string-tag.js"() {
    init_react();
  }
});

// node_modules/core-js-pure/modules/es.reflect.to-string-tag.js
var require_es_reflect_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.reflect.to-string-tag.js"() {
    init_react();
  }
});

// node_modules/core-js-pure/es/symbol/index.js
var require_symbol = __commonJS({
  "node_modules/core-js-pure/es/symbol/index.js"(exports, module) {
    init_react();
    require_es_array_concat();
    require_es_object_to_string();
    require_es_symbol();
    require_es_symbol_async_iterator();
    require_es_symbol_description();
    require_es_symbol_has_instance();
    require_es_symbol_is_concat_spreadable();
    require_es_symbol_iterator();
    require_es_symbol_match();
    require_es_symbol_match_all();
    require_es_symbol_replace();
    require_es_symbol_search();
    require_es_symbol_species();
    require_es_symbol_split();
    require_es_symbol_to_primitive();
    require_es_symbol_to_string_tag();
    require_es_symbol_unscopables();
    require_es_json_to_string_tag();
    require_es_math_to_string_tag();
    require_es_reflect_to_string_tag();
    var path = require_path();
    module.exports = path.Symbol;
  }
});

// node_modules/core-js-pure/internals/add-to-unscopables.js
var require_add_to_unscopables = __commonJS({
  "node_modules/core-js-pure/internals/add-to-unscopables.js"(exports, module) {
    init_react();
    module.exports = function() {
    };
  }
});

// node_modules/core-js-pure/internals/iterators.js
var require_iterators = __commonJS({
  "node_modules/core-js-pure/internals/iterators.js"(exports, module) {
    init_react();
    module.exports = {};
  }
});

// node_modules/core-js-pure/internals/function-name.js
var require_function_name = __commonJS({
  "node_modules/core-js-pure/internals/function-name.js"(exports, module) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var hasOwn = require_has_own_property();
    var FunctionPrototype = Function.prototype;
    var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
    var EXISTS = hasOwn(FunctionPrototype, "name");
    var PROPER = EXISTS && function something() {
    }.name === "something";
    var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
    module.exports = {
      EXISTS,
      PROPER,
      CONFIGURABLE
    };
  }
});

// node_modules/core-js-pure/internals/correct-prototype-getter.js
var require_correct_prototype_getter = __commonJS({
  "node_modules/core-js-pure/internals/correct-prototype-getter.js"(exports, module) {
    init_react();
    var fails = require_fails();
    module.exports = !fails(function() {
      function F2() {
      }
      F2.prototype.constructor = null;
      return Object.getPrototypeOf(new F2()) !== F2.prototype;
    });
  }
});

// node_modules/core-js-pure/internals/object-get-prototype-of.js
var require_object_get_prototype_of = __commonJS({
  "node_modules/core-js-pure/internals/object-get-prototype-of.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var hasOwn = require_has_own_property();
    var isCallable = require_is_callable();
    var toObject = require_to_object();
    var sharedKey = require_shared_key();
    var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
    var IE_PROTO = sharedKey("IE_PROTO");
    var Object2 = global2.Object;
    var ObjectPrototype = Object2.prototype;
    module.exports = CORRECT_PROTOTYPE_GETTER ? Object2.getPrototypeOf : function(O2) {
      var object = toObject(O2);
      if (hasOwn(object, IE_PROTO))
        return object[IE_PROTO];
      var constructor = object.constructor;
      if (isCallable(constructor) && object instanceof constructor) {
        return constructor.prototype;
      }
      return object instanceof Object2 ? ObjectPrototype : null;
    };
  }
});

// node_modules/core-js-pure/internals/iterators-core.js
var require_iterators_core = __commonJS({
  "node_modules/core-js-pure/internals/iterators-core.js"(exports, module) {
    "use strict";
    init_react();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var create = require_object_create();
    var getPrototypeOf = require_object_get_prototype_of();
    var redefine = require_redefine();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_PURE = require_is_pure();
    var ITERATOR = wellKnownSymbol("iterator");
    var BUGGY_SAFARI_ITERATORS = false;
    var IteratorPrototype;
    var PrototypeOfArrayIteratorPrototype;
    var arrayIterator;
    if ([].keys) {
      arrayIterator = [].keys();
      if (!("next" in arrayIterator))
        BUGGY_SAFARI_ITERATORS = true;
      else {
        PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
        if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
          IteratorPrototype = PrototypeOfArrayIteratorPrototype;
      }
    }
    var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == void 0 || fails(function() {
      var test = {};
      return IteratorPrototype[ITERATOR].call(test) !== test;
    });
    if (NEW_ITERATOR_PROTOTYPE)
      IteratorPrototype = {};
    else if (IS_PURE)
      IteratorPrototype = create(IteratorPrototype);
    if (!isCallable(IteratorPrototype[ITERATOR])) {
      redefine(IteratorPrototype, ITERATOR, function() {
        return this;
      });
    }
    module.exports = {
      IteratorPrototype,
      BUGGY_SAFARI_ITERATORS
    };
  }
});

// node_modules/core-js-pure/internals/create-iterator-constructor.js
var require_create_iterator_constructor = __commonJS({
  "node_modules/core-js-pure/internals/create-iterator-constructor.js"(exports, module) {
    "use strict";
    init_react();
    var IteratorPrototype = require_iterators_core().IteratorPrototype;
    var create = require_object_create();
    var createPropertyDescriptor = require_create_property_descriptor();
    var setToStringTag = require_set_to_string_tag();
    var Iterators = require_iterators();
    var returnThis = function() {
      return this;
    };
    module.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
      var TO_STRING_TAG = NAME + " Iterator";
      IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
      setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
      Iterators[TO_STRING_TAG] = returnThis;
      return IteratorConstructor;
    };
  }
});

// node_modules/core-js-pure/internals/a-possible-prototype.js
var require_a_possible_prototype = __commonJS({
  "node_modules/core-js-pure/internals/a-possible-prototype.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isCallable = require_is_callable();
    var String2 = global2.String;
    var TypeError2 = global2.TypeError;
    module.exports = function(argument) {
      if (typeof argument == "object" || isCallable(argument))
        return argument;
      throw TypeError2("Can't set " + String2(argument) + " as a prototype");
    };
  }
});

// node_modules/core-js-pure/internals/object-set-prototype-of.js
var require_object_set_prototype_of = __commonJS({
  "node_modules/core-js-pure/internals/object-set-prototype-of.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var anObject = require_an_object();
    var aPossiblePrototype = require_a_possible_prototype();
    module.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
      var CORRECT_SETTER = false;
      var test = {};
      var setter;
      try {
        setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
        setter(test, []);
        CORRECT_SETTER = test instanceof Array;
      } catch (error) {
      }
      return function setPrototypeOf(O2, proto) {
        anObject(O2);
        aPossiblePrototype(proto);
        if (CORRECT_SETTER)
          setter(O2, proto);
        else
          O2.__proto__ = proto;
        return O2;
      };
    }() : void 0);
  }
});

// node_modules/core-js-pure/internals/define-iterator.js
var require_define_iterator = __commonJS({
  "node_modules/core-js-pure/internals/define-iterator.js"(exports, module) {
    "use strict";
    init_react();
    var $ = require_export();
    var call = require_function_call();
    var IS_PURE = require_is_pure();
    var FunctionName = require_function_name();
    var isCallable = require_is_callable();
    var createIteratorConstructor = require_create_iterator_constructor();
    var getPrototypeOf = require_object_get_prototype_of();
    var setPrototypeOf = require_object_set_prototype_of();
    var setToStringTag = require_set_to_string_tag();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var redefine = require_redefine();
    var wellKnownSymbol = require_well_known_symbol();
    var Iterators = require_iterators();
    var IteratorsCore = require_iterators_core();
    var PROPER_FUNCTION_NAME = FunctionName.PROPER;
    var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
    var IteratorPrototype = IteratorsCore.IteratorPrototype;
    var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR = wellKnownSymbol("iterator");
    var KEYS = "keys";
    var VALUES = "values";
    var ENTRIES = "entries";
    var returnThis = function() {
      return this;
    };
    module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
      createIteratorConstructor(IteratorConstructor, NAME, next);
      var getIterationMethod = function(KIND) {
        if (KIND === DEFAULT && defaultIterator)
          return defaultIterator;
        if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
          return IterablePrototype[KIND];
        switch (KIND) {
          case KEYS:
            return function keys() {
              return new IteratorConstructor(this, KIND);
            };
          case VALUES:
            return function values() {
              return new IteratorConstructor(this, KIND);
            };
          case ENTRIES:
            return function entries() {
              return new IteratorConstructor(this, KIND);
            };
        }
        return function() {
          return new IteratorConstructor(this);
        };
      };
      var TO_STRING_TAG = NAME + " Iterator";
      var INCORRECT_VALUES_NAME = false;
      var IterablePrototype = Iterable.prototype;
      var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
      var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
      var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
      var CurrentIteratorPrototype, methods, KEY;
      if (anyNativeIterator) {
        CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
        if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
          if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
            if (setPrototypeOf) {
              setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
            } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
              redefine(CurrentIteratorPrototype, ITERATOR, returnThis);
            }
          }
          setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
          if (IS_PURE)
            Iterators[TO_STRING_TAG] = returnThis;
        }
      }
      if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
        if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
          createNonEnumerableProperty(IterablePrototype, "name", VALUES);
        } else {
          INCORRECT_VALUES_NAME = true;
          defaultIterator = function values() {
            return call(nativeIterator, this);
          };
        }
      }
      if (DEFAULT) {
        methods = {
          values: getIterationMethod(VALUES),
          keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
          entries: getIterationMethod(ENTRIES)
        };
        if (FORCED)
          for (KEY in methods) {
            if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
              redefine(IterablePrototype, KEY, methods[KEY]);
            }
          }
        else
          $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
      }
      if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
        redefine(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
      }
      Iterators[NAME] = defaultIterator;
      return methods;
    };
  }
});

// node_modules/core-js-pure/modules/es.array.iterator.js
var require_es_array_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.array.iterator.js"(exports, module) {
    "use strict";
    init_react();
    var toIndexedObject = require_to_indexed_object();
    var addToUnscopables = require_add_to_unscopables();
    var Iterators = require_iterators();
    var InternalStateModule = require_internal_state();
    var defineProperty = require_object_define_property().f;
    var defineIterator = require_define_iterator();
    var IS_PURE = require_is_pure();
    var DESCRIPTORS = require_descriptors();
    var ARRAY_ITERATOR = "Array Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
    module.exports = defineIterator(Array, "Array", function(iterated, kind) {
      setInternalState(this, {
        type: ARRAY_ITERATOR,
        target: toIndexedObject(iterated),
        index: 0,
        kind
      });
    }, function() {
      var state = getInternalState(this);
      var target = state.target;
      var kind = state.kind;
      var index = state.index++;
      if (!target || index >= target.length) {
        state.target = void 0;
        return { value: void 0, done: true };
      }
      if (kind == "keys")
        return { value: index, done: false };
      if (kind == "values")
        return { value: target[index], done: false };
      return { value: [index, target[index]], done: false };
    }, "values");
    var values = Iterators.Arguments = Iterators.Array;
    addToUnscopables("keys");
    addToUnscopables("values");
    addToUnscopables("entries");
    if (!IS_PURE && DESCRIPTORS && values.name !== "values")
      try {
        defineProperty(values, "name", { value: "values" });
      } catch (error) {
      }
  }
});

// node_modules/core-js-pure/internals/dom-iterables.js
var require_dom_iterables = __commonJS({
  "node_modules/core-js-pure/internals/dom-iterables.js"(exports, module) {
    init_react();
    module.exports = {
      CSSRuleList: 0,
      CSSStyleDeclaration: 0,
      CSSValueList: 0,
      ClientRectList: 0,
      DOMRectList: 0,
      DOMStringList: 0,
      DOMTokenList: 1,
      DataTransferItemList: 0,
      FileList: 0,
      HTMLAllCollection: 0,
      HTMLCollection: 0,
      HTMLFormElement: 0,
      HTMLSelectElement: 0,
      MediaList: 0,
      MimeTypeArray: 0,
      NamedNodeMap: 0,
      NodeList: 1,
      PaintRequestList: 0,
      Plugin: 0,
      PluginArray: 0,
      SVGLengthList: 0,
      SVGNumberList: 0,
      SVGPathSegList: 0,
      SVGPointList: 0,
      SVGStringList: 0,
      SVGTransformList: 0,
      SourceBufferList: 0,
      StyleSheetList: 0,
      TextTrackCueList: 0,
      TextTrackList: 0,
      TouchList: 0
    };
  }
});

// node_modules/core-js-pure/modules/web.dom-collections.iterator.js
var require_web_dom_collections_iterator = __commonJS({
  "node_modules/core-js-pure/modules/web.dom-collections.iterator.js"() {
    init_react();
    require_es_array_iterator();
    var DOMIterables = require_dom_iterables();
    var global2 = require_global();
    var classof = require_classof();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var Iterators = require_iterators();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    for (COLLECTION_NAME in DOMIterables) {
      Collection = global2[COLLECTION_NAME];
      CollectionPrototype = Collection && Collection.prototype;
      if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {
        createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
      }
      Iterators[COLLECTION_NAME] = Iterators.Array;
    }
    var Collection;
    var CollectionPrototype;
    var COLLECTION_NAME;
  }
});

// node_modules/core-js-pure/stable/symbol/index.js
var require_symbol2 = __commonJS({
  "node_modules/core-js-pure/stable/symbol/index.js"(exports, module) {
    init_react();
    var parent = require_symbol();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/symbol/index.js
var require_symbol3 = __commonJS({
  "node_modules/core-js-pure/actual/symbol/index.js"(exports, module) {
    init_react();
    var parent = require_symbol2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js
var require_esnext_symbol_async_dispose = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("asyncDispose");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.dispose.js
var require_esnext_symbol_dispose = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.dispose.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("dispose");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.matcher.js
var require_esnext_symbol_matcher = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.matcher.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("matcher");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.metadata.js
var require_esnext_symbol_metadata = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.metadata.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("metadata");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.observable.js
var require_esnext_symbol_observable = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.observable.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("observable");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js
var require_esnext_symbol_pattern_match = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("patternMatch");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.replace-all.js
var require_esnext_symbol_replace_all = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.replace-all.js"() {
    init_react();
    var defineWellKnownSymbol = require_define_well_known_symbol();
    defineWellKnownSymbol("replaceAll");
  }
});

// node_modules/core-js-pure/features/symbol/index.js
var require_symbol4 = __commonJS({
  "node_modules/core-js-pure/features/symbol/index.js"(exports, module) {
    init_react();
    var parent = require_symbol3();
    require_esnext_symbol_async_dispose();
    require_esnext_symbol_dispose();
    require_esnext_symbol_matcher();
    require_esnext_symbol_metadata();
    require_esnext_symbol_observable();
    require_esnext_symbol_pattern_match();
    require_esnext_symbol_replace_all();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/symbol.js
var require_symbol5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/symbol.js"(exports, module) {
    init_react();
    module.exports = require_symbol4();
  }
});

// node_modules/core-js-pure/internals/string-multibyte.js
var require_string_multibyte = __commonJS({
  "node_modules/core-js-pure/internals/string-multibyte.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toString2 = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var charAt = uncurryThis("".charAt);
    var charCodeAt = uncurryThis("".charCodeAt);
    var stringSlice = uncurryThis("".slice);
    var createMethod = function(CONVERT_TO_STRING) {
      return function($this, pos) {
        var S2 = toString2(requireObjectCoercible($this));
        var position = toIntegerOrInfinity(pos);
        var size = S2.length;
        var first, second;
        if (position < 0 || position >= size)
          return CONVERT_TO_STRING ? "" : void 0;
        first = charCodeAt(S2, position);
        return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S2, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S2, position) : first : CONVERT_TO_STRING ? stringSlice(S2, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
      };
    };
    module.exports = {
      codeAt: createMethod(false),
      charAt: createMethod(true)
    };
  }
});

// node_modules/core-js-pure/modules/es.string.iterator.js
var require_es_string_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.string.iterator.js"() {
    "use strict";
    init_react();
    var charAt = require_string_multibyte().charAt;
    var toString2 = require_to_string();
    var InternalStateModule = require_internal_state();
    var defineIterator = require_define_iterator();
    var STRING_ITERATOR = "String Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
    defineIterator(String, "String", function(iterated) {
      setInternalState(this, {
        type: STRING_ITERATOR,
        string: toString2(iterated),
        index: 0
      });
    }, function next() {
      var state = getInternalState(this);
      var string = state.string;
      var index = state.index;
      var point;
      if (index >= string.length)
        return { value: void 0, done: true };
      point = charAt(string, index);
      state.index += point.length;
      return { value: point, done: false };
    });
  }
});

// node_modules/core-js-pure/es/symbol/iterator.js
var require_iterator = __commonJS({
  "node_modules/core-js-pure/es/symbol/iterator.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_object_to_string();
    require_es_string_iterator();
    require_es_symbol_iterator();
    var WrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    module.exports = WrappedWellKnownSymbolModule.f("iterator");
  }
});

// node_modules/core-js-pure/stable/symbol/iterator.js
var require_iterator2 = __commonJS({
  "node_modules/core-js-pure/stable/symbol/iterator.js"(exports, module) {
    init_react();
    var parent = require_iterator();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/symbol/iterator.js
var require_iterator3 = __commonJS({
  "node_modules/core-js-pure/actual/symbol/iterator.js"(exports, module) {
    init_react();
    var parent = require_iterator2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/symbol/iterator.js
var require_iterator4 = __commonJS({
  "node_modules/core-js-pure/features/symbol/iterator.js"(exports, module) {
    init_react();
    var parent = require_iterator3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/symbol/iterator.js
var require_iterator5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/symbol/iterator.js"(exports, module) {
    init_react();
    module.exports = require_iterator4();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/typeof.js"(exports, module) {
    init_react();
    var _Symbol = require_symbol5();
    var _Symbol$iterator = require_iterator5();
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return module.exports = _typeof = typeof _Symbol == "function" && typeof _Symbol$iterator == "symbol" ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && typeof _Symbol == "function" && obj2.constructor === _Symbol && obj2 !== _Symbol.prototype ? "symbol" : typeof obj2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(obj);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/internals/function-bind.js
var require_function_bind = __commonJS({
  "node_modules/core-js-pure/internals/function-bind.js"(exports, module) {
    "use strict";
    init_react();
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var isObject = require_is_object();
    var hasOwn = require_has_own_property();
    var arraySlice = require_array_slice();
    var NATIVE_BIND = require_function_bind_native();
    var Function2 = global2.Function;
    var concat = uncurryThis([].concat);
    var join = uncurryThis([].join);
    var factories = {};
    var construct = function(C, argsLength, args) {
      if (!hasOwn(factories, argsLength)) {
        for (var list = [], i2 = 0; i2 < argsLength; i2++)
          list[i2] = "a[" + i2 + "]";
        factories[argsLength] = Function2("C,a", "return new C(" + join(list, ",") + ")");
      }
      return factories[argsLength](C, args);
    };
    module.exports = NATIVE_BIND ? Function2.bind : function bind(that) {
      var F2 = aCallable(this);
      var Prototype = F2.prototype;
      var partArgs = arraySlice(arguments, 1);
      var boundFunction = function bound() {
        var args = concat(partArgs, arraySlice(arguments));
        return this instanceof boundFunction ? construct(F2, args.length, args) : F2.apply(that, args);
      };
      if (isObject(Prototype))
        boundFunction.prototype = Prototype;
      return boundFunction;
    };
  }
});

// node_modules/core-js-pure/internals/a-constructor.js
var require_a_constructor = __commonJS({
  "node_modules/core-js-pure/internals/a-constructor.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isConstructor = require_is_constructor();
    var tryToString = require_try_to_string();
    var TypeError2 = global2.TypeError;
    module.exports = function(argument) {
      if (isConstructor(argument))
        return argument;
      throw TypeError2(tryToString(argument) + " is not a constructor");
    };
  }
});

// node_modules/core-js-pure/modules/es.reflect.construct.js
var require_es_reflect_construct = __commonJS({
  "node_modules/core-js-pure/modules/es.reflect.construct.js"() {
    init_react();
    var $ = require_export();
    var getBuiltIn = require_get_built_in();
    var apply = require_function_apply();
    var bind = require_function_bind();
    var aConstructor = require_a_constructor();
    var anObject = require_an_object();
    var isObject = require_is_object();
    var create = require_object_create();
    var fails = require_fails();
    var nativeConstruct = getBuiltIn("Reflect", "construct");
    var ObjectPrototype = Object.prototype;
    var push = [].push;
    var NEW_TARGET_BUG = fails(function() {
      function F2() {
      }
      return !(nativeConstruct(function() {
      }, [], F2) instanceof F2);
    });
    var ARGS_BUG = !fails(function() {
      nativeConstruct(function() {
      });
    });
    var FORCED = NEW_TARGET_BUG || ARGS_BUG;
    $({ target: "Reflect", stat: true, forced: FORCED, sham: FORCED }, {
      construct: function construct(Target, args) {
        aConstructor(Target);
        anObject(args);
        var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
        if (ARGS_BUG && !NEW_TARGET_BUG)
          return nativeConstruct(Target, args, newTarget);
        if (Target == newTarget) {
          switch (args.length) {
            case 0:
              return new Target();
            case 1:
              return new Target(args[0]);
            case 2:
              return new Target(args[0], args[1]);
            case 3:
              return new Target(args[0], args[1], args[2]);
            case 4:
              return new Target(args[0], args[1], args[2], args[3]);
          }
          var $args = [null];
          apply(push, $args, args);
          return new (apply(bind, Target, $args))();
        }
        var proto = newTarget.prototype;
        var instance = create(isObject(proto) ? proto : ObjectPrototype);
        var result = apply(Target, instance, args);
        return isObject(result) ? result : instance;
      }
    });
  }
});

// node_modules/core-js-pure/es/reflect/construct.js
var require_construct = __commonJS({
  "node_modules/core-js-pure/es/reflect/construct.js"(exports, module) {
    init_react();
    require_es_reflect_construct();
    var path = require_path();
    module.exports = path.Reflect.construct;
  }
});

// node_modules/core-js-pure/stable/reflect/construct.js
var require_construct2 = __commonJS({
  "node_modules/core-js-pure/stable/reflect/construct.js"(exports, module) {
    init_react();
    var parent = require_construct();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/reflect/construct.js
var require_construct3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/reflect/construct.js"(exports, module) {
    init_react();
    module.exports = require_construct2();
  }
});

// node_modules/core-js-pure/internals/redefine-all.js
var require_redefine_all = __commonJS({
  "node_modules/core-js-pure/internals/redefine-all.js"(exports, module) {
    init_react();
    var redefine = require_redefine();
    module.exports = function(target, src, options) {
      for (var key in src) {
        if (options && options.unsafe && target[key])
          target[key] = src[key];
        else
          redefine(target, key, src[key], options);
      }
      return target;
    };
  }
});

// node_modules/core-js-pure/internals/array-buffer-non-extensible.js
var require_array_buffer_non_extensible = __commonJS({
  "node_modules/core-js-pure/internals/array-buffer-non-extensible.js"(exports, module) {
    init_react();
    var fails = require_fails();
    module.exports = fails(function() {
      if (typeof ArrayBuffer == "function") {
        var buffer = new ArrayBuffer(8);
        if (Object.isExtensible(buffer))
          Object.defineProperty(buffer, "a", { value: 8 });
      }
    });
  }
});

// node_modules/core-js-pure/internals/object-is-extensible.js
var require_object_is_extensible = __commonJS({
  "node_modules/core-js-pure/internals/object-is-extensible.js"(exports, module) {
    init_react();
    var fails = require_fails();
    var isObject = require_is_object();
    var classof = require_classof_raw();
    var ARRAY_BUFFER_NON_EXTENSIBLE = require_array_buffer_non_extensible();
    var $isExtensible = Object.isExtensible;
    var FAILS_ON_PRIMITIVES = fails(function() {
      $isExtensible(1);
    });
    module.exports = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it) {
      if (!isObject(it))
        return false;
      if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == "ArrayBuffer")
        return false;
      return $isExtensible ? $isExtensible(it) : true;
    } : $isExtensible;
  }
});

// node_modules/core-js-pure/internals/freezing.js
var require_freezing = __commonJS({
  "node_modules/core-js-pure/internals/freezing.js"(exports, module) {
    init_react();
    var fails = require_fails();
    module.exports = !fails(function() {
      return Object.isExtensible(Object.preventExtensions({}));
    });
  }
});

// node_modules/core-js-pure/internals/internal-metadata.js
var require_internal_metadata = __commonJS({
  "node_modules/core-js-pure/internals/internal-metadata.js"(exports, module) {
    init_react();
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var hiddenKeys = require_hidden_keys();
    var isObject = require_is_object();
    var hasOwn = require_has_own_property();
    var defineProperty = require_object_define_property().f;
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertyNamesExternalModule = require_object_get_own_property_names_external();
    var isExtensible = require_object_is_extensible();
    var uid = require_uid();
    var FREEZING = require_freezing();
    var REQUIRED = false;
    var METADATA = uid("meta");
    var id = 0;
    var setMetadata = function(it) {
      defineProperty(it, METADATA, { value: {
        objectID: "O" + id++,
        weakData: {}
      } });
    };
    var fastKey = function(it, create) {
      if (!isObject(it))
        return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
      if (!hasOwn(it, METADATA)) {
        if (!isExtensible(it))
          return "F";
        if (!create)
          return "E";
        setMetadata(it);
      }
      return it[METADATA].objectID;
    };
    var getWeakData = function(it, create) {
      if (!hasOwn(it, METADATA)) {
        if (!isExtensible(it))
          return true;
        if (!create)
          return false;
        setMetadata(it);
      }
      return it[METADATA].weakData;
    };
    var onFreeze = function(it) {
      if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA))
        setMetadata(it);
      return it;
    };
    var enable = function() {
      meta.enable = function() {
      };
      REQUIRED = true;
      var getOwnPropertyNames = getOwnPropertyNamesModule.f;
      var splice = uncurryThis([].splice);
      var test = {};
      test[METADATA] = 1;
      if (getOwnPropertyNames(test).length) {
        getOwnPropertyNamesModule.f = function(it) {
          var result = getOwnPropertyNames(it);
          for (var i2 = 0, length = result.length; i2 < length; i2++) {
            if (result[i2] === METADATA) {
              splice(result, i2, 1);
              break;
            }
          }
          return result;
        };
        $({ target: "Object", stat: true, forced: true }, {
          getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
        });
      }
    };
    var meta = module.exports = {
      enable,
      fastKey,
      getWeakData,
      onFreeze
    };
    hiddenKeys[METADATA] = true;
  }
});

// node_modules/core-js-pure/internals/is-array-iterator-method.js
var require_is_array_iterator_method = __commonJS({
  "node_modules/core-js-pure/internals/is-array-iterator-method.js"(exports, module) {
    init_react();
    var wellKnownSymbol = require_well_known_symbol();
    var Iterators = require_iterators();
    var ITERATOR = wellKnownSymbol("iterator");
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
    };
  }
});

// node_modules/core-js-pure/internals/get-iterator-method.js
var require_get_iterator_method = __commonJS({
  "node_modules/core-js-pure/internals/get-iterator-method.js"(exports, module) {
    init_react();
    var classof = require_classof();
    var getMethod = require_get_method();
    var Iterators = require_iterators();
    var wellKnownSymbol = require_well_known_symbol();
    var ITERATOR = wellKnownSymbol("iterator");
    module.exports = function(it) {
      if (it != void 0)
        return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
    };
  }
});

// node_modules/core-js-pure/internals/get-iterator.js
var require_get_iterator = __commonJS({
  "node_modules/core-js-pure/internals/get-iterator.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var tryToString = require_try_to_string();
    var getIteratorMethod = require_get_iterator_method();
    var TypeError2 = global2.TypeError;
    module.exports = function(argument, usingIterator) {
      var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
      if (aCallable(iteratorMethod))
        return anObject(call(iteratorMethod, argument));
      throw TypeError2(tryToString(argument) + " is not iterable");
    };
  }
});

// node_modules/core-js-pure/internals/iterator-close.js
var require_iterator_close = __commonJS({
  "node_modules/core-js-pure/internals/iterator-close.js"(exports, module) {
    init_react();
    var call = require_function_call();
    var anObject = require_an_object();
    var getMethod = require_get_method();
    module.exports = function(iterator, kind, value) {
      var innerResult, innerError;
      anObject(iterator);
      try {
        innerResult = getMethod(iterator, "return");
        if (!innerResult) {
          if (kind === "throw")
            throw value;
          return value;
        }
        innerResult = call(innerResult, iterator);
      } catch (error) {
        innerError = true;
        innerResult = error;
      }
      if (kind === "throw")
        throw value;
      if (innerError)
        throw innerResult;
      anObject(innerResult);
      return value;
    };
  }
});

// node_modules/core-js-pure/internals/iterate.js
var require_iterate = __commonJS({
  "node_modules/core-js-pure/internals/iterate.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var anObject = require_an_object();
    var tryToString = require_try_to_string();
    var isArrayIteratorMethod = require_is_array_iterator_method();
    var lengthOfArrayLike = require_length_of_array_like();
    var isPrototypeOf = require_object_is_prototype_of();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var iteratorClose = require_iterator_close();
    var TypeError2 = global2.TypeError;
    var Result = function(stopped, result) {
      this.stopped = stopped;
      this.result = result;
    };
    var ResultPrototype = Result.prototype;
    module.exports = function(iterable, unboundFunction, options) {
      var that = options && options.that;
      var AS_ENTRIES = !!(options && options.AS_ENTRIES);
      var IS_ITERATOR = !!(options && options.IS_ITERATOR);
      var INTERRUPTED = !!(options && options.INTERRUPTED);
      var fn2 = bind(unboundFunction, that);
      var iterator, iterFn, index, length, result, next, step;
      var stop = function(condition) {
        if (iterator)
          iteratorClose(iterator, "normal", condition);
        return new Result(true, condition);
      };
      var callFn = function(value) {
        if (AS_ENTRIES) {
          anObject(value);
          return INTERRUPTED ? fn2(value[0], value[1], stop) : fn2(value[0], value[1]);
        }
        return INTERRUPTED ? fn2(value, stop) : fn2(value);
      };
      if (IS_ITERATOR) {
        iterator = iterable;
      } else {
        iterFn = getIteratorMethod(iterable);
        if (!iterFn)
          throw TypeError2(tryToString(iterable) + " is not iterable");
        if (isArrayIteratorMethod(iterFn)) {
          for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
            result = callFn(iterable[index]);
            if (result && isPrototypeOf(ResultPrototype, result))
              return result;
          }
          return new Result(false);
        }
        iterator = getIterator(iterable, iterFn);
      }
      next = iterator.next;
      while (!(step = call(next, iterator)).done) {
        try {
          result = callFn(step.value);
        } catch (error) {
          iteratorClose(iterator, "throw", error);
        }
        if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result))
          return result;
      }
      return new Result(false);
    };
  }
});

// node_modules/core-js-pure/internals/an-instance.js
var require_an_instance = __commonJS({
  "node_modules/core-js-pure/internals/an-instance.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isPrototypeOf = require_object_is_prototype_of();
    var TypeError2 = global2.TypeError;
    module.exports = function(it, Prototype) {
      if (isPrototypeOf(Prototype, it))
        return it;
      throw TypeError2("Incorrect invocation");
    };
  }
});

// node_modules/core-js-pure/internals/collection.js
var require_collection = __commonJS({
  "node_modules/core-js-pure/internals/collection.js"(exports, module) {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var InternalMetadataModule = require_internal_metadata();
    var fails = require_fails();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var iterate = require_iterate();
    var anInstance = require_an_instance();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var setToStringTag = require_set_to_string_tag();
    var defineProperty = require_object_define_property().f;
    var forEach = require_array_iteration().forEach;
    var DESCRIPTORS = require_descriptors();
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    module.exports = function(CONSTRUCTOR_NAME, wrapper, common) {
      var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
      var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
      var ADDER = IS_MAP ? "set" : "add";
      var NativeConstructor = global2[CONSTRUCTOR_NAME];
      var NativePrototype = NativeConstructor && NativeConstructor.prototype;
      var exported = {};
      var Constructor;
      if (!DESCRIPTORS || !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
        new NativeConstructor().entries().next();
      }))) {
        Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
        InternalMetadataModule.enable();
      } else {
        Constructor = wrapper(function(target, iterable) {
          setInternalState(anInstance(target, Prototype), {
            type: CONSTRUCTOR_NAME,
            collection: new NativeConstructor()
          });
          if (iterable != void 0)
            iterate(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });
        });
        var Prototype = Constructor.prototype;
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
        forEach(["add", "clear", "delete", "forEach", "get", "has", "set", "keys", "values", "entries"], function(KEY) {
          var IS_ADDER = KEY == "add" || KEY == "set";
          if (KEY in NativePrototype && !(IS_WEAK && KEY == "clear")) {
            createNonEnumerableProperty(Prototype, KEY, function(a2, b2) {
              var collection = getInternalState(this).collection;
              if (!IS_ADDER && IS_WEAK && !isObject(a2))
                return KEY == "get" ? void 0 : false;
              var result = collection[KEY](a2 === 0 ? 0 : a2, b2);
              return IS_ADDER ? this : result;
            });
          }
        });
        IS_WEAK || defineProperty(Prototype, "size", {
          configurable: true,
          get: function() {
            return getInternalState(this).collection.size;
          }
        });
      }
      setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
      exported[CONSTRUCTOR_NAME] = Constructor;
      $({ global: true, forced: true }, exported);
      if (!IS_WEAK)
        common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
      return Constructor;
    };
  }
});

// node_modules/core-js-pure/internals/collection-weak.js
var require_collection_weak = __commonJS({
  "node_modules/core-js-pure/internals/collection-weak.js"(exports, module) {
    "use strict";
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var redefineAll = require_redefine_all();
    var getWeakData = require_internal_metadata().getWeakData;
    var anObject = require_an_object();
    var isObject = require_is_object();
    var anInstance = require_an_instance();
    var iterate = require_iterate();
    var ArrayIterationModule = require_array_iteration();
    var hasOwn = require_has_own_property();
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    var find = ArrayIterationModule.find;
    var findIndex = ArrayIterationModule.findIndex;
    var splice = uncurryThis([].splice);
    var id = 0;
    var uncaughtFrozenStore = function(store) {
      return store.frozen || (store.frozen = new UncaughtFrozenStore());
    };
    var UncaughtFrozenStore = function() {
      this.entries = [];
    };
    var findUncaughtFrozen = function(store, key) {
      return find(store.entries, function(it) {
        return it[0] === key;
      });
    };
    UncaughtFrozenStore.prototype = {
      get: function(key) {
        var entry = findUncaughtFrozen(this, key);
        if (entry)
          return entry[1];
      },
      has: function(key) {
        return !!findUncaughtFrozen(this, key);
      },
      set: function(key, value) {
        var entry = findUncaughtFrozen(this, key);
        if (entry)
          entry[1] = value;
        else
          this.entries.push([key, value]);
      },
      "delete": function(key) {
        var index = findIndex(this.entries, function(it) {
          return it[0] === key;
        });
        if (~index)
          splice(this.entries, index, 1);
        return !!~index;
      }
    };
    module.exports = {
      getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
        var Constructor = wrapper(function(that, iterable) {
          anInstance(that, Prototype);
          setInternalState(that, {
            type: CONSTRUCTOR_NAME,
            id: id++,
            frozen: void 0
          });
          if (iterable != void 0)
            iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
        });
        var Prototype = Constructor.prototype;
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var define = function(that, key, value) {
          var state = getInternalState(that);
          var data = getWeakData(anObject(key), true);
          if (data === true)
            uncaughtFrozenStore(state).set(key, value);
          else
            data[state.id] = value;
          return that;
        };
        redefineAll(Prototype, {
          "delete": function(key) {
            var state = getInternalState(this);
            if (!isObject(key))
              return false;
            var data = getWeakData(key);
            if (data === true)
              return uncaughtFrozenStore(state)["delete"](key);
            return data && hasOwn(data, state.id) && delete data[state.id];
          },
          has: function has(key) {
            var state = getInternalState(this);
            if (!isObject(key))
              return false;
            var data = getWeakData(key);
            if (data === true)
              return uncaughtFrozenStore(state).has(key);
            return data && hasOwn(data, state.id);
          }
        });
        redefineAll(Prototype, IS_MAP ? {
          get: function get(key) {
            var state = getInternalState(this);
            if (isObject(key)) {
              var data = getWeakData(key);
              if (data === true)
                return uncaughtFrozenStore(state).get(key);
              return data ? data[state.id] : void 0;
            }
          },
          set: function set(key, value) {
            return define(this, key, value);
          }
        } : {
          add: function add(value) {
            return define(this, value, true);
          }
        });
        return Constructor;
      }
    };
  }
});

// node_modules/core-js-pure/modules/es.weak-map.js
var require_es_weak_map = __commonJS({
  "node_modules/core-js-pure/modules/es.weak-map.js"() {
    "use strict";
    init_react();
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    var redefineAll = require_redefine_all();
    var InternalMetadataModule = require_internal_metadata();
    var collection = require_collection();
    var collectionWeak = require_collection_weak();
    var isObject = require_is_object();
    var isExtensible = require_object_is_extensible();
    var enforceInternalState = require_internal_state().enforce;
    var NATIVE_WEAK_MAP = require_native_weak_map();
    var IS_IE11 = !global2.ActiveXObject && "ActiveXObject" in global2;
    var InternalWeakMap;
    var wrapper = function(init) {
      return function WeakMap() {
        return init(this, arguments.length ? arguments[0] : void 0);
      };
    };
    var $WeakMap = collection("WeakMap", wrapper, collectionWeak);
    if (NATIVE_WEAK_MAP && IS_IE11) {
      InternalWeakMap = collectionWeak.getConstructor(wrapper, "WeakMap", true);
      InternalMetadataModule.enable();
      WeakMapPrototype = $WeakMap.prototype;
      nativeDelete = uncurryThis(WeakMapPrototype["delete"]);
      nativeHas = uncurryThis(WeakMapPrototype.has);
      nativeGet = uncurryThis(WeakMapPrototype.get);
      nativeSet = uncurryThis(WeakMapPrototype.set);
      redefineAll(WeakMapPrototype, {
        "delete": function(key) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap();
            return nativeDelete(this, key) || state.frozen["delete"](key);
          }
          return nativeDelete(this, key);
        },
        has: function has(key) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap();
            return nativeHas(this, key) || state.frozen.has(key);
          }
          return nativeHas(this, key);
        },
        get: function get(key) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap();
            return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
          }
          return nativeGet(this, key);
        },
        set: function set(key, value) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap();
            nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
          } else
            nativeSet(this, key, value);
          return this;
        }
      });
    }
    var WeakMapPrototype;
    var nativeDelete;
    var nativeHas;
    var nativeGet;
    var nativeSet;
  }
});

// node_modules/core-js-pure/es/weak-map/index.js
var require_weak_map = __commonJS({
  "node_modules/core-js-pure/es/weak-map/index.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_object_to_string();
    require_es_weak_map();
    var path = require_path();
    module.exports = path.WeakMap;
  }
});

// node_modules/core-js-pure/stable/weak-map/index.js
var require_weak_map2 = __commonJS({
  "node_modules/core-js-pure/stable/weak-map/index.js"(exports, module) {
    init_react();
    var parent = require_weak_map();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/weak-map.js
var require_weak_map3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/weak-map.js"(exports, module) {
    init_react();
    module.exports = require_weak_map2();
  }
});

// node_modules/core-js-pure/modules/es.object.define-property.js
var require_es_object_define_property = __commonJS({
  "node_modules/core-js-pure/modules/es.object.define-property.js"() {
    init_react();
    var $ = require_export();
    var DESCRIPTORS = require_descriptors();
    var defineProperty = require_object_define_property().f;
    $({ target: "Object", stat: true, forced: Object.defineProperty !== defineProperty, sham: !DESCRIPTORS }, {
      defineProperty
    });
  }
});

// node_modules/core-js-pure/es/object/define-property.js
var require_define_property = __commonJS({
  "node_modules/core-js-pure/es/object/define-property.js"(exports, module) {
    init_react();
    require_es_object_define_property();
    var path = require_path();
    var Object2 = path.Object;
    var defineProperty = module.exports = function defineProperty2(it, key, desc) {
      return Object2.defineProperty(it, key, desc);
    };
    if (Object2.defineProperty.sham)
      defineProperty.sham = true;
  }
});

// node_modules/core-js-pure/stable/object/define-property.js
var require_define_property2 = __commonJS({
  "node_modules/core-js-pure/stable/object/define-property.js"(exports, module) {
    init_react();
    var parent = require_define_property();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js
var require_define_property3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js"(exports, module) {
    init_react();
    module.exports = require_define_property2();
  }
});

// node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js
var require_es_object_get_own_property_descriptor = __commonJS({
  "node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js"() {
    init_react();
    var $ = require_export();
    var fails = require_fails();
    var toIndexedObject = require_to_indexed_object();
    var nativeGetOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var DESCRIPTORS = require_descriptors();
    var FAILS_ON_PRIMITIVES = fails(function() {
      nativeGetOwnPropertyDescriptor(1);
    });
    var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;
    $({ target: "Object", stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
        return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
      }
    });
  }
});

// node_modules/core-js-pure/es/object/get-own-property-descriptor.js
var require_get_own_property_descriptor = __commonJS({
  "node_modules/core-js-pure/es/object/get-own-property-descriptor.js"(exports, module) {
    init_react();
    require_es_object_get_own_property_descriptor();
    var path = require_path();
    var Object2 = path.Object;
    var getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor2(it, key) {
      return Object2.getOwnPropertyDescriptor(it, key);
    };
    if (Object2.getOwnPropertyDescriptor.sham)
      getOwnPropertyDescriptor.sham = true;
  }
});

// node_modules/core-js-pure/stable/object/get-own-property-descriptor.js
var require_get_own_property_descriptor2 = __commonJS({
  "node_modules/core-js-pure/stable/object/get-own-property-descriptor.js"(exports, module) {
    init_react();
    var parent = require_get_own_property_descriptor();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor.js
var require_get_own_property_descriptor3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor.js"(exports, module) {
    init_react();
    module.exports = require_get_own_property_descriptor2();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js"(exports, module) {
    init_react();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/internals/own-keys.js
var require_own_keys = __commonJS({
  "node_modules/core-js-pure/internals/own-keys.js"(exports, module) {
    init_react();
    var getBuiltIn = require_get_built_in();
    var uncurryThis = require_function_uncurry_this();
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var anObject = require_an_object();
    var concat = uncurryThis([].concat);
    module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
      var keys = getOwnPropertyNamesModule.f(anObject(it));
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
    };
  }
});

// node_modules/core-js-pure/internals/copy-constructor-properties.js
var require_copy_constructor_properties = __commonJS({
  "node_modules/core-js-pure/internals/copy-constructor-properties.js"(exports, module) {
    init_react();
    var hasOwn = require_has_own_property();
    var ownKeys = require_own_keys();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var definePropertyModule = require_object_define_property();
    module.exports = function(target, source, exceptions) {
      var keys = ownKeys(source);
      var defineProperty = definePropertyModule.f;
      var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      for (var i2 = 0; i2 < keys.length; i2++) {
        var key = keys[i2];
        if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
          defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
      }
    };
  }
});

// node_modules/core-js-pure/internals/clear-error-stack.js
var require_clear_error_stack = __commonJS({
  "node_modules/core-js-pure/internals/clear-error-stack.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var replace = uncurryThis("".replace);
    var TEST = function(arg) {
      return String(Error(arg).stack);
    }("zxcasd");
    var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
    var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
    module.exports = function(stack, dropEntries) {
      if (IS_V8_OR_CHAKRA_STACK && typeof stack == "string") {
        while (dropEntries--)
          stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, "");
      }
      return stack;
    };
  }
});

// node_modules/core-js-pure/internals/install-error-cause.js
var require_install_error_cause = __commonJS({
  "node_modules/core-js-pure/internals/install-error-cause.js"(exports, module) {
    init_react();
    var isObject = require_is_object();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    module.exports = function(O2, options) {
      if (isObject(options) && "cause" in options) {
        createNonEnumerableProperty(O2, "cause", options.cause);
      }
    };
  }
});

// node_modules/core-js-pure/internals/normalize-string-argument.js
var require_normalize_string_argument = __commonJS({
  "node_modules/core-js-pure/internals/normalize-string-argument.js"(exports, module) {
    init_react();
    var toString2 = require_to_string();
    module.exports = function(argument, $default) {
      return argument === void 0 ? arguments.length < 2 ? "" : $default : toString2(argument);
    };
  }
});

// node_modules/core-js-pure/internals/error-stack-installable.js
var require_error_stack_installable = __commonJS({
  "node_modules/core-js-pure/internals/error-stack-installable.js"(exports, module) {
    init_react();
    var fails = require_fails();
    var createPropertyDescriptor = require_create_property_descriptor();
    module.exports = !fails(function() {
      var error = Error("a");
      if (!("stack" in error))
        return true;
      Object.defineProperty(error, "stack", createPropertyDescriptor(1, 7));
      return error.stack !== 7;
    });
  }
});

// node_modules/core-js-pure/modules/es.aggregate-error.js
var require_es_aggregate_error = __commonJS({
  "node_modules/core-js-pure/modules/es.aggregate-error.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var isPrototypeOf = require_object_is_prototype_of();
    var getPrototypeOf = require_object_get_prototype_of();
    var setPrototypeOf = require_object_set_prototype_of();
    var copyConstructorProperties = require_copy_constructor_properties();
    var create = require_object_create();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    var clearErrorStack = require_clear_error_stack();
    var installErrorCause = require_install_error_cause();
    var iterate = require_iterate();
    var normalizeStringArgument = require_normalize_string_argument();
    var wellKnownSymbol = require_well_known_symbol();
    var ERROR_STACK_INSTALLABLE = require_error_stack_installable();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var Error2 = global2.Error;
    var push = [].push;
    var $AggregateError = function AggregateError(errors, message) {
      var options = arguments.length > 2 ? arguments[2] : void 0;
      var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
      var that;
      if (setPrototypeOf) {
        that = setPrototypeOf(new Error2(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
      } else {
        that = isInstance ? this : create(AggregateErrorPrototype);
        createNonEnumerableProperty(that, TO_STRING_TAG, "Error");
      }
      if (message !== void 0)
        createNonEnumerableProperty(that, "message", normalizeStringArgument(message));
      if (ERROR_STACK_INSTALLABLE)
        createNonEnumerableProperty(that, "stack", clearErrorStack(that.stack, 1));
      installErrorCause(that, options);
      var errorsArray = [];
      iterate(errors, push, { that: errorsArray });
      createNonEnumerableProperty(that, "errors", errorsArray);
      return that;
    };
    if (setPrototypeOf)
      setPrototypeOf($AggregateError, Error2);
    else
      copyConstructorProperties($AggregateError, Error2, { name: true });
    var AggregateErrorPrototype = $AggregateError.prototype = create(Error2.prototype, {
      constructor: createPropertyDescriptor(1, $AggregateError),
      message: createPropertyDescriptor(1, ""),
      name: createPropertyDescriptor(1, "AggregateError")
    });
    $({ global: true }, {
      AggregateError: $AggregateError
    });
  }
});

// node_modules/core-js-pure/internals/native-promise-constructor.js
var require_native_promise_constructor = __commonJS({
  "node_modules/core-js-pure/internals/native-promise-constructor.js"(exports, module) {
    init_react();
    var global2 = require_global();
    module.exports = global2.Promise;
  }
});

// node_modules/core-js-pure/internals/set-species.js
var require_set_species = __commonJS({
  "node_modules/core-js-pure/internals/set-species.js"(exports, module) {
    "use strict";
    init_react();
    var getBuiltIn = require_get_built_in();
    var definePropertyModule = require_object_define_property();
    var wellKnownSymbol = require_well_known_symbol();
    var DESCRIPTORS = require_descriptors();
    var SPECIES = wellKnownSymbol("species");
    module.exports = function(CONSTRUCTOR_NAME) {
      var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
      var defineProperty = definePropertyModule.f;
      if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
        defineProperty(Constructor, SPECIES, {
          configurable: true,
          get: function() {
            return this;
          }
        });
      }
    };
  }
});

// node_modules/core-js-pure/internals/check-correctness-of-iteration.js
var require_check_correctness_of_iteration = __commonJS({
  "node_modules/core-js-pure/internals/check-correctness-of-iteration.js"(exports, module) {
    init_react();
    var wellKnownSymbol = require_well_known_symbol();
    var ITERATOR = wellKnownSymbol("iterator");
    var SAFE_CLOSING = false;
    try {
      called = 0;
      iteratorWithReturn = {
        next: function() {
          return { done: !!called++ };
        },
        "return": function() {
          SAFE_CLOSING = true;
        }
      };
      iteratorWithReturn[ITERATOR] = function() {
        return this;
      };
      Array.from(iteratorWithReturn, function() {
        throw 2;
      });
    } catch (error) {
    }
    var called;
    var iteratorWithReturn;
    module.exports = function(exec, SKIP_CLOSING) {
      if (!SKIP_CLOSING && !SAFE_CLOSING)
        return false;
      var ITERATION_SUPPORT = false;
      try {
        var object = {};
        object[ITERATOR] = function() {
          return {
            next: function() {
              return { done: ITERATION_SUPPORT = true };
            }
          };
        };
        exec(object);
      } catch (error) {
      }
      return ITERATION_SUPPORT;
    };
  }
});

// node_modules/core-js-pure/internals/species-constructor.js
var require_species_constructor = __commonJS({
  "node_modules/core-js-pure/internals/species-constructor.js"(exports, module) {
    init_react();
    var anObject = require_an_object();
    var aConstructor = require_a_constructor();
    var wellKnownSymbol = require_well_known_symbol();
    var SPECIES = wellKnownSymbol("species");
    module.exports = function(O2, defaultConstructor) {
      var C = anObject(O2).constructor;
      var S2;
      return C === void 0 || (S2 = anObject(C)[SPECIES]) == void 0 ? defaultConstructor : aConstructor(S2);
    };
  }
});

// node_modules/core-js-pure/internals/validate-arguments-length.js
var require_validate_arguments_length = __commonJS({
  "node_modules/core-js-pure/internals/validate-arguments-length.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var TypeError2 = global2.TypeError;
    module.exports = function(passed, required) {
      if (passed < required)
        throw TypeError2("Not enough arguments");
      return passed;
    };
  }
});

// node_modules/core-js-pure/internals/engine-is-ios.js
var require_engine_is_ios = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-ios.js"(exports, module) {
    init_react();
    var userAgent = require_engine_user_agent();
    module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);
  }
});

// node_modules/core-js-pure/internals/engine-is-node.js
var require_engine_is_node = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-node.js"(exports, module) {
    init_react();
    var classof = require_classof_raw();
    var global2 = require_global();
    module.exports = classof(global2.process) == "process";
  }
});

// node_modules/core-js-pure/internals/task.js
var require_task = __commonJS({
  "node_modules/core-js-pure/internals/task.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var apply = require_function_apply();
    var bind = require_function_bind_context();
    var isCallable = require_is_callable();
    var hasOwn = require_has_own_property();
    var fails = require_fails();
    var html = require_html();
    var arraySlice = require_array_slice();
    var createElement = require_document_create_element();
    var validateArgumentsLength = require_validate_arguments_length();
    var IS_IOS = require_engine_is_ios();
    var IS_NODE = require_engine_is_node();
    var set = global2.setImmediate;
    var clear = global2.clearImmediate;
    var process2 = global2.process;
    var Dispatch = global2.Dispatch;
    var Function2 = global2.Function;
    var MessageChannel = global2.MessageChannel;
    var String2 = global2.String;
    var counter = 0;
    var queue = {};
    var ONREADYSTATECHANGE = "onreadystatechange";
    var location;
    var defer;
    var channel;
    var port;
    try {
      location = global2.location;
    } catch (error) {
    }
    var run = function(id) {
      if (hasOwn(queue, id)) {
        var fn2 = queue[id];
        delete queue[id];
        fn2();
      }
    };
    var runner = function(id) {
      return function() {
        run(id);
      };
    };
    var listener = function(event) {
      run(event.data);
    };
    var post = function(id) {
      global2.postMessage(String2(id), location.protocol + "//" + location.host);
    };
    if (!set || !clear) {
      set = function setImmediate(handler) {
        validateArgumentsLength(arguments.length, 1);
        var fn2 = isCallable(handler) ? handler : Function2(handler);
        var args = arraySlice(arguments, 1);
        queue[++counter] = function() {
          apply(fn2, void 0, args);
        };
        defer(counter);
        return counter;
      };
      clear = function clearImmediate(id) {
        delete queue[id];
      };
      if (IS_NODE) {
        defer = function(id) {
          process2.nextTick(runner(id));
        };
      } else if (Dispatch && Dispatch.now) {
        defer = function(id) {
          Dispatch.now(runner(id));
        };
      } else if (MessageChannel && !IS_IOS) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = bind(port.postMessage, port);
      } else if (global2.addEventListener && isCallable(global2.postMessage) && !global2.importScripts && location && location.protocol !== "file:" && !fails(post)) {
        defer = post;
        global2.addEventListener("message", listener, false);
      } else if (ONREADYSTATECHANGE in createElement("script")) {
        defer = function(id) {
          html.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
            html.removeChild(this);
            run(id);
          };
        };
      } else {
        defer = function(id) {
          setTimeout(runner(id), 0);
        };
      }
    }
    module.exports = {
      set,
      clear
    };
  }
});

// node_modules/core-js-pure/internals/engine-is-ios-pebble.js
var require_engine_is_ios_pebble = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-ios-pebble.js"(exports, module) {
    init_react();
    var userAgent = require_engine_user_agent();
    var global2 = require_global();
    module.exports = /ipad|iphone|ipod/i.test(userAgent) && global2.Pebble !== void 0;
  }
});

// node_modules/core-js-pure/internals/engine-is-webos-webkit.js
var require_engine_is_webos_webkit = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-webos-webkit.js"(exports, module) {
    init_react();
    var userAgent = require_engine_user_agent();
    module.exports = /web0s(?!.*chrome)/i.test(userAgent);
  }
});

// node_modules/core-js-pure/internals/microtask.js
var require_microtask = __commonJS({
  "node_modules/core-js-pure/internals/microtask.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var bind = require_function_bind_context();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var macrotask = require_task().set;
    var IS_IOS = require_engine_is_ios();
    var IS_IOS_PEBBLE = require_engine_is_ios_pebble();
    var IS_WEBOS_WEBKIT = require_engine_is_webos_webkit();
    var IS_NODE = require_engine_is_node();
    var MutationObserver = global2.MutationObserver || global2.WebKitMutationObserver;
    var document2 = global2.document;
    var process2 = global2.process;
    var Promise2 = global2.Promise;
    var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global2, "queueMicrotask");
    var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
    var flush;
    var head;
    var last;
    var notify;
    var toggle;
    var node;
    var promise;
    var then;
    if (!queueMicrotask) {
      flush = function() {
        var parent, fn2;
        if (IS_NODE && (parent = process2.domain))
          parent.exit();
        while (head) {
          fn2 = head.fn;
          head = head.next;
          try {
            fn2();
          } catch (error) {
            if (head)
              notify();
            else
              last = void 0;
            throw error;
          }
        }
        last = void 0;
        if (parent)
          parent.enter();
      };
      if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document2) {
        toggle = true;
        node = document2.createTextNode("");
        new MutationObserver(flush).observe(node, { characterData: true });
        notify = function() {
          node.data = toggle = !toggle;
        };
      } else if (!IS_IOS_PEBBLE && Promise2 && Promise2.resolve) {
        promise = Promise2.resolve(void 0);
        promise.constructor = Promise2;
        then = bind(promise.then, promise);
        notify = function() {
          then(flush);
        };
      } else if (IS_NODE) {
        notify = function() {
          process2.nextTick(flush);
        };
      } else {
        macrotask = bind(macrotask, global2);
        notify = function() {
          macrotask(flush);
        };
      }
    }
    module.exports = queueMicrotask || function(fn2) {
      var task = { fn: fn2, next: void 0 };
      if (last)
        last.next = task;
      if (!head) {
        head = task;
        notify();
      }
      last = task;
    };
  }
});

// node_modules/core-js-pure/internals/new-promise-capability.js
var require_new_promise_capability = __commonJS({
  "node_modules/core-js-pure/internals/new-promise-capability.js"(exports, module) {
    "use strict";
    init_react();
    var aCallable = require_a_callable();
    var PromiseCapability = function(C) {
      var resolve, reject;
      this.promise = new C(function($$resolve, $$reject) {
        if (resolve !== void 0 || reject !== void 0)
          throw TypeError("Bad Promise constructor");
        resolve = $$resolve;
        reject = $$reject;
      });
      this.resolve = aCallable(resolve);
      this.reject = aCallable(reject);
    };
    module.exports.f = function(C) {
      return new PromiseCapability(C);
    };
  }
});

// node_modules/core-js-pure/internals/promise-resolve.js
var require_promise_resolve = __commonJS({
  "node_modules/core-js-pure/internals/promise-resolve.js"(exports, module) {
    init_react();
    var anObject = require_an_object();
    var isObject = require_is_object();
    var newPromiseCapability = require_new_promise_capability();
    module.exports = function(C, x2) {
      anObject(C);
      if (isObject(x2) && x2.constructor === C)
        return x2;
      var promiseCapability = newPromiseCapability.f(C);
      var resolve = promiseCapability.resolve;
      resolve(x2);
      return promiseCapability.promise;
    };
  }
});

// node_modules/core-js-pure/internals/host-report-errors.js
var require_host_report_errors = __commonJS({
  "node_modules/core-js-pure/internals/host-report-errors.js"(exports, module) {
    init_react();
    var global2 = require_global();
    module.exports = function(a2, b2) {
      var console2 = global2.console;
      if (console2 && console2.error) {
        arguments.length == 1 ? console2.error(a2) : console2.error(a2, b2);
      }
    };
  }
});

// node_modules/core-js-pure/internals/perform.js
var require_perform = __commonJS({
  "node_modules/core-js-pure/internals/perform.js"(exports, module) {
    init_react();
    module.exports = function(exec) {
      try {
        return { error: false, value: exec() };
      } catch (error) {
        return { error: true, value: error };
      }
    };
  }
});

// node_modules/core-js-pure/internals/queue.js
var require_queue = __commonJS({
  "node_modules/core-js-pure/internals/queue.js"(exports, module) {
    init_react();
    var Queue = function() {
      this.head = null;
      this.tail = null;
    };
    Queue.prototype = {
      add: function(item) {
        var entry = { item, next: null };
        if (this.head)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
      },
      get: function() {
        var entry = this.head;
        if (entry) {
          this.head = entry.next;
          if (this.tail === entry)
            this.tail = null;
          return entry.item;
        }
      }
    };
    module.exports = Queue;
  }
});

// node_modules/core-js-pure/internals/engine-is-browser.js
var require_engine_is_browser = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-browser.js"(exports, module) {
    init_react();
    module.exports = typeof window == "object";
  }
});

// node_modules/core-js-pure/modules/es.promise.js
var require_es_promise = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var IS_PURE = require_is_pure();
    var global2 = require_global();
    var getBuiltIn = require_get_built_in();
    var call = require_function_call();
    var NativePromise = require_native_promise_constructor();
    var redefine = require_redefine();
    var redefineAll = require_redefine_all();
    var setPrototypeOf = require_object_set_prototype_of();
    var setToStringTag = require_set_to_string_tag();
    var setSpecies = require_set_species();
    var aCallable = require_a_callable();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var anInstance = require_an_instance();
    var inspectSource = require_inspect_source();
    var iterate = require_iterate();
    var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
    var speciesConstructor = require_species_constructor();
    var task = require_task().set;
    var microtask = require_microtask();
    var promiseResolve = require_promise_resolve();
    var hostReportErrors = require_host_report_errors();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    var Queue = require_queue();
    var InternalStateModule = require_internal_state();
    var isForced = require_is_forced();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_BROWSER = require_engine_is_browser();
    var IS_NODE = require_engine_is_node();
    var V8_VERSION = require_engine_v8_version();
    var SPECIES = wellKnownSymbol("species");
    var PROMISE = "Promise";
    var getInternalState = InternalStateModule.getterFor(PROMISE);
    var setInternalState = InternalStateModule.set;
    var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
    var NativePromisePrototype = NativePromise && NativePromise.prototype;
    var PromiseConstructor = NativePromise;
    var PromisePrototype = NativePromisePrototype;
    var TypeError2 = global2.TypeError;
    var document2 = global2.document;
    var process2 = global2.process;
    var newPromiseCapability = newPromiseCapabilityModule.f;
    var newGenericPromiseCapability = newPromiseCapability;
    var DISPATCH_EVENT = !!(document2 && document2.createEvent && global2.dispatchEvent);
    var NATIVE_REJECTION_EVENT = isCallable(global2.PromiseRejectionEvent);
    var UNHANDLED_REJECTION = "unhandledrejection";
    var REJECTION_HANDLED = "rejectionhandled";
    var PENDING = 0;
    var FULFILLED = 1;
    var REJECTED = 2;
    var HANDLED = 1;
    var UNHANDLED = 2;
    var SUBCLASSING = false;
    var Internal;
    var OwnPromiseCapability;
    var PromiseWrapper;
    var nativeThen;
    var FORCED = isForced(PROMISE, function() {
      var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
      var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
      if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66)
        return true;
      if (IS_PURE && !PromisePrototype["finally"])
        return true;
      if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE))
        return false;
      var promise = new PromiseConstructor(function(resolve) {
        resolve(1);
      });
      var FakePromise = function(exec) {
        exec(function() {
        }, function() {
        });
      };
      var constructor = promise.constructor = {};
      constructor[SPECIES] = FakePromise;
      SUBCLASSING = promise.then(function() {
      }) instanceof FakePromise;
      if (!SUBCLASSING)
        return true;
      return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
    });
    var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function(iterable) {
      PromiseConstructor.all(iterable)["catch"](function() {
      });
    });
    var isThenable = function(it) {
      var then;
      return isObject(it) && isCallable(then = it.then) ? then : false;
    };
    var callReaction = function(reaction, state) {
      var value = state.value;
      var ok = state.state == FULFILLED;
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED)
              onHandleUnhandled(state);
            state.rejection = HANDLED;
          }
          if (handler === true)
            result = value;
          else {
            if (domain)
              domain.enter();
            result = handler(value);
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError2("Promise-chain cycle"));
          } else if (then = isThenable(result)) {
            call(then, result, resolve, reject);
          } else
            resolve(result);
        } else
          reject(value);
      } catch (error) {
        if (domain && !exited)
          domain.exit();
        reject(error);
      }
    };
    var notify = function(state, isReject) {
      if (state.notified)
        return;
      state.notified = true;
      microtask(function() {
        var reactions = state.reactions;
        var reaction;
        while (reaction = reactions.get()) {
          callReaction(reaction, state);
        }
        state.notified = false;
        if (isReject && !state.rejection)
          onUnhandled(state);
      });
    };
    var dispatchEvent = function(name, promise, reason) {
      var event, handler;
      if (DISPATCH_EVENT) {
        event = document2.createEvent("Event");
        event.promise = promise;
        event.reason = reason;
        event.initEvent(name, false, true);
        global2.dispatchEvent(event);
      } else
        event = { promise, reason };
      if (!NATIVE_REJECTION_EVENT && (handler = global2["on" + name]))
        handler(event);
      else if (name === UNHANDLED_REJECTION)
        hostReportErrors("Unhandled promise rejection", reason);
    };
    var onUnhandled = function(state) {
      call(task, global2, function() {
        var promise = state.facade;
        var value = state.value;
        var IS_UNHANDLED = isUnhandled(state);
        var result;
        if (IS_UNHANDLED) {
          result = perform(function() {
            if (IS_NODE) {
              process2.emit("unhandledRejection", value, promise);
            } else
              dispatchEvent(UNHANDLED_REJECTION, promise, value);
          });
          state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
          if (result.error)
            throw result.value;
        }
      });
    };
    var isUnhandled = function(state) {
      return state.rejection !== HANDLED && !state.parent;
    };
    var onHandleUnhandled = function(state) {
      call(task, global2, function() {
        var promise = state.facade;
        if (IS_NODE) {
          process2.emit("rejectionHandled", promise);
        } else
          dispatchEvent(REJECTION_HANDLED, promise, state.value);
      });
    };
    var bind = function(fn2, state, unwrap) {
      return function(value) {
        fn2(state, value, unwrap);
      };
    };
    var internalReject = function(state, value, unwrap) {
      if (state.done)
        return;
      state.done = true;
      if (unwrap)
        state = unwrap;
      state.value = value;
      state.state = REJECTED;
      notify(state, true);
    };
    var internalResolve = function(state, value, unwrap) {
      if (state.done)
        return;
      state.done = true;
      if (unwrap)
        state = unwrap;
      try {
        if (state.facade === value)
          throw TypeError2("Promise can't be resolved itself");
        var then = isThenable(value);
        if (then) {
          microtask(function() {
            var wrapper = { done: false };
            try {
              call(then, value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
            } catch (error) {
              internalReject(wrapper, error, state);
            }
          });
        } else {
          state.value = value;
          state.state = FULFILLED;
          notify(state, false);
        }
      } catch (error) {
        internalReject({ done: false }, error, state);
      }
    };
    if (FORCED) {
      PromiseConstructor = function Promise2(executor) {
        anInstance(this, PromisePrototype);
        aCallable(executor);
        call(Internal, this);
        var state = getInternalState(this);
        try {
          executor(bind(internalResolve, state), bind(internalReject, state));
        } catch (error) {
          internalReject(state, error);
        }
      };
      PromisePrototype = PromiseConstructor.prototype;
      Internal = function Promise2(executor) {
        setInternalState(this, {
          type: PROMISE,
          done: false,
          notified: false,
          parent: false,
          reactions: new Queue(),
          rejection: false,
          state: PENDING,
          value: void 0
        });
      };
      Internal.prototype = redefineAll(PromisePrototype, {
        then: function then(onFulfilled, onRejected) {
          var state = getInternalPromiseState(this);
          var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
          state.parent = true;
          reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
          reaction.fail = isCallable(onRejected) && onRejected;
          reaction.domain = IS_NODE ? process2.domain : void 0;
          if (state.state == PENDING)
            state.reactions.add(reaction);
          else
            microtask(function() {
              callReaction(reaction, state);
            });
          return reaction.promise;
        },
        "catch": function(onRejected) {
          return this.then(void 0, onRejected);
        }
      });
      OwnPromiseCapability = function() {
        var promise = new Internal();
        var state = getInternalState(promise);
        this.promise = promise;
        this.resolve = bind(internalResolve, state);
        this.reject = bind(internalReject, state);
      };
      newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
        return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
      };
      if (!IS_PURE && isCallable(NativePromise) && NativePromisePrototype !== Object.prototype) {
        nativeThen = NativePromisePrototype.then;
        if (!SUBCLASSING) {
          redefine(NativePromisePrototype, "then", function then(onFulfilled, onRejected) {
            var that = this;
            return new PromiseConstructor(function(resolve, reject) {
              call(nativeThen, that, resolve, reject);
            }).then(onFulfilled, onRejected);
          }, { unsafe: true });
          redefine(NativePromisePrototype, "catch", PromisePrototype["catch"], { unsafe: true });
        }
        try {
          delete NativePromisePrototype.constructor;
        } catch (error) {
        }
        if (setPrototypeOf) {
          setPrototypeOf(NativePromisePrototype, PromisePrototype);
        }
      }
    }
    $({ global: true, wrap: true, forced: FORCED }, {
      Promise: PromiseConstructor
    });
    setToStringTag(PromiseConstructor, PROMISE, false, true);
    setSpecies(PROMISE);
    PromiseWrapper = getBuiltIn(PROMISE);
    $({ target: PROMISE, stat: true, forced: FORCED }, {
      reject: function reject(r2) {
        var capability = newPromiseCapability(this);
        call(capability.reject, void 0, r2);
        return capability.promise;
      }
    });
    $({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
      resolve: function resolve(x2) {
        return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x2);
      }
    });
    $({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
      all: function all(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
          var $promiseResolve = aCallable(C.resolve);
          var values = [];
          var counter = 0;
          var remaining = 1;
          iterate(iterable, function(promise) {
            var index = counter++;
            var alreadyCalled = false;
            remaining++;
            call($promiseResolve, C, promise).then(function(value) {
              if (alreadyCalled)
                return;
              alreadyCalled = true;
              values[index] = value;
              --remaining || resolve(values);
            }, reject);
          });
          --remaining || resolve(values);
        });
        if (result.error)
          reject(result.value);
        return capability.promise;
      },
      race: function race(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var reject = capability.reject;
        var result = perform(function() {
          var $promiseResolve = aCallable(C.resolve);
          iterate(iterable, function(promise) {
            call($promiseResolve, C, promise).then(capability.resolve, reject);
          });
        });
        if (result.error)
          reject(result.value);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.promise.all-settled.js
var require_es_promise_all_settled = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.all-settled.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    var iterate = require_iterate();
    $({ target: "Promise", stat: true }, {
      allSettled: function allSettled(iterable) {
        var C = this;
        var capability = newPromiseCapabilityModule.f(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
          var promiseResolve = aCallable(C.resolve);
          var values = [];
          var counter = 0;
          var remaining = 1;
          iterate(iterable, function(promise) {
            var index = counter++;
            var alreadyCalled = false;
            remaining++;
            call(promiseResolve, C, promise).then(function(value) {
              if (alreadyCalled)
                return;
              alreadyCalled = true;
              values[index] = { status: "fulfilled", value };
              --remaining || resolve(values);
            }, function(error) {
              if (alreadyCalled)
                return;
              alreadyCalled = true;
              values[index] = { status: "rejected", reason: error };
              --remaining || resolve(values);
            });
          });
          --remaining || resolve(values);
        });
        if (result.error)
          reject(result.value);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.promise.any.js
var require_es_promise_any = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.any.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var aCallable = require_a_callable();
    var getBuiltIn = require_get_built_in();
    var call = require_function_call();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    var iterate = require_iterate();
    var PROMISE_ANY_ERROR = "No one promise resolved";
    $({ target: "Promise", stat: true }, {
      any: function any(iterable) {
        var C = this;
        var AggregateError = getBuiltIn("AggregateError");
        var capability = newPromiseCapabilityModule.f(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
          var promiseResolve = aCallable(C.resolve);
          var errors = [];
          var counter = 0;
          var remaining = 1;
          var alreadyResolved = false;
          iterate(iterable, function(promise) {
            var index = counter++;
            var alreadyRejected = false;
            remaining++;
            call(promiseResolve, C, promise).then(function(value) {
              if (alreadyRejected || alreadyResolved)
                return;
              alreadyResolved = true;
              resolve(value);
            }, function(error) {
              if (alreadyRejected || alreadyResolved)
                return;
              alreadyRejected = true;
              errors[index] = error;
              --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
            });
          });
          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
        });
        if (result.error)
          reject(result.value);
        return capability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.promise.finally.js
var require_es_promise_finally = __commonJS({
  "node_modules/core-js-pure/modules/es.promise.finally.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var IS_PURE = require_is_pure();
    var NativePromise = require_native_promise_constructor();
    var fails = require_fails();
    var getBuiltIn = require_get_built_in();
    var isCallable = require_is_callable();
    var speciesConstructor = require_species_constructor();
    var promiseResolve = require_promise_resolve();
    var redefine = require_redefine();
    var NON_GENERIC = !!NativePromise && fails(function() {
      NativePromise.prototype["finally"].call({ then: function() {
      } }, function() {
      });
    });
    $({ target: "Promise", proto: true, real: true, forced: NON_GENERIC }, {
      "finally": function(onFinally) {
        var C = speciesConstructor(this, getBuiltIn("Promise"));
        var isFunction = isCallable(onFinally);
        return this.then(isFunction ? function(x2) {
          return promiseResolve(C, onFinally()).then(function() {
            return x2;
          });
        } : onFinally, isFunction ? function(e) {
          return promiseResolve(C, onFinally()).then(function() {
            throw e;
          });
        } : onFinally);
      }
    });
    if (!IS_PURE && isCallable(NativePromise)) {
      method = getBuiltIn("Promise").prototype["finally"];
      if (NativePromise.prototype["finally"] !== method) {
        redefine(NativePromise.prototype, "finally", method, { unsafe: true });
      }
    }
    var method;
  }
});

// node_modules/core-js-pure/es/promise/index.js
var require_promise = __commonJS({
  "node_modules/core-js-pure/es/promise/index.js"(exports, module) {
    init_react();
    require_es_aggregate_error();
    require_es_array_iterator();
    require_es_object_to_string();
    require_es_promise();
    require_es_promise_all_settled();
    require_es_promise_any();
    require_es_promise_finally();
    require_es_string_iterator();
    var path = require_path();
    module.exports = path.Promise;
  }
});

// node_modules/core-js-pure/stable/promise/index.js
var require_promise2 = __commonJS({
  "node_modules/core-js-pure/stable/promise/index.js"(exports, module) {
    init_react();
    var parent = require_promise();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/promise.js
var require_promise3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/promise.js"(exports, module) {
    init_react();
    module.exports = require_promise2();
  }
});

// node_modules/@babel/runtime-corejs3/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime-corejs3/regenerator/index.js"(exports, module) {
    init_react();
    module.exports = require_runtime();
  }
});

// node_modules/core-js-pure/actual/promise/index.js
var require_promise4 = __commonJS({
  "node_modules/core-js-pure/actual/promise/index.js"(exports, module) {
    init_react();
    var parent = require_promise2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/modules/esnext.aggregate-error.js
var require_esnext_aggregate_error = __commonJS({
  "node_modules/core-js-pure/modules/esnext.aggregate-error.js"() {
    init_react();
    require_es_aggregate_error();
  }
});

// node_modules/core-js-pure/modules/esnext.promise.all-settled.js
var require_esnext_promise_all_settled = __commonJS({
  "node_modules/core-js-pure/modules/esnext.promise.all-settled.js"() {
    init_react();
    require_es_promise_all_settled();
  }
});

// node_modules/core-js-pure/modules/esnext.promise.try.js
var require_esnext_promise_try = __commonJS({
  "node_modules/core-js-pure/modules/esnext.promise.try.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var newPromiseCapabilityModule = require_new_promise_capability();
    var perform = require_perform();
    $({ target: "Promise", stat: true, forced: true }, {
      "try": function(callbackfn) {
        var promiseCapability = newPromiseCapabilityModule.f(this);
        var result = perform(callbackfn);
        (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
        return promiseCapability.promise;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.promise.any.js
var require_esnext_promise_any = __commonJS({
  "node_modules/core-js-pure/modules/esnext.promise.any.js"() {
    init_react();
    require_es_promise_any();
  }
});

// node_modules/core-js-pure/features/promise/index.js
var require_promise5 = __commonJS({
  "node_modules/core-js-pure/features/promise/index.js"(exports, module) {
    init_react();
    var parent = require_promise4();
    require_esnext_aggregate_error();
    require_esnext_promise_all_settled();
    require_esnext_promise_try();
    require_esnext_promise_any();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/promise.js
var require_promise6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/promise.js"(exports, module) {
    init_react();
    module.exports = require_promise5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/asyncToGenerator.js
var require_asyncToGenerator = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/asyncToGenerator.js"(exports, module) {
    init_react();
    var _Promise = require_promise6();
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        _Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn2) {
      return function() {
        var self2 = this, args = arguments;
        return new _Promise(function(resolve, reject) {
          var gen = fn2.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/classCallCheck.js
var require_classCallCheck = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/classCallCheck.js"(exports, module) {
    init_react();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/actual/object/define-property.js
var require_define_property4 = __commonJS({
  "node_modules/core-js-pure/actual/object/define-property.js"(exports, module) {
    init_react();
    var parent = require_define_property2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/define-property.js
var require_define_property5 = __commonJS({
  "node_modules/core-js-pure/features/object/define-property.js"(exports, module) {
    init_react();
    var parent = require_define_property4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/define-property.js
var require_define_property6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/define-property.js"(exports, module) {
    init_react();
    module.exports = require_define_property5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/createClass.js
var require_createClass = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/createClass.js"(exports, module) {
    init_react();
    var _Object$defineProperty = require_define_property6();
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        _Object$defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      _Object$defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/modules/es.object.create.js
var require_es_object_create = __commonJS({
  "node_modules/core-js-pure/modules/es.object.create.js"() {
    init_react();
    var $ = require_export();
    var DESCRIPTORS = require_descriptors();
    var create = require_object_create();
    $({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
      create
    });
  }
});

// node_modules/core-js-pure/es/object/create.js
var require_create = __commonJS({
  "node_modules/core-js-pure/es/object/create.js"(exports, module) {
    init_react();
    require_es_object_create();
    var path = require_path();
    var Object2 = path.Object;
    module.exports = function create(P2, D2) {
      return Object2.create(P2, D2);
    };
  }
});

// node_modules/core-js-pure/stable/object/create.js
var require_create2 = __commonJS({
  "node_modules/core-js-pure/stable/object/create.js"(exports, module) {
    init_react();
    var parent = require_create();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/object/create.js
var require_create3 = __commonJS({
  "node_modules/core-js-pure/actual/object/create.js"(exports, module) {
    init_react();
    var parent = require_create2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/create.js
var require_create4 = __commonJS({
  "node_modules/core-js-pure/features/object/create.js"(exports, module) {
    init_react();
    var parent = require_create3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/create.js
var require_create5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/create.js"(exports, module) {
    init_react();
    module.exports = require_create4();
  }
});

// node_modules/core-js-pure/modules/es.object.set-prototype-of.js
var require_es_object_set_prototype_of = __commonJS({
  "node_modules/core-js-pure/modules/es.object.set-prototype-of.js"() {
    init_react();
    var $ = require_export();
    var setPrototypeOf = require_object_set_prototype_of();
    $({ target: "Object", stat: true }, {
      setPrototypeOf
    });
  }
});

// node_modules/core-js-pure/es/object/set-prototype-of.js
var require_set_prototype_of = __commonJS({
  "node_modules/core-js-pure/es/object/set-prototype-of.js"(exports, module) {
    init_react();
    require_es_object_set_prototype_of();
    var path = require_path();
    module.exports = path.Object.setPrototypeOf;
  }
});

// node_modules/core-js-pure/stable/object/set-prototype-of.js
var require_set_prototype_of2 = __commonJS({
  "node_modules/core-js-pure/stable/object/set-prototype-of.js"(exports, module) {
    init_react();
    var parent = require_set_prototype_of();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/object/set-prototype-of.js
var require_set_prototype_of3 = __commonJS({
  "node_modules/core-js-pure/actual/object/set-prototype-of.js"(exports, module) {
    init_react();
    var parent = require_set_prototype_of2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/set-prototype-of.js
var require_set_prototype_of4 = __commonJS({
  "node_modules/core-js-pure/features/object/set-prototype-of.js"(exports, module) {
    init_react();
    var parent = require_set_prototype_of3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/set-prototype-of.js
var require_set_prototype_of5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/set-prototype-of.js"(exports, module) {
    init_react();
    module.exports = require_set_prototype_of4();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/setPrototypeOf.js
var require_setPrototypeOf = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/setPrototypeOf.js"(exports, module) {
    init_react();
    var _Object$setPrototypeOf = require_set_prototype_of5();
    function _setPrototypeOf(o2, p2) {
      module.exports = _setPrototypeOf = _Object$setPrototypeOf || function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _setPrototypeOf(o2, p2);
    }
    module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/inherits.js
var require_inherits = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/inherits.js"(exports, module) {
    init_react();
    var _Object$create = require_create5();
    var _Object$defineProperty = require_define_property6();
    var setPrototypeOf = require_setPrototypeOf();
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = _Object$create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      _Object$defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass)
        setPrototypeOf(subClass, superClass);
    }
    module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/assertThisInitialized.js
var require_assertThisInitialized = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/assertThisInitialized.js"(exports, module) {
    init_react();
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/possibleConstructorReturn.js
var require_possibleConstructorReturn = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/possibleConstructorReturn.js"(exports, module) {
    init_react();
    var _typeof = require_typeof()["default"];
    var assertThisInitialized = require_assertThisInitialized();
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return assertThisInitialized(self2);
    }
    module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/modules/es.object.get-prototype-of.js
var require_es_object_get_prototype_of = __commonJS({
  "node_modules/core-js-pure/modules/es.object.get-prototype-of.js"() {
    init_react();
    var $ = require_export();
    var fails = require_fails();
    var toObject = require_to_object();
    var nativeGetPrototypeOf = require_object_get_prototype_of();
    var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
    var FAILS_ON_PRIMITIVES = fails(function() {
      nativeGetPrototypeOf(1);
    });
    $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
      getPrototypeOf: function getPrototypeOf(it) {
        return nativeGetPrototypeOf(toObject(it));
      }
    });
  }
});

// node_modules/core-js-pure/es/object/get-prototype-of.js
var require_get_prototype_of = __commonJS({
  "node_modules/core-js-pure/es/object/get-prototype-of.js"(exports, module) {
    init_react();
    require_es_object_get_prototype_of();
    var path = require_path();
    module.exports = path.Object.getPrototypeOf;
  }
});

// node_modules/core-js-pure/stable/object/get-prototype-of.js
var require_get_prototype_of2 = __commonJS({
  "node_modules/core-js-pure/stable/object/get-prototype-of.js"(exports, module) {
    init_react();
    var parent = require_get_prototype_of();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/object/get-prototype-of.js
var require_get_prototype_of3 = __commonJS({
  "node_modules/core-js-pure/actual/object/get-prototype-of.js"(exports, module) {
    init_react();
    var parent = require_get_prototype_of2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/get-prototype-of.js
var require_get_prototype_of4 = __commonJS({
  "node_modules/core-js-pure/features/object/get-prototype-of.js"(exports, module) {
    init_react();
    var parent = require_get_prototype_of3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/get-prototype-of.js
var require_get_prototype_of5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/get-prototype-of.js"(exports, module) {
    init_react();
    module.exports = require_get_prototype_of4();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/getPrototypeOf.js
var require_getPrototypeOf = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/getPrototypeOf.js"(exports, module) {
    init_react();
    var _Object$setPrototypeOf = require_set_prototype_of5();
    var _Object$getPrototypeOf = require_get_prototype_of5();
    function _getPrototypeOf(o2) {
      module.exports = _getPrototypeOf = _Object$setPrototypeOf ? _Object$getPrototypeOf : function _getPrototypeOf2(o3) {
        return o3.__proto__ || _Object$getPrototypeOf(o3);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _getPrototypeOf(o2);
    }
    module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/modules/es.array.is-array.js
var require_es_array_is_array = __commonJS({
  "node_modules/core-js-pure/modules/es.array.is-array.js"() {
    init_react();
    var $ = require_export();
    var isArray = require_is_array();
    $({ target: "Array", stat: true }, {
      isArray
    });
  }
});

// node_modules/core-js-pure/es/array/is-array.js
var require_is_array2 = __commonJS({
  "node_modules/core-js-pure/es/array/is-array.js"(exports, module) {
    init_react();
    require_es_array_is_array();
    var path = require_path();
    module.exports = path.Array.isArray;
  }
});

// node_modules/core-js-pure/stable/array/is-array.js
var require_is_array3 = __commonJS({
  "node_modules/core-js-pure/stable/array/is-array.js"(exports, module) {
    init_react();
    var parent = require_is_array2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js
var require_is_array4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js"(exports, module) {
    init_react();
    module.exports = require_is_array3();
  }
});

// node_modules/core-js-pure/internals/array-method-is-strict.js
var require_array_method_is_strict = __commonJS({
  "node_modules/core-js-pure/internals/array-method-is-strict.js"(exports, module) {
    "use strict";
    init_react();
    var fails = require_fails();
    module.exports = function(METHOD_NAME, argument) {
      var method = [][METHOD_NAME];
      return !!method && fails(function() {
        method.call(null, argument || function() {
          return 1;
        }, 1);
      });
    };
  }
});

// node_modules/core-js-pure/internals/array-for-each.js
var require_array_for_each = __commonJS({
  "node_modules/core-js-pure/internals/array-for-each.js"(exports, module) {
    "use strict";
    init_react();
    var $forEach = require_array_iteration().forEach;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var STRICT_METHOD = arrayMethodIsStrict("forEach");
    module.exports = !STRICT_METHOD ? function forEach(callbackfn) {
      return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    } : [].forEach;
  }
});

// node_modules/core-js-pure/modules/es.array.for-each.js
var require_es_array_for_each = __commonJS({
  "node_modules/core-js-pure/modules/es.array.for-each.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var forEach = require_array_for_each();
    $({ target: "Array", proto: true, forced: [].forEach != forEach }, {
      forEach
    });
  }
});

// node_modules/core-js-pure/internals/entry-virtual.js
var require_entry_virtual = __commonJS({
  "node_modules/core-js-pure/internals/entry-virtual.js"(exports, module) {
    init_react();
    var path = require_path();
    module.exports = function(CONSTRUCTOR) {
      return path[CONSTRUCTOR + "Prototype"];
    };
  }
});

// node_modules/core-js-pure/es/array/virtual/for-each.js
var require_for_each = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/for-each.js"(exports, module) {
    init_react();
    require_es_array_for_each();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").forEach;
  }
});

// node_modules/core-js-pure/stable/array/virtual/for-each.js
var require_for_each2 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/for-each.js"(exports, module) {
    init_react();
    var parent = require_for_each();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/for-each.js
var require_for_each3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/for-each.js"(exports, module) {
    init_react();
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_for_each2();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module.exports = function(it) {
      var own = it.forEach;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.forEach || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js
var require_for_each4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js"(exports, module) {
    init_react();
    module.exports = require_for_each3();
  }
});

// node_modules/core-js-pure/modules/es.object.keys.js
var require_es_object_keys = __commonJS({
  "node_modules/core-js-pure/modules/es.object.keys.js"() {
    init_react();
    var $ = require_export();
    var toObject = require_to_object();
    var nativeKeys = require_object_keys();
    var fails = require_fails();
    var FAILS_ON_PRIMITIVES = fails(function() {
      nativeKeys(1);
    });
    $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES }, {
      keys: function keys(it) {
        return nativeKeys(toObject(it));
      }
    });
  }
});

// node_modules/core-js-pure/es/object/keys.js
var require_keys = __commonJS({
  "node_modules/core-js-pure/es/object/keys.js"(exports, module) {
    init_react();
    require_es_object_keys();
    var path = require_path();
    module.exports = path.Object.keys;
  }
});

// node_modules/core-js-pure/stable/object/keys.js
var require_keys2 = __commonJS({
  "node_modules/core-js-pure/stable/object/keys.js"(exports, module) {
    init_react();
    var parent = require_keys();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/keys.js
var require_keys3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/keys.js"(exports, module) {
    init_react();
    module.exports = require_keys2();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/defineProperty.js"(exports, module) {
    init_react();
    var _Object$defineProperty = require_define_property6();
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        _Object$defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/internals/is-data-descriptor.js
var require_is_data_descriptor = __commonJS({
  "node_modules/core-js-pure/internals/is-data-descriptor.js"(exports, module) {
    init_react();
    var hasOwn = require_has_own_property();
    module.exports = function(descriptor) {
      return descriptor !== void 0 && (hasOwn(descriptor, "value") || hasOwn(descriptor, "writable"));
    };
  }
});

// node_modules/core-js-pure/modules/es.reflect.get.js
var require_es_reflect_get = __commonJS({
  "node_modules/core-js-pure/modules/es.reflect.get.js"() {
    init_react();
    var $ = require_export();
    var call = require_function_call();
    var isObject = require_is_object();
    var anObject = require_an_object();
    var isDataDescriptor = require_is_data_descriptor();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var getPrototypeOf = require_object_get_prototype_of();
    function get(target, propertyKey) {
      var receiver = arguments.length < 3 ? target : arguments[2];
      var descriptor, prototype;
      if (anObject(target) === receiver)
        return target[propertyKey];
      descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey);
      if (descriptor)
        return isDataDescriptor(descriptor) ? descriptor.value : descriptor.get === void 0 ? void 0 : call(descriptor.get, receiver);
      if (isObject(prototype = getPrototypeOf(target)))
        return get(prototype, propertyKey, receiver);
    }
    $({ target: "Reflect", stat: true }, {
      get
    });
  }
});

// node_modules/core-js-pure/es/reflect/get.js
var require_get = __commonJS({
  "node_modules/core-js-pure/es/reflect/get.js"(exports, module) {
    init_react();
    require_es_reflect_get();
    var path = require_path();
    module.exports = path.Reflect.get;
  }
});

// node_modules/core-js-pure/stable/reflect/get.js
var require_get2 = __commonJS({
  "node_modules/core-js-pure/stable/reflect/get.js"(exports, module) {
    init_react();
    var parent = require_get();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/reflect/get.js
var require_get3 = __commonJS({
  "node_modules/core-js-pure/actual/reflect/get.js"(exports, module) {
    init_react();
    var parent = require_get2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/reflect/get.js
var require_get4 = __commonJS({
  "node_modules/core-js-pure/features/reflect/get.js"(exports, module) {
    init_react();
    var parent = require_get3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/reflect/get.js
var require_get5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/reflect/get.js"(exports, module) {
    init_react();
    module.exports = require_get4();
  }
});

// node_modules/core-js-pure/actual/object/get-own-property-descriptor.js
var require_get_own_property_descriptor4 = __commonJS({
  "node_modules/core-js-pure/actual/object/get-own-property-descriptor.js"(exports, module) {
    init_react();
    var parent = require_get_own_property_descriptor2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/object/get-own-property-descriptor.js
var require_get_own_property_descriptor5 = __commonJS({
  "node_modules/core-js-pure/features/object/get-own-property-descriptor.js"(exports, module) {
    init_react();
    var parent = require_get_own_property_descriptor4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-descriptor.js
var require_get_own_property_descriptor6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-descriptor.js"(exports, module) {
    init_react();
    module.exports = require_get_own_property_descriptor5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/superPropBase.js
var require_superPropBase = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/superPropBase.js"(exports, module) {
    init_react();
    var getPrototypeOf = require_getPrototypeOf();
    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = getPrototypeOf(object);
        if (object === null)
          break;
      }
      return object;
    }
    module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/get.js
var require_get6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/get.js"(exports, module) {
    init_react();
    var _Reflect$get = require_get5();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor6();
    var superPropBase = require_superPropBase();
    function _get() {
      if (typeof Reflect !== "undefined" && _Reflect$get) {
        module.exports = _get = _Reflect$get, module.exports.__esModule = true, module.exports["default"] = module.exports;
      } else {
        module.exports = _get = function _get2(target, property, receiver) {
          var base = superPropBase(target, property);
          if (!base)
            return;
          var desc = _Object$getOwnPropertyDescriptor(base, property);
          if (desc.get) {
            return desc.get.call(arguments.length < 3 ? target : receiver);
          }
          return desc.value;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      }
      return _get.apply(this, arguments);
    }
    module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/es/array/virtual/concat.js
var require_concat = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/concat.js"(exports, module) {
    init_react();
    require_es_array_concat();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").concat;
  }
});

// node_modules/core-js-pure/es/instance/concat.js
var require_concat2 = __commonJS({
  "node_modules/core-js-pure/es/instance/concat.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_concat();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.concat;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.concat ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/concat.js
var require_concat3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/concat.js"(exports, module) {
    init_react();
    var parent = require_concat2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js
var require_concat4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js"(exports, module) {
    init_react();
    module.exports = require_concat3();
  }
});

// node_modules/core-js-pure/internals/collection-strong.js
var require_collection_strong = __commonJS({
  "node_modules/core-js-pure/internals/collection-strong.js"(exports, module) {
    "use strict";
    init_react();
    var defineProperty = require_object_define_property().f;
    var create = require_object_create();
    var redefineAll = require_redefine_all();
    var bind = require_function_bind_context();
    var anInstance = require_an_instance();
    var iterate = require_iterate();
    var defineIterator = require_define_iterator();
    var setSpecies = require_set_species();
    var DESCRIPTORS = require_descriptors();
    var fastKey = require_internal_metadata().fastKey;
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    module.exports = {
      getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
        var Constructor = wrapper(function(that, iterable) {
          anInstance(that, Prototype);
          setInternalState(that, {
            type: CONSTRUCTOR_NAME,
            index: create(null),
            first: void 0,
            last: void 0,
            size: 0
          });
          if (!DESCRIPTORS)
            that.size = 0;
          if (iterable != void 0)
            iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
        });
        var Prototype = Constructor.prototype;
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var define = function(that, key, value) {
          var state = getInternalState(that);
          var entry = getEntry(that, key);
          var previous, index;
          if (entry) {
            entry.value = value;
          } else {
            state.last = entry = {
              index: index = fastKey(key, true),
              key,
              value,
              previous: previous = state.last,
              next: void 0,
              removed: false
            };
            if (!state.first)
              state.first = entry;
            if (previous)
              previous.next = entry;
            if (DESCRIPTORS)
              state.size++;
            else
              that.size++;
            if (index !== "F")
              state.index[index] = entry;
          }
          return that;
        };
        var getEntry = function(that, key) {
          var state = getInternalState(that);
          var index = fastKey(key);
          var entry;
          if (index !== "F")
            return state.index[index];
          for (entry = state.first; entry; entry = entry.next) {
            if (entry.key == key)
              return entry;
          }
        };
        redefineAll(Prototype, {
          clear: function clear() {
            var that = this;
            var state = getInternalState(that);
            var data = state.index;
            var entry = state.first;
            while (entry) {
              entry.removed = true;
              if (entry.previous)
                entry.previous = entry.previous.next = void 0;
              delete data[entry.index];
              entry = entry.next;
            }
            state.first = state.last = void 0;
            if (DESCRIPTORS)
              state.size = 0;
            else
              that.size = 0;
          },
          "delete": function(key) {
            var that = this;
            var state = getInternalState(that);
            var entry = getEntry(that, key);
            if (entry) {
              var next = entry.next;
              var prev = entry.previous;
              delete state.index[entry.index];
              entry.removed = true;
              if (prev)
                prev.next = next;
              if (next)
                next.previous = prev;
              if (state.first == entry)
                state.first = next;
              if (state.last == entry)
                state.last = prev;
              if (DESCRIPTORS)
                state.size--;
              else
                that.size--;
            }
            return !!entry;
          },
          forEach: function forEach(callbackfn) {
            var state = getInternalState(this);
            var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
            var entry;
            while (entry = entry ? entry.next : state.first) {
              boundFunction(entry.value, entry.key, this);
              while (entry && entry.removed)
                entry = entry.previous;
            }
          },
          has: function has(key) {
            return !!getEntry(this, key);
          }
        });
        redefineAll(Prototype, IS_MAP ? {
          get: function get(key) {
            var entry = getEntry(this, key);
            return entry && entry.value;
          },
          set: function set(key, value) {
            return define(this, key === 0 ? 0 : key, value);
          }
        } : {
          add: function add(value) {
            return define(this, value = value === 0 ? 0 : value, value);
          }
        });
        if (DESCRIPTORS)
          defineProperty(Prototype, "size", {
            get: function() {
              return getInternalState(this).size;
            }
          });
        return Constructor;
      },
      setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
        var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
        var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
        defineIterator(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
          setInternalState(this, {
            type: ITERATOR_NAME,
            target: iterated,
            state: getInternalCollectionState(iterated),
            kind,
            last: void 0
          });
        }, function() {
          var state = getInternalIteratorState(this);
          var kind = state.kind;
          var entry = state.last;
          while (entry && entry.removed)
            entry = entry.previous;
          if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
            state.target = void 0;
            return { value: void 0, done: true };
          }
          if (kind == "keys")
            return { value: entry.key, done: false };
          if (kind == "values")
            return { value: entry.value, done: false };
          return { value: [entry.key, entry.value], done: false };
        }, IS_MAP ? "entries" : "values", !IS_MAP, true);
        setSpecies(CONSTRUCTOR_NAME);
      }
    };
  }
});

// node_modules/core-js-pure/modules/es.map.js
var require_es_map = __commonJS({
  "node_modules/core-js-pure/modules/es.map.js"() {
    "use strict";
    init_react();
    var collection = require_collection();
    var collectionStrong = require_collection_strong();
    collection("Map", function(init) {
      return function Map2() {
        return init(this, arguments.length ? arguments[0] : void 0);
      };
    }, collectionStrong);
  }
});

// node_modules/core-js-pure/es/map/index.js
var require_map = __commonJS({
  "node_modules/core-js-pure/es/map/index.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_map();
    require_es_object_to_string();
    require_es_string_iterator();
    var path = require_path();
    module.exports = path.Map;
  }
});

// node_modules/core-js-pure/stable/map/index.js
var require_map2 = __commonJS({
  "node_modules/core-js-pure/stable/map/index.js"(exports, module) {
    init_react();
    var parent = require_map();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/map/index.js
var require_map3 = __commonJS({
  "node_modules/core-js-pure/actual/map/index.js"(exports, module) {
    init_react();
    var parent = require_map2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/internals/collection-from.js
var require_collection_from = __commonJS({
  "node_modules/core-js-pure/internals/collection-from.js"(exports, module) {
    "use strict";
    init_react();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var aConstructor = require_a_constructor();
    var iterate = require_iterate();
    var push = [].push;
    module.exports = function from(source) {
      var length = arguments.length;
      var mapFn = length > 1 ? arguments[1] : void 0;
      var mapping, array, n2, boundFunction;
      aConstructor(this);
      mapping = mapFn !== void 0;
      if (mapping)
        aCallable(mapFn);
      if (source == void 0)
        return new this();
      array = [];
      if (mapping) {
        n2 = 0;
        boundFunction = bind(mapFn, length > 2 ? arguments[2] : void 0);
        iterate(source, function(nextItem) {
          call(push, array, boundFunction(nextItem, n2++));
        });
      } else {
        iterate(source, push, { that: array });
      }
      return new this(array);
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.from.js
var require_esnext_map_from = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.from.js"() {
    init_react();
    var $ = require_export();
    var from = require_collection_from();
    $({ target: "Map", stat: true, forced: true }, {
      from
    });
  }
});

// node_modules/core-js-pure/internals/collection-of.js
var require_collection_of = __commonJS({
  "node_modules/core-js-pure/internals/collection-of.js"(exports, module) {
    "use strict";
    init_react();
    var arraySlice = require_array_slice();
    module.exports = function of() {
      return new this(arraySlice(arguments));
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.of.js
var require_esnext_map_of = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.of.js"() {
    init_react();
    var $ = require_export();
    var of = require_collection_of();
    $({ target: "Map", stat: true, forced: true }, {
      of
    });
  }
});

// node_modules/core-js-pure/internals/collection-delete-all.js
var require_collection_delete_all = __commonJS({
  "node_modules/core-js-pure/internals/collection-delete-all.js"(exports, module) {
    "use strict";
    init_react();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    module.exports = function deleteAll() {
      var collection = anObject(this);
      var remover = aCallable(collection["delete"]);
      var allDeleted = true;
      var wasDeleted;
      for (var k2 = 0, len = arguments.length; k2 < len; k2++) {
        wasDeleted = call(remover, collection, arguments[k2]);
        allDeleted = allDeleted && wasDeleted;
      }
      return !!allDeleted;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.delete-all.js
var require_esnext_map_delete_all = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.delete-all.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var deleteAll = require_collection_delete_all();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      deleteAll
    });
  }
});

// node_modules/core-js-pure/internals/map-emplace.js
var require_map_emplace = __commonJS({
  "node_modules/core-js-pure/internals/map-emplace.js"(exports, module) {
    "use strict";
    init_react();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    module.exports = function emplace(key, handler) {
      var map = anObject(this);
      var get = aCallable(map.get);
      var has = aCallable(map.has);
      var set = aCallable(map.set);
      var value = call(has, map, key) && "update" in handler ? handler.update(call(get, map, key), key, map) : handler.insert(key, map);
      call(set, map, key, value);
      return value;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.emplace.js
var require_esnext_map_emplace = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.emplace.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var emplace = require_map_emplace();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      emplace
    });
  }
});

// node_modules/core-js-pure/internals/get-map-iterator.js
var require_get_map_iterator = __commonJS({
  "node_modules/core-js-pure/internals/get-map-iterator.js"(exports, module) {
    init_react();
    var getIterator = require_get_iterator();
    module.exports = getIterator;
  }
});

// node_modules/core-js-pure/modules/esnext.map.every.js
var require_esnext_map_every = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.every.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var anObject = require_an_object();
    var bind = require_function_bind_context();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      every: function every(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return !iterate(iterator, function(key, value, stop) {
          if (!boundFunction(value, key, map))
            return stop();
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.filter.js
var require_esnext_map_filter = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.filter.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var getBuiltIn = require_get_built_in();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var speciesConstructor = require_species_constructor();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      filter: function filter(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var newMap = new (speciesConstructor(map, getBuiltIn("Map")))();
        var setter = aCallable(newMap.set);
        iterate(iterator, function(key, value) {
          if (boundFunction(value, key, map))
            call(setter, newMap, key, value);
        }, { AS_ENTRIES: true, IS_ITERATOR: true });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.find.js
var require_esnext_map_find = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.find.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var anObject = require_an_object();
    var bind = require_function_bind_context();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      find: function find(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(iterator, function(key, value, stop) {
          if (boundFunction(value, key, map))
            return stop(value);
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.find-key.js
var require_esnext_map_find_key = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.find-key.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var anObject = require_an_object();
    var bind = require_function_bind_context();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      findKey: function findKey(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(iterator, function(key, value, stop) {
          if (boundFunction(value, key, map))
            return stop(key);
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.group-by.js
var require_esnext_map_group_by = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.group-by.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var getIterator = require_get_iterator();
    var iterate = require_iterate();
    var push = uncurryThis([].push);
    $({ target: "Map", stat: true, forced: true }, {
      groupBy: function groupBy(iterable, keyDerivative) {
        aCallable(keyDerivative);
        var iterator = getIterator(iterable);
        var newMap = new this();
        var has = aCallable(newMap.has);
        var get = aCallable(newMap.get);
        var set = aCallable(newMap.set);
        iterate(iterator, function(element) {
          var derivedKey = keyDerivative(element);
          if (!call(has, newMap, derivedKey))
            call(set, newMap, derivedKey, [element]);
          else
            push(call(get, newMap, derivedKey), element);
        }, { IS_ITERATOR: true });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/internals/same-value-zero.js
var require_same_value_zero = __commonJS({
  "node_modules/core-js-pure/internals/same-value-zero.js"(exports, module) {
    init_react();
    module.exports = function(x2, y2) {
      return x2 === y2 || x2 != x2 && y2 != y2;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.includes.js
var require_esnext_map_includes = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.includes.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var anObject = require_an_object();
    var getMapIterator = require_get_map_iterator();
    var sameValueZero = require_same_value_zero();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      includes: function includes(searchElement) {
        return iterate(getMapIterator(anObject(this)), function(key, value, stop) {
          if (sameValueZero(value, searchElement))
            return stop();
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.key-by.js
var require_esnext_map_key_by = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.key-by.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var call = require_function_call();
    var iterate = require_iterate();
    var aCallable = require_a_callable();
    $({ target: "Map", stat: true, forced: true }, {
      keyBy: function keyBy(iterable, keyDerivative) {
        var newMap = new this();
        aCallable(keyDerivative);
        var setter = aCallable(newMap.set);
        iterate(iterable, function(element) {
          call(setter, newMap, keyDerivative(element), element);
        });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.key-of.js
var require_esnext_map_key_of = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.key-of.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var anObject = require_an_object();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      keyOf: function keyOf(searchElement) {
        return iterate(getMapIterator(anObject(this)), function(key, value, stop) {
          if (value === searchElement)
            return stop(key);
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.map-keys.js
var require_esnext_map_map_keys = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.map-keys.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var getBuiltIn = require_get_built_in();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var speciesConstructor = require_species_constructor();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      mapKeys: function mapKeys(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var newMap = new (speciesConstructor(map, getBuiltIn("Map")))();
        var setter = aCallable(newMap.set);
        iterate(iterator, function(key, value) {
          call(setter, newMap, boundFunction(value, key, map), value);
        }, { AS_ENTRIES: true, IS_ITERATOR: true });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.map-values.js
var require_esnext_map_map_values = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.map-values.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var getBuiltIn = require_get_built_in();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var speciesConstructor = require_species_constructor();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      mapValues: function mapValues(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var newMap = new (speciesConstructor(map, getBuiltIn("Map")))();
        var setter = aCallable(newMap.set);
        iterate(iterator, function(key, value) {
          call(setter, newMap, key, boundFunction(value, key, map));
        }, { AS_ENTRIES: true, IS_ITERATOR: true });
        return newMap;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.merge.js
var require_esnext_map_merge = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.merge.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      merge: function merge(iterable) {
        var map = anObject(this);
        var setter = aCallable(map.set);
        var argumentsLength = arguments.length;
        var i2 = 0;
        while (i2 < argumentsLength) {
          iterate(arguments[i2++], setter, { that: map, AS_ENTRIES: true });
        }
        return map;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.reduce.js
var require_esnext_map_reduce = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.reduce.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var anObject = require_an_object();
    var aCallable = require_a_callable();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    var TypeError2 = global2.TypeError;
    $({ target: "Map", proto: true, real: true, forced: true }, {
      reduce: function reduce(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var noInitial = arguments.length < 2;
        var accumulator = noInitial ? void 0 : arguments[1];
        aCallable(callbackfn);
        iterate(iterator, function(key, value) {
          if (noInitial) {
            noInitial = false;
            accumulator = value;
          } else {
            accumulator = callbackfn(accumulator, value, key, map);
          }
        }, { AS_ENTRIES: true, IS_ITERATOR: true });
        if (noInitial)
          throw TypeError2("Reduce of empty map with no initial value");
        return accumulator;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.some.js
var require_esnext_map_some = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.some.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var anObject = require_an_object();
    var bind = require_function_bind_context();
    var getMapIterator = require_get_map_iterator();
    var iterate = require_iterate();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      some: function some(callbackfn) {
        var map = anObject(this);
        var iterator = getMapIterator(map);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(iterator, function(key, value, stop) {
          if (boundFunction(value, key, map))
            return stop();
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      }
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.update.js
var require_esnext_map_update = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.update.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var call = require_function_call();
    var anObject = require_an_object();
    var aCallable = require_a_callable();
    var TypeError2 = global2.TypeError;
    $({ target: "Map", proto: true, real: true, forced: true }, {
      update: function update(key, callback) {
        var map = anObject(this);
        var get = aCallable(map.get);
        var has = aCallable(map.has);
        var set = aCallable(map.set);
        var length = arguments.length;
        aCallable(callback);
        var isPresentInMap = call(has, map, key);
        if (!isPresentInMap && length < 3) {
          throw TypeError2("Updating absent value");
        }
        var value = isPresentInMap ? call(get, map, key) : aCallable(length > 2 ? arguments[2] : void 0)(key, map);
        call(set, map, key, callback(value, key, map));
        return map;
      }
    });
  }
});

// node_modules/core-js-pure/internals/map-upsert.js
var require_map_upsert = __commonJS({
  "node_modules/core-js-pure/internals/map-upsert.js"(exports, module) {
    "use strict";
    init_react();
    var global2 = require_global();
    var call = require_function_call();
    var aCallable = require_a_callable();
    var isCallable = require_is_callable();
    var anObject = require_an_object();
    var TypeError2 = global2.TypeError;
    module.exports = function upsert(key, updateFn) {
      var map = anObject(this);
      var get = aCallable(map.get);
      var has = aCallable(map.has);
      var set = aCallable(map.set);
      var insertFn = arguments.length > 2 ? arguments[2] : void 0;
      var value;
      if (!isCallable(updateFn) && !isCallable(insertFn)) {
        throw TypeError2("At least one callback required");
      }
      if (call(has, map, key)) {
        value = call(get, map, key);
        if (isCallable(updateFn)) {
          value = updateFn(value);
          call(set, map, key, value);
        }
      } else if (isCallable(insertFn)) {
        value = insertFn();
        call(set, map, key, value);
      }
      return value;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.map.upsert.js
var require_esnext_map_upsert = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.upsert.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var upsert = require_map_upsert();
    $({ target: "Map", proto: true, real: true, forced: true }, {
      upsert
    });
  }
});

// node_modules/core-js-pure/modules/esnext.map.update-or-insert.js
var require_esnext_map_update_or_insert = __commonJS({
  "node_modules/core-js-pure/modules/esnext.map.update-or-insert.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var upsert = require_map_upsert();
    $({ target: "Map", proto: true, real: true, name: "upsert", forced: true }, {
      updateOrInsert: upsert
    });
  }
});

// node_modules/core-js-pure/features/map/index.js
var require_map4 = __commonJS({
  "node_modules/core-js-pure/features/map/index.js"(exports, module) {
    init_react();
    var parent = require_map3();
    require_esnext_map_from();
    require_esnext_map_of();
    require_esnext_map_delete_all();
    require_esnext_map_emplace();
    require_esnext_map_every();
    require_esnext_map_filter();
    require_esnext_map_find();
    require_esnext_map_find_key();
    require_esnext_map_group_by();
    require_esnext_map_includes();
    require_esnext_map_key_by();
    require_esnext_map_key_of();
    require_esnext_map_map_keys();
    require_esnext_map_map_values();
    require_esnext_map_merge();
    require_esnext_map_reduce();
    require_esnext_map_some();
    require_esnext_map_update();
    require_esnext_map_upsert();
    require_esnext_map_update_or_insert();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/map.js
var require_map5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/map.js"(exports, module) {
    init_react();
    module.exports = require_map4();
  }
});

// node_modules/core-js-pure/modules/es.array.index-of.js
var require_es_array_index_of = __commonJS({
  "node_modules/core-js-pure/modules/es.array.index-of.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var $IndexOf = require_array_includes().indexOf;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var un$IndexOf = uncurryThis([].indexOf);
    var NEGATIVE_ZERO = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
    var STRICT_METHOD = arrayMethodIsStrict("indexOf");
    $({ target: "Array", proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD }, {
      indexOf: function indexOf(searchElement) {
        var fromIndex = arguments.length > 1 ? arguments[1] : void 0;
        return NEGATIVE_ZERO ? un$IndexOf(this, searchElement, fromIndex) || 0 : $IndexOf(this, searchElement, fromIndex);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/index-of.js
var require_index_of = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/index-of.js"(exports, module) {
    init_react();
    require_es_array_index_of();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").indexOf;
  }
});

// node_modules/core-js-pure/es/instance/index-of.js
var require_index_of2 = __commonJS({
  "node_modules/core-js-pure/es/instance/index-of.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_index_of();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.indexOf;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.indexOf ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/index-of.js
var require_index_of3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/index-of.js"(exports, module) {
    init_react();
    var parent = require_index_of2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/instance/index-of.js
var require_index_of4 = __commonJS({
  "node_modules/core-js-pure/actual/instance/index-of.js"(exports, module) {
    init_react();
    var parent = require_index_of3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/instance/index-of.js
var require_index_of5 = __commonJS({
  "node_modules/core-js-pure/features/instance/index-of.js"(exports, module) {
    init_react();
    var parent = require_index_of4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/instance/index-of.js
var require_index_of6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/instance/index-of.js"(exports, module) {
    init_react();
    module.exports = require_index_of5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/isNativeFunction.js
var require_isNativeFunction = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/isNativeFunction.js"(exports, module) {
    init_react();
    var _indexOfInstanceProperty = require_index_of6();
    function _isNativeFunction(fn2) {
      var _context;
      return _indexOfInstanceProperty(_context = Function.toString.call(fn2)).call(_context, "[native code]") !== -1;
    }
    module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/actual/reflect/construct.js
var require_construct4 = __commonJS({
  "node_modules/core-js-pure/actual/reflect/construct.js"(exports, module) {
    init_react();
    var parent = require_construct2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/reflect/construct.js
var require_construct5 = __commonJS({
  "node_modules/core-js-pure/features/reflect/construct.js"(exports, module) {
    init_react();
    var parent = require_construct4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/reflect/construct.js
var require_construct6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/reflect/construct.js"(exports, module) {
    init_react();
    module.exports = require_construct5();
  }
});

// node_modules/core-js-pure/modules/es.function.bind.js
var require_es_function_bind = __commonJS({
  "node_modules/core-js-pure/modules/es.function.bind.js"() {
    init_react();
    var $ = require_export();
    var bind = require_function_bind();
    $({ target: "Function", proto: true, forced: Function.bind !== bind }, {
      bind
    });
  }
});

// node_modules/core-js-pure/es/function/virtual/bind.js
var require_bind = __commonJS({
  "node_modules/core-js-pure/es/function/virtual/bind.js"(exports, module) {
    init_react();
    require_es_function_bind();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Function").bind;
  }
});

// node_modules/core-js-pure/es/instance/bind.js
var require_bind2 = __commonJS({
  "node_modules/core-js-pure/es/instance/bind.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_bind();
    var FunctionPrototype = Function.prototype;
    module.exports = function(it) {
      var own = it.bind;
      return it === FunctionPrototype || isPrototypeOf(FunctionPrototype, it) && own === FunctionPrototype.bind ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/bind.js
var require_bind3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/bind.js"(exports, module) {
    init_react();
    var parent = require_bind2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/instance/bind.js
var require_bind4 = __commonJS({
  "node_modules/core-js-pure/actual/instance/bind.js"(exports, module) {
    init_react();
    var parent = require_bind3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/instance/bind.js
var require_bind5 = __commonJS({
  "node_modules/core-js-pure/features/instance/bind.js"(exports, module) {
    init_react();
    var parent = require_bind4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/instance/bind.js
var require_bind6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/instance/bind.js"(exports, module) {
    init_react();
    module.exports = require_bind5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/isNativeReflectConstruct.js
var require_isNativeReflectConstruct = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/isNativeReflectConstruct.js"(exports, module) {
    init_react();
    var _Reflect$construct = require_construct6();
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/construct.js
var require_construct7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/construct.js"(exports, module) {
    init_react();
    var _Reflect$construct = require_construct6();
    var _bindInstanceProperty = require_bind6();
    var setPrototypeOf = require_setPrototypeOf();
    var isNativeReflectConstruct = require_isNativeReflectConstruct();
    function _construct(Parent, args, Class) {
      if (isNativeReflectConstruct()) {
        module.exports = _construct = _Reflect$construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
      } else {
        module.exports = _construct = function _construct2(Parent2, args2, Class2) {
          var a2 = [null];
          a2.push.apply(a2, args2);
          var Constructor = _bindInstanceProperty(Function).apply(Parent2, a2);
          var instance = new Constructor();
          if (Class2)
            setPrototypeOf(instance, Class2.prototype);
          return instance;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      }
      return _construct.apply(null, arguments);
    }
    module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/wrapNativeSuper.js
var require_wrapNativeSuper = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/wrapNativeSuper.js"(exports, module) {
    init_react();
    var _Map = require_map5();
    var _Object$create = require_create5();
    var getPrototypeOf = require_getPrototypeOf();
    var setPrototypeOf = require_setPrototypeOf();
    var isNativeFunction = require_isNativeFunction();
    var construct = require_construct7();
    function _wrapNativeSuper(Class) {
      var _cache = typeof _Map === "function" ? new _Map() : void 0;
      module.exports = _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !isNativeFunction(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return construct(Class2, arguments, getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = _Object$create(Class2.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return setPrototypeOf(Wrapper, Class2);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _wrapNativeSuper(Class);
    }
    module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/moralis/lib/browser/ParseError.js
var require_ParseError = __commonJS({
  "node_modules/moralis/lib/browser/ParseError.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty2 = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty2(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _defineProperty = _interopRequireDefault(require_define_property3());
    var _concat = _interopRequireDefault(require_concat4());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _wrapNativeSuper2 = _interopRequireDefault(require_wrapNativeSuper());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var ParseError = /* @__PURE__ */ function(_Error) {
      (0, _inherits2.default)(ParseError2, _Error);
      var _super = _createSuper(ParseError2);
      function ParseError2(code, message) {
        var _this;
        (0, _classCallCheck2.default)(this, ParseError2);
        _this = _super.call(this, message);
        _this.code = code;
        (0, _defineProperty.default)((0, _assertThisInitialized2.default)(_this), "message", {
          enumerable: true,
          value: message
        });
        return _this;
      }
      (0, _createClass2.default)(ParseError2, [{
        key: "toString",
        value: function() {
          var _context;
          return (0, _concat.default)(_context = "ParseError: ".concat(this.code, " ")).call(_context, this.message);
        }
      }]);
      return ParseError2;
    }(/* @__PURE__ */ (0, _wrapNativeSuper2.default)(Error));
    ParseError.OTHER_CAUSE = -1;
    ParseError.INTERNAL_SERVER_ERROR = 1;
    ParseError.CONNECTION_FAILED = 100;
    ParseError.OBJECT_NOT_FOUND = 101;
    ParseError.INVALID_QUERY = 102;
    ParseError.INVALID_CLASS_NAME = 103;
    ParseError.MISSING_OBJECT_ID = 104;
    ParseError.INVALID_KEY_NAME = 105;
    ParseError.INVALID_POINTER = 106;
    ParseError.INVALID_JSON = 107;
    ParseError.COMMAND_UNAVAILABLE = 108;
    ParseError.NOT_INITIALIZED = 109;
    ParseError.INCORRECT_TYPE = 111;
    ParseError.INVALID_CHANNEL_NAME = 112;
    ParseError.PUSH_MISCONFIGURED = 115;
    ParseError.OBJECT_TOO_LARGE = 116;
    ParseError.OPERATION_FORBIDDEN = 119;
    ParseError.CACHE_MISS = 120;
    ParseError.INVALID_NESTED_KEY = 121;
    ParseError.INVALID_FILE_NAME = 122;
    ParseError.INVALID_ACL = 123;
    ParseError.TIMEOUT = 124;
    ParseError.INVALID_EMAIL_ADDRESS = 125;
    ParseError.MISSING_CONTENT_TYPE = 126;
    ParseError.MISSING_CONTENT_LENGTH = 127;
    ParseError.INVALID_CONTENT_LENGTH = 128;
    ParseError.FILE_TOO_LARGE = 129;
    ParseError.FILE_SAVE_ERROR = 130;
    ParseError.DUPLICATE_VALUE = 137;
    ParseError.INVALID_ROLE_NAME = 139;
    ParseError.EXCEEDED_QUOTA = 140;
    ParseError.SCRIPT_FAILED = 141;
    ParseError.VALIDATION_ERROR = 142;
    ParseError.INVALID_IMAGE_DATA = 143;
    ParseError.UNSAVED_FILE_ERROR = 151;
    ParseError.INVALID_PUSH_TIME_ERROR = 152;
    ParseError.FILE_DELETE_ERROR = 153;
    ParseError.FILE_DELETE_UNNAMED_ERROR = 161;
    ParseError.REQUEST_LIMIT_EXCEEDED = 155;
    ParseError.DUPLICATE_REQUEST = 159;
    ParseError.INVALID_EVENT_NAME = 160;
    ParseError.USERNAME_MISSING = 200;
    ParseError.PASSWORD_MISSING = 201;
    ParseError.USERNAME_TAKEN = 202;
    ParseError.EMAIL_TAKEN = 203;
    ParseError.EMAIL_MISSING = 204;
    ParseError.EMAIL_NOT_FOUND = 205;
    ParseError.SESSION_MISSING = 206;
    ParseError.MUST_CREATE_USER_THROUGH_SIGNUP = 207;
    ParseError.ACCOUNT_ALREADY_LINKED = 208;
    ParseError.INVALID_SESSION_TOKEN = 209;
    ParseError.MFA_ERROR = 210;
    ParseError.MFA_TOKEN_REQUIRED = 211;
    ParseError.LINKED_ID_MISSING = 250;
    ParseError.INVALID_LINKED_SESSION = 251;
    ParseError.UNSUPPORTED_SERVICE = 252;
    ParseError.INVALID_SCHEMA_OPERATION = 255;
    ParseError.AGGREGATE_ERROR = 600;
    ParseError.FILE_READ_ERROR = 601;
    ParseError.X_DOMAIN_REQUEST = 602;
    var _default = ParseError;
    exports.default = _default;
  }
});

// node_modules/core-js-pure/es/object/get-own-property-symbols.js
var require_get_own_property_symbols = __commonJS({
  "node_modules/core-js-pure/es/object/get-own-property-symbols.js"(exports, module) {
    init_react();
    require_es_symbol();
    var path = require_path();
    module.exports = path.Object.getOwnPropertySymbols;
  }
});

// node_modules/core-js-pure/stable/object/get-own-property-symbols.js
var require_get_own_property_symbols2 = __commonJS({
  "node_modules/core-js-pure/stable/object/get-own-property-symbols.js"(exports, module) {
    init_react();
    var parent = require_get_own_property_symbols();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols.js
var require_get_own_property_symbols3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols.js"(exports, module) {
    init_react();
    module.exports = require_get_own_property_symbols2();
  }
});

// node_modules/core-js-pure/modules/es.array.filter.js
var require_es_array_filter = __commonJS({
  "node_modules/core-js-pure/modules/es.array.filter.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $filter = require_array_iteration().filter;
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
    $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      filter: function filter(callbackfn) {
        return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/filter.js
var require_filter = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/filter.js"(exports, module) {
    init_react();
    require_es_array_filter();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").filter;
  }
});

// node_modules/core-js-pure/es/instance/filter.js
var require_filter2 = __commonJS({
  "node_modules/core-js-pure/es/instance/filter.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_filter();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.filter;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.filter ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/filter.js
var require_filter3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/filter.js"(exports, module) {
    init_react();
    var parent = require_filter2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/filter.js
var require_filter4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/filter.js"(exports, module) {
    init_react();
    module.exports = require_filter3();
  }
});

// node_modules/core-js-pure/modules/es.object.get-own-property-descriptors.js
var require_es_object_get_own_property_descriptors = __commonJS({
  "node_modules/core-js-pure/modules/es.object.get-own-property-descriptors.js"() {
    init_react();
    var $ = require_export();
    var DESCRIPTORS = require_descriptors();
    var ownKeys = require_own_keys();
    var toIndexedObject = require_to_indexed_object();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var createProperty = require_create_property();
    $({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
      getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
        var O2 = toIndexedObject(object);
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        var keys = ownKeys(O2);
        var result = {};
        var index = 0;
        var key, descriptor;
        while (keys.length > index) {
          descriptor = getOwnPropertyDescriptor(O2, key = keys[index++]);
          if (descriptor !== void 0)
            createProperty(result, key, descriptor);
        }
        return result;
      }
    });
  }
});

// node_modules/core-js-pure/es/object/get-own-property-descriptors.js
var require_get_own_property_descriptors = __commonJS({
  "node_modules/core-js-pure/es/object/get-own-property-descriptors.js"(exports, module) {
    init_react();
    require_es_object_get_own_property_descriptors();
    var path = require_path();
    module.exports = path.Object.getOwnPropertyDescriptors;
  }
});

// node_modules/core-js-pure/stable/object/get-own-property-descriptors.js
var require_get_own_property_descriptors2 = __commonJS({
  "node_modules/core-js-pure/stable/object/get-own-property-descriptors.js"(exports, module) {
    init_react();
    var parent = require_get_own_property_descriptors();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors.js
var require_get_own_property_descriptors3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors.js"(exports, module) {
    init_react();
    module.exports = require_get_own_property_descriptors2();
  }
});

// node_modules/core-js-pure/modules/es.object.define-properties.js
var require_es_object_define_properties = __commonJS({
  "node_modules/core-js-pure/modules/es.object.define-properties.js"() {
    init_react();
    var $ = require_export();
    var DESCRIPTORS = require_descriptors();
    var defineProperties = require_object_define_properties().f;
    $({ target: "Object", stat: true, forced: Object.defineProperties !== defineProperties, sham: !DESCRIPTORS }, {
      defineProperties
    });
  }
});

// node_modules/core-js-pure/es/object/define-properties.js
var require_define_properties = __commonJS({
  "node_modules/core-js-pure/es/object/define-properties.js"(exports, module) {
    init_react();
    require_es_object_define_properties();
    var path = require_path();
    var Object2 = path.Object;
    var defineProperties = module.exports = function defineProperties2(T, D2) {
      return Object2.defineProperties(T, D2);
    };
    if (Object2.defineProperties.sham)
      defineProperties.sham = true;
  }
});

// node_modules/core-js-pure/stable/object/define-properties.js
var require_define_properties2 = __commonJS({
  "node_modules/core-js-pure/stable/object/define-properties.js"(exports, module) {
    init_react();
    var parent = require_define_properties();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/define-properties.js
var require_define_properties3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/define-properties.js"(exports, module) {
    init_react();
    module.exports = require_define_properties2();
  }
});

// node_modules/core-js-pure/modules/es.array.slice.js
var require_es_array_slice = __commonJS({
  "node_modules/core-js-pure/modules/es.array.slice.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var isArray = require_is_array();
    var isConstructor = require_is_constructor();
    var isObject = require_is_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var toIndexedObject = require_to_indexed_object();
    var createProperty = require_create_property();
    var wellKnownSymbol = require_well_known_symbol();
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var un$Slice = require_array_slice();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
    var SPECIES = wellKnownSymbol("species");
    var Array2 = global2.Array;
    var max = Math.max;
    $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      slice: function slice(start, end) {
        var O2 = toIndexedObject(this);
        var length = lengthOfArrayLike(O2);
        var k2 = toAbsoluteIndex(start, length);
        var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
        var Constructor, result, n2;
        if (isArray(O2)) {
          Constructor = O2.constructor;
          if (isConstructor(Constructor) && (Constructor === Array2 || isArray(Constructor.prototype))) {
            Constructor = void 0;
          } else if (isObject(Constructor)) {
            Constructor = Constructor[SPECIES];
            if (Constructor === null)
              Constructor = void 0;
          }
          if (Constructor === Array2 || Constructor === void 0) {
            return un$Slice(O2, k2, fin);
          }
        }
        result = new (Constructor === void 0 ? Array2 : Constructor)(max(fin - k2, 0));
        for (n2 = 0; k2 < fin; k2++, n2++)
          if (k2 in O2)
            createProperty(result, n2, O2[k2]);
        result.length = n2;
        return result;
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/slice.js
var require_slice = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/slice.js"(exports, module) {
    init_react();
    require_es_array_slice();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").slice;
  }
});

// node_modules/core-js-pure/es/instance/slice.js
var require_slice2 = __commonJS({
  "node_modules/core-js-pure/es/instance/slice.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_slice();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.slice;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.slice ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/slice.js
var require_slice3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/slice.js"(exports, module) {
    init_react();
    var parent = require_slice2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js
var require_slice4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js"(exports, module) {
    init_react();
    module.exports = require_slice3();
  }
});

// node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js
var require_call_with_safe_iteration_closing = __commonJS({
  "node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js"(exports, module) {
    init_react();
    var anObject = require_an_object();
    var iteratorClose = require_iterator_close();
    module.exports = function(iterator, fn2, value, ENTRIES) {
      try {
        return ENTRIES ? fn2(anObject(value)[0], value[1]) : fn2(value);
      } catch (error) {
        iteratorClose(iterator, "throw", error);
      }
    };
  }
});

// node_modules/core-js-pure/internals/array-from.js
var require_array_from = __commonJS({
  "node_modules/core-js-pure/internals/array-from.js"(exports, module) {
    "use strict";
    init_react();
    var global2 = require_global();
    var bind = require_function_bind_context();
    var call = require_function_call();
    var toObject = require_to_object();
    var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
    var isArrayIteratorMethod = require_is_array_iterator_method();
    var isConstructor = require_is_constructor();
    var lengthOfArrayLike = require_length_of_array_like();
    var createProperty = require_create_property();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var Array2 = global2.Array;
    module.exports = function from(arrayLike) {
      var O2 = toObject(arrayLike);
      var IS_CONSTRUCTOR = isConstructor(this);
      var argumentsLength = arguments.length;
      var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
      var mapping = mapfn !== void 0;
      if (mapping)
        mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
      var iteratorMethod = getIteratorMethod(O2);
      var index = 0;
      var length, result, step, iterator, next, value;
      if (iteratorMethod && !(this == Array2 && isArrayIteratorMethod(iteratorMethod))) {
        iterator = getIterator(O2, iteratorMethod);
        next = iterator.next;
        result = IS_CONSTRUCTOR ? new this() : [];
        for (; !(step = call(next, iterator)).done; index++) {
          value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
          createProperty(result, index, value);
        }
      } else {
        length = lengthOfArrayLike(O2);
        result = IS_CONSTRUCTOR ? new this(length) : Array2(length);
        for (; length > index; index++) {
          value = mapping ? mapfn(O2[index], index) : O2[index];
          createProperty(result, index, value);
        }
      }
      result.length = index;
      return result;
    };
  }
});

// node_modules/core-js-pure/modules/es.array.from.js
var require_es_array_from = __commonJS({
  "node_modules/core-js-pure/modules/es.array.from.js"() {
    init_react();
    var $ = require_export();
    var from = require_array_from();
    var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
    var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
      Array.from(iterable);
    });
    $({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
      from
    });
  }
});

// node_modules/core-js-pure/es/array/from.js
var require_from = __commonJS({
  "node_modules/core-js-pure/es/array/from.js"(exports, module) {
    init_react();
    require_es_string_iterator();
    require_es_array_from();
    var path = require_path();
    module.exports = path.Array.from;
  }
});

// node_modules/core-js-pure/stable/array/from.js
var require_from2 = __commonJS({
  "node_modules/core-js-pure/stable/array/from.js"(exports, module) {
    init_react();
    var parent = require_from();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/array/from.js
var require_from3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/array/from.js"(exports, module) {
    init_react();
    module.exports = require_from2();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/symbol.js
var require_symbol6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/symbol.js"(exports, module) {
    init_react();
    module.exports = require_symbol2();
  }
});

// node_modules/core-js-pure/es/get-iterator-method.js
var require_get_iterator_method2 = __commonJS({
  "node_modules/core-js-pure/es/get-iterator-method.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_string_iterator();
    var getIteratorMethod = require_get_iterator_method();
    module.exports = getIteratorMethod;
  }
});

// node_modules/core-js-pure/stable/get-iterator-method.js
var require_get_iterator_method3 = __commonJS({
  "node_modules/core-js-pure/stable/get-iterator-method.js"(exports, module) {
    init_react();
    var parent = require_get_iterator_method2();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/actual/get-iterator-method.js
var require_get_iterator_method4 = __commonJS({
  "node_modules/core-js-pure/actual/get-iterator-method.js"(exports, module) {
    init_react();
    var parent = require_get_iterator_method3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/get-iterator-method.js
var require_get_iterator_method5 = __commonJS({
  "node_modules/core-js-pure/features/get-iterator-method.js"(exports, module) {
    init_react();
    var parent = require_get_iterator_method4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js
var require_get_iterator_method6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js"(exports, module) {
    init_react();
    module.exports = require_get_iterator_method5();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js
var require_index_of7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js"(exports, module) {
    init_react();
    module.exports = require_index_of3();
  }
});

// node_modules/core-js-pure/modules/es.object.freeze.js
var require_es_object_freeze = __commonJS({
  "node_modules/core-js-pure/modules/es.object.freeze.js"() {
    init_react();
    var $ = require_export();
    var FREEZING = require_freezing();
    var fails = require_fails();
    var isObject = require_is_object();
    var onFreeze = require_internal_metadata().onFreeze;
    var $freeze = Object.freeze;
    var FAILS_ON_PRIMITIVES = fails(function() {
      $freeze(1);
    });
    $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
      freeze: function freeze(it) {
        return $freeze && isObject(it) ? $freeze(onFreeze(it)) : it;
      }
    });
  }
});

// node_modules/core-js-pure/es/object/freeze.js
var require_freeze = __commonJS({
  "node_modules/core-js-pure/es/object/freeze.js"(exports, module) {
    init_react();
    require_es_object_freeze();
    var path = require_path();
    module.exports = path.Object.freeze;
  }
});

// node_modules/core-js-pure/stable/object/freeze.js
var require_freeze2 = __commonJS({
  "node_modules/core-js-pure/stable/object/freeze.js"(exports, module) {
    init_react();
    var parent = require_freeze();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/freeze.js
var require_freeze3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/freeze.js"(exports, module) {
    init_react();
    module.exports = require_freeze2();
  }
});

// node_modules/core-js-pure/modules/es.json.stringify.js
var require_es_json_stringify = __commonJS({
  "node_modules/core-js-pure/modules/es.json.stringify.js"() {
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var getBuiltIn = require_get_built_in();
    var apply = require_function_apply();
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var Array2 = global2.Array;
    var $stringify = getBuiltIn("JSON", "stringify");
    var exec = uncurryThis(/./.exec);
    var charAt = uncurryThis("".charAt);
    var charCodeAt = uncurryThis("".charCodeAt);
    var replace = uncurryThis("".replace);
    var numberToString = uncurryThis(1 .toString);
    var tester = /[\uD800-\uDFFF]/g;
    var low = /^[\uD800-\uDBFF]$/;
    var hi = /^[\uDC00-\uDFFF]$/;
    var fix = function(match, offset, string) {
      var prev = charAt(string, offset - 1);
      var next = charAt(string, offset + 1);
      if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) {
        return "\\u" + numberToString(charCodeAt(match, 0), 16);
      }
      return match;
    };
    var FORCED = fails(function() {
      return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
    });
    if ($stringify) {
      $({ target: "JSON", stat: true, forced: FORCED }, {
        stringify: function stringify(it, replacer, space) {
          for (var i2 = 0, l2 = arguments.length, args = Array2(l2); i2 < l2; i2++)
            args[i2] = arguments[i2];
          var result = apply($stringify, null, args);
          return typeof result == "string" ? replace(result, tester, fix) : result;
        }
      });
    }
  }
});

// node_modules/core-js-pure/es/json/stringify.js
var require_stringify = __commonJS({
  "node_modules/core-js-pure/es/json/stringify.js"(exports, module) {
    init_react();
    require_es_json_stringify();
    var path = require_path();
    var apply = require_function_apply();
    if (!path.JSON)
      path.JSON = { stringify: JSON.stringify };
    module.exports = function stringify(it, replacer, space) {
      return apply(path.JSON.stringify, null, arguments);
    };
  }
});

// node_modules/core-js-pure/stable/json/stringify.js
var require_stringify2 = __commonJS({
  "node_modules/core-js-pure/stable/json/stringify.js"(exports, module) {
    init_react();
    var parent = require_stringify();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/json/stringify.js
var require_stringify3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/json/stringify.js"(exports, module) {
    init_react();
    module.exports = require_stringify2();
  }
});

// node_modules/core-js-pure/modules/es.array.includes.js
var require_es_array_includes = __commonJS({
  "node_modules/core-js-pure/modules/es.array.includes.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $includes = require_array_includes().includes;
    var addToUnscopables = require_add_to_unscopables();
    $({ target: "Array", proto: true }, {
      includes: function includes(el) {
        return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
    addToUnscopables("includes");
  }
});

// node_modules/core-js-pure/es/array/virtual/includes.js
var require_includes = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/includes.js"(exports, module) {
    init_react();
    require_es_array_includes();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").includes;
  }
});

// node_modules/core-js-pure/internals/is-regexp.js
var require_is_regexp = __commonJS({
  "node_modules/core-js-pure/internals/is-regexp.js"(exports, module) {
    init_react();
    var isObject = require_is_object();
    var classof = require_classof_raw();
    var wellKnownSymbol = require_well_known_symbol();
    var MATCH = wellKnownSymbol("match");
    module.exports = function(it) {
      var isRegExp;
      return isObject(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) == "RegExp");
    };
  }
});

// node_modules/core-js-pure/internals/not-a-regexp.js
var require_not_a_regexp = __commonJS({
  "node_modules/core-js-pure/internals/not-a-regexp.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var isRegExp = require_is_regexp();
    var TypeError2 = global2.TypeError;
    module.exports = function(it) {
      if (isRegExp(it)) {
        throw TypeError2("The method doesn't accept regular expressions");
      }
      return it;
    };
  }
});

// node_modules/core-js-pure/internals/correct-is-regexp-logic.js
var require_correct_is_regexp_logic = __commonJS({
  "node_modules/core-js-pure/internals/correct-is-regexp-logic.js"(exports, module) {
    init_react();
    var wellKnownSymbol = require_well_known_symbol();
    var MATCH = wellKnownSymbol("match");
    module.exports = function(METHOD_NAME) {
      var regexp = /./;
      try {
        "/./"[METHOD_NAME](regexp);
      } catch (error1) {
        try {
          regexp[MATCH] = false;
          return "/./"[METHOD_NAME](regexp);
        } catch (error2) {
        }
      }
      return false;
    };
  }
});

// node_modules/core-js-pure/modules/es.string.includes.js
var require_es_string_includes = __commonJS({
  "node_modules/core-js-pure/modules/es.string.includes.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var notARegExp = require_not_a_regexp();
    var requireObjectCoercible = require_require_object_coercible();
    var toString2 = require_to_string();
    var correctIsRegExpLogic = require_correct_is_regexp_logic();
    var stringIndexOf = uncurryThis("".indexOf);
    $({ target: "String", proto: true, forced: !correctIsRegExpLogic("includes") }, {
      includes: function includes(searchString) {
        return !!~stringIndexOf(toString2(requireObjectCoercible(this)), toString2(notARegExp(searchString)), arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/string/virtual/includes.js
var require_includes2 = __commonJS({
  "node_modules/core-js-pure/es/string/virtual/includes.js"(exports, module) {
    init_react();
    require_es_string_includes();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("String").includes;
  }
});

// node_modules/core-js-pure/es/instance/includes.js
var require_includes3 = __commonJS({
  "node_modules/core-js-pure/es/instance/includes.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var arrayMethod = require_includes();
    var stringMethod = require_includes2();
    var ArrayPrototype = Array.prototype;
    var StringPrototype = String.prototype;
    module.exports = function(it) {
      var own = it.includes;
      if (it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.includes)
        return arrayMethod;
      if (typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.includes) {
        return stringMethod;
      }
      return own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/includes.js
var require_includes4 = __commonJS({
  "node_modules/core-js-pure/stable/instance/includes.js"(exports, module) {
    init_react();
    var parent = require_includes3();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/includes.js
var require_includes5 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/includes.js"(exports, module) {
    init_react();
    module.exports = require_includes4();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/get-prototype-of.js
var require_get_prototype_of6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/get-prototype-of.js"(exports, module) {
    init_react();
    module.exports = require_get_prototype_of2();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js
var require_create6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js"(exports, module) {
    init_react();
    module.exports = require_create2();
  }
});

// node_modules/core-js-pure/modules/es.array.find.js
var require_es_array_find = __commonJS({
  "node_modules/core-js-pure/modules/es.array.find.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $find = require_array_iteration().find;
    var addToUnscopables = require_add_to_unscopables();
    var FIND = "find";
    var SKIPS_HOLES = true;
    if (FIND in [])
      Array(1)[FIND](function() {
        SKIPS_HOLES = false;
      });
    $({ target: "Array", proto: true, forced: SKIPS_HOLES }, {
      find: function find(callbackfn) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
    addToUnscopables(FIND);
  }
});

// node_modules/core-js-pure/es/array/virtual/find.js
var require_find = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/find.js"(exports, module) {
    init_react();
    require_es_array_find();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").find;
  }
});

// node_modules/core-js-pure/es/instance/find.js
var require_find2 = __commonJS({
  "node_modules/core-js-pure/es/instance/find.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_find();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.find;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.find ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/find.js
var require_find3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/find.js"(exports, module) {
    init_react();
    var parent = require_find2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/find.js
var require_find4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/find.js"(exports, module) {
    init_react();
    module.exports = require_find3();
  }
});

// node_modules/core-js-pure/modules/es.array.map.js
var require_es_array_map = __commonJS({
  "node_modules/core-js-pure/modules/es.array.map.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $map = require_array_iteration().map;
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
    $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      map: function map(callbackfn) {
        return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/map.js
var require_map6 = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/map.js"(exports, module) {
    init_react();
    require_es_array_map();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").map;
  }
});

// node_modules/core-js-pure/es/instance/map.js
var require_map7 = __commonJS({
  "node_modules/core-js-pure/es/instance/map.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_map6();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.map;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.map ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/map.js
var require_map8 = __commonJS({
  "node_modules/core-js-pure/stable/instance/map.js"(exports, module) {
    init_react();
    var parent = require_map7();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js
var require_map9 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js"(exports, module) {
    init_react();
    module.exports = require_map8();
  }
});

// node_modules/moralis/lib/browser/CoreManager.js
var require_CoreManager = __commonJS({
  "node_modules/moralis/lib/browser/CoreManager.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _forEach = _interopRequireDefault(require_for_each4());
    var _concat = _interopRequireDefault(require_concat4());
    var config = {
      IS_NODE: typeof process !== "undefined" && !!process.versions && !!process.versions.node && !process.versions.electron,
      REQUEST_ATTEMPT_LIMIT: 5,
      REQUEST_BATCH_SIZE: 20,
      REQUEST_HEADERS: {},
      SERVER_URL: "https://api.parse.com/1",
      SERVER_AUTH_TYPE: null,
      SERVER_AUTH_TOKEN: null,
      LIVEQUERY_SERVER_URL: null,
      ENCRYPTED_KEY: null,
      VERSION: "js".concat("1.3.5"),
      APPLICATION_ID: null,
      JAVASCRIPT_KEY: null,
      MASTER_KEY: null,
      USE_MASTER_KEY: false,
      PERFORM_USER_REWRITE: true,
      FORCE_REVOCABLE_SESSION: false,
      ENCRYPTED_USER: false,
      IDEMPOTENCY: false
    };
    function requireMethods(name, methods, controller) {
      (0, _forEach.default)(methods).call(methods, function(func) {
        if (typeof controller[func] !== "function") {
          var _context;
          throw new Error((0, _concat.default)(_context = "".concat(name, " must implement ")).call(_context, func, "()"));
        }
      });
    }
    module.exports = {
      get: function(key) {
        if (config.hasOwnProperty(key)) {
          return config[key];
        }
        throw new Error("Configuration key not found: ".concat(key));
      },
      set: function(key, value) {
        config[key] = value;
      },
      setAnalyticsController: function(controller) {
        requireMethods("AnalyticsController", ["track"], controller);
        config.AnalyticsController = controller;
      },
      getAnalyticsController: function() {
        return config.AnalyticsController;
      },
      setCloudController: function(controller) {
        requireMethods("CloudController", ["run", "getJobsData", "startJob"], controller);
        config.CloudController = controller;
      },
      getCloudController: function() {
        return config.CloudController;
      },
      setConfigController: function(controller) {
        requireMethods("ConfigController", ["current", "get", "save"], controller);
        config.ConfigController = controller;
      },
      getConfigController: function() {
        return config.ConfigController;
      },
      setCryptoController: function(controller) {
        requireMethods("CryptoController", ["encrypt", "decrypt"], controller);
        config.CryptoController = controller;
      },
      getCryptoController: function() {
        return config.CryptoController;
      },
      setFileController: function(controller) {
        requireMethods("FileController", ["saveFile", "saveBase64"], controller);
        config.FileController = controller;
      },
      getFileController: function() {
        return config.FileController;
      },
      setInstallationController: function(controller) {
        requireMethods("InstallationController", ["currentInstallationId"], controller);
        config.InstallationController = controller;
      },
      getInstallationController: function() {
        return config.InstallationController;
      },
      setObjectController: function(controller) {
        requireMethods("ObjectController", ["save", "fetch", "destroy"], controller);
        config.ObjectController = controller;
      },
      getObjectController: function() {
        return config.ObjectController;
      },
      setObjectStateController: function(controller) {
        requireMethods("ObjectStateController", ["getState", "initializeState", "removeState", "getServerData", "setServerData", "getPendingOps", "setPendingOp", "pushPendingState", "popPendingState", "mergeFirstPendingState", "getObjectCache", "estimateAttribute", "estimateAttributes", "commitServerChanges", "enqueueTask", "clearAllState"], controller);
        config.ObjectStateController = controller;
      },
      getObjectStateController: function() {
        return config.ObjectStateController;
      },
      setPushController: function(controller) {
        requireMethods("PushController", ["send"], controller);
        config.PushController = controller;
      },
      getPushController: function() {
        return config.PushController;
      },
      setQueryController: function(controller) {
        requireMethods("QueryController", ["find", "aggregate"], controller);
        config.QueryController = controller;
      },
      getQueryController: function() {
        return config.QueryController;
      },
      setRESTController: function(controller) {
        requireMethods("RESTController", ["request", "ajax"], controller);
        config.RESTController = controller;
      },
      getRESTController: function() {
        return config.RESTController;
      },
      setSchemaController: function(controller) {
        requireMethods("SchemaController", ["get", "create", "update", "delete", "send", "purge"], controller);
        config.SchemaController = controller;
      },
      getSchemaController: function() {
        return config.SchemaController;
      },
      setSessionController: function(controller) {
        requireMethods("SessionController", ["getSession"], controller);
        config.SessionController = controller;
      },
      getSessionController: function() {
        return config.SessionController;
      },
      setStorageController: function(controller) {
        if (controller.async) {
          requireMethods("An async StorageController", ["getItemAsync", "setItemAsync", "removeItemAsync", "getAllKeysAsync"], controller);
        } else {
          requireMethods("A synchronous StorageController", ["getItem", "setItem", "removeItem", "getAllKeys"], controller);
        }
        config.StorageController = controller;
      },
      setLocalDatastoreController: function(controller) {
        requireMethods("LocalDatastoreController", ["pinWithName", "fromPinWithName", "unPinWithName", "getAllContents", "clear"], controller);
        config.LocalDatastoreController = controller;
      },
      getLocalDatastoreController: function() {
        return config.LocalDatastoreController;
      },
      setLocalDatastore: function(store) {
        config.LocalDatastore = store;
      },
      getLocalDatastore: function() {
        return config.LocalDatastore;
      },
      getStorageController: function() {
        return config.StorageController;
      },
      setAsyncStorage: function(storage) {
        config.AsyncStorage = storage;
      },
      getAsyncStorage: function() {
        return config.AsyncStorage;
      },
      setWebSocketController: function(controller) {
        config.WebSocketController = controller;
      },
      getWebSocketController: function() {
        return config.WebSocketController;
      },
      setUserController: function(controller) {
        requireMethods("UserController", ["setCurrentUser", "currentUser", "currentUserAsync", "signUp", "logIn", "become", "logOut", "me", "requestPasswordReset", "upgradeToRevocableSession", "requestEmailVerification", "verifyPassword", "linkWith"], controller);
        config.UserController = controller;
      },
      getUserController: function() {
        return config.UserController;
      },
      setLiveQueryController: function(controller) {
        requireMethods("LiveQueryController", ["setDefaultLiveQueryClient", "getDefaultLiveQueryClient", "_clearCachedDefaultClient"], controller);
        config.LiveQueryController = controller;
      },
      getLiveQueryController: function() {
        return config.LiveQueryController;
      },
      setHooksController: function(controller) {
        requireMethods("HooksController", ["create", "get", "update", "remove"], controller);
        config.HooksController = controller;
      },
      getHooksController: function() {
        return config.HooksController;
      }
    };
  }
});

// node_modules/moralis/lib/browser/ParseFileEncode.js
var require_ParseFileEncode = __commonJS({
  "node_modules/moralis/lib/browser/ParseFileEncode.js"(exports, module) {
    "use strict";
    init_react();
    function b64Digit(number) {
      if (number < 26) {
        return String.fromCharCode(65 + number);
      }
      if (number < 52) {
        return String.fromCharCode(97 + (number - 26));
      }
      if (number < 62) {
        return String.fromCharCode(48 + (number - 52));
      }
      if (number === 62) {
        return "+";
      }
      if (number === 63) {
        return "/";
      }
      throw new TypeError("Tried to encode large digit ".concat(number, " in base64."));
    }
    function encodeBase64(bytes) {
      var chunks = [];
      chunks.length = Math.ceil(bytes.length / 3);
      for (var i2 = 0; i2 < chunks.length; i2++) {
        var b1 = bytes[i2 * 3];
        var b2 = bytes[i2 * 3 + 1] || 0;
        var b3 = bytes[i2 * 3 + 2] || 0;
        var has2 = i2 * 3 + 1 < bytes.length;
        var has3 = i2 * 3 + 2 < bytes.length;
        chunks[i2] = [b64Digit(b1 >> 2 & 63), b64Digit(b1 << 4 & 48 | b2 >> 4 & 15), has2 ? b64Digit(b2 << 2 & 60 | b3 >> 6 & 3) : "=", has3 ? b64Digit(b3 & 63) : "="].join("");
      }
      return chunks.join("");
    }
    module.exports = {
      encodeBase64,
      b64Digit
    };
  }
});

// node_modules/core-js-pure/actual/array/is-array.js
var require_is_array5 = __commonJS({
  "node_modules/core-js-pure/actual/array/is-array.js"(exports, module) {
    init_react();
    var parent = require_is_array3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/array/is-array.js
var require_is_array6 = __commonJS({
  "node_modules/core-js-pure/features/array/is-array.js"(exports, module) {
    init_react();
    var parent = require_is_array5();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/array/is-array.js
var require_is_array7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/array/is-array.js"(exports, module) {
    init_react();
    module.exports = require_is_array6();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js
var require_arrayWithHoles = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js"(exports, module) {
    init_react();
    var _Array$isArray = require_is_array7();
    function _arrayWithHoles(arr) {
      if (_Array$isArray(arr))
        return arr;
    }
    module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js
var require_iterableToArrayLimit = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js"(exports, module) {
    init_react();
    var _Symbol = require_symbol5();
    var _getIteratorMethod = require_get_iterator_method6();
    function _iterableToArrayLimit(arr, i2) {
      var _i = arr == null ? null : typeof _Symbol !== "undefined" && _getIteratorMethod(arr) || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/actual/instance/slice.js
var require_slice5 = __commonJS({
  "node_modules/core-js-pure/actual/instance/slice.js"(exports, module) {
    init_react();
    var parent = require_slice3();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/instance/slice.js
var require_slice6 = __commonJS({
  "node_modules/core-js-pure/features/instance/slice.js"(exports, module) {
    init_react();
    var parent = require_slice5();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/instance/slice.js
var require_slice7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/instance/slice.js"(exports, module) {
    init_react();
    module.exports = require_slice6();
  }
});

// node_modules/core-js-pure/actual/array/from.js
var require_from4 = __commonJS({
  "node_modules/core-js-pure/actual/array/from.js"(exports, module) {
    init_react();
    var parent = require_from2();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/features/array/from.js
var require_from5 = __commonJS({
  "node_modules/core-js-pure/features/array/from.js"(exports, module) {
    init_react();
    var parent = require_from4();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js/array/from.js
var require_from6 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/array/from.js"(exports, module) {
    init_react();
    module.exports = require_from5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js
var require_arrayLikeToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js"(exports, module) {
    init_react();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js
var require_unsupportedIterableToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js"(exports, module) {
    init_react();
    var _sliceInstanceProperty = require_slice7();
    var _Array$from = require_from6();
    var arrayLikeToArray = require_arrayLikeToArray();
    function _unsupportedIterableToArray(o2, minLen) {
      var _context;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty(_context = Object.prototype.toString.call(o2)).call(_context, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return arrayLikeToArray(o2, minLen);
    }
    module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js
var require_nonIterableRest = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js"(exports, module) {
    init_react();
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js
var require_slicedToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js"(exports, module) {
    init_react();
    var arrayWithHoles = require_arrayWithHoles();
    var iterableToArrayLimit = require_iterableToArrayLimit();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableRest = require_nonIterableRest();
    function _slicedToArray(arr, i2) {
      return arrayWithHoles(arr) || iterableToArrayLimit(arr, i2) || unsupportedIterableToArray(arr, i2) || nonIterableRest();
    }
    module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/moralis/lib/browser/ParseFileController.default.js
var require_ParseFileController_default = __commonJS({
  "node_modules/moralis/lib/browser/ParseFileController.default.js"(exports, module) {
    "use strict";
    init_react();
    var _Object$keys = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _promise = _interopRequireDefault(require_promise3());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseFileEncode = require_ParseFileEncode();
    function ownKeys(object, enumerableOnly) {
      var keys = _Object$keys(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var _context2, _context3;
        var source = arguments[i2] != null ? arguments[i2] : {};
        i2 % 2 ? _forEachInstanceProperty(_context2 = ownKeys(Object(source), true)).call(_context2, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context3 = ownKeys(Object(source))).call(_context3, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var XHR = null;
    if (typeof XMLHttpRequest !== "undefined") {
      XHR = XMLHttpRequest;
    }
    var DefaultController = {
      saveFile: function() {
        var _saveFile = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(name, source, options) {
          var base64Data, _base64Data$split, _base64Data$split2, first, second, data, newSource;
          return _regenerator.default.wrap(function(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(source.format !== "file")) {
                    _context.next = 2;
                    break;
                  }
                  throw new Error("saveFile can only be used with File-type sources.");
                case 2:
                  _context.next = 4;
                  return new _promise.default(function(res, rej) {
                    var reader = new FileReader();
                    reader.onload = function() {
                      return res(reader.result);
                    };
                    reader.onerror = function(error) {
                      return rej(error);
                    };
                    reader.readAsDataURL(source.file);
                  });
                case 4:
                  base64Data = _context.sent;
                  _base64Data$split = base64Data.split(","), _base64Data$split2 = (0, _slicedToArray2.default)(_base64Data$split, 2), first = _base64Data$split2[0], second = _base64Data$split2[1];
                  data = second ? second : first;
                  newSource = {
                    format: "base64",
                    base64: data,
                    type: source.type || (source.file ? source.file.type : null)
                  };
                  _context.next = 10;
                  return DefaultController.saveBase64(name, newSource, options);
                case 10:
                  return _context.abrupt("return", _context.sent);
                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return function() {
          return _saveFile.apply(this, arguments);
        };
      }(),
      saveBase64: function(name, source, options) {
        if (source.format !== "base64") {
          throw new Error("saveBase64 can only be used with Base64-type sources.");
        }
        var data = {
          base64: source.base64,
          fileData: {
            ipfs: options.ipfs,
            metadata: _objectSpread({}, options.metadata),
            tags: _objectSpread({}, options.tags)
          }
        };
        delete options.metadata;
        delete options.tags;
        if (source.type) {
          data._ContentType = source.type;
        }
        var path = "files/".concat(name);
        return _CoreManager.default.getRESTController().request("POST", path, data, options);
      },
      download: function(uri, options) {
        if (XHR) {
          return this.downloadAjax(uri, options);
        }
        return _promise.default.reject("Cannot make a request: No definition of XMLHttpRequest was found.");
      },
      downloadAjax: function(uri, options) {
        return new _promise.default(function(resolve, reject) {
          var xhr = new XHR();
          xhr.open("GET", uri, true);
          xhr.responseType = "arraybuffer";
          xhr.onerror = function(e) {
            reject(e);
          };
          xhr.onreadystatechange = function() {
            if (xhr.readyState !== xhr.DONE) {
              return;
            }
            if (!this.response) {
              return resolve({});
            }
            var bytes = new Uint8Array(this.response);
            resolve({
              base64: (0, _ParseFileEncode.encodeBase64)(bytes),
              contentType: xhr.getResponseHeader("content-type")
            });
          };
          options.requestTask(xhr);
          xhr.send();
        });
      },
      deleteFile: function(name, options) {
        var headers = {
          "X-Parse-Application-ID": _CoreManager.default.get("APPLICATION_ID")
        };
        if (options.useMasterKey) {
          headers["X-Parse-Master-Key"] = _CoreManager.default.get("MASTER_KEY");
        }
        var url = _CoreManager.default.get("SERVER_URL");
        if (url[url.length - 1] !== "/") {
          url += "/";
        }
        url += "files/".concat(name);
        return _CoreManager.default.getRESTController().ajax("DELETE", url, "", headers).catch(function(response) {
          if (!response || response === "SyntaxError: Unexpected end of JSON input") {
            return _promise.default.resolve();
          }
          return _CoreManager.default.getRESTController().handleError(response);
        });
      },
      _setXHR: function(xhr) {
        XHR = xhr;
      },
      _getXHR: function() {
        return XHR;
      }
    };
    module.exports = DefaultController;
  }
});

// node_modules/moralis/lib/browser/ParseFile.js
var require_ParseFile = __commonJS({
  "node_modules/moralis/lib/browser/ParseFile.js"(exports) {
    "use strict";
    init_react();
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty2 = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _slice = _interopRequireDefault(require_slice4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseFileEncode = require_ParseFileEncode();
    function ownKeys(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var _context4, _context5;
        var source = arguments[i2] != null ? arguments[i2] : {};
        i2 % 2 ? _forEachInstanceProperty2(_context4 = ownKeys(Object(source), true)).call(_context4, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context5 = ownKeys(Object(source))).call(_context5, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var ParseError = require_ParseError().default;
    var dataUriRegexp = /^data:([a-zA-Z]+\/[-a-zA-Z0-9+.]+)(;charset=[a-zA-Z0-9\-/]*)?;base64,/;
    var ParseFile = /* @__PURE__ */ function() {
      function ParseFile2(name, data, type, metadata, tags) {
        (0, _classCallCheck2.default)(this, ParseFile2);
        (0, _defineProperty2.default)(this, "_name", void 0);
        (0, _defineProperty2.default)(this, "_url", void 0);
        (0, _defineProperty2.default)(this, "_hash", void 0);
        (0, _defineProperty2.default)(this, "_ipfs", void 0);
        (0, _defineProperty2.default)(this, "_source", void 0);
        (0, _defineProperty2.default)(this, "_previousSave", void 0);
        (0, _defineProperty2.default)(this, "_data", void 0);
        (0, _defineProperty2.default)(this, "_requestTask", void 0);
        (0, _defineProperty2.default)(this, "_metadata", void 0);
        (0, _defineProperty2.default)(this, "_tags", void 0);
        var specifiedType = type || "";
        this._name = name;
        this._metadata = metadata || {};
        this._tags = tags || {};
        if (data !== void 0) {
          if ((0, _isArray.default)(data)) {
            this._data = ParseFile2.encodeBase64(data);
            this._source = {
              format: "base64",
              base64: this._data,
              type: specifiedType
            };
          } else if (typeof Blob !== "undefined" && data instanceof Blob) {
            this._source = {
              format: "file",
              file: data,
              type: specifiedType
            };
          } else if (data && typeof data.uri === "string" && data.uri !== void 0) {
            this._source = {
              format: "uri",
              uri: data.uri,
              type: specifiedType
            };
          } else if (data && typeof data.base64 === "string") {
            var base64 = data.base64;
            var commaIndex = (0, _indexOf.default)(base64).call(base64, ",");
            if (commaIndex !== -1) {
              var matches = dataUriRegexp.exec((0, _slice.default)(base64).call(base64, 0, commaIndex + 1));
              this._data = (0, _slice.default)(base64).call(base64, commaIndex + 1);
              this._source = {
                format: "base64",
                base64: this._data,
                type: matches[1]
              };
            } else {
              this._data = base64;
              this._source = {
                format: "base64",
                base64,
                type: specifiedType
              };
            }
          } else {
            throw new TypeError("Cannot create a Parse.File with that data.");
          }
        }
      }
      (0, _createClass2.default)(ParseFile2, [{
        key: "getData",
        value: function() {
          var _getData = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
            var _this = this;
            var options, controller, result;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!this._data) {
                      _context.next = 2;
                      break;
                    }
                    return _context.abrupt("return", this._data);
                  case 2:
                    if (this._url) {
                      _context.next = 4;
                      break;
                    }
                    throw new Error("Cannot retrieve data for unsaved ParseFile.");
                  case 4:
                    options = {
                      requestTask: function(task) {
                        return _this._requestTask = task;
                      }
                    };
                    controller = _CoreManager.default.getFileController();
                    _context.next = 8;
                    return controller.download(this._url, options);
                  case 8:
                    result = _context.sent;
                    this._data = result.base64;
                    return _context.abrupt("return", this._data);
                  case 11:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _getData.apply(this, arguments);
          };
        }()
      }, {
        key: "name",
        value: function() {
          return this._name;
        }
      }, {
        key: "url",
        value: function(options) {
          options = options || {};
          if (!this._url) {
            return;
          }
          if (options.forceSecure) {
            return this._url.replace(/^http:\/\//i, "https://");
          }
          return this._url;
        }
      }, {
        key: "ipfs",
        value: function() {
          return this._ipfs;
        }
      }, {
        key: "hash",
        value: function() {
          return this._hash;
        }
      }, {
        key: "metadata",
        value: function() {
          return this._metadata;
        }
      }, {
        key: "tags",
        value: function() {
          return this._tags;
        }
      }, {
        key: "save",
        value: function(options) {
          var _this2 = this;
          options = options || {};
          options.requestTask = function(task) {
            return _this2._requestTask = task;
          };
          options.metadata = this._metadata;
          options.tags = this._tags;
          var controller = _CoreManager.default.getFileController();
          if (!this._previousSave) {
            if (this._source.format === "file") {
              this._previousSave = controller.saveFile(this._name, this._source, options).then(function(res) {
                _this2._name = res.name;
                _this2._url = res.url;
                _this2._hash = res.hash;
                _this2._ipfs = res.ipfs;
                _this2._data = null;
                _this2._requestTask = null;
                return _this2;
              });
            } else if (this._source.format === "uri") {
              this._previousSave = controller.download(this._source.uri, options).then(function(result) {
                if (!(result && result.base64)) {
                  return {};
                }
                var newSource = {
                  format: "base64",
                  base64: result.base64,
                  type: result.contentType
                };
                _this2._data = result.base64;
                _this2._requestTask = null;
                return controller.saveBase64(_this2._name, newSource, options);
              }).then(function(res) {
                _this2._name = res.name;
                _this2._url = res.url;
                _this2._hash = res.hash;
                _this2._ipfs = res.ipfs;
                _this2._requestTask = null;
                return _this2;
              });
            } else {
              this._previousSave = controller.saveBase64(this._name, this._source, options).then(function(res) {
                _this2._name = res.name;
                _this2._url = res.url;
                _this2._hash = res.hash;
                _this2._ipfs = res.ipfs;
                _this2._requestTask = null;
                return _this2;
              });
            }
          }
          if (this._previousSave) {
            return this._previousSave;
          }
        }
      }, {
        key: "saveIPFS",
        value: function(options) {
          return this.save(_objectSpread(_objectSpread({}, options), {}, {
            ipfs: true
          }));
        }
      }, {
        key: "cancel",
        value: function() {
          if (this._requestTask && typeof this._requestTask.abort === "function") {
            this._requestTask.abort();
          }
          this._requestTask = null;
        }
      }, {
        key: "destroy",
        value: function() {
          var _this3 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          if (!this._name) {
            throw new ParseError(ParseError.FILE_DELETE_UNNAMED_ERROR, "Cannot delete an unnamed file.");
          }
          var destroyOptions = {
            useMasterKey: true
          };
          if (options.hasOwnProperty("useMasterKey")) {
            destroyOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getFileController();
          return controller.deleteFile(this._name, destroyOptions).then(function() {
            _this3._data = null;
            _this3._requestTask = null;
            return _this3;
          });
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __type: "File",
            name: this._name,
            url: this._url,
            ipfs: this._ipfs,
            hash: this._hash
          };
        }
      }, {
        key: "equals",
        value: function(other) {
          if (this === other) {
            return true;
          }
          return other instanceof ParseFile2 && this.name() === other.name() && this.url() === other.url() && typeof this.url() !== "undefined";
        }
      }, {
        key: "setMetadata",
        value: function(metadata) {
          var _this4 = this;
          if (metadata && (0, _typeof2.default)(metadata) === "object") {
            var _context2;
            (0, _forEach.default)(_context2 = (0, _keys.default)(metadata)).call(_context2, function(key) {
              _this4.addMetadata(key, metadata[key]);
            });
          }
        }
      }, {
        key: "addMetadata",
        value: function(key, value) {
          if (typeof key === "string") {
            this._metadata[key] = value;
          }
        }
      }, {
        key: "setTags",
        value: function(tags) {
          var _this5 = this;
          if (tags && (0, _typeof2.default)(tags) === "object") {
            var _context3;
            (0, _forEach.default)(_context3 = (0, _keys.default)(tags)).call(_context3, function(key) {
              _this5.addTag(key, tags[key]);
            });
          }
        }
      }, {
        key: "addTag",
        value: function(key, value) {
          if (typeof key === "string") {
            this._tags[key] = value;
          }
        }
      }], [{
        key: "fromJSON",
        value: function(obj) {
          if (obj.__type !== "File") {
            throw new TypeError("JSON object does not represent a ParseFile");
          }
          var file = new ParseFile2(obj.name);
          file._url = obj.url;
          file._hash = obj.hash;
          file._ipfs = obj.ipfs;
          return file;
        }
      }, {
        key: "encodeBase64",
        value: function(bytes) {
          return (0, _ParseFileEncode.encodeBase64)(bytes);
        }
      }]);
      return ParseFile2;
    }();
    _CoreManager.default.setFileController(require_ParseFileController_default());
    var _default = ParseFile;
    exports.default = _default;
    exports.b64Digit = _ParseFileEncode.b64Digit;
  }
});

// node_modules/core-js-pure/modules/es.array.splice.js
var require_es_array_splice = __commonJS({
  "node_modules/core-js-pure/modules/es.array.splice.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var toAbsoluteIndex = require_to_absolute_index();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var lengthOfArrayLike = require_length_of_array_like();
    var toObject = require_to_object();
    var arraySpeciesCreate = require_array_species_create();
    var createProperty = require_create_property();
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");
    var TypeError2 = global2.TypeError;
    var max = Math.max;
    var min = Math.min;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = "Maximum allowed length exceeded";
    $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      splice: function splice(start, deleteCount) {
        var O2 = toObject(this);
        var len = lengthOfArrayLike(O2);
        var actualStart = toAbsoluteIndex(start, len);
        var argumentsLength = arguments.length;
        var insertCount, actualDeleteCount, A2, k2, from, to;
        if (argumentsLength === 0) {
          insertCount = actualDeleteCount = 0;
        } else if (argumentsLength === 1) {
          insertCount = 0;
          actualDeleteCount = len - actualStart;
        } else {
          insertCount = argumentsLength - 2;
          actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
        }
        if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
          throw TypeError2(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
        }
        A2 = arraySpeciesCreate(O2, actualDeleteCount);
        for (k2 = 0; k2 < actualDeleteCount; k2++) {
          from = actualStart + k2;
          if (from in O2)
            createProperty(A2, k2, O2[from]);
        }
        A2.length = actualDeleteCount;
        if (insertCount < actualDeleteCount) {
          for (k2 = actualStart; k2 < len - actualDeleteCount; k2++) {
            from = k2 + actualDeleteCount;
            to = k2 + insertCount;
            if (from in O2)
              O2[to] = O2[from];
            else
              delete O2[to];
          }
          for (k2 = len; k2 > len - actualDeleteCount + insertCount; k2--)
            delete O2[k2 - 1];
        } else if (insertCount > actualDeleteCount) {
          for (k2 = len - actualDeleteCount; k2 > actualStart; k2--) {
            from = k2 + actualDeleteCount - 1;
            to = k2 + insertCount - 1;
            if (from in O2)
              O2[to] = O2[from];
            else
              delete O2[to];
          }
        }
        for (k2 = 0; k2 < insertCount; k2++) {
          O2[k2 + actualStart] = arguments[k2 + 2];
        }
        O2.length = len - actualDeleteCount + insertCount;
        return A2;
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/splice.js
var require_splice = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/splice.js"(exports, module) {
    init_react();
    require_es_array_splice();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").splice;
  }
});

// node_modules/core-js-pure/es/instance/splice.js
var require_splice2 = __commonJS({
  "node_modules/core-js-pure/es/instance/splice.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_splice();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.splice;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.splice ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/splice.js
var require_splice3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/splice.js"(exports, module) {
    init_react();
    var parent = require_splice2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/splice.js
var require_splice4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/splice.js"(exports, module) {
    init_react();
    module.exports = require_splice3();
  }
});

// node_modules/moralis/lib/browser/arrayContainsObject.js
var require_arrayContainsObject = __commonJS({
  "node_modules/moralis/lib/browser/arrayContainsObject.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = arrayContainsObject;
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    function arrayContainsObject(array, object) {
      if ((0, _indexOf.default)(array).call(array, object) > -1) {
        return true;
      }
      for (var i2 = 0; i2 < array.length; i2++) {
        if (array[i2] instanceof _ParseObject.default && array[i2].className === object.className && array[i2]._getId() === object._getId()) {
          return true;
        }
      }
      return false;
    }
  }
});

// node_modules/core-js-pure/modules/es.string.starts-with.js
var require_es_string_starts_with = __commonJS({
  "node_modules/core-js-pure/modules/es.string.starts-with.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var toLength = require_to_length();
    var toString2 = require_to_string();
    var notARegExp = require_not_a_regexp();
    var requireObjectCoercible = require_require_object_coercible();
    var correctIsRegExpLogic = require_correct_is_regexp_logic();
    var IS_PURE = require_is_pure();
    var un$StartsWith = uncurryThis("".startsWith);
    var stringSlice = uncurryThis("".slice);
    var min = Math.min;
    var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("startsWith");
    var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
      var descriptor = getOwnPropertyDescriptor(String.prototype, "startsWith");
      return descriptor && !descriptor.writable;
    }();
    $({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
      startsWith: function startsWith(searchString) {
        var that = toString2(requireObjectCoercible(this));
        notARegExp(searchString);
        var index = toLength(min(arguments.length > 1 ? arguments[1] : void 0, that.length));
        var search = toString2(searchString);
        return un$StartsWith ? un$StartsWith(that, search, index) : stringSlice(that, index, index + search.length) === search;
      }
    });
  }
});

// node_modules/core-js-pure/es/string/virtual/starts-with.js
var require_starts_with = __commonJS({
  "node_modules/core-js-pure/es/string/virtual/starts-with.js"(exports, module) {
    init_react();
    require_es_string_starts_with();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("String").startsWith;
  }
});

// node_modules/core-js-pure/es/instance/starts-with.js
var require_starts_with2 = __commonJS({
  "node_modules/core-js-pure/es/instance/starts-with.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_starts_with();
    var StringPrototype = String.prototype;
    module.exports = function(it) {
      var own = it.startsWith;
      return typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.startsWith ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/starts-with.js
var require_starts_with3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/starts-with.js"(exports, module) {
    init_react();
    var parent = require_starts_with2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/starts-with.js
var require_starts_with4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/starts-with.js"(exports, module) {
    init_react();
    module.exports = require_starts_with3();
  }
});

// node_modules/moralis/lib/browser/ParseGeoPoint.js
var require_ParseGeoPoint = __commonJS({
  "node_modules/moralis/lib/browser/ParseGeoPoint.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var ParseGeoPoint = /* @__PURE__ */ function() {
      function ParseGeoPoint2(arg1, arg2) {
        (0, _classCallCheck2.default)(this, ParseGeoPoint2);
        (0, _defineProperty2.default)(this, "_latitude", void 0);
        (0, _defineProperty2.default)(this, "_longitude", void 0);
        if ((0, _isArray.default)(arg1)) {
          ParseGeoPoint2._validate(arg1[0], arg1[1]);
          this._latitude = arg1[0];
          this._longitude = arg1[1];
        } else if ((0, _typeof2.default)(arg1) === "object") {
          ParseGeoPoint2._validate(arg1.latitude, arg1.longitude);
          this._latitude = arg1.latitude;
          this._longitude = arg1.longitude;
        } else if (arg1 !== void 0 && arg2 !== void 0) {
          ParseGeoPoint2._validate(arg1, arg2);
          this._latitude = arg1;
          this._longitude = arg2;
        } else {
          this._latitude = 0;
          this._longitude = 0;
        }
      }
      (0, _createClass2.default)(ParseGeoPoint2, [{
        key: "latitude",
        get: function() {
          return this._latitude;
        },
        set: function(val) {
          ParseGeoPoint2._validate(val, this.longitude);
          this._latitude = val;
        }
      }, {
        key: "longitude",
        get: function() {
          return this._longitude;
        },
        set: function(val) {
          ParseGeoPoint2._validate(this.latitude, val);
          this._longitude = val;
        }
      }, {
        key: "toJSON",
        value: function() {
          ParseGeoPoint2._validate(this._latitude, this._longitude);
          return {
            __type: "GeoPoint",
            latitude: this._latitude,
            longitude: this._longitude
          };
        }
      }, {
        key: "equals",
        value: function(other) {
          return other instanceof ParseGeoPoint2 && this.latitude === other.latitude && this.longitude === other.longitude;
        }
      }, {
        key: "radiansTo",
        value: function(point) {
          var d2r = Math.PI / 180;
          var lat1rad = this.latitude * d2r;
          var long1rad = this.longitude * d2r;
          var lat2rad = point.latitude * d2r;
          var long2rad = point.longitude * d2r;
          var sinDeltaLatDiv2 = Math.sin((lat1rad - lat2rad) / 2);
          var sinDeltaLongDiv2 = Math.sin((long1rad - long2rad) / 2);
          var a2 = sinDeltaLatDiv2 * sinDeltaLatDiv2 + Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2;
          a2 = Math.min(1, a2);
          return 2 * Math.asin(Math.sqrt(a2));
        }
      }, {
        key: "kilometersTo",
        value: function(point) {
          return this.radiansTo(point) * 6371;
        }
      }, {
        key: "milesTo",
        value: function(point) {
          return this.radiansTo(point) * 3958.8;
        }
      }], [{
        key: "_validate",
        value: function(latitude, longitude) {
          if (isNaN(latitude) || isNaN(longitude) || typeof latitude !== "number" || typeof longitude !== "number") {
            throw new TypeError("GeoPoint latitude and longitude must be valid numbers");
          }
          if (latitude < -90) {
            throw new TypeError("GeoPoint latitude out of bounds: ".concat(latitude, " < -90.0."));
          }
          if (latitude > 90) {
            throw new TypeError("GeoPoint latitude out of bounds: ".concat(latitude, " > 90.0."));
          }
          if (longitude < -180) {
            throw new TypeError("GeoPoint longitude out of bounds: ".concat(longitude, " < -180.0."));
          }
          if (longitude > 180) {
            throw new TypeError("GeoPoint longitude out of bounds: ".concat(longitude, " > 180.0."));
          }
        }
      }, {
        key: "current",
        value: function() {
          return navigator.geolocation.getCurrentPosition(function(location) {
            return new ParseGeoPoint2(location.coords.latitude, location.coords.longitude);
          });
        }
      }]);
      return ParseGeoPoint2;
    }();
    var _default = ParseGeoPoint;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParsePolygon.js
var require_ParsePolygon = __commonJS({
  "node_modules/moralis/lib/browser/ParsePolygon.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var ParsePolygon = /* @__PURE__ */ function() {
      function ParsePolygon2(coordinates) {
        (0, _classCallCheck2.default)(this, ParsePolygon2);
        (0, _defineProperty2.default)(this, "_coordinates", void 0);
        this._coordinates = ParsePolygon2._validate(coordinates);
      }
      (0, _createClass2.default)(ParsePolygon2, [{
        key: "coordinates",
        get: function() {
          return this._coordinates;
        },
        set: function(coords) {
          this._coordinates = ParsePolygon2._validate(coords);
        }
      }, {
        key: "toJSON",
        value: function() {
          ParsePolygon2._validate(this._coordinates);
          return {
            __type: "Polygon",
            coordinates: this._coordinates
          };
        }
      }, {
        key: "equals",
        value: function(other) {
          if (!(other instanceof ParsePolygon2) || this.coordinates.length !== other.coordinates.length) {
            return false;
          }
          var isEqual = true;
          for (var i2 = 1; i2 < this._coordinates.length; i2 += 1) {
            if (this._coordinates[i2][0] !== other.coordinates[i2][0] || this._coordinates[i2][1] !== other.coordinates[i2][1]) {
              isEqual = false;
              break;
            }
          }
          return isEqual;
        }
      }, {
        key: "containsPoint",
        value: function(point) {
          var minX = this._coordinates[0][0];
          var maxX = this._coordinates[0][0];
          var minY = this._coordinates[0][1];
          var maxY = this._coordinates[0][1];
          for (var i2 = 1; i2 < this._coordinates.length; i2 += 1) {
            var p2 = this._coordinates[i2];
            minX = Math.min(p2[0], minX);
            maxX = Math.max(p2[0], maxX);
            minY = Math.min(p2[1], minY);
            maxY = Math.max(p2[1], maxY);
          }
          var outside = point.latitude < minX || point.latitude > maxX || point.longitude < minY || point.longitude > maxY;
          if (outside) {
            return false;
          }
          var inside = false;
          for (var _i = 0, j2 = this._coordinates.length - 1; _i < this._coordinates.length; j2 = _i++) {
            var startX = this._coordinates[_i][0];
            var startY = this._coordinates[_i][1];
            var endX = this._coordinates[j2][0];
            var endY = this._coordinates[j2][1];
            var intersect = startY > point.longitude !== endY > point.longitude && point.latitude < (endX - startX) * (point.longitude - startY) / (endY - startY) + startX;
            if (intersect) {
              inside = !inside;
            }
          }
          return inside;
        }
      }], [{
        key: "_validate",
        value: function(coords) {
          if (!(0, _isArray.default)(coords)) {
            throw new TypeError("Coordinates must be an Array");
          }
          if (coords.length < 3) {
            throw new TypeError("Polygon must have at least 3 GeoPoints or Points");
          }
          var points = [];
          for (var i2 = 0; i2 < coords.length; i2 += 1) {
            var coord = coords[i2];
            var geoPoint = void 0;
            if (coord instanceof _ParseGeoPoint.default) {
              geoPoint = coord;
            } else if ((0, _isArray.default)(coord) && coord.length === 2) {
              geoPoint = new _ParseGeoPoint.default(coord[0], coord[1]);
            } else {
              throw new TypeError("Coordinates must be an Array of GeoPoints or Points");
            }
            points.push([geoPoint.latitude, geoPoint.longitude]);
          }
          return points;
        }
      }]);
      return ParsePolygon2;
    }();
    var _default = ParsePolygon;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/encode.js
var require_encode = __commonJS({
  "node_modules/moralis/lib/browser/encode.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _concat = _interopRequireDefault(require_concat4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _keys = _interopRequireDefault(require_keys3());
    var _startsWith = _interopRequireDefault(require_starts_with4());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _map = _interopRequireDefault(require_map9());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var _ParsePolygon = _interopRequireDefault(require_ParsePolygon());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseOp = require_ParseOp();
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    function encode(value, disallowObjects, forcePointers, seen, offline) {
      if (value instanceof _ParseObject.default) {
        var _context;
        if (disallowObjects) {
          throw new Error("Parse Objects not allowed here");
        }
        var seenEntry = value.id ? (0, _concat.default)(_context = "".concat(value.className, ":")).call(_context, value.id) : value;
        if (forcePointers || !seen || (0, _indexOf.default)(seen).call(seen, seenEntry) > -1 || value.dirty() || (0, _keys.default)(value._getServerData()).length < 1) {
          var _context2;
          if (offline && (0, _startsWith.default)(_context2 = value._getId()).call(_context2, "local")) {
            return value.toOfflinePointer();
          }
          return value.toPointer();
        }
        seen = (0, _concat.default)(seen).call(seen, seenEntry);
        return value._toFullJSON(seen, offline);
      }
      if (value instanceof _ParseOp.Op || value instanceof _ParseACL.default || value instanceof _ParseGeoPoint.default || value instanceof _ParsePolygon.default || value instanceof _ParseRelation.default) {
        return value.toJSON();
      }
      if (value instanceof _ParseFile.default) {
        if (!value.url()) {
          throw new Error("Tried to encode an unsaved file.");
        }
        return value.toJSON();
      }
      if (Object.prototype.toString.call(value) === "[object Date]") {
        if (isNaN(value)) {
          throw new Error("Tried to encode an invalid date.");
        }
        return {
          __type: "Date",
          iso: value.toJSON()
        };
      }
      if (Object.prototype.toString.call(value) === "[object RegExp]" && typeof value.source === "string") {
        return value.source;
      }
      if ((0, _isArray.default)(value)) {
        return (0, _map.default)(value).call(value, function(v2) {
          return encode(v2, disallowObjects, forcePointers, seen, offline);
        });
      }
      if (value && (0, _typeof2.default)(value) === "object") {
        var output = {};
        for (var k2 in value) {
          output[k2] = encode(value[k2], disallowObjects, forcePointers, seen, offline);
        }
        return output;
      }
      return value;
    }
    function _default(value, disallowObjects, forcePointers, seen, offline) {
      return encode(value, !!disallowObjects, !!forcePointers, seen || [], offline);
    }
  }
});

// node_modules/moralis/lib/browser/unique.js
var require_unique = __commonJS({
  "node_modules/moralis/lib/browser/unique.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = unique;
    var _forEach = _interopRequireDefault(require_for_each4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _arrayContainsObject = _interopRequireDefault(require_arrayContainsObject());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    function unique(arr) {
      var uniques = [];
      (0, _forEach.default)(arr).call(arr, function(value) {
        if (value instanceof _ParseObject.default) {
          if (!(0, _arrayContainsObject.default)(uniques, value)) {
            uniques.push(value);
          }
        } else {
          if ((0, _indexOf.default)(uniques).call(uniques, value) < 0) {
            uniques.push(value);
          }
        }
      });
      return uniques;
    }
  }
});

// node_modules/moralis/lib/browser/ParseOp.js
var require_ParseOp = __commonJS({
  "node_modules/moralis/lib/browser/ParseOp.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UnsetOp = exports.SetOp = exports.RemoveOp = exports.RelationOp = exports.Op = exports.IncrementOp = exports.AddUniqueOp = exports.AddOp = void 0;
    exports.opFromJSON = opFromJSON;
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _concat = _interopRequireDefault(require_concat4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _splice = _interopRequireDefault(require_splice4());
    var _map = _interopRequireDefault(require_map9());
    var _arrayContainsObject = _interopRequireDefault(require_arrayContainsObject());
    var _decode = _interopRequireDefault(require_decode());
    var _encode = _interopRequireDefault(require_encode());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    var _unique = _interopRequireDefault(require_unique());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function opFromJSON(json) {
      if (!json || !json.__op) {
        return null;
      }
      switch (json.__op) {
        case "Delete":
          return new UnsetOp();
        case "Increment":
          return new IncrementOp(json.amount);
        case "Add":
          return new AddOp((0, _decode.default)(json.objects));
        case "AddUnique":
          return new AddUniqueOp((0, _decode.default)(json.objects));
        case "Remove":
          return new RemoveOp((0, _decode.default)(json.objects));
        case "AddRelation": {
          var toAdd = (0, _decode.default)(json.objects);
          if (!(0, _isArray.default)(toAdd)) {
            return new RelationOp([], []);
          }
          return new RelationOp(toAdd, []);
        }
        case "RemoveRelation": {
          var toRemove = (0, _decode.default)(json.objects);
          if (!(0, _isArray.default)(toRemove)) {
            return new RelationOp([], []);
          }
          return new RelationOp([], toRemove);
        }
        case "Batch": {
          var _toAdd = [];
          var _toRemove = [];
          for (var i2 = 0; i2 < json.ops.length; i2++) {
            if (json.ops[i2].__op === "AddRelation") {
              _toAdd = (0, _concat.default)(_toAdd).call(_toAdd, (0, _decode.default)(json.ops[i2].objects));
            } else if (json.ops[i2].__op === "RemoveRelation") {
              _toRemove = (0, _concat.default)(_toRemove).call(_toRemove, (0, _decode.default)(json.ops[i2].objects));
            }
          }
          return new RelationOp(_toAdd, _toRemove);
        }
        default:
          return null;
      }
    }
    var Op = /* @__PURE__ */ function() {
      function Op2() {
        (0, _classCallCheck2.default)(this, Op2);
      }
      (0, _createClass2.default)(Op2, [{
        key: "applyTo",
        value: function() {
        }
      }, {
        key: "mergeWith",
        value: function() {
        }
      }, {
        key: "toJSON",
        value: function() {
        }
      }]);
      return Op2;
    }();
    exports.Op = Op;
    var SetOp = /* @__PURE__ */ function(_Op) {
      (0, _inherits2.default)(SetOp2, _Op);
      var _super = _createSuper(SetOp2);
      function SetOp2(value) {
        var _this;
        (0, _classCallCheck2.default)(this, SetOp2);
        _this = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_value", void 0);
        _this._value = value;
        return _this;
      }
      (0, _createClass2.default)(SetOp2, [{
        key: "applyTo",
        value: function() {
          return this._value;
        }
      }, {
        key: "mergeWith",
        value: function() {
          return new SetOp2(this._value);
        }
      }, {
        key: "toJSON",
        value: function(offline) {
          return (0, _encode.default)(this._value, false, true, void 0, offline);
        }
      }]);
      return SetOp2;
    }(Op);
    exports.SetOp = SetOp;
    var UnsetOp = /* @__PURE__ */ function(_Op2) {
      (0, _inherits2.default)(UnsetOp2, _Op2);
      var _super2 = _createSuper(UnsetOp2);
      function UnsetOp2() {
        (0, _classCallCheck2.default)(this, UnsetOp2);
        return _super2.apply(this, arguments);
      }
      (0, _createClass2.default)(UnsetOp2, [{
        key: "applyTo",
        value: function() {
          return void 0;
        }
      }, {
        key: "mergeWith",
        value: function() {
          return new UnsetOp2();
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "Delete"
          };
        }
      }]);
      return UnsetOp2;
    }(Op);
    exports.UnsetOp = UnsetOp;
    var IncrementOp = /* @__PURE__ */ function(_Op3) {
      (0, _inherits2.default)(IncrementOp2, _Op3);
      var _super3 = _createSuper(IncrementOp2);
      function IncrementOp2(amount) {
        var _this2;
        (0, _classCallCheck2.default)(this, IncrementOp2);
        _this2 = _super3.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "_amount", void 0);
        if (typeof amount !== "number") {
          throw new TypeError("Increment Op must be initialized with a numeric amount.");
        }
        _this2._amount = amount;
        return _this2;
      }
      (0, _createClass2.default)(IncrementOp2, [{
        key: "applyTo",
        value: function(value) {
          if (typeof value === "undefined") {
            return this._amount;
          }
          if (typeof value !== "number") {
            throw new TypeError("Cannot increment a non-numeric value.");
          }
          return this._amount + value;
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof SetOp) {
            return new SetOp(this.applyTo(previous._value));
          }
          if (previous instanceof UnsetOp) {
            return new SetOp(this._amount);
          }
          if (previous instanceof IncrementOp2) {
            return new IncrementOp2(this.applyTo(previous._amount));
          }
          throw new Error("Cannot merge Increment Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "Increment",
            amount: this._amount
          };
        }
      }]);
      return IncrementOp2;
    }(Op);
    exports.IncrementOp = IncrementOp;
    var AddOp = /* @__PURE__ */ function(_Op4) {
      (0, _inherits2.default)(AddOp2, _Op4);
      var _super4 = _createSuper(AddOp2);
      function AddOp2(value) {
        var _this3;
        (0, _classCallCheck2.default)(this, AddOp2);
        _this3 = _super4.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "_value", void 0);
        _this3._value = (0, _isArray.default)(value) ? value : [value];
        return _this3;
      }
      (0, _createClass2.default)(AddOp2, [{
        key: "applyTo",
        value: function(value) {
          if (value == null) {
            return this._value;
          }
          if ((0, _isArray.default)(value)) {
            return (0, _concat.default)(value).call(value, this._value);
          }
          throw new Error("Cannot add elements to a non-array value");
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof SetOp) {
            return new SetOp(this.applyTo(previous._value));
          }
          if (previous instanceof UnsetOp) {
            return new SetOp(this._value);
          }
          if (previous instanceof AddOp2) {
            return new AddOp2(this.applyTo(previous._value));
          }
          throw new Error("Cannot merge Add Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "Add",
            objects: (0, _encode.default)(this._value, false, true)
          };
        }
      }]);
      return AddOp2;
    }(Op);
    exports.AddOp = AddOp;
    var AddUniqueOp = /* @__PURE__ */ function(_Op5) {
      (0, _inherits2.default)(AddUniqueOp2, _Op5);
      var _super5 = _createSuper(AddUniqueOp2);
      function AddUniqueOp2(value) {
        var _this4;
        (0, _classCallCheck2.default)(this, AddUniqueOp2);
        _this4 = _super5.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this4), "_value", void 0);
        _this4._value = (0, _unique.default)((0, _isArray.default)(value) ? value : [value]);
        return _this4;
      }
      (0, _createClass2.default)(AddUniqueOp2, [{
        key: "applyTo",
        value: function(value) {
          if (value == null) {
            return this._value || [];
          }
          if ((0, _isArray.default)(value)) {
            var _context;
            var toAdd = [];
            (0, _forEach.default)(_context = this._value).call(_context, function(v2) {
              if (v2 instanceof _ParseObject.default) {
                if (!(0, _arrayContainsObject.default)(value, v2)) {
                  toAdd.push(v2);
                }
              } else {
                if ((0, _indexOf.default)(value).call(value, v2) < 0) {
                  toAdd.push(v2);
                }
              }
            });
            return (0, _concat.default)(value).call(value, toAdd);
          }
          throw new Error("Cannot add elements to a non-array value");
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof SetOp) {
            return new SetOp(this.applyTo(previous._value));
          }
          if (previous instanceof UnsetOp) {
            return new SetOp(this._value);
          }
          if (previous instanceof AddUniqueOp2) {
            return new AddUniqueOp2(this.applyTo(previous._value));
          }
          throw new Error("Cannot merge AddUnique Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "AddUnique",
            objects: (0, _encode.default)(this._value, false, true)
          };
        }
      }]);
      return AddUniqueOp2;
    }(Op);
    exports.AddUniqueOp = AddUniqueOp;
    var RemoveOp = /* @__PURE__ */ function(_Op6) {
      (0, _inherits2.default)(RemoveOp2, _Op6);
      var _super6 = _createSuper(RemoveOp2);
      function RemoveOp2(value) {
        var _this5;
        (0, _classCallCheck2.default)(this, RemoveOp2);
        _this5 = _super6.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this5), "_value", void 0);
        _this5._value = (0, _unique.default)((0, _isArray.default)(value) ? value : [value]);
        return _this5;
      }
      (0, _createClass2.default)(RemoveOp2, [{
        key: "applyTo",
        value: function(value) {
          if (value == null) {
            return [];
          }
          if ((0, _isArray.default)(value)) {
            var removed = (0, _concat.default)(value).call(value, []);
            for (var i2 = 0; i2 < this._value.length; i2++) {
              var index = (0, _indexOf.default)(removed).call(removed, this._value[i2]);
              while (index > -1) {
                (0, _splice.default)(removed).call(removed, index, 1);
                index = (0, _indexOf.default)(removed).call(removed, this._value[i2]);
              }
              if (this._value[i2] instanceof _ParseObject.default && this._value[i2].id) {
                for (var j2 = 0; j2 < removed.length; j2++) {
                  if (removed[j2] instanceof _ParseObject.default && this._value[i2].id === removed[j2].id) {
                    (0, _splice.default)(removed).call(removed, j2, 1);
                    j2--;
                  }
                }
              }
            }
            return removed;
          }
          throw new Error("Cannot remove elements from a non-array value");
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof SetOp) {
            return new SetOp(this.applyTo(previous._value));
          }
          if (previous instanceof UnsetOp) {
            return new UnsetOp();
          }
          if (previous instanceof RemoveOp2) {
            var _context2;
            var uniques = (0, _concat.default)(_context2 = previous._value).call(_context2, []);
            for (var i2 = 0; i2 < this._value.length; i2++) {
              if (this._value[i2] instanceof _ParseObject.default) {
                if (!(0, _arrayContainsObject.default)(uniques, this._value[i2])) {
                  uniques.push(this._value[i2]);
                }
              } else {
                if ((0, _indexOf.default)(uniques).call(uniques, this._value[i2]) < 0) {
                  uniques.push(this._value[i2]);
                }
              }
            }
            return new RemoveOp2(uniques);
          }
          throw new Error("Cannot merge Remove Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __op: "Remove",
            objects: (0, _encode.default)(this._value, false, true)
          };
        }
      }]);
      return RemoveOp2;
    }(Op);
    exports.RemoveOp = RemoveOp;
    var RelationOp = /* @__PURE__ */ function(_Op7) {
      (0, _inherits2.default)(RelationOp2, _Op7);
      var _super7 = _createSuper(RelationOp2);
      function RelationOp2(adds, removes) {
        var _this6;
        (0, _classCallCheck2.default)(this, RelationOp2);
        _this6 = _super7.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "_targetClassName", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "relationsToAdd", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this6), "relationsToRemove", void 0);
        _this6._targetClassName = null;
        if ((0, _isArray.default)(adds)) {
          _this6.relationsToAdd = (0, _unique.default)((0, _map.default)(adds).call(adds, _this6._extractId, (0, _assertThisInitialized2.default)(_this6)));
        }
        if ((0, _isArray.default)(removes)) {
          _this6.relationsToRemove = (0, _unique.default)((0, _map.default)(removes).call(removes, _this6._extractId, (0, _assertThisInitialized2.default)(_this6)));
        }
        return _this6;
      }
      (0, _createClass2.default)(RelationOp2, [{
        key: "_extractId",
        value: function(obj) {
          if (typeof obj === "string") {
            return obj;
          }
          if (!obj.id) {
            throw new Error("You cannot add or remove an unsaved Parse Object from a relation");
          }
          if (!this._targetClassName) {
            this._targetClassName = obj.className;
          }
          if (this._targetClassName !== obj.className) {
            var _context3;
            throw new Error((0, _concat.default)(_context3 = "Tried to create a Relation with 2 different object types: ".concat(this._targetClassName, " and ")).call(_context3, obj.className, "."));
          }
          return obj.id;
        }
      }, {
        key: "applyTo",
        value: function(value, object, key) {
          if (!value) {
            var _context4;
            if (!object || !key) {
              throw new Error("Cannot apply a RelationOp without either a previous value, or an object and a key");
            }
            var parent = new _ParseObject.default(object.className);
            if (object.id && (0, _indexOf.default)(_context4 = object.id).call(_context4, "local") === 0) {
              parent._localId = object.id;
            } else if (object.id) {
              parent.id = object.id;
            }
            var relation = new _ParseRelation.default(parent, key);
            relation.targetClassName = this._targetClassName;
            return relation;
          }
          if (value instanceof _ParseRelation.default) {
            if (this._targetClassName) {
              if (value.targetClassName) {
                if (this._targetClassName !== value.targetClassName) {
                  var _context5;
                  throw new Error((0, _concat.default)(_context5 = "Related object must be a ".concat(value.targetClassName, ", but a ")).call(_context5, this._targetClassName, " was passed in."));
                }
              } else {
                value.targetClassName = this._targetClassName;
              }
            }
            return value;
          }
          throw new Error("Relation cannot be applied to a non-relation field");
        }
      }, {
        key: "mergeWith",
        value: function(previous) {
          if (!previous) {
            return this;
          }
          if (previous instanceof UnsetOp) {
            throw new Error("You cannot modify a relation after deleting it.");
          }
          if (previous instanceof SetOp && previous._value instanceof _ParseRelation.default) {
            return this;
          }
          if (previous instanceof RelationOp2) {
            var _context7, _context8, _context9, _context10, _context11, _context12;
            if (previous._targetClassName && previous._targetClassName !== this._targetClassName) {
              var _context6;
              throw new Error((0, _concat.default)(_context6 = "Related object must be of class ".concat(previous._targetClassName, ", but ")).call(_context6, this._targetClassName || "null", " was passed in."));
            }
            var newAdd = (0, _concat.default)(_context7 = previous.relationsToAdd).call(_context7, []);
            (0, _forEach.default)(_context8 = this.relationsToRemove).call(_context8, function(r2) {
              var index = (0, _indexOf.default)(newAdd).call(newAdd, r2);
              if (index > -1) {
                (0, _splice.default)(newAdd).call(newAdd, index, 1);
              }
            });
            (0, _forEach.default)(_context9 = this.relationsToAdd).call(_context9, function(r2) {
              var index = (0, _indexOf.default)(newAdd).call(newAdd, r2);
              if (index < 0) {
                newAdd.push(r2);
              }
            });
            var newRemove = (0, _concat.default)(_context10 = previous.relationsToRemove).call(_context10, []);
            (0, _forEach.default)(_context11 = this.relationsToAdd).call(_context11, function(r2) {
              var index = (0, _indexOf.default)(newRemove).call(newRemove, r2);
              if (index > -1) {
                (0, _splice.default)(newRemove).call(newRemove, index, 1);
              }
            });
            (0, _forEach.default)(_context12 = this.relationsToRemove).call(_context12, function(r2) {
              var index = (0, _indexOf.default)(newRemove).call(newRemove, r2);
              if (index < 0) {
                newRemove.push(r2);
              }
            });
            var newRelation = new RelationOp2(newAdd, newRemove);
            newRelation._targetClassName = this._targetClassName;
            return newRelation;
          }
          throw new Error("Cannot merge Relation Op with the previous Op");
        }
      }, {
        key: "toJSON",
        value: function() {
          var _this7 = this;
          var idToPointer = function(id) {
            return {
              __type: "Pointer",
              className: _this7._targetClassName,
              objectId: id
            };
          };
          var adds = null;
          var removes = null;
          var pointers = null;
          if (this.relationsToAdd.length > 0) {
            var _context13;
            pointers = (0, _map.default)(_context13 = this.relationsToAdd).call(_context13, idToPointer);
            adds = {
              __op: "AddRelation",
              objects: pointers
            };
          }
          if (this.relationsToRemove.length > 0) {
            var _context14;
            pointers = (0, _map.default)(_context14 = this.relationsToRemove).call(_context14, idToPointer);
            removes = {
              __op: "RemoveRelation",
              objects: pointers
            };
          }
          if (adds && removes) {
            return {
              __op: "Batch",
              ops: [adds, removes]
            };
          }
          return adds || removes || {};
        }
      }]);
      return RelationOp2;
    }(Op);
    exports.RelationOp = RelationOp;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/arrayWithoutHoles.js
var require_arrayWithoutHoles = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/arrayWithoutHoles.js"(exports, module) {
    init_react();
    var _Array$isArray = require_is_array7();
    var arrayLikeToArray = require_arrayLikeToArray();
    function _arrayWithoutHoles(arr) {
      if (_Array$isArray(arr))
        return arrayLikeToArray(arr);
    }
    module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/iterableToArray.js
var require_iterableToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/iterableToArray.js"(exports, module) {
    init_react();
    var _Symbol = require_symbol5();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$from = require_from6();
    function _iterableToArray(iter) {
      if (typeof _Symbol !== "undefined" && _getIteratorMethod(iter) != null || iter["@@iterator"] != null)
        return _Array$from(iter);
    }
    module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/nonIterableSpread.js
var require_nonIterableSpread = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/nonIterableSpread.js"(exports, module) {
    init_react();
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/toConsumableArray.js
var require_toConsumableArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/toConsumableArray.js"(exports, module) {
    init_react();
    var arrayWithoutHoles = require_arrayWithoutHoles();
    var iterableToArray = require_iterableToArray();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableSpread = require_nonIterableSpread();
    function _toConsumableArray(arr) {
      return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
    }
    module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/core-js-pure/es/array/virtual/keys.js
var require_keys4 = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/keys.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_object_to_string();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").keys;
  }
});

// node_modules/core-js-pure/stable/array/virtual/keys.js
var require_keys5 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/keys.js"(exports, module) {
    init_react();
    var parent = require_keys4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/keys.js
var require_keys6 = __commonJS({
  "node_modules/core-js-pure/stable/instance/keys.js"(exports, module) {
    init_react();
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_keys5();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module.exports = function(it) {
      var own = it.keys;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.keys || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/keys.js
var require_keys7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/keys.js"(exports, module) {
    init_react();
    module.exports = require_keys6();
  }
});

// node_modules/core-js-pure/internals/array-sort.js
var require_array_sort = __commonJS({
  "node_modules/core-js-pure/internals/array-sort.js"(exports, module) {
    init_react();
    var arraySlice = require_array_slice_simple();
    var floor = Math.floor;
    var mergeSort = function(array, comparefn) {
      var length = array.length;
      var middle = floor(length / 2);
      return length < 8 ? insertionSort(array, comparefn) : merge(array, mergeSort(arraySlice(array, 0, middle), comparefn), mergeSort(arraySlice(array, middle), comparefn), comparefn);
    };
    var insertionSort = function(array, comparefn) {
      var length = array.length;
      var i2 = 1;
      var element, j2;
      while (i2 < length) {
        j2 = i2;
        element = array[i2];
        while (j2 && comparefn(array[j2 - 1], element) > 0) {
          array[j2] = array[--j2];
        }
        if (j2 !== i2++)
          array[j2] = element;
      }
      return array;
    };
    var merge = function(array, left, right, comparefn) {
      var llength = left.length;
      var rlength = right.length;
      var lindex = 0;
      var rindex = 0;
      while (lindex < llength || rindex < rlength) {
        array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
      }
      return array;
    };
    module.exports = mergeSort;
  }
});

// node_modules/core-js-pure/internals/engine-ff-version.js
var require_engine_ff_version = __commonJS({
  "node_modules/core-js-pure/internals/engine-ff-version.js"(exports, module) {
    init_react();
    var userAgent = require_engine_user_agent();
    var firefox = userAgent.match(/firefox\/(\d+)/i);
    module.exports = !!firefox && +firefox[1];
  }
});

// node_modules/core-js-pure/internals/engine-is-ie-or-edge.js
var require_engine_is_ie_or_edge = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-ie-or-edge.js"(exports, module) {
    init_react();
    var UA = require_engine_user_agent();
    module.exports = /MSIE|Trident/.test(UA);
  }
});

// node_modules/core-js-pure/internals/engine-webkit-version.js
var require_engine_webkit_version = __commonJS({
  "node_modules/core-js-pure/internals/engine-webkit-version.js"(exports, module) {
    init_react();
    var userAgent = require_engine_user_agent();
    var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
    module.exports = !!webkit && +webkit[1];
  }
});

// node_modules/core-js-pure/modules/es.array.sort.js
var require_es_array_sort = __commonJS({
  "node_modules/core-js-pure/modules/es.array.sort.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var toString2 = require_to_string();
    var fails = require_fails();
    var internalSort = require_array_sort();
    var arrayMethodIsStrict = require_array_method_is_strict();
    var FF = require_engine_ff_version();
    var IE_OR_EDGE = require_engine_is_ie_or_edge();
    var V8 = require_engine_v8_version();
    var WEBKIT = require_engine_webkit_version();
    var test = [];
    var un$Sort = uncurryThis(test.sort);
    var push = uncurryThis(test.push);
    var FAILS_ON_UNDEFINED = fails(function() {
      test.sort(void 0);
    });
    var FAILS_ON_NULL = fails(function() {
      test.sort(null);
    });
    var STRICT_METHOD = arrayMethodIsStrict("sort");
    var STABLE_SORT = !fails(function() {
      if (V8)
        return V8 < 70;
      if (FF && FF > 3)
        return;
      if (IE_OR_EDGE)
        return true;
      if (WEBKIT)
        return WEBKIT < 603;
      var result = "";
      var code, chr, value, index;
      for (code = 65; code < 76; code++) {
        chr = String.fromCharCode(code);
        switch (code) {
          case 66:
          case 69:
          case 70:
          case 72:
            value = 3;
            break;
          case 68:
          case 71:
            value = 4;
            break;
          default:
            value = 2;
        }
        for (index = 0; index < 47; index++) {
          test.push({ k: chr + index, v: value });
        }
      }
      test.sort(function(a2, b2) {
        return b2.v - a2.v;
      });
      for (index = 0; index < test.length; index++) {
        chr = test[index].k.charAt(0);
        if (result.charAt(result.length - 1) !== chr)
          result += chr;
      }
      return result !== "DGBEFHACIJK";
    });
    var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
    var getSortCompare = function(comparefn) {
      return function(x2, y2) {
        if (y2 === void 0)
          return -1;
        if (x2 === void 0)
          return 1;
        if (comparefn !== void 0)
          return +comparefn(x2, y2) || 0;
        return toString2(x2) > toString2(y2) ? 1 : -1;
      };
    };
    $({ target: "Array", proto: true, forced: FORCED }, {
      sort: function sort(comparefn) {
        if (comparefn !== void 0)
          aCallable(comparefn);
        var array = toObject(this);
        if (STABLE_SORT)
          return comparefn === void 0 ? un$Sort(array) : un$Sort(array, comparefn);
        var items = [];
        var arrayLength = lengthOfArrayLike(array);
        var itemsLength, index;
        for (index = 0; index < arrayLength; index++) {
          if (index in array)
            push(items, array[index]);
        }
        internalSort(items, getSortCompare(comparefn));
        itemsLength = items.length;
        index = 0;
        while (index < itemsLength)
          array[index] = items[index++];
        while (index < arrayLength)
          delete array[index++];
        return array;
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/sort.js
var require_sort = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/sort.js"(exports, module) {
    init_react();
    require_es_array_sort();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").sort;
  }
});

// node_modules/core-js-pure/es/instance/sort.js
var require_sort2 = __commonJS({
  "node_modules/core-js-pure/es/instance/sort.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_sort();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.sort;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.sort ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/sort.js
var require_sort3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/sort.js"(exports, module) {
    init_react();
    var parent = require_sort2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js
var require_sort4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js"(exports, module) {
    init_react();
    module.exports = require_sort3();
  }
});

// node_modules/core-js-pure/internals/object-to-array.js
var require_object_to_array = __commonJS({
  "node_modules/core-js-pure/internals/object-to-array.js"(exports, module) {
    init_react();
    var DESCRIPTORS = require_descriptors();
    var uncurryThis = require_function_uncurry_this();
    var objectKeys = require_object_keys();
    var toIndexedObject = require_to_indexed_object();
    var $propertyIsEnumerable = require_object_property_is_enumerable().f;
    var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);
    var push = uncurryThis([].push);
    var createMethod = function(TO_ENTRIES) {
      return function(it) {
        var O2 = toIndexedObject(it);
        var keys = objectKeys(O2);
        var length = keys.length;
        var i2 = 0;
        var result = [];
        var key;
        while (length > i2) {
          key = keys[i2++];
          if (!DESCRIPTORS || propertyIsEnumerable(O2, key)) {
            push(result, TO_ENTRIES ? [key, O2[key]] : O2[key]);
          }
        }
        return result;
      };
    };
    module.exports = {
      entries: createMethod(true),
      values: createMethod(false)
    };
  }
});

// node_modules/core-js-pure/modules/es.object.entries.js
var require_es_object_entries = __commonJS({
  "node_modules/core-js-pure/modules/es.object.entries.js"() {
    init_react();
    var $ = require_export();
    var $entries = require_object_to_array().entries;
    $({ target: "Object", stat: true }, {
      entries: function entries(O2) {
        return $entries(O2);
      }
    });
  }
});

// node_modules/core-js-pure/es/object/entries.js
var require_entries = __commonJS({
  "node_modules/core-js-pure/es/object/entries.js"(exports, module) {
    init_react();
    require_es_object_entries();
    var path = require_path();
    module.exports = path.Object.entries;
  }
});

// node_modules/core-js-pure/stable/object/entries.js
var require_entries2 = __commonJS({
  "node_modules/core-js-pure/stable/object/entries.js"(exports, module) {
    init_react();
    var parent = require_entries();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/entries.js
var require_entries3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/entries.js"(exports, module) {
    init_react();
    module.exports = require_entries2();
  }
});

// node_modules/moralis/lib/browser/promiseUtils.js
var require_promiseUtils = __commonJS({
  "node_modules/moralis/lib/browser/promiseUtils.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.continueWhile = continueWhile;
    exports.resolvingPromise = resolvingPromise;
    exports.when = when;
    var _promise = _interopRequireDefault(require_promise3());
    var _isArray = _interopRequireDefault(require_is_array4());
    function resolvingPromise() {
      var res;
      var rej;
      var promise = new _promise.default(function(resolve, reject) {
        res = resolve;
        rej = reject;
      });
      promise.resolve = res;
      promise.reject = rej;
      return promise;
    }
    function when(promises) {
      var objects;
      var arrayArgument = (0, _isArray.default)(promises);
      if (arrayArgument) {
        objects = promises;
      } else {
        objects = arguments;
      }
      var total = objects.length;
      var hadError = false;
      var results = [];
      var returnValue = arrayArgument ? [results] : results;
      var errors = [];
      results.length = objects.length;
      errors.length = objects.length;
      if (total === 0) {
        return _promise.default.resolve(returnValue);
      }
      var promise = new resolvingPromise();
      var resolveOne = function() {
        total--;
        if (total <= 0) {
          if (hadError) {
            promise.reject(errors);
          } else {
            promise.resolve(returnValue);
          }
        }
      };
      var chain = function(object, index) {
        if (object && typeof object.then === "function") {
          object.then(function(result) {
            results[index] = result;
            resolveOne();
          }, function(error) {
            errors[index] = error;
            hadError = true;
            resolveOne();
          });
        } else {
          results[index] = object;
          resolveOne();
        }
      };
      for (var i2 = 0; i2 < objects.length; i2++) {
        chain(objects[i2], i2);
      }
      return promise;
    }
    function continueWhile(test, emitter) {
      if (test()) {
        return emitter().then(function() {
          return continueWhile(test, emitter);
        });
      }
      return _promise.default.resolve();
    }
  }
});

// node_modules/moralis/lib/browser/equals.js
var require_equals = __commonJS({
  "node_modules/moralis/lib/browser/equals.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = equals;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _keys = _interopRequireDefault(require_keys3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    function equals(a2, b2) {
      var toString2 = Object.prototype.toString;
      if (toString2.call(a2) === "[object Date]" || toString2.call(b2) === "[object Date]") {
        var dateA = new Date(a2);
        var dateB = new Date(b2);
        return +dateA === +dateB;
      }
      if ((0, _typeof2.default)(a2) !== (0, _typeof2.default)(b2)) {
        return false;
      }
      if (!a2 || (0, _typeof2.default)(a2) !== "object") {
        return a2 === b2;
      }
      if ((0, _isArray.default)(a2) || (0, _isArray.default)(b2)) {
        if (!(0, _isArray.default)(a2) || !(0, _isArray.default)(b2)) {
          return false;
        }
        if (a2.length !== b2.length) {
          return false;
        }
        for (var i2 = a2.length; i2--; ) {
          if (!equals(a2[i2], b2[i2])) {
            return false;
          }
        }
        return true;
      }
      if (a2 instanceof _ParseACL.default || a2 instanceof _ParseFile.default || a2 instanceof _ParseGeoPoint.default || a2 instanceof _ParseObject.default) {
        return a2.equals(b2);
      }
      if (b2 instanceof _ParseObject.default) {
        if (a2.__type === "Object" || a2.__type === "Pointer") {
          return a2.objectId === b2.id && a2.className === b2.className;
        }
      }
      if ((0, _keys.default)(a2).length !== (0, _keys.default)(b2).length) {
        return false;
      }
      for (var k2 in a2) {
        if (!equals(a2[k2], b2[k2])) {
          return false;
        }
      }
      return true;
    }
  }
});

// node_modules/moralis/lib/browser/OfflineQuery.js
var require_OfflineQuery = __commonJS({
  "node_modules/moralis/lib/browser/OfflineQuery.js"(exports, module) {
    "use strict";
    init_react();
    var _sliceInstanceProperty2 = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray2 = require_is_array4();
    var _interopRequireDefault = require_interopRequireDefault();
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _slice = _interopRequireDefault(require_slice4());
    var _filter = _interopRequireDefault(require_filter4());
    var _map = _interopRequireDefault(require_map9());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray2(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i2 = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i2 >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i2++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context5;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty2(_context5 = Object.prototype.toString.call(o2)).call(_context5, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    var equalObjects = require_equals().default;
    var decode = require_decode().default;
    var ParseError = require_ParseError().default;
    var ParsePolygon = require_ParsePolygon().default;
    var ParseGeoPoint = require_ParseGeoPoint().default;
    function contains(haystack, needle) {
      if (needle && needle.__type && (needle.__type === "Pointer" || needle.__type === "Object")) {
        for (var i2 in haystack) {
          var ptr = haystack[i2];
          if (typeof ptr === "string" && ptr === needle.objectId) {
            return true;
          }
          if (ptr.className === needle.className && ptr.objectId === needle.objectId) {
            return true;
          }
        }
        return false;
      }
      return (0, _indexOf.default)(haystack).call(haystack, needle) > -1;
    }
    function transformObject(object) {
      if (object._toFullJSON) {
        return object._toFullJSON();
      }
      return object;
    }
    function matchesQuery(className, object, objects, query) {
      if (object.className !== className) {
        return false;
      }
      var obj = object;
      var q2 = query;
      if (object.toJSON) {
        obj = object.toJSON();
      }
      if (query.toJSON) {
        q2 = query.toJSON().where;
      }
      obj.className = className;
      for (var field in q2) {
        if (!matchesKeyConstraints(className, obj, objects, field, q2[field])) {
          return false;
        }
      }
      return true;
    }
    function equalObjectsGeneric(obj, compareTo, eqlFn) {
      if ((0, _isArray.default)(obj)) {
        for (var i2 = 0; i2 < obj.length; i2++) {
          if (eqlFn(obj[i2], compareTo)) {
            return true;
          }
        }
        return false;
      }
      return eqlFn(obj, compareTo);
    }
    function matchesKeyConstraints(className, object, objects, key, constraints) {
      if (constraints === null) {
        return false;
      }
      if ((0, _indexOf.default)(key).call(key, ".") >= 0) {
        var keyComponents = key.split(".");
        var subObjectKey = keyComponents[0];
        var keyRemainder = (0, _slice.default)(keyComponents).call(keyComponents, 1).join(".");
        return matchesKeyConstraints(className, object[subObjectKey] || {}, objects, keyRemainder, constraints);
      }
      var i2;
      if (key === "$or") {
        for (i2 = 0; i2 < constraints.length; i2++) {
          if (matchesQuery(className, object, objects, constraints[i2])) {
            return true;
          }
        }
        return false;
      }
      if (key === "$and") {
        for (i2 = 0; i2 < constraints.length; i2++) {
          if (!matchesQuery(className, object, objects, constraints[i2])) {
            return false;
          }
        }
        return true;
      }
      if (key === "$nor") {
        for (i2 = 0; i2 < constraints.length; i2++) {
          if (matchesQuery(className, object, objects, constraints[i2])) {
            return false;
          }
        }
        return true;
      }
      if (key === "$relatedTo") {
        return false;
      }
      if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(key)) {
        throw new ParseError(ParseError.INVALID_KEY_NAME, "Invalid Key: ".concat(key));
      }
      if ((0, _typeof2.default)(constraints) !== "object") {
        if ((0, _isArray.default)(object[key])) {
          var _context;
          return (0, _indexOf.default)(_context = object[key]).call(_context, constraints) > -1;
        }
        return object[key] === constraints;
      }
      var compareTo;
      if (constraints.__type) {
        if (constraints.__type === "Pointer") {
          return equalObjectsGeneric(object[key], constraints, function(obj, ptr) {
            return typeof obj !== "undefined" && ptr.className === obj.className && ptr.objectId === obj.objectId;
          });
        }
        return equalObjectsGeneric(decode(object[key]), decode(constraints), equalObjects);
      }
      for (var condition in constraints) {
        compareTo = constraints[condition];
        if (compareTo.__type) {
          compareTo = decode(compareTo);
        }
        if (toString.call(compareTo) === "[object Date]" || typeof compareTo === "string" && new Date(compareTo) !== "Invalid Date" && !isNaN(new Date(compareTo))) {
          object[key] = new Date(object[key].iso ? object[key].iso : object[key]);
        }
        switch (condition) {
          case "$lt":
            if (object[key] >= compareTo) {
              return false;
            }
            break;
          case "$lte":
            if (object[key] > compareTo) {
              return false;
            }
            break;
          case "$gt":
            if (object[key] <= compareTo) {
              return false;
            }
            break;
          case "$gte":
            if (object[key] < compareTo) {
              return false;
            }
            break;
          case "$ne":
            if (equalObjects(object[key], compareTo)) {
              return false;
            }
            break;
          case "$in":
            if (!contains(compareTo, object[key])) {
              return false;
            }
            break;
          case "$nin":
            if (contains(compareTo, object[key])) {
              return false;
            }
            break;
          case "$all":
            for (i2 = 0; i2 < compareTo.length; i2++) {
              var _context2;
              if ((0, _indexOf.default)(_context2 = object[key]).call(_context2, compareTo[i2]) < 0) {
                return false;
              }
            }
            break;
          case "$exists": {
            var propertyExists = typeof object[key] !== "undefined";
            var existenceIsRequired = constraints.$exists;
            if (typeof constraints.$exists !== "boolean") {
              break;
            }
            if (!propertyExists && existenceIsRequired || propertyExists && !existenceIsRequired) {
              return false;
            }
            break;
          }
          case "$regex": {
            if ((0, _typeof2.default)(compareTo) === "object") {
              return compareTo.test(object[key]);
            }
            var expString = "";
            var escapeEnd = -2;
            var escapeStart = (0, _indexOf.default)(compareTo).call(compareTo, "\\Q");
            while (escapeStart > -1) {
              expString += compareTo.substring(escapeEnd + 2, escapeStart);
              escapeEnd = (0, _indexOf.default)(compareTo).call(compareTo, "\\E", escapeStart);
              if (escapeEnd > -1) {
                expString += compareTo.substring(escapeStart + 2, escapeEnd).replace(/\\\\\\\\E/g, "\\E").replace(/\W/g, "\\$&");
              }
              escapeStart = (0, _indexOf.default)(compareTo).call(compareTo, "\\Q", escapeEnd);
            }
            expString += compareTo.substring(Math.max(escapeStart, escapeEnd + 2));
            var modifiers = constraints.$options || "";
            modifiers = modifiers.replace("x", "").replace("s", "");
            var exp = new RegExp(expString, modifiers);
            if (!exp.test(object[key])) {
              return false;
            }
            break;
          }
          case "$nearSphere": {
            if (!compareTo || !object[key]) {
              return false;
            }
            var distance = compareTo.radiansTo(object[key]);
            var max = constraints.$maxDistance || Infinity;
            return distance <= max;
          }
          case "$within": {
            if (!compareTo || !object[key]) {
              return false;
            }
            var southWest = compareTo.$box[0];
            var northEast = compareTo.$box[1];
            if (southWest.latitude > northEast.latitude || southWest.longitude > northEast.longitude) {
              return false;
            }
            return object[key].latitude > southWest.latitude && object[key].latitude < northEast.latitude && object[key].longitude > southWest.longitude && object[key].longitude < northEast.longitude;
          }
          case "$options":
            break;
          case "$maxDistance":
            break;
          case "$select": {
            var subQueryObjects = (0, _filter.default)(objects).call(objects, function(obj, index, arr) {
              return matchesQuery(compareTo.query.className, obj, arr, compareTo.query.where);
            });
            for (var _i = 0; _i < subQueryObjects.length; _i += 1) {
              var subObject = transformObject(subQueryObjects[_i]);
              return equalObjects(object[key], subObject[compareTo.key]);
            }
            return false;
          }
          case "$dontSelect": {
            var _subQueryObjects = (0, _filter.default)(objects).call(objects, function(obj, index, arr) {
              return matchesQuery(compareTo.query.className, obj, arr, compareTo.query.where);
            });
            for (var _i2 = 0; _i2 < _subQueryObjects.length; _i2 += 1) {
              var _subObject = transformObject(_subQueryObjects[_i2]);
              return !equalObjects(object[key], _subObject[compareTo.key]);
            }
            return false;
          }
          case "$inQuery": {
            var _subQueryObjects2 = (0, _filter.default)(objects).call(objects, function(obj, index, arr) {
              return matchesQuery(compareTo.className, obj, arr, compareTo.where);
            });
            for (var _i3 = 0; _i3 < _subQueryObjects2.length; _i3 += 1) {
              var _subObject2 = transformObject(_subQueryObjects2[_i3]);
              if (object[key].className === _subObject2.className && object[key].objectId === _subObject2.objectId) {
                return true;
              }
            }
            return false;
          }
          case "$notInQuery": {
            var _subQueryObjects3 = (0, _filter.default)(objects).call(objects, function(obj, index, arr) {
              return matchesQuery(compareTo.className, obj, arr, compareTo.where);
            });
            for (var _i4 = 0; _i4 < _subQueryObjects3.length; _i4 += 1) {
              var _subObject3 = transformObject(_subQueryObjects3[_i4]);
              if (object[key].className === _subObject3.className && object[key].objectId === _subObject3.objectId) {
                return false;
              }
            }
            return true;
          }
          case "$containedBy": {
            var _iterator = _createForOfIteratorHelper(object[key]), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var value = _step.value;
                if (!contains(compareTo, value)) {
                  return false;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            return true;
          }
          case "$geoWithin": {
            var _context3;
            var points = (0, _map.default)(_context3 = compareTo.$polygon).call(_context3, function(geoPoint) {
              return [geoPoint.latitude, geoPoint.longitude];
            });
            var polygon = new ParsePolygon(points);
            return polygon.containsPoint(object[key]);
          }
          case "$geoIntersects": {
            var _polygon = new ParsePolygon(object[key].coordinates);
            var point = new ParseGeoPoint(compareTo.$point);
            return _polygon.containsPoint(point);
          }
          default:
            return false;
        }
      }
      return true;
    }
    function validateQuery(query) {
      var _context4;
      var q2 = query;
      if (query.toJSON) {
        q2 = query.toJSON().where;
      }
      var specialQuerykeys = ["$and", "$or", "$nor", "_rperm", "_wperm", "_perishable_token", "_email_verify_token", "_email_verify_token_expires_at", "_account_lockout_expires_at", "_failed_login_count"];
      (0, _forEach.default)(_context4 = (0, _keys.default)(q2)).call(_context4, function(key) {
        if (q2 && q2[key] && q2[key].$regex) {
          if (typeof q2[key].$options === "string") {
            if (!q2[key].$options.match(/^[imxs]+$/)) {
              throw new ParseError(ParseError.INVALID_QUERY, "Bad $options value for query: ".concat(q2[key].$options));
            }
          }
        }
        if ((0, _indexOf.default)(specialQuerykeys).call(specialQuerykeys, key) < 0 && !key.match(/^[a-zA-Z][a-zA-Z0-9_.]*$/)) {
          throw new ParseError(ParseError.INVALID_KEY_NAME, "Invalid key name: ".concat(key));
        }
      });
    }
    var OfflineQuery = {
      matchesQuery,
      validateQuery
    };
    module.exports = OfflineQuery;
  }
});

// node_modules/moralis/lib/browser/LocalDatastoreUtils.js
var require_LocalDatastoreUtils = __commonJS({
  "node_modules/moralis/lib/browser/LocalDatastoreUtils.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PIN_PREFIX = exports.OBJECT_PREFIX = exports.DEFAULT_PIN = void 0;
    exports.isLocalDatastoreKey = isLocalDatastoreKey;
    var _startsWith = _interopRequireDefault(require_starts_with4());
    var DEFAULT_PIN = "_default";
    exports.DEFAULT_PIN = DEFAULT_PIN;
    var PIN_PREFIX = "parsePin_";
    exports.PIN_PREFIX = PIN_PREFIX;
    var OBJECT_PREFIX = "Parse_LDS_";
    exports.OBJECT_PREFIX = OBJECT_PREFIX;
    function isLocalDatastoreKey(key) {
      return !!(key && (key === DEFAULT_PIN || (0, _startsWith.default)(key).call(key, PIN_PREFIX) || (0, _startsWith.default)(key).call(key, OBJECT_PREFIX)));
    }
  }
});

// node_modules/moralis/lib/browser/ParseQuery.js
var require_ParseQuery = __commonJS({
  "node_modules/moralis/lib/browser/ParseQuery.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _keys = _interopRequireDefault(require_keys3());
    var _slice = _interopRequireDefault(require_slice4());
    var _map2 = _interopRequireDefault(require_map9());
    var _filter2 = _interopRequireDefault(require_filter4());
    var _keys2 = _interopRequireDefault(require_keys7());
    var _concat = _interopRequireDefault(require_concat4());
    var _includes = _interopRequireDefault(require_includes5());
    var _sort = _interopRequireDefault(require_sort4());
    var _splice = _interopRequireDefault(require_splice4());
    var _promise = _interopRequireDefault(require_promise3());
    var _find = _interopRequireDefault(require_find4());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _entries = _interopRequireDefault(require_entries3());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _encode = _interopRequireDefault(require_encode());
    var _promiseUtils = require_promiseUtils();
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _OfflineQuery = _interopRequireDefault(require_OfflineQuery());
    var _LocalDatastoreUtils = require_LocalDatastoreUtils();
    function quote(s2) {
      return "\\Q".concat(s2.replace("\\E", "\\E\\\\E\\Q"), "\\E");
    }
    function _getClassNameFromQueries(queries) {
      var className = null;
      (0, _forEach.default)(queries).call(queries, function(q2) {
        if (!className) {
          className = q2.className;
        }
        if (className !== q2.className) {
          throw new Error("All queries must be for the same class.");
        }
      });
      return className;
    }
    function handleSelectResult(data, select) {
      var serverDataMask = {};
      (0, _forEach.default)(select).call(select, function(field) {
        var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, ".") !== -1;
        if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {
          data[field] = void 0;
        } else if (hasSubObjectSelect) {
          var pathComponents = field.split(".");
          var _obj = data;
          var serverMask = serverDataMask;
          (0, _forEach.default)(pathComponents).call(pathComponents, function(component, index, arr) {
            if (_obj && !_obj.hasOwnProperty(component)) {
              _obj[component] = void 0;
            }
            if (_obj && (0, _typeof2.default)(_obj) === "object") {
              _obj = _obj[component];
            }
            if (index < arr.length - 1) {
              if (!serverMask[component]) {
                serverMask[component] = {};
              }
              serverMask = serverMask[component];
            }
          });
        }
      });
      if ((0, _keys.default)(serverDataMask).length > 0) {
        var serverData = _CoreManager.default.getObjectStateController().getServerData({
          id: data.objectId,
          className: data.className
        });
        copyMissingDataWithMask(serverData, data, serverDataMask, false);
      }
    }
    function copyMissingDataWithMask(src, dest, mask, copyThisLevel) {
      if (copyThisLevel) {
        for (var _key in src) {
          if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {
            dest[_key] = src[_key];
          }
        }
      }
      for (var _key2 in mask) {
        if (dest[_key2] !== void 0 && dest[_key2] !== null && src !== void 0 && src !== null) {
          copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);
        }
      }
    }
    function handleOfflineSort(a2, b2, sorts) {
      var order = sorts[0];
      var operator = (0, _slice.default)(order).call(order, 0, 1);
      var isDescending = operator === "-";
      if (isDescending) {
        order = order.substring(1);
      }
      if (order === "_created_at") {
        order = "createdAt";
      }
      if (order === "_updated_at") {
        order = "updatedAt";
      }
      if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === "password") {
        throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, "Invalid Key: ".concat(order));
      }
      var field1 = a2.get(order);
      var field2 = b2.get(order);
      if (field1 < field2) {
        return isDescending ? 1 : -1;
      }
      if (field1 > field2) {
        return isDescending ? -1 : 1;
      }
      if (sorts.length > 1) {
        var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);
        return handleOfflineSort(a2, b2, remainingSorts);
      }
      return 0;
    }
    var ParseQuery = /* @__PURE__ */ function() {
      function ParseQuery2(objectClass) {
        (0, _classCallCheck2.default)(this, ParseQuery2);
        (0, _defineProperty2.default)(this, "className", void 0);
        (0, _defineProperty2.default)(this, "_where", void 0);
        (0, _defineProperty2.default)(this, "_include", void 0);
        (0, _defineProperty2.default)(this, "_exclude", void 0);
        (0, _defineProperty2.default)(this, "_select", void 0);
        (0, _defineProperty2.default)(this, "_limit", void 0);
        (0, _defineProperty2.default)(this, "_skip", void 0);
        (0, _defineProperty2.default)(this, "_count", void 0);
        (0, _defineProperty2.default)(this, "_order", void 0);
        (0, _defineProperty2.default)(this, "_readPreference", void 0);
        (0, _defineProperty2.default)(this, "_includeReadPreference", void 0);
        (0, _defineProperty2.default)(this, "_subqueryReadPreference", void 0);
        (0, _defineProperty2.default)(this, "_queriesLocalDatastore", void 0);
        (0, _defineProperty2.default)(this, "_localDatastorePinName", void 0);
        (0, _defineProperty2.default)(this, "_extraOptions", void 0);
        (0, _defineProperty2.default)(this, "_hint", void 0);
        (0, _defineProperty2.default)(this, "_explain", void 0);
        (0, _defineProperty2.default)(this, "_xhrRequest", void 0);
        if (typeof objectClass === "string") {
          if (objectClass === "User" && _CoreManager.default.get("PERFORM_USER_REWRITE")) {
            this.className = "_User";
          } else {
            this.className = objectClass;
          }
        } else if (objectClass instanceof _ParseObject.default) {
          this.className = objectClass.className;
        } else if (typeof objectClass === "function") {
          if (typeof objectClass.className === "string") {
            this.className = objectClass.className;
          } else {
            var _obj2 = new objectClass();
            this.className = _obj2.className;
          }
        } else {
          throw new TypeError("A ParseQuery must be constructed with a ParseObject or class name.");
        }
        this._where = {};
        this._include = [];
        this._exclude = [];
        this._count = false;
        this._limit = -1;
        this._skip = 0;
        this._readPreference = null;
        this._includeReadPreference = null;
        this._subqueryReadPreference = null;
        this._queriesLocalDatastore = false;
        this._localDatastorePinName = null;
        this._extraOptions = {};
        this._xhrRequest = {
          task: null,
          onchange: function() {
          }
        };
      }
      (0, _createClass2.default)(ParseQuery2, [{
        key: "_orQuery",
        value: function(queries) {
          var queryJSON = (0, _map2.default)(queries).call(queries, function(q2) {
            return q2.toJSON().where;
          });
          this._where.$or = queryJSON;
          return this;
        }
      }, {
        key: "_andQuery",
        value: function(queries) {
          var queryJSON = (0, _map2.default)(queries).call(queries, function(q2) {
            return q2.toJSON().where;
          });
          this._where.$and = queryJSON;
          return this;
        }
      }, {
        key: "_norQuery",
        value: function(queries) {
          var queryJSON = (0, _map2.default)(queries).call(queries, function(q2) {
            return q2.toJSON().where;
          });
          this._where.$nor = queryJSON;
          return this;
        }
      }, {
        key: "_addCondition",
        value: function(key, condition, value) {
          if (!this._where[key] || typeof this._where[key] === "string") {
            this._where[key] = {};
          }
          this._where[key][condition] = (0, _encode.default)(value, false, true);
          return this;
        }
      }, {
        key: "_regexStartWith",
        value: function(string) {
          return "^".concat(quote(string));
        }
      }, {
        key: "_handleOfflineQuery",
        value: function() {
          var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(params) {
            var _context, _this2 = this;
            var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _OfflineQuery.default.validateQuery(this);
                    localDatastore = _CoreManager.default.getLocalDatastore();
                    _context3.next = 4;
                    return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);
                  case 4:
                    objects = _context3.sent;
                    results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function(json, index, arr) {
                      var object = _ParseObject.default.fromJSON(json, false);
                      if (json._localId && !json.objectId) {
                        object._localId = json._localId;
                      }
                      if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {
                        return null;
                      }
                      return object;
                    })).call(_context, function(object) {
                      return object !== null;
                    });
                    if ((0, _keys2.default)(params)) {
                      keys = (0, _keys2.default)(params).split(",");
                      alwaysSelectedKeys = ["className", "objectId", "createdAt", "updatedAt", "ACL"];
                      keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);
                      results = (0, _map2.default)(results).call(results, function(object) {
                        var _context2;
                        var json = object._toFullJSON();
                        (0, _forEach.default)(_context2 = (0, _keys.default)(json)).call(_context2, function(key) {
                          if (!(0, _includes.default)(keys).call(keys, key)) {
                            delete json[key];
                          }
                        });
                        return _ParseObject.default.fromJSON(json, false);
                      });
                    }
                    if (params.order) {
                      sorts = params.order.split(",");
                      (0, _sort.default)(results).call(results, function(a2, b2) {
                        return handleOfflineSort(a2, b2, sorts);
                      });
                    }
                    if (params.count) {
                      count = results.length;
                    }
                    if (params.skip) {
                      if (params.skip >= results.length) {
                        results = [];
                      } else {
                        results = (0, _splice.default)(results).call(results, params.skip, results.length);
                      }
                    }
                    limit = results.length;
                    if (params.limit !== 0 && params.limit < results.length) {
                      limit = params.limit;
                    }
                    results = (0, _splice.default)(results).call(results, 0, limit);
                    if (!(typeof count === "number")) {
                      _context3.next = 15;
                      break;
                    }
                    return _context3.abrupt("return", {
                      results,
                      count
                    });
                  case 15:
                    return _context3.abrupt("return", results);
                  case 16:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _handleOfflineQuery2.apply(this, arguments);
          };
        }()
      }, {
        key: "toJSON",
        value: function() {
          var params = {
            where: this._where
          };
          if (this._include.length) {
            params.include = this._include.join(",");
          }
          if (this._exclude.length) {
            params.excludeKeys = this._exclude.join(",");
          }
          if (this._select) {
            params.keys = this._select.join(",");
          }
          if (this._count) {
            params.count = 1;
          }
          if (this._limit >= 0) {
            params.limit = this._limit;
          }
          if (this._skip > 0) {
            params.skip = this._skip;
          }
          if (this._order) {
            params.order = this._order.join(",");
          }
          if (this._readPreference) {
            params.readPreference = this._readPreference;
          }
          if (this._includeReadPreference) {
            params.includeReadPreference = this._includeReadPreference;
          }
          if (this._subqueryReadPreference) {
            params.subqueryReadPreference = this._subqueryReadPreference;
          }
          if (this._hint) {
            params.hint = this._hint;
          }
          if (this._explain) {
            params.explain = true;
          }
          for (var _key3 in this._extraOptions) {
            params[_key3] = this._extraOptions[_key3];
          }
          return params;
        }
      }, {
        key: "withJSON",
        value: function(json) {
          if (json.where) {
            this._where = json.where;
          }
          if (json.include) {
            this._include = json.include.split(",");
          }
          if ((0, _keys2.default)(json)) {
            this._select = (0, _keys2.default)(json).split(",");
          }
          if (json.excludeKeys) {
            this._exclude = json.excludeKeys.split(",");
          }
          if (json.count) {
            this._count = json.count === 1;
          }
          if (json.limit) {
            this._limit = json.limit;
          }
          if (json.skip) {
            this._skip = json.skip;
          }
          if (json.order) {
            this._order = json.order.split(",");
          }
          if (json.readPreference) {
            this._readPreference = json.readPreference;
          }
          if (json.includeReadPreference) {
            this._includeReadPreference = json.includeReadPreference;
          }
          if (json.subqueryReadPreference) {
            this._subqueryReadPreference = json.subqueryReadPreference;
          }
          if (json.hint) {
            this._hint = json.hint;
          }
          if (json.explain) {
            this._explain = !!json.explain;
          }
          for (var _key4 in json) {
            if (json.hasOwnProperty(_key4)) {
              var _context4;
              if ((0, _indexOf.default)(_context4 = ["where", "include", "keys", "count", "limit", "skip", "order", "readPreference", "includeReadPreference", "subqueryReadPreference", "hint", "explain"]).call(_context4, _key4) === -1) {
                this._extraOptions[_key4] = json[_key4];
              }
            }
          }
          return this;
        }
      }, {
        key: "get",
        value: function(objectId, options) {
          this.equalTo("objectId", objectId);
          var firstOptions = {};
          if (options && options.hasOwnProperty("useMasterKey")) {
            firstOptions.useMasterKey = options.useMasterKey;
          }
          if (options && options.hasOwnProperty("sessionToken")) {
            firstOptions.sessionToken = options.sessionToken;
          }
          if (options && options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            firstOptions.context = options.context;
          }
          return this.first(firstOptions).then(function(response) {
            if (response) {
              return response;
            }
            var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, "Object not found.");
            return _promise.default.reject(errorObject);
          });
        }
      }, {
        key: "find",
        value: function(options) {
          var _this3 = this;
          options = options || {};
          var findOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            findOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            findOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            findOptions.context = options.context;
          }
          this._setRequestTask(findOptions);
          var controller = _CoreManager.default.getQueryController();
          var select = this._select;
          if (this._queriesLocalDatastore) {
            return this._handleOfflineQuery(this.toJSON());
          }
          return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function(response) {
            var _context5;
            if (_this3._explain) {
              return response.results;
            }
            var results = (0, _map2.default)(_context5 = response.results).call(_context5, function(data) {
              var override = response.className || _this3.className;
              if (!data.className) {
                data.className = override;
              }
              if (select) {
                handleSelectResult(data, select);
              }
              return _ParseObject.default.fromJSON(data, !select);
            });
            var count = response.count;
            if (typeof count === "number") {
              return {
                results,
                count
              };
            }
            return results;
          });
        }
      }, {
        key: "findAll",
        value: function() {
          var _findAll = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(options) {
            var result;
            return _regenerator.default.wrap(function(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    result = [];
                    _context7.next = 3;
                    return this.eachBatch(function(objects) {
                      var _context6;
                      result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));
                    }, options);
                  case 3:
                    return _context7.abrupt("return", result);
                  case 4:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _findAll.apply(this, arguments);
          };
        }()
      }, {
        key: "count",
        value: function(options) {
          options = options || {};
          var findOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            findOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            findOptions.sessionToken = options.sessionToken;
          }
          this._setRequestTask(findOptions);
          var controller = _CoreManager.default.getQueryController();
          var params = this.toJSON();
          params.limit = 0;
          params.count = 1;
          return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function(result) {
            return result.count;
          });
        }
      }, {
        key: "distinct",
        value: function(key, options) {
          options = options || {};
          var distinctOptions = {};
          distinctOptions.useMasterKey = true;
          if (options.hasOwnProperty("sessionToken")) {
            distinctOptions.sessionToken = options.sessionToken;
          }
          this._setRequestTask(distinctOptions);
          var controller = _CoreManager.default.getQueryController();
          var params = {
            distinct: key,
            where: this._where,
            hint: this._hint
          };
          return controller.aggregate(this.className, params, distinctOptions).then(function(results) {
            return results.results;
          });
        }
      }, {
        key: "aggregate",
        value: function(pipeline, options) {
          options = options || {};
          var aggregateOptions = {};
          aggregateOptions.useMasterKey = true;
          if (options.hasOwnProperty("sessionToken")) {
            aggregateOptions.sessionToken = options.sessionToken;
          }
          this._setRequestTask(aggregateOptions);
          var controller = _CoreManager.default.getQueryController();
          if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== "object") {
            throw new Error("Invalid pipeline must be Array or Object");
          }
          if ((0, _keys.default)(this._where || {}).length) {
            if (!(0, _isArray.default)(pipeline)) {
              pipeline = [pipeline];
            }
            pipeline.unshift({
              match: this._where
            });
          }
          var params = {
            pipeline,
            hint: this._hint,
            explain: this._explain,
            readPreference: this._readPreference
          };
          return controller.aggregate(this.className, params, aggregateOptions).then(function(results) {
            return results.results;
          });
        }
      }, {
        key: "first",
        value: function(options) {
          var _this4 = this;
          options = options || {};
          var findOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            findOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            findOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            findOptions.context = options.context;
          }
          this._setRequestTask(findOptions);
          var controller = _CoreManager.default.getQueryController();
          var params = this.toJSON();
          params.limit = 1;
          var select = this._select;
          if (this._queriesLocalDatastore) {
            return this._handleOfflineQuery(params).then(function(objects) {
              if (!objects[0]) {
                return void 0;
              }
              return objects[0];
            });
          }
          return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function(response) {
            var objects = response.results;
            if (!objects[0]) {
              return void 0;
            }
            if (!objects[0].className) {
              objects[0].className = _this4.className;
            }
            if (select) {
              handleSelectResult(objects[0], select);
            }
            return _ParseObject.default.fromJSON(objects[0], !select);
          });
        }
      }, {
        key: "eachBatch",
        value: function(callback, options) {
          var _context8;
          options = options || {};
          if (this._order || this._skip || this._limit >= 0) {
            return _promise.default.reject("Cannot iterate on a query with sort, skip, or limit.");
          }
          var query = new ParseQuery2(this.className);
          query._limit = options.batchSize || 100;
          query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function(i2) {
            return i2;
          });
          if (this._select) {
            var _context9;
            query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function(s2) {
              return s2;
            });
          }
          query._hint = this._hint;
          query._where = {};
          for (var _attr in this._where) {
            var val = this._where[_attr];
            if ((0, _isArray.default)(val)) {
              query._where[_attr] = (0, _map2.default)(val).call(val, function(v2) {
                return v2;
              });
            } else if (val && (0, _typeof2.default)(val) === "object") {
              var conditionMap = {};
              query._where[_attr] = conditionMap;
              for (var cond in val) {
                conditionMap[cond] = val[cond];
              }
            } else {
              query._where[_attr] = val;
            }
          }
          query.ascending("objectId");
          var findOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            findOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            findOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            findOptions.context = options.context;
          }
          var finished = false;
          var previousResults = [];
          return (0, _promiseUtils.continueWhile)(function() {
            return !finished;
          }, /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
            var _yield$Promise$all, _yield$Promise$all2, results;
            return _regenerator.default.wrap(function(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    _context10.next = 2;
                    return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);
                  case 2:
                    _yield$Promise$all = _context10.sent;
                    _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);
                    results = _yield$Promise$all2[0];
                    if (!(results.length >= query._limit)) {
                      _context10.next = 10;
                      break;
                    }
                    query.greaterThan("objectId", results[results.length - 1].id);
                    previousResults = results;
                    _context10.next = 17;
                    break;
                  case 10:
                    if (!(results.length > 0)) {
                      _context10.next = 16;
                      break;
                    }
                    _context10.next = 13;
                    return _promise.default.resolve(callback(results));
                  case 13:
                    finished = true;
                    _context10.next = 17;
                    break;
                  case 16:
                    finished = true;
                  case 17:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee3);
          })));
        }
      }, {
        key: "each",
        value: function(callback, options) {
          return this.eachBatch(function(results) {
            var callbacksDone = _promise.default.resolve();
            (0, _forEach.default)(results).call(results, function(result) {
              callbacksDone = callbacksDone.then(function() {
                return callback(result);
              });
            });
            return callbacksDone;
          }, options);
        }
      }, {
        key: "hint",
        value: function(value) {
          if (typeof value === "undefined") {
            delete this._hint;
          }
          this._hint = value;
          return this;
        }
      }, {
        key: "explain",
        value: function() {
          var _explain = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
          if (typeof _explain !== "boolean") {
            throw new Error("You can only set explain to a boolean value");
          }
          this._explain = _explain;
          return this;
        }
      }, {
        key: "map",
        value: function() {
          var _map = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(callback, options) {
            var _this5 = this;
            var array, index;
            return _regenerator.default.wrap(function(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    array = [];
                    index = 0;
                    _context11.next = 4;
                    return this.each(function(object) {
                      return _promise.default.resolve(callback(object, index, _this5)).then(function(result) {
                        array.push(result);
                        index += 1;
                      });
                    }, options);
                  case 4:
                    return _context11.abrupt("return", array);
                  case 5:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee4, this);
          }));
          return function() {
            return _map.apply(this, arguments);
          };
        }()
      }, {
        key: "reduce",
        value: function() {
          var _reduce = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(callback, initialValue, options) {
            var accumulator, index;
            return _regenerator.default.wrap(function(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    accumulator = initialValue;
                    index = 0;
                    _context12.next = 4;
                    return this.each(function(object) {
                      if (index === 0 && initialValue === void 0) {
                        accumulator = object;
                        index += 1;
                        return;
                      }
                      return _promise.default.resolve(callback(accumulator, object, index)).then(function(result) {
                        accumulator = result;
                        index += 1;
                      });
                    }, options);
                  case 4:
                    if (!(index === 0 && initialValue === void 0)) {
                      _context12.next = 6;
                      break;
                    }
                    throw new TypeError("Reducing empty query result set with no initial value");
                  case 6:
                    return _context12.abrupt("return", accumulator);
                  case 7:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee5, this);
          }));
          return function() {
            return _reduce.apply(this, arguments);
          };
        }()
      }, {
        key: "filter",
        value: function() {
          var _filter = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6(callback, options) {
            var _this6 = this;
            var array, index;
            return _regenerator.default.wrap(function(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    array = [];
                    index = 0;
                    _context13.next = 4;
                    return this.each(function(object) {
                      return _promise.default.resolve(callback(object, index, _this6)).then(function(flag) {
                        if (flag) {
                          array.push(object);
                        }
                        index += 1;
                      });
                    }, options);
                  case 4:
                    return _context13.abrupt("return", array);
                  case 5:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee6, this);
          }));
          return function() {
            return _filter.apply(this, arguments);
          };
        }()
      }, {
        key: "equalTo",
        value: function(key, value) {
          var _this7 = this;
          if (key && (0, _typeof2.default)(key) === "object") {
            var _context14;
            (0, _forEach.default)(_context14 = (0, _entries.default)(key)).call(_context14, function(_ref2) {
              var _ref3 = (0, _slicedToArray2.default)(_ref2, 2), k2 = _ref3[0], val = _ref3[1];
              return _this7.equalTo(k2, val);
            });
            return this;
          }
          if (typeof value === "undefined") {
            return this.doesNotExist(key);
          }
          this._where[key] = (0, _encode.default)(value, false, true);
          return this;
        }
      }, {
        key: "notEqualTo",
        value: function(key, value) {
          var _this8 = this;
          if (key && (0, _typeof2.default)(key) === "object") {
            var _context15;
            (0, _forEach.default)(_context15 = (0, _entries.default)(key)).call(_context15, function(_ref4) {
              var _ref5 = (0, _slicedToArray2.default)(_ref4, 2), k2 = _ref5[0], val = _ref5[1];
              return _this8.notEqualTo(k2, val);
            });
            return this;
          }
          return this._addCondition(key, "$ne", value);
        }
      }, {
        key: "lessThan",
        value: function(key, value) {
          return this._addCondition(key, "$lt", value);
        }
      }, {
        key: "greaterThan",
        value: function(key, value) {
          return this._addCondition(key, "$gt", value);
        }
      }, {
        key: "lessThanOrEqualTo",
        value: function(key, value) {
          return this._addCondition(key, "$lte", value);
        }
      }, {
        key: "greaterThanOrEqualTo",
        value: function(key, value) {
          return this._addCondition(key, "$gte", value);
        }
      }, {
        key: "containedIn",
        value: function(key, value) {
          return this._addCondition(key, "$in", value);
        }
      }, {
        key: "notContainedIn",
        value: function(key, value) {
          return this._addCondition(key, "$nin", value);
        }
      }, {
        key: "containedBy",
        value: function(key, values) {
          return this._addCondition(key, "$containedBy", values);
        }
      }, {
        key: "containsAll",
        value: function(key, values) {
          return this._addCondition(key, "$all", values);
        }
      }, {
        key: "containsAllStartingWith",
        value: function(key, values) {
          var _this = this;
          if (!(0, _isArray.default)(values)) {
            values = [values];
          }
          var regexObject = (0, _map2.default)(values).call(values, function(value) {
            return {
              $regex: _this._regexStartWith(value)
            };
          });
          return this.containsAll(key, regexObject);
        }
      }, {
        key: "exists",
        value: function(key) {
          return this._addCondition(key, "$exists", true);
        }
      }, {
        key: "doesNotExist",
        value: function(key) {
          return this._addCondition(key, "$exists", false);
        }
      }, {
        key: "matches",
        value: function(key, regex, modifiers) {
          this._addCondition(key, "$regex", regex);
          if (!modifiers) {
            modifiers = "";
          }
          if (regex.ignoreCase) {
            modifiers += "i";
          }
          if (regex.multiline) {
            modifiers += "m";
          }
          if (modifiers.length) {
            this._addCondition(key, "$options", modifiers);
          }
          return this;
        }
      }, {
        key: "matchesQuery",
        value: function(key, query) {
          var queryJSON = query.toJSON();
          queryJSON.className = query.className;
          return this._addCondition(key, "$inQuery", queryJSON);
        }
      }, {
        key: "doesNotMatchQuery",
        value: function(key, query) {
          var queryJSON = query.toJSON();
          queryJSON.className = query.className;
          return this._addCondition(key, "$notInQuery", queryJSON);
        }
      }, {
        key: "matchesKeyInQuery",
        value: function(key, queryKey, query) {
          var queryJSON = query.toJSON();
          queryJSON.className = query.className;
          return this._addCondition(key, "$select", {
            key: queryKey,
            query: queryJSON
          });
        }
      }, {
        key: "doesNotMatchKeyInQuery",
        value: function(key, queryKey, query) {
          var queryJSON = query.toJSON();
          queryJSON.className = query.className;
          return this._addCondition(key, "$dontSelect", {
            key: queryKey,
            query: queryJSON
          });
        }
      }, {
        key: "contains",
        value: function(key, substring) {
          if (typeof substring !== "string") {
            throw new Error("The value being searched for must be a string.");
          }
          return this._addCondition(key, "$regex", quote(substring));
        }
      }, {
        key: "fullText",
        value: function(key, value, options) {
          options = options || {};
          if (!key) {
            throw new Error("A key is required.");
          }
          if (!value) {
            throw new Error("A search term is required");
          }
          if (typeof value !== "string") {
            throw new Error("The value being searched for must be a string.");
          }
          var fullOptions = {};
          fullOptions.$term = value;
          for (var option in options) {
            switch (option) {
              case "language":
                fullOptions.$language = options[option];
                break;
              case "caseSensitive":
                fullOptions.$caseSensitive = options[option];
                break;
              case "diacriticSensitive":
                fullOptions.$diacriticSensitive = options[option];
                break;
              default:
                throw new Error("Unknown option: ".concat(option));
            }
          }
          return this._addCondition(key, "$text", {
            $search: fullOptions
          });
        }
      }, {
        key: "sortByTextScore",
        value: function() {
          this.ascending("$score");
          this.select(["$score"]);
          return this;
        }
      }, {
        key: "startsWith",
        value: function(key, prefix) {
          if (typeof prefix !== "string") {
            throw new Error("The value being searched for must be a string.");
          }
          return this._addCondition(key, "$regex", this._regexStartWith(prefix));
        }
      }, {
        key: "endsWith",
        value: function(key, suffix) {
          if (typeof suffix !== "string") {
            throw new Error("The value being searched for must be a string.");
          }
          return this._addCondition(key, "$regex", "".concat(quote(suffix), "$"));
        }
      }, {
        key: "near",
        value: function(key, point) {
          if (!(point instanceof _ParseGeoPoint.default)) {
            point = new _ParseGeoPoint.default(point);
          }
          return this._addCondition(key, "$nearSphere", point);
        }
      }, {
        key: "withinRadians",
        value: function(key, point, maxDistance, sorted) {
          if (sorted || sorted === void 0) {
            this.near(key, point);
            return this._addCondition(key, "$maxDistance", maxDistance);
          }
          return this._addCondition(key, "$geoWithin", {
            $centerSphere: [[point.longitude, point.latitude], maxDistance]
          });
        }
      }, {
        key: "withinMiles",
        value: function(key, point, maxDistance, sorted) {
          return this.withinRadians(key, point, maxDistance / 3958.8, sorted);
        }
      }, {
        key: "withinKilometers",
        value: function(key, point, maxDistance, sorted) {
          return this.withinRadians(key, point, maxDistance / 6371, sorted);
        }
      }, {
        key: "withinGeoBox",
        value: function(key, southwest, northeast) {
          if (!(southwest instanceof _ParseGeoPoint.default)) {
            southwest = new _ParseGeoPoint.default(southwest);
          }
          if (!(northeast instanceof _ParseGeoPoint.default)) {
            northeast = new _ParseGeoPoint.default(northeast);
          }
          this._addCondition(key, "$within", {
            $box: [southwest, northeast]
          });
          return this;
        }
      }, {
        key: "withinPolygon",
        value: function(key, points) {
          return this._addCondition(key, "$geoWithin", {
            $polygon: points
          });
        }
      }, {
        key: "polygonContains",
        value: function(key, point) {
          return this._addCondition(key, "$geoIntersects", {
            $point: point
          });
        }
      }, {
        key: "ascending",
        value: function() {
          this._order = [];
          for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {
            keys[_key5] = arguments[_key5];
          }
          return this.addAscending.apply(this, keys);
        }
      }, {
        key: "addAscending",
        value: function() {
          var _this9 = this;
          if (!this._order) {
            this._order = [];
          }
          for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {
            keys[_key6] = arguments[_key6];
          }
          (0, _forEach.default)(keys).call(keys, function(key) {
            var _context16;
            if ((0, _isArray.default)(key)) {
              key = key.join();
            }
            _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key.replace(/\s/g, "").split(","));
          });
          return this;
        }
      }, {
        key: "descending",
        value: function() {
          this._order = [];
          for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {
            keys[_key7] = arguments[_key7];
          }
          return this.addDescending.apply(this, keys);
        }
      }, {
        key: "addDescending",
        value: function() {
          var _this10 = this;
          if (!this._order) {
            this._order = [];
          }
          for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {
            keys[_key8] = arguments[_key8];
          }
          (0, _forEach.default)(keys).call(keys, function(key) {
            var _context17, _context18;
            if ((0, _isArray.default)(key)) {
              key = key.join();
            }
            _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key.replace(/\s/g, "").split(",")).call(_context18, function(k2) {
              return "-".concat(k2);
            }));
          });
          return this;
        }
      }, {
        key: "skip",
        value: function(n2) {
          if (typeof n2 !== "number" || n2 < 0) {
            throw new Error("You can only skip by a positive number");
          }
          this._skip = n2;
          return this;
        }
      }, {
        key: "limit",
        value: function(n2) {
          if (typeof n2 !== "number") {
            throw new Error("You can only set the limit to a numeric value");
          }
          this._limit = n2;
          return this;
        }
      }, {
        key: "withCount",
        value: function() {
          var includeCount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
          if (typeof includeCount !== "boolean") {
            throw new Error("You can only set withCount to a boolean value");
          }
          this._count = includeCount;
          return this;
        }
      }, {
        key: "include",
        value: function() {
          var _this11 = this;
          for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {
            keys[_key9] = arguments[_key9];
          }
          (0, _forEach.default)(keys).call(keys, function(key) {
            if ((0, _isArray.default)(key)) {
              var _context19;
              _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key);
            } else {
              _this11._include.push(key);
            }
          });
          return this;
        }
      }, {
        key: "includeAll",
        value: function() {
          return this.include("*");
        }
      }, {
        key: "select",
        value: function() {
          var _this12 = this;
          if (!this._select) {
            this._select = [];
          }
          for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {
            keys[_key10] = arguments[_key10];
          }
          (0, _forEach.default)(keys).call(keys, function(key) {
            if ((0, _isArray.default)(key)) {
              var _context20;
              _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key);
            } else {
              _this12._select.push(key);
            }
          });
          return this;
        }
      }, {
        key: "exclude",
        value: function() {
          var _this13 = this;
          for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {
            keys[_key11] = arguments[_key11];
          }
          (0, _forEach.default)(keys).call(keys, function(key) {
            if ((0, _isArray.default)(key)) {
              var _context21;
              _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key);
            } else {
              _this13._exclude.push(key);
            }
          });
          return this;
        }
      }, {
        key: "readPreference",
        value: function(_readPreference, includeReadPreference, subqueryReadPreference) {
          this._readPreference = _readPreference;
          this._includeReadPreference = includeReadPreference;
          this._subqueryReadPreference = subqueryReadPreference;
          return this;
        }
      }, {
        key: "onChange",
        value: function(onUpdate, onError) {
          var sub = null;
          this.subscribe().then(function(subscription) {
            sub = subscription;
            subscription.on("create", function(object) {
              onUpdate(object);
            });
            subscription.on("update", function(object) {
              onUpdate(object);
            });
            subscription.on("error", function(err) {
              if (onError) {
                onError(err);
              } else {
                console.warn("Subscription error", err);
              }
            });
          }).catch(function(err) {
            if (onError) {
              onError(err);
            } else {
              console.warn("Subscription connection error", err);
            }
          });
          return function() {
            if (sub) {
              sub.unsubscribe();
            }
          };
        }
      }, {
        key: "subscribe",
        value: function() {
          var _subscribe = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7(sessionToken) {
            var currentUser, liveQueryClient, subscription;
            return _regenerator.default.wrap(function(_context22) {
              while (1) {
                switch (_context22.prev = _context22.next) {
                  case 0:
                    _context22.next = 2;
                    return _CoreManager.default.getUserController().currentUserAsync();
                  case 2:
                    currentUser = _context22.sent;
                    if (!sessionToken) {
                      sessionToken = currentUser ? currentUser.getSessionToken() : void 0;
                    }
                    _context22.next = 6;
                    return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();
                  case 6:
                    liveQueryClient = _context22.sent;
                    if (liveQueryClient.shouldOpen()) {
                      liveQueryClient.open();
                    }
                    subscription = liveQueryClient.subscribe(this, sessionToken);
                    return _context22.abrupt("return", subscription.subscribePromise.then(function() {
                      return subscription;
                    }));
                  case 10:
                  case "end":
                    return _context22.stop();
                }
              }
            }, _callee7, this);
          }));
          return function() {
            return _subscribe.apply(this, arguments);
          };
        }()
      }, {
        key: "fromNetwork",
        value: function() {
          this._queriesLocalDatastore = false;
          this._localDatastorePinName = null;
          return this;
        }
      }, {
        key: "fromLocalDatastore",
        value: function() {
          return this.fromPinWithName(null);
        }
      }, {
        key: "fromPin",
        value: function() {
          return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);
        }
      }, {
        key: "fromPinWithName",
        value: function(name) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (localDatastore.checkIfEnabled()) {
            this._queriesLocalDatastore = true;
            this._localDatastorePinName = name;
          }
          return this;
        }
      }, {
        key: "cancel",
        value: function() {
          var _this14 = this;
          if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === "function") {
            this._xhrRequest.task._aborted = true;
            this._xhrRequest.task.abort();
            this._xhrRequest.task = null;
            this._xhrRequest.onchange = function() {
            };
            return this;
          }
          return this._xhrRequest.onchange = function() {
            return _this14.cancel();
          };
        }
      }, {
        key: "_setRequestTask",
        value: function(options) {
          var _this15 = this;
          options.requestTask = function(task) {
            _this15._xhrRequest.task = task;
            _this15._xhrRequest.onchange();
          };
        }
      }], [{
        key: "fromJSON",
        value: function(className, json) {
          var query = new ParseQuery2(className);
          return query.withJSON(json);
        }
      }, {
        key: "or",
        value: function() {
          for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {
            queries[_key12] = arguments[_key12];
          }
          var className = _getClassNameFromQueries(queries);
          var query = new ParseQuery2(className);
          query._orQuery(queries);
          return query;
        }
      }, {
        key: "and",
        value: function() {
          for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {
            queries[_key13] = arguments[_key13];
          }
          var className = _getClassNameFromQueries(queries);
          var query = new ParseQuery2(className);
          query._andQuery(queries);
          return query;
        }
      }, {
        key: "nor",
        value: function() {
          for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {
            queries[_key14] = arguments[_key14];
          }
          var className = _getClassNameFromQueries(queries);
          var query = new ParseQuery2(className);
          query._norQuery(queries);
          return query;
        }
      }]);
      return ParseQuery2;
    }();
    var DefaultController = {
      find: function(className, params, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "classes/".concat(className), params, options);
      },
      aggregate: function(className, params, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "aggregate/".concat(className), params, options);
      }
    };
    _CoreManager.default.setQueryController(DefaultController);
    var _default = ParseQuery;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseRelation.js
var require_ParseRelation = __commonJS({
  "node_modules/moralis/lib/browser/ParseRelation.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ParseOp = require_ParseOp();
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var ParseRelation = /* @__PURE__ */ function() {
      function ParseRelation2(parent, key) {
        (0, _classCallCheck2.default)(this, ParseRelation2);
        (0, _defineProperty2.default)(this, "parent", void 0);
        (0, _defineProperty2.default)(this, "key", void 0);
        (0, _defineProperty2.default)(this, "targetClassName", void 0);
        this.parent = parent;
        this.key = key;
        this.targetClassName = null;
      }
      (0, _createClass2.default)(ParseRelation2, [{
        key: "_ensureParentAndKey",
        value: function(parent, key) {
          this.key = this.key || key;
          if (this.key !== key) {
            throw new Error("Internal Error. Relation retrieved from two different keys.");
          }
          if (this.parent) {
            if (this.parent.className !== parent.className) {
              throw new Error("Internal Error. Relation retrieved from two different Objects.");
            }
            if (this.parent.id) {
              if (this.parent.id !== parent.id) {
                throw new Error("Internal Error. Relation retrieved from two different Objects.");
              }
            } else if (parent.id) {
              this.parent = parent;
            }
          } else {
            this.parent = parent;
          }
        }
      }, {
        key: "add",
        value: function(objects) {
          if (!(0, _isArray.default)(objects)) {
            objects = [objects];
          }
          var change = new _ParseOp.RelationOp(objects, []);
          var parent = this.parent;
          if (!parent) {
            throw new Error("Cannot add to a Relation without a parent");
          }
          if (objects.length === 0) {
            return parent;
          }
          parent.set(this.key, change);
          this.targetClassName = change._targetClassName;
          return parent;
        }
      }, {
        key: "remove",
        value: function(objects) {
          if (!(0, _isArray.default)(objects)) {
            objects = [objects];
          }
          var change = new _ParseOp.RelationOp([], objects);
          if (!this.parent) {
            throw new Error("Cannot remove from a Relation without a parent");
          }
          if (objects.length === 0) {
            return;
          }
          this.parent.set(this.key, change);
          this.targetClassName = change._targetClassName;
        }
      }, {
        key: "toJSON",
        value: function() {
          return {
            __type: "Relation",
            className: this.targetClassName
          };
        }
      }, {
        key: "query",
        value: function query() {
          var query2;
          var parent = this.parent;
          if (!parent) {
            throw new Error("Cannot construct a query for a Relation without a parent");
          }
          if (!this.targetClassName) {
            query2 = new _ParseQuery.default(parent.className);
            query2._extraOptions.redirectClassNameForKey = this.key;
          } else {
            query2 = new _ParseQuery.default(this.targetClassName);
          }
          query2._addCondition("$relatedTo", "object", {
            __type: "Pointer",
            className: parent.className,
            objectId: parent.id
          });
          query2._addCondition("$relatedTo", "key", this.key);
          return query2;
        }
      }]);
      return ParseRelation2;
    }();
    var _default = ParseRelation;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/canBeSerialized.js
var require_canBeSerialized = __commonJS({
  "node_modules/moralis/lib/browser/canBeSerialized.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = canBeSerialized;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    function canBeSerialized(obj) {
      if (!(obj instanceof _ParseObject.default)) {
        return true;
      }
      var attributes = obj.attributes;
      for (var attr in attributes) {
        var val = attributes[attr];
        if (!canBeSerializedHelper(val)) {
          return false;
        }
      }
      return true;
    }
    function canBeSerializedHelper(value) {
      if ((0, _typeof2.default)(value) !== "object") {
        return true;
      }
      if (value instanceof _ParseRelation.default) {
        return true;
      }
      if (value instanceof _ParseObject.default) {
        return !!value.id;
      }
      if (value instanceof _ParseFile.default) {
        if (value.url()) {
          return true;
        }
        return false;
      }
      if ((0, _isArray.default)(value)) {
        for (var i2 = 0; i2 < value.length; i2++) {
          if (!canBeSerializedHelper(value[i2])) {
            return false;
          }
        }
        return true;
      }
      for (var k2 in value) {
        if (!canBeSerializedHelper(value[k2])) {
          return false;
        }
      }
      return true;
    }
  }
});

// node_modules/moralis/lib/browser/escape.js
var require_escape = __commonJS({
  "node_modules/moralis/lib/browser/escape.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = escape;
    var encoded = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      "/": "&#x2F;",
      "'": "&#x27;",
      '"': "&quot;"
    };
    function escape(str) {
      return str.replace(/[&<>/'"]/g, function(char) {
        return encoded[char];
      });
    }
  }
});

// node_modules/core-js-pure/internals/whitespaces.js
var require_whitespaces = __commonJS({
  "node_modules/core-js-pure/internals/whitespaces.js"(exports, module) {
    init_react();
    module.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
  }
});

// node_modules/core-js-pure/internals/string-trim.js
var require_string_trim = __commonJS({
  "node_modules/core-js-pure/internals/string-trim.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var requireObjectCoercible = require_require_object_coercible();
    var toString2 = require_to_string();
    var whitespaces = require_whitespaces();
    var replace = uncurryThis("".replace);
    var whitespace = "[" + whitespaces + "]";
    var ltrim = RegExp("^" + whitespace + whitespace + "*");
    var rtrim = RegExp(whitespace + whitespace + "*$");
    var createMethod = function(TYPE) {
      return function($this) {
        var string = toString2(requireObjectCoercible($this));
        if (TYPE & 1)
          string = replace(string, ltrim, "");
        if (TYPE & 2)
          string = replace(string, rtrim, "");
        return string;
      };
    };
    module.exports = {
      start: createMethod(1),
      end: createMethod(2),
      trim: createMethod(3)
    };
  }
});

// node_modules/core-js-pure/internals/number-parse-int.js
var require_number_parse_int = __commonJS({
  "node_modules/core-js-pure/internals/number-parse-int.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var fails = require_fails();
    var uncurryThis = require_function_uncurry_this();
    var toString2 = require_to_string();
    var trim = require_string_trim().trim;
    var whitespaces = require_whitespaces();
    var $parseInt = global2.parseInt;
    var Symbol2 = global2.Symbol;
    var ITERATOR = Symbol2 && Symbol2.iterator;
    var hex = /^[+-]?0x/i;
    var exec = uncurryThis(hex.exec);
    var FORCED = $parseInt(whitespaces + "08") !== 8 || $parseInt(whitespaces + "0x16") !== 22 || ITERATOR && !fails(function() {
      $parseInt(Object(ITERATOR));
    });
    module.exports = FORCED ? function parseInt2(string, radix) {
      var S2 = trim(toString2(string));
      return $parseInt(S2, radix >>> 0 || (exec(hex, S2) ? 16 : 10));
    } : $parseInt;
  }
});

// node_modules/core-js-pure/modules/es.parse-int.js
var require_es_parse_int = __commonJS({
  "node_modules/core-js-pure/modules/es.parse-int.js"() {
    init_react();
    var $ = require_export();
    var $parseInt = require_number_parse_int();
    $({ global: true, forced: parseInt != $parseInt }, {
      parseInt: $parseInt
    });
  }
});

// node_modules/core-js-pure/es/parse-int.js
var require_parse_int = __commonJS({
  "node_modules/core-js-pure/es/parse-int.js"(exports, module) {
    init_react();
    require_es_parse_int();
    var path = require_path();
    module.exports = path.parseInt;
  }
});

// node_modules/core-js-pure/stable/parse-int.js
var require_parse_int2 = __commonJS({
  "node_modules/core-js-pure/stable/parse-int.js"(exports, module) {
    init_react();
    var parent = require_parse_int();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/parse-int.js
var require_parse_int3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/parse-int.js"(exports, module) {
    init_react();
    module.exports = require_parse_int2();
  }
});

// node_modules/moralis/lib/browser/parseDate.js
var require_parseDate = __commonJS({
  "node_modules/moralis/lib/browser/parseDate.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = parseDate;
    var _parseInt2 = _interopRequireDefault(require_parse_int3());
    function parseDate(iso8601) {
      var regexp = new RegExp("^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2})T([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})(.([0-9]+))?Z$");
      var match = regexp.exec(iso8601);
      if (!match) {
        return null;
      }
      var year = (0, _parseInt2.default)(match[1]) || 0;
      var month = ((0, _parseInt2.default)(match[2]) || 1) - 1;
      var day = (0, _parseInt2.default)(match[3]) || 0;
      var hour = (0, _parseInt2.default)(match[4]) || 0;
      var minute = (0, _parseInt2.default)(match[5]) || 0;
      var second = (0, _parseInt2.default)(match[6]) || 0;
      var milli = (0, _parseInt2.default)(match[8]) || 0;
      return new Date(Date.UTC(year, month, day, hour, minute, second, milli));
    }
  }
});

// node_modules/moralis/lib/browser/TaskQueue.js
var require_TaskQueue = __commonJS({
  "node_modules/moralis/lib/browser/TaskQueue.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _promiseUtils = require_promiseUtils();
    var TaskQueue = /* @__PURE__ */ function() {
      function TaskQueue2() {
        (0, _classCallCheck2.default)(this, TaskQueue2);
        (0, _defineProperty2.default)(this, "queue", void 0);
        this.queue = [];
      }
      (0, _createClass2.default)(TaskQueue2, [{
        key: "enqueue",
        value: function(task) {
          var _this = this;
          var taskComplete = new _promiseUtils.resolvingPromise();
          this.queue.push({
            task,
            _completion: taskComplete
          });
          if (this.queue.length === 1) {
            task().then(function() {
              _this._dequeue();
              taskComplete.resolve();
            }, function(error) {
              _this._dequeue();
              taskComplete.reject(error);
            });
          }
          return taskComplete;
        }
      }, {
        key: "_dequeue",
        value: function() {
          var _this2 = this;
          this.queue.shift();
          if (this.queue.length) {
            var next = this.queue[0];
            next.task().then(function() {
              _this2._dequeue();
              next._completion.resolve();
            }, function(error) {
              _this2._dequeue();
              next._completion.reject(error);
            });
          }
        }
      }]);
      return TaskQueue2;
    }();
    module.exports = TaskQueue;
  }
});

// node_modules/moralis/lib/browser/ObjectStateMutations.js
var require_ObjectStateMutations = __commonJS({
  "node_modules/moralis/lib/browser/ObjectStateMutations.js"(exports) {
    "use strict";
    init_react();
    var _Object$keys = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.commitServerChanges = commitServerChanges;
    exports.defaultState = defaultState;
    exports.estimateAttribute = estimateAttribute;
    exports.estimateAttributes = estimateAttributes;
    exports.mergeFirstPendingState = mergeFirstPendingState;
    exports.popPendingState = popPendingState;
    exports.pushPendingState = pushPendingState;
    exports.setPendingOp = setPendingOp;
    exports.setServerData = setServerData;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _includes = _interopRequireDefault(require_includes5());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _encode = _interopRequireDefault(require_encode());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    var _TaskQueue = _interopRequireDefault(require_TaskQueue());
    var _ParseOp = require_ParseOp();
    function ownKeys(object, enumerableOnly) {
      var keys = _Object$keys(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var _context, _context2;
        var source = arguments[i2] != null ? arguments[i2] : {};
        i2 % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function defaultState() {
      return {
        serverData: {},
        pendingOps: [{}],
        objectCache: {},
        tasks: new _TaskQueue.default(),
        existed: false
      };
    }
    function setServerData(serverData, attributes) {
      for (var _attr in attributes) {
        if (typeof attributes[_attr] !== "undefined") {
          serverData[_attr] = attributes[_attr];
        } else {
          delete serverData[_attr];
        }
      }
    }
    function setPendingOp(pendingOps, attr, op) {
      var last = pendingOps.length - 1;
      if (op) {
        pendingOps[last][attr] = op;
      } else {
        delete pendingOps[last][attr];
      }
    }
    function pushPendingState(pendingOps) {
      pendingOps.push({});
    }
    function popPendingState(pendingOps) {
      var first = pendingOps.shift();
      if (!pendingOps.length) {
        pendingOps[0] = {};
      }
      return first;
    }
    function mergeFirstPendingState(pendingOps) {
      var first = popPendingState(pendingOps);
      var next = pendingOps[0];
      for (var _attr2 in first) {
        if (next[_attr2] && first[_attr2]) {
          var merged = next[_attr2].mergeWith(first[_attr2]);
          if (merged) {
            next[_attr2] = merged;
          }
        } else {
          next[_attr2] = first[_attr2];
        }
      }
    }
    function estimateAttribute(serverData, pendingOps, className, id, attr) {
      var value = serverData[attr];
      for (var i2 = 0; i2 < pendingOps.length; i2++) {
        if (pendingOps[i2][attr]) {
          if (pendingOps[i2][attr] instanceof _ParseOp.RelationOp) {
            if (id) {
              value = pendingOps[i2][attr].applyTo(value, {
                className,
                id
              }, attr);
            }
          } else {
            value = pendingOps[i2][attr].applyTo(value);
          }
        }
      }
      return value;
    }
    function estimateAttributes(serverData, pendingOps, className, id) {
      var data = {};
      for (var attr in serverData) {
        data[attr] = serverData[attr];
      }
      for (var i2 = 0; i2 < pendingOps.length; i2++) {
        for (attr in pendingOps[i2]) {
          if (pendingOps[i2][attr] instanceof _ParseOp.RelationOp) {
            if (id) {
              data[attr] = pendingOps[i2][attr].applyTo(data[attr], {
                className,
                id
              }, attr);
            }
          } else {
            if ((0, _includes.default)(attr).call(attr, ".")) {
              var fields = attr.split(".");
              var first = fields[0];
              var last = fields[fields.length - 1];
              data[first] = _objectSpread({}, serverData[first]);
              var object = _objectSpread({}, data);
              for (var _i = 0; _i < fields.length - 1; _i++) {
                object = object[fields[_i]];
              }
              object[last] = pendingOps[i2][attr].applyTo(object[last]);
            } else {
              data[attr] = pendingOps[i2][attr].applyTo(data[attr]);
            }
          }
        }
      }
      return data;
    }
    function commitServerChanges(serverData, objectCache, changes) {
      for (var _attr3 in changes) {
        var val = changes[_attr3];
        serverData[_attr3] = val;
        if (val && (0, _typeof2.default)(val) === "object" && !(val instanceof _ParseObject.default) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {
          var json = (0, _encode.default)(val, false, true);
          objectCache[_attr3] = (0, _stringify.default)(json);
        }
      }
    }
  }
});

// node_modules/moralis/lib/browser/SingleInstanceStateController.js
var require_SingleInstanceStateController = __commonJS({
  "node_modules/moralis/lib/browser/SingleInstanceStateController.js"(exports) {
    "use strict";
    init_react();
    var _typeof = require_typeof();
    var _WeakMap = require_weak_map3();
    var _Object$defineProperty = require_define_property3();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.clearAllState = clearAllState;
    exports.commitServerChanges = commitServerChanges;
    exports.duplicateState = duplicateState;
    exports.enqueueTask = enqueueTask;
    exports.estimateAttribute = estimateAttribute;
    exports.estimateAttributes = estimateAttributes;
    exports.getObjectCache = getObjectCache;
    exports.getPendingOps = getPendingOps;
    exports.getServerData = getServerData;
    exports.getState = getState;
    exports.initializeState = initializeState;
    exports.mergeFirstPendingState = mergeFirstPendingState;
    exports.popPendingState = popPendingState;
    exports.pushPendingState = pushPendingState;
    exports.removeState = removeState;
    exports.setPendingOp = setPendingOp;
    exports.setServerData = setServerData;
    var ObjectStateMutations = _interopRequireWildcard(require_ObjectStateMutations());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap();
      var cacheNodeInterop = new _WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var objectState = {};
    function getState(obj) {
      var classData = objectState[obj.className];
      if (classData) {
        return classData[obj.id] || null;
      }
      return null;
    }
    function initializeState(obj, initial) {
      var state = getState(obj);
      if (state) {
        return state;
      }
      if (!objectState[obj.className]) {
        objectState[obj.className] = {};
      }
      if (!initial) {
        initial = ObjectStateMutations.defaultState();
      }
      state = objectState[obj.className][obj.id] = initial;
      return state;
    }
    function removeState(obj) {
      var state = getState(obj);
      if (state === null) {
        return null;
      }
      delete objectState[obj.className][obj.id];
      return state;
    }
    function getServerData(obj) {
      var state = getState(obj);
      if (state) {
        return state.serverData;
      }
      return {};
    }
    function setServerData(obj, attributes) {
      var _initializeState = initializeState(obj), serverData = _initializeState.serverData;
      ObjectStateMutations.setServerData(serverData, attributes);
    }
    function getPendingOps(obj) {
      var state = getState(obj);
      if (state) {
        return state.pendingOps;
      }
      return [{}];
    }
    function setPendingOp(obj, attr, op) {
      var _initializeState2 = initializeState(obj), pendingOps = _initializeState2.pendingOps;
      ObjectStateMutations.setPendingOp(pendingOps, attr, op);
    }
    function pushPendingState(obj) {
      var _initializeState3 = initializeState(obj), pendingOps = _initializeState3.pendingOps;
      ObjectStateMutations.pushPendingState(pendingOps);
    }
    function popPendingState(obj) {
      var _initializeState4 = initializeState(obj), pendingOps = _initializeState4.pendingOps;
      return ObjectStateMutations.popPendingState(pendingOps);
    }
    function mergeFirstPendingState(obj) {
      var pendingOps = getPendingOps(obj);
      ObjectStateMutations.mergeFirstPendingState(pendingOps);
    }
    function getObjectCache(obj) {
      var state = getState(obj);
      if (state) {
        return state.objectCache;
      }
      return {};
    }
    function estimateAttribute(obj, attr) {
      var serverData = getServerData(obj);
      var pendingOps = getPendingOps(obj);
      return ObjectStateMutations.estimateAttribute(serverData, pendingOps, obj.className, obj.id, attr);
    }
    function estimateAttributes(obj) {
      var serverData = getServerData(obj);
      var pendingOps = getPendingOps(obj);
      return ObjectStateMutations.estimateAttributes(serverData, pendingOps, obj.className, obj.id);
    }
    function commitServerChanges(obj, changes) {
      var state = initializeState(obj);
      ObjectStateMutations.commitServerChanges(state.serverData, state.objectCache, changes);
    }
    function enqueueTask(obj, task) {
      var state = initializeState(obj);
      return state.tasks.enqueue(task);
    }
    function clearAllState() {
      objectState = {};
    }
    function duplicateState(source, dest) {
      dest.id = source.id;
    }
  }
});

// node_modules/moralis/lib/browser/UniqueInstanceStateController.js
var require_UniqueInstanceStateController = __commonJS({
  "node_modules/moralis/lib/browser/UniqueInstanceStateController.js"(exports) {
    "use strict";
    init_react();
    var _typeof = require_typeof();
    var _WeakMap2 = require_weak_map3();
    var _Object$defineProperty = require_define_property3();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.clearAllState = clearAllState;
    exports.commitServerChanges = commitServerChanges;
    exports.duplicateState = duplicateState;
    exports.enqueueTask = enqueueTask;
    exports.estimateAttribute = estimateAttribute;
    exports.estimateAttributes = estimateAttributes;
    exports.getObjectCache = getObjectCache;
    exports.getPendingOps = getPendingOps;
    exports.getServerData = getServerData;
    exports.getState = getState;
    exports.initializeState = initializeState;
    exports.mergeFirstPendingState = mergeFirstPendingState;
    exports.popPendingState = popPendingState;
    exports.pushPendingState = pushPendingState;
    exports.removeState = removeState;
    exports.setPendingOp = setPendingOp;
    exports.setServerData = setServerData;
    var _weakMap = _interopRequireDefault(require_weak_map3());
    var ObjectStateMutations = _interopRequireWildcard(require_ObjectStateMutations());
    var _TaskQueue = _interopRequireDefault(require_TaskQueue());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap2 !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap2();
      var cacheNodeInterop = new _WeakMap2();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var objectState = new _weakMap.default();
    function getState(obj) {
      var classData = objectState.get(obj);
      return classData || null;
    }
    function initializeState(obj, initial) {
      var state = getState(obj);
      if (state) {
        return state;
      }
      if (!initial) {
        initial = {
          serverData: {},
          pendingOps: [{}],
          objectCache: {},
          tasks: new _TaskQueue.default(),
          existed: false
        };
      }
      state = initial;
      objectState.set(obj, state);
      return state;
    }
    function removeState(obj) {
      var state = getState(obj);
      if (state === null) {
        return null;
      }
      objectState.delete(obj);
      return state;
    }
    function getServerData(obj) {
      var state = getState(obj);
      if (state) {
        return state.serverData;
      }
      return {};
    }
    function setServerData(obj, attributes) {
      var _initializeState = initializeState(obj), serverData = _initializeState.serverData;
      ObjectStateMutations.setServerData(serverData, attributes);
    }
    function getPendingOps(obj) {
      var state = getState(obj);
      if (state) {
        return state.pendingOps;
      }
      return [{}];
    }
    function setPendingOp(obj, attr, op) {
      var _initializeState2 = initializeState(obj), pendingOps = _initializeState2.pendingOps;
      ObjectStateMutations.setPendingOp(pendingOps, attr, op);
    }
    function pushPendingState(obj) {
      var _initializeState3 = initializeState(obj), pendingOps = _initializeState3.pendingOps;
      ObjectStateMutations.pushPendingState(pendingOps);
    }
    function popPendingState(obj) {
      var _initializeState4 = initializeState(obj), pendingOps = _initializeState4.pendingOps;
      return ObjectStateMutations.popPendingState(pendingOps);
    }
    function mergeFirstPendingState(obj) {
      var pendingOps = getPendingOps(obj);
      ObjectStateMutations.mergeFirstPendingState(pendingOps);
    }
    function getObjectCache(obj) {
      var state = getState(obj);
      if (state) {
        return state.objectCache;
      }
      return {};
    }
    function estimateAttribute(obj, attr) {
      var serverData = getServerData(obj);
      var pendingOps = getPendingOps(obj);
      return ObjectStateMutations.estimateAttribute(serverData, pendingOps, obj.className, obj.id, attr);
    }
    function estimateAttributes(obj) {
      var serverData = getServerData(obj);
      var pendingOps = getPendingOps(obj);
      return ObjectStateMutations.estimateAttributes(serverData, pendingOps, obj.className, obj.id);
    }
    function commitServerChanges(obj, changes) {
      var state = initializeState(obj);
      ObjectStateMutations.commitServerChanges(state.serverData, state.objectCache, changes);
    }
    function enqueueTask(obj, task) {
      var state = initializeState(obj);
      return state.tasks.enqueue(task);
    }
    function duplicateState(source, dest) {
      var oldState = initializeState(source);
      var newState = initializeState(dest);
      for (var key in oldState.serverData) {
        newState.serverData[key] = oldState.serverData[key];
      }
      for (var index = 0; index < oldState.pendingOps.length; index++) {
        for (var _key in oldState.pendingOps[index]) {
          newState.pendingOps[index][_key] = oldState.pendingOps[index][_key];
        }
      }
      for (var _key2 in oldState.objectCache) {
        newState.objectCache[_key2] = oldState.objectCache[_key2];
      }
      newState.existed = oldState.existed;
    }
    function clearAllState() {
      objectState = new _weakMap.default();
    }
  }
});

// node_modules/moralis/lib/browser/unsavedChildren.js
var require_unsavedChildren = __commonJS({
  "node_modules/moralis/lib/browser/unsavedChildren.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = unsavedChildren;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _concat = _interopRequireDefault(require_concat4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    function unsavedChildren(obj, allowDeepUnsaved) {
      var _context;
      var encountered = {
        objects: {},
        files: []
      };
      var identifier = (0, _concat.default)(_context = "".concat(obj.className, ":")).call(_context, obj._getId());
      encountered.objects[identifier] = obj.dirty() ? obj : true;
      var attributes = obj.attributes;
      for (var attr in attributes) {
        if ((0, _typeof2.default)(attributes[attr]) === "object") {
          traverse(attributes[attr], encountered, false, !!allowDeepUnsaved);
        }
      }
      var unsaved = [];
      for (var id in encountered.objects) {
        if (id !== identifier && encountered.objects[id] !== true) {
          unsaved.push(encountered.objects[id]);
        }
      }
      return (0, _concat.default)(unsaved).call(unsaved, encountered.files);
    }
    function traverse(obj, encountered, shouldThrow, allowDeepUnsaved) {
      if (obj instanceof _ParseObject.default) {
        var _context2;
        if (!obj.id && shouldThrow) {
          throw new Error("Cannot create a pointer to an unsaved Object.");
        }
        var _identifier = (0, _concat.default)(_context2 = "".concat(obj.className, ":")).call(_context2, obj._getId());
        if (!encountered.objects[_identifier]) {
          encountered.objects[_identifier] = obj.dirty() ? obj : true;
          var attributes = obj.attributes;
          for (var attr in attributes) {
            if ((0, _typeof2.default)(attributes[attr]) === "object") {
              traverse(attributes[attr], encountered, !allowDeepUnsaved, allowDeepUnsaved);
            }
          }
        }
        return;
      }
      if (obj instanceof _ParseFile.default) {
        var _context3;
        if (!obj.url() && (0, _indexOf.default)(_context3 = encountered.files).call(_context3, obj) < 0) {
          encountered.files.push(obj);
        }
        return;
      }
      if (obj instanceof _ParseRelation.default) {
        return;
      }
      if ((0, _isArray.default)(obj)) {
        (0, _forEach.default)(obj).call(obj, function(el) {
          if ((0, _typeof2.default)(el) === "object") {
            traverse(el, encountered, shouldThrow, allowDeepUnsaved);
          }
        });
      }
      for (var k2 in obj) {
        if ((0, _typeof2.default)(obj[k2]) === "object") {
          traverse(obj[k2], encountered, shouldThrow, allowDeepUnsaved);
        }
      }
    }
  }
});

// node_modules/moralis/lib/browser/ParseObject.js
var require_ParseObject = __commonJS({
  "node_modules/moralis/lib/browser/ParseObject.js"(exports) {
    "use strict";
    init_react();
    var _typeof3 = require_typeof();
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty2 = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty2 = require_define_property3();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray2 = require_is_array4();
    var _WeakMap = require_weak_map3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty2(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _keys = _interopRequireDefault(require_keys3());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _includes = _interopRequireDefault(require_includes5());
    var _getPrototypeOf = _interopRequireDefault(require_get_prototype_of6());
    var _concat = _interopRequireDefault(require_concat4());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _promise = _interopRequireDefault(require_promise3());
    var _create = _interopRequireDefault(require_create6());
    var _defineProperty3 = _interopRequireDefault(require_define_property3());
    var _find = _interopRequireDefault(require_find4());
    var _map = _interopRequireDefault(require_map9());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _canBeSerialized = _interopRequireDefault(require_canBeSerialized());
    var _decode = _interopRequireDefault(require_decode());
    var _encode = _interopRequireDefault(require_encode());
    var _escape2 = _interopRequireDefault(require_escape());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _parseDate = _interopRequireDefault(require_parseDate());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _promiseUtils = require_promiseUtils();
    var _LocalDatastoreUtils = require_LocalDatastoreUtils();
    var _ParseOp = require_ParseOp();
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    var SingleInstanceStateController = _interopRequireWildcard(require_SingleInstanceStateController());
    var _unique = _interopRequireDefault(require_unique());
    var UniqueInstanceStateController = _interopRequireWildcard(require_UniqueInstanceStateController());
    var _unsavedChildren = _interopRequireDefault(require_unsavedChildren());
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap();
      var cacheNodeInterop = new _WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = _Object$defineProperty2 && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty2(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray2(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i2 = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i2 >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i2++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context21;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty(_context21 = Object.prototype.toString.call(o2)).call(_context21, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var _context19, _context20;
        var source = arguments[i2] != null ? arguments[i2] : {};
        i2 % 2 ? _forEachInstanceProperty2(_context19 = ownKeys(Object(source), true)).call(_context19, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context20 = ownKeys(Object(source))).call(_context20, function(key) {
          _Object$defineProperty2(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var _require = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var uuidv4 = _require.v4;
    var classMap = {};
    var objectCount = 0;
    var singleInstance = !_CoreManager.default.get("IS_NODE");
    if (singleInstance) {
      _CoreManager.default.setObjectStateController(SingleInstanceStateController);
    } else {
      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);
    }
    function getServerUrlPath() {
      var serverUrl = _CoreManager.default.get("SERVER_URL");
      if (serverUrl[serverUrl.length - 1] !== "/") {
        serverUrl += "/";
      }
      var url = serverUrl.replace(/https?:\/\//, "");
      return url.substr((0, _indexOf.default)(url).call(url, "/"));
    }
    var ParseObject = /* @__PURE__ */ function() {
      function ParseObject2(className, attributes, options) {
        (0, _classCallCheck2.default)(this, ParseObject2);
        (0, _defineProperty2.default)(this, "id", void 0);
        (0, _defineProperty2.default)(this, "_localId", void 0);
        (0, _defineProperty2.default)(this, "_objCount", void 0);
        (0, _defineProperty2.default)(this, "className", void 0);
        if (typeof this.initialize === "function") {
          this.initialize.apply(this, arguments);
        }
        var toSet = null;
        this._objCount = objectCount++;
        if (typeof className === "string") {
          this.className = className;
          if (attributes && (0, _typeof2.default)(attributes) === "object") {
            toSet = attributes;
          }
        } else if (className && (0, _typeof2.default)(className) === "object") {
          this.className = className.className;
          toSet = {};
          for (var _attr in className) {
            if (_attr !== "className") {
              toSet[_attr] = className[_attr];
            }
          }
          if (attributes && (0, _typeof2.default)(attributes) === "object") {
            options = attributes;
          }
        }
        if (toSet && !this.set(toSet, options)) {
          throw new Error("Can't create an invalid Parse Object");
        }
      }
      (0, _createClass2.default)(ParseObject2, [{
        key: "attributes",
        get: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));
        }
      }, {
        key: "createdAt",
        get: function() {
          return this._getServerData().createdAt;
        }
      }, {
        key: "updatedAt",
        get: function() {
          return this._getServerData().updatedAt;
        }
      }, {
        key: "_getId",
        value: function() {
          if (typeof this.id === "string") {
            return this.id;
          }
          if (typeof this._localId === "string") {
            return this._localId;
          }
          var localId = "local".concat(uuidv4());
          this._localId = localId;
          return localId;
        }
      }, {
        key: "_getStateIdentifier",
        value: function() {
          if (singleInstance) {
            var id = this.id;
            if (!id) {
              id = this._getId();
            }
            return {
              id,
              className: this.className
            };
          }
          return this;
        }
      }, {
        key: "_getServerData",
        value: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          return stateController.getServerData(this._getStateIdentifier());
        }
      }, {
        key: "_clearServerData",
        value: function() {
          var serverData = this._getServerData();
          var unset = {};
          for (var _attr2 in serverData) {
            unset[_attr2] = void 0;
          }
          var stateController = _CoreManager.default.getObjectStateController();
          stateController.setServerData(this._getStateIdentifier(), unset);
        }
      }, {
        key: "_getPendingOps",
        value: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          return stateController.getPendingOps(this._getStateIdentifier());
        }
      }, {
        key: "_clearPendingOps",
        value: function(keysToClear) {
          var pending = this._getPendingOps();
          var latest = pending[pending.length - 1];
          var keys = keysToClear || (0, _keys.default)(latest);
          (0, _forEach.default)(keys).call(keys, function(key) {
            delete latest[key];
          });
        }
      }, {
        key: "_getDirtyObjectAttributes",
        value: function() {
          var attributes = this.attributes;
          var stateController = _CoreManager.default.getObjectStateController();
          var objectCache = stateController.getObjectCache(this._getStateIdentifier());
          var dirty = {};
          for (var _attr3 in attributes) {
            var val = attributes[_attr3];
            if (val && (0, _typeof2.default)(val) === "object" && !(val instanceof ParseObject2) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {
              try {
                var json = (0, _encode.default)(val, false, true);
                var stringified = (0, _stringify.default)(json);
                if (objectCache[_attr3] !== stringified) {
                  dirty[_attr3] = val;
                }
              } catch (e) {
                dirty[_attr3] = val;
              }
            }
          }
          return dirty;
        }
      }, {
        key: "_toFullJSON",
        value: function(seen, offline) {
          var json = this.toJSON(seen, offline);
          json.__type = "Object";
          json.className = this.className;
          return json;
        }
      }, {
        key: "_getSaveJSON",
        value: function() {
          var pending = this._getPendingOps();
          var dirtyObjects = this._getDirtyObjectAttributes();
          var json = {};
          for (var attr in dirtyObjects) {
            var isDotNotation = false;
            for (var i2 = 0; i2 < pending.length; i2 += 1) {
              for (var field in pending[i2]) {
                if ((0, _includes.default)(field).call(field, ".")) {
                  var fieldName = field.split(".")[0];
                  if (fieldName === attr) {
                    isDotNotation = true;
                    break;
                  }
                }
              }
            }
            if (!isDotNotation) {
              json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();
            }
          }
          for (attr in pending[0]) {
            json[attr] = pending[0][attr].toJSON();
          }
          return json;
        }
      }, {
        key: "_getSaveParams",
        value: function() {
          var method = this.id ? "PUT" : "POST";
          var body = this._getSaveJSON();
          var path = "classes/".concat(this.className);
          if (this.id) {
            path += "/".concat(this.id);
          } else if (this.className === "_User") {
            path = "users";
          }
          return {
            method,
            body,
            path
          };
        }
      }, {
        key: "_finishFetch",
        value: function(serverData) {
          if (!this.id && serverData.objectId) {
            this.id = serverData.objectId;
          }
          var stateController = _CoreManager.default.getObjectStateController();
          stateController.initializeState(this._getStateIdentifier());
          var decoded = {};
          for (var _attr4 in serverData) {
            if (_attr4 === "ACL") {
              decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);
            } else if (_attr4 !== "objectId") {
              decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);
              if (decoded[_attr4] instanceof _ParseRelation.default) {
                decoded[_attr4]._ensureParentAndKey(this, _attr4);
              }
            }
          }
          if (decoded.createdAt && typeof decoded.createdAt === "string") {
            decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);
          }
          if (decoded.updatedAt && typeof decoded.updatedAt === "string") {
            decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);
          }
          if (!decoded.updatedAt && decoded.createdAt) {
            decoded.updatedAt = decoded.createdAt;
          }
          stateController.commitServerChanges(this._getStateIdentifier(), decoded);
        }
      }, {
        key: "_setExisted",
        value: function(existed) {
          var stateController = _CoreManager.default.getObjectStateController();
          var state = stateController.getState(this._getStateIdentifier());
          if (state) {
            state.existed = existed;
          }
        }
      }, {
        key: "_migrateId",
        value: function(serverId) {
          if (this._localId && serverId) {
            if (singleInstance) {
              var stateController = _CoreManager.default.getObjectStateController();
              var oldState = stateController.removeState(this._getStateIdentifier());
              this.id = serverId;
              delete this._localId;
              if (oldState) {
                stateController.initializeState(this._getStateIdentifier(), oldState);
              }
            } else {
              this.id = serverId;
              delete this._localId;
            }
          }
        }
      }, {
        key: "_handleSaveResponse",
        value: function(response, status) {
          var changes = {};
          var stateController = _CoreManager.default.getObjectStateController();
          var pending = stateController.popPendingState(this._getStateIdentifier());
          for (var attr in pending) {
            if (pending[attr] instanceof _ParseOp.RelationOp) {
              changes[attr] = pending[attr].applyTo(void 0, this, attr);
            } else if (!(attr in response) && !(0, _includes.default)(attr).call(attr, ".")) {
              changes[attr] = pending[attr].applyTo(void 0);
            }
          }
          for (attr in response) {
            if ((attr === "createdAt" || attr === "updatedAt") && typeof response[attr] === "string") {
              changes[attr] = (0, _parseDate.default)(response[attr]);
            } else if (attr === "ACL") {
              changes[attr] = new _ParseACL.default(response[attr]);
            } else if (attr !== "objectId") {
              var val = (0, _decode.default)(response[attr]);
              if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {
                changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);
              } else {
                changes[attr] = val;
              }
              if (changes[attr] instanceof _ParseOp.UnsetOp) {
                changes[attr] = void 0;
              }
            }
          }
          if (changes.createdAt && !changes.updatedAt) {
            changes.updatedAt = changes.createdAt;
          }
          this._migrateId(response.objectId);
          if (status !== 201) {
            this._setExisted(true);
          }
          stateController.commitServerChanges(this._getStateIdentifier(), changes);
        }
      }, {
        key: "_handleSaveError",
        value: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          stateController.mergeFirstPendingState(this._getStateIdentifier());
        }
      }, {
        key: "initialize",
        value: function() {
        }
      }, {
        key: "toJSON",
        value: function(seen, offline) {
          var _context;
          var seenEntry = this.id ? (0, _concat.default)(_context = "".concat(this.className, ":")).call(_context, this.id) : this;
          seen = seen || [seenEntry];
          var json = {};
          var attrs = this.attributes;
          for (var _attr5 in attrs) {
            if ((_attr5 === "createdAt" || _attr5 === "updatedAt") && attrs[_attr5].toJSON) {
              json[_attr5] = attrs[_attr5].toJSON();
            } else {
              json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);
            }
          }
          var pending = this._getPendingOps();
          for (var _attr6 in pending[0]) {
            json[_attr6] = pending[0][_attr6].toJSON(offline);
          }
          if (this.id) {
            json.objectId = this.id;
          }
          return json;
        }
      }, {
        key: "equals",
        value: function(other) {
          if (this === other) {
            return true;
          }
          return other instanceof ParseObject2 && this.className === other.className && this.id === other.id && typeof this.id !== "undefined";
        }
      }, {
        key: "dirty",
        value: function(attr) {
          if (!this.id) {
            return true;
          }
          var pendingOps = this._getPendingOps();
          var dirtyObjects = this._getDirtyObjectAttributes();
          if (attr) {
            if (dirtyObjects.hasOwnProperty(attr)) {
              return true;
            }
            for (var i2 = 0; i2 < pendingOps.length; i2++) {
              if (pendingOps[i2].hasOwnProperty(attr)) {
                return true;
              }
            }
            return false;
          }
          if ((0, _keys.default)(pendingOps[0]).length !== 0) {
            return true;
          }
          if ((0, _keys.default)(dirtyObjects).length !== 0) {
            return true;
          }
          return false;
        }
      }, {
        key: "dirtyKeys",
        value: function() {
          var pendingOps = this._getPendingOps();
          var keys = {};
          for (var i2 = 0; i2 < pendingOps.length; i2++) {
            for (var _attr7 in pendingOps[i2]) {
              keys[_attr7] = true;
            }
          }
          var dirtyObjects = this._getDirtyObjectAttributes();
          for (var _attr8 in dirtyObjects) {
            keys[_attr8] = true;
          }
          return (0, _keys.default)(keys);
        }
      }, {
        key: "isDataAvailable",
        value: function() {
          var serverData = this._getServerData();
          return !!(0, _keys.default)(serverData).length;
        }
      }, {
        key: "toPointer",
        value: function() {
          if (!this.id) {
            throw new Error("Cannot create a pointer to an unsaved ParseObject");
          }
          return {
            __type: "Pointer",
            className: this.className,
            objectId: this.id
          };
        }
      }, {
        key: "toOfflinePointer",
        value: function() {
          if (!this._localId) {
            throw new Error("Cannot create a offline pointer to a saved ParseObject");
          }
          return {
            __type: "Object",
            className: this.className,
            _localId: this._localId
          };
        }
      }, {
        key: "get",
        value: function(attr) {
          return this.attributes[attr];
        }
      }, {
        key: "relation",
        value: function(attr) {
          var value = this.get(attr);
          if (value) {
            if (!(value instanceof _ParseRelation.default)) {
              throw new Error("Called relation() on non-relation field ".concat(attr));
            }
            value._ensureParentAndKey(this, attr);
            return value;
          }
          return new _ParseRelation.default(this, attr);
        }
      }, {
        key: "escape",
        value: function(attr) {
          var val = this.attributes[attr];
          if (val == null) {
            return "";
          }
          if (typeof val !== "string") {
            if (typeof val.toString !== "function") {
              return "";
            }
            val = val.toString();
          }
          return (0, _escape2.default)(val);
        }
      }, {
        key: "has",
        value: function(attr) {
          var attributes = this.attributes;
          if (attributes.hasOwnProperty(attr)) {
            return attributes[attr] != null;
          }
          return false;
        }
      }, {
        key: "set",
        value: function(key, value, options) {
          var changes = {};
          var newOps = {};
          if (key && (0, _typeof2.default)(key) === "object") {
            changes = key;
            options = value;
          } else if (typeof key === "string") {
            changes[key] = value;
          } else {
            return this;
          }
          options = options || {};
          var readonly = [];
          if (typeof this.constructor.readOnlyAttributes === "function") {
            readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());
          }
          for (var k2 in changes) {
            if (k2 === "createdAt" || k2 === "updatedAt") {
              continue;
            }
            if ((0, _indexOf.default)(readonly).call(readonly, k2) > -1) {
              throw new Error("Cannot modify readonly attribute: ".concat(k2));
            }
            if (options.unset) {
              newOps[k2] = new _ParseOp.UnsetOp();
            } else if (changes[k2] instanceof _ParseOp.Op) {
              newOps[k2] = changes[k2];
            } else if (changes[k2] && (0, _typeof2.default)(changes[k2]) === "object" && typeof changes[k2].__op === "string") {
              newOps[k2] = (0, _ParseOp.opFromJSON)(changes[k2]);
            } else if (k2 === "objectId" || k2 === "id") {
              if (typeof changes[k2] === "string") {
                this.id = changes[k2];
              }
            } else if (k2 === "ACL" && (0, _typeof2.default)(changes[k2]) === "object" && !(changes[k2] instanceof _ParseACL.default)) {
              newOps[k2] = new _ParseOp.SetOp(new _ParseACL.default(changes[k2]));
            } else if (changes[k2] instanceof _ParseRelation.default) {
              var relation = new _ParseRelation.default(this, k2);
              relation.targetClassName = changes[k2].targetClassName;
              newOps[k2] = new _ParseOp.SetOp(relation);
            } else {
              newOps[k2] = new _ParseOp.SetOp(changes[k2]);
            }
          }
          var currentAttributes = this.attributes;
          var serverData = this._getServerData();
          if (typeof key === "string" && (0, _includes.default)(key).call(key, ".")) {
            var field = key.split(".")[0];
            if (!serverData[field]) {
              return this;
            }
          }
          var newValues = {};
          for (var _attr9 in newOps) {
            if (newOps[_attr9] instanceof _ParseOp.RelationOp) {
              newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);
            } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {
              newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);
            }
          }
          if (!options.ignoreValidation) {
            var validation = this.validate(newValues);
            if (validation) {
              if (typeof options.error === "function") {
                options.error(this, validation);
              }
              return false;
            }
          }
          var pendingOps = this._getPendingOps();
          var last = pendingOps.length - 1;
          var stateController = _CoreManager.default.getObjectStateController();
          for (var _attr10 in newOps) {
            var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);
            stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);
          }
          return this;
        }
      }, {
        key: "unset",
        value: function(attr, options) {
          options = options || {};
          options.unset = true;
          return this.set(attr, null, options);
        }
      }, {
        key: "increment",
        value: function(attr, amount) {
          if (typeof amount === "undefined") {
            amount = 1;
          }
          if (typeof amount !== "number") {
            throw new Error("Cannot increment by a non-numeric amount.");
          }
          return this.set(attr, new _ParseOp.IncrementOp(amount));
        }
      }, {
        key: "decrement",
        value: function(attr, amount) {
          if (typeof amount === "undefined") {
            amount = 1;
          }
          if (typeof amount !== "number") {
            throw new Error("Cannot decrement by a non-numeric amount.");
          }
          return this.set(attr, new _ParseOp.IncrementOp(amount * -1));
        }
      }, {
        key: "add",
        value: function(attr, item) {
          return this.set(attr, new _ParseOp.AddOp([item]));
        }
      }, {
        key: "addAll",
        value: function(attr, items) {
          return this.set(attr, new _ParseOp.AddOp(items));
        }
      }, {
        key: "addUnique",
        value: function(attr, item) {
          return this.set(attr, new _ParseOp.AddUniqueOp([item]));
        }
      }, {
        key: "addAllUnique",
        value: function(attr, items) {
          return this.set(attr, new _ParseOp.AddUniqueOp(items));
        }
      }, {
        key: "remove",
        value: function(attr, item) {
          return this.set(attr, new _ParseOp.RemoveOp([item]));
        }
      }, {
        key: "removeAll",
        value: function(attr, items) {
          return this.set(attr, new _ParseOp.RemoveOp(items));
        }
      }, {
        key: "op",
        value: function(attr) {
          var pending = this._getPendingOps();
          for (var i2 = pending.length; i2--; ) {
            if (pending[i2][attr]) {
              return pending[i2][attr];
            }
          }
        }
      }, {
        key: "clone",
        value: function clone() {
          var clone2 = new this.constructor();
          if (!clone2.className) {
            clone2.className = this.className;
          }
          var attributes = this.attributes;
          if (typeof this.constructor.readOnlyAttributes === "function") {
            var readonly = this.constructor.readOnlyAttributes() || [];
            var copy = {};
            for (var a2 in attributes) {
              if ((0, _indexOf.default)(readonly).call(readonly, a2) < 0) {
                copy[a2] = attributes[a2];
              }
            }
            attributes = copy;
          }
          if (clone2.set) {
            clone2.set(attributes);
          }
          return clone2;
        }
      }, {
        key: "newInstance",
        value: function() {
          var clone = new this.constructor();
          if (!clone.className) {
            clone.className = this.className;
          }
          clone.id = this.id;
          if (singleInstance) {
            return clone;
          }
          var stateController = _CoreManager.default.getObjectStateController();
          if (stateController) {
            stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());
          }
          return clone;
        }
      }, {
        key: "isNew",
        value: function() {
          return !this.id;
        }
      }, {
        key: "existed",
        value: function() {
          if (!this.id) {
            return false;
          }
          var stateController = _CoreManager.default.getObjectStateController();
          var state = stateController.getState(this._getStateIdentifier());
          if (state) {
            return state.existed;
          }
          return false;
        }
      }, {
        key: "exists",
        value: function() {
          var _exists = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(options) {
            var query;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (this.id) {
                      _context2.next = 2;
                      break;
                    }
                    return _context2.abrupt("return", false);
                  case 2:
                    _context2.prev = 2;
                    query = new _ParseQuery.default(this.className);
                    _context2.next = 6;
                    return query.get(this.id, options);
                  case 6:
                    return _context2.abrupt("return", true);
                  case 9:
                    _context2.prev = 9;
                    _context2.t0 = _context2["catch"](2);
                    if (!(_context2.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {
                      _context2.next = 13;
                      break;
                    }
                    return _context2.abrupt("return", false);
                  case 13:
                    throw _context2.t0;
                  case 14:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this, [[2, 9]]);
          }));
          return function() {
            return _exists.apply(this, arguments);
          };
        }()
      }, {
        key: "isValid",
        value: function() {
          return !this.validate(this.attributes);
        }
      }, {
        key: "validate",
        value: function(attrs) {
          if (attrs.hasOwnProperty("ACL") && !(attrs.ACL instanceof _ParseACL.default)) {
            return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "ACL must be a Parse ACL.");
          }
          for (var _key in attrs) {
            if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {
              return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);
            }
          }
          return false;
        }
      }, {
        key: "getACL",
        value: function() {
          var acl = this.get("ACL");
          if (acl instanceof _ParseACL.default) {
            return acl;
          }
          return null;
        }
      }, {
        key: "setACL",
        value: function(acl, options) {
          return this.set("ACL", acl, options);
        }
      }, {
        key: "revert",
        value: function() {
          var keysToRevert;
          for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            keys[_key2] = arguments[_key2];
          }
          if (keys.length) {
            keysToRevert = [];
            var _iterator = _createForOfIteratorHelper(keys), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var _key3 = _step.value;
                if (typeof _key3 === "string") {
                  keysToRevert.push(_key3);
                } else {
                  throw new Error("Parse.Object#revert expects either no, or a list of string, arguments.");
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
          this._clearPendingOps(keysToRevert);
        }
      }, {
        key: "clear",
        value: function() {
          var attributes = this.attributes;
          var erasable = {};
          var readonly = ["createdAt", "updatedAt"];
          if (typeof this.constructor.readOnlyAttributes === "function") {
            readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());
          }
          for (var _attr11 in attributes) {
            if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {
              erasable[_attr11] = true;
            }
          }
          return this.set(erasable, {
            unset: true
          });
        }
      }, {
        key: "fetch",
        value: function(options) {
          options = options || {};
          var fetchOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            fetchOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            fetchOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            fetchOptions.context = options.context;
          }
          if (options.hasOwnProperty("include")) {
            fetchOptions.include = [];
            if ((0, _isArray.default)(options.include)) {
              var _context3;
              (0, _forEach.default)(_context3 = options.include).call(_context3, function(key) {
                if ((0, _isArray.default)(key)) {
                  var _context4;
                  fetchOptions.include = (0, _concat.default)(_context4 = fetchOptions.include).call(_context4, key);
                } else {
                  fetchOptions.include.push(key);
                }
              });
            } else {
              fetchOptions.include.push(options.include);
            }
          }
          var controller = _CoreManager.default.getObjectController();
          return controller.fetch(this, true, fetchOptions);
        }
      }, {
        key: "fetchWithInclude",
        value: function(keys, options) {
          options = options || {};
          options.include = keys;
          return this.fetch(options);
        }
      }, {
        key: "save",
        value: function(arg1, arg2, arg3) {
          var _this = this;
          var attrs;
          var options;
          if ((0, _typeof2.default)(arg1) === "object" || typeof arg1 === "undefined") {
            attrs = arg1;
            if ((0, _typeof2.default)(arg2) === "object") {
              options = arg2;
            }
          } else {
            attrs = {};
            attrs[arg1] = arg2;
            options = arg3;
          }
          if (attrs) {
            var validation = this.validate(attrs);
            if (validation) {
              return _promise.default.reject(validation);
            }
            this.set(attrs, options);
          }
          options = options || {};
          var saveOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            saveOptions.useMasterKey = !!options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken") && typeof options.sessionToken === "string") {
            saveOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("installationId") && typeof options.installationId === "string") {
            saveOptions.installationId = options.installationId;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            saveOptions.context = options.context;
          }
          var controller = _CoreManager.default.getObjectController();
          var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;
          return controller.save(unsaved, saveOptions).then(function() {
            return controller.save(_this, saveOptions);
          });
        }
      }, {
        key: "destroy",
        value: function(options) {
          options = options || {};
          var destroyOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            destroyOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            destroyOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            destroyOptions.context = options.context;
          }
          if (!this.id) {
            return _promise.default.resolve();
          }
          return _CoreManager.default.getObjectController().destroy(this, destroyOptions);
        }
      }, {
        key: "pin",
        value: function() {
          return ParseObject2.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);
        }
      }, {
        key: "unPin",
        value: function() {
          return ParseObject2.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);
        }
      }, {
        key: "isPinned",
        value: function() {
          var _isPinned = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            var localDatastore, objectKey, pin;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    localDatastore = _CoreManager.default.getLocalDatastore();
                    if (localDatastore.isEnabled) {
                      _context5.next = 3;
                      break;
                    }
                    return _context5.abrupt("return", _promise.default.reject("Parse.enableLocalDatastore() must be called first"));
                  case 3:
                    objectKey = localDatastore.getKeyForObject(this);
                    _context5.next = 6;
                    return localDatastore.fromPinWithName(objectKey);
                  case 6:
                    pin = _context5.sent;
                    return _context5.abrupt("return", pin.length > 0);
                  case 8:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _isPinned.apply(this, arguments);
          };
        }()
      }, {
        key: "pinWithName",
        value: function(name) {
          return ParseObject2.pinAllWithName(name, [this]);
        }
      }, {
        key: "unPinWithName",
        value: function(name) {
          return ParseObject2.unPinAllWithName(name, [this]);
        }
      }, {
        key: "fetchFromLocalDatastore",
        value: function() {
          var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
            var localDatastore, objectKey, pinned, result;
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    localDatastore = _CoreManager.default.getLocalDatastore();
                    if (localDatastore.isEnabled) {
                      _context6.next = 3;
                      break;
                    }
                    throw new Error("Parse.enableLocalDatastore() must be called first");
                  case 3:
                    objectKey = localDatastore.getKeyForObject(this);
                    _context6.next = 6;
                    return localDatastore._serializeObject(objectKey);
                  case 6:
                    pinned = _context6.sent;
                    if (pinned) {
                      _context6.next = 9;
                      break;
                    }
                    throw new Error("Cannot fetch an unsaved ParseObject");
                  case 9:
                    result = ParseObject2.fromJSON(pinned);
                    this._finishFetch(result.toJSON());
                    return _context6.abrupt("return", this);
                  case 12:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee3, this);
          }));
          return function() {
            return _fetchFromLocalDatastore.apply(this, arguments);
          };
        }()
      }], [{
        key: "_clearAllState",
        value: function() {
          var stateController = _CoreManager.default.getObjectStateController();
          stateController.clearAllState();
        }
      }, {
        key: "fetchAll",
        value: function(list) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var queryOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            queryOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            queryOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("include")) {
            queryOptions.include = ParseObject2.handleIncludeOptions(options);
          }
          return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);
        }
      }, {
        key: "fetchAllWithInclude",
        value: function(list, keys, options) {
          options = options || {};
          options.include = keys;
          return ParseObject2.fetchAll(list, options);
        }
      }, {
        key: "fetchAllIfNeededWithInclude",
        value: function(list, keys, options) {
          options = options || {};
          options.include = keys;
          return ParseObject2.fetchAllIfNeeded(list, options);
        }
      }, {
        key: "fetchAllIfNeeded",
        value: function(list, options) {
          options = options || {};
          var queryOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            queryOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            queryOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("include")) {
            queryOptions.include = ParseObject2.handleIncludeOptions(options);
          }
          return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);
        }
      }, {
        key: "handleIncludeOptions",
        value: function(options) {
          var include = [];
          if ((0, _isArray.default)(options.include)) {
            var _context7;
            (0, _forEach.default)(_context7 = options.include).call(_context7, function(key) {
              if ((0, _isArray.default)(key)) {
                include = (0, _concat.default)(include).call(include, key);
              } else {
                include.push(key);
              }
            });
          } else {
            include.push(options.include);
          }
          return include;
        }
      }, {
        key: "destroyAll",
        value: function(list) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var destroyOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            destroyOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            destroyOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("batchSize") && typeof options.batchSize === "number") {
            destroyOptions.batchSize = options.batchSize;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            destroyOptions.context = options.context;
          }
          return _CoreManager.default.getObjectController().destroy(list, destroyOptions);
        }
      }, {
        key: "saveAll",
        value: function(list) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var saveOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            saveOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("sessionToken")) {
            saveOptions.sessionToken = options.sessionToken;
          }
          if (options.hasOwnProperty("batchSize") && typeof options.batchSize === "number") {
            saveOptions.batchSize = options.batchSize;
          }
          if (options.hasOwnProperty("context") && (0, _typeof2.default)(options.context) === "object") {
            saveOptions.context = options.context;
          }
          return _CoreManager.default.getObjectController().save(list, saveOptions);
        }
      }, {
        key: "createWithoutData",
        value: function(id) {
          var obj = new this();
          obj.id = id;
          return obj;
        }
      }, {
        key: "fromJSON",
        value: function(json, override) {
          if (!json.className) {
            throw new Error("Cannot create an object without a className");
          }
          var constructor = classMap[json.className];
          var o2 = constructor ? new constructor() : new ParseObject2(json.className);
          var otherAttributes = {};
          for (var _attr12 in json) {
            if (_attr12 !== "className" && _attr12 !== "__type") {
              otherAttributes[_attr12] = json[_attr12];
            }
          }
          if (override) {
            if (otherAttributes.objectId) {
              o2.id = otherAttributes.objectId;
            }
            var preserved = null;
            if (typeof o2._preserveFieldsOnFetch === "function") {
              preserved = o2._preserveFieldsOnFetch();
            }
            o2._clearServerData();
            if (preserved) {
              o2._finishFetch(preserved);
            }
          }
          o2._finishFetch(otherAttributes);
          if (json.objectId) {
            o2._setExisted(true);
          }
          return o2;
        }
      }, {
        key: "registerSubclass",
        value: function(className, constructor) {
          if (typeof className !== "string") {
            throw new TypeError("The first argument must be a valid class name.");
          }
          if (typeof constructor === "undefined") {
            throw new TypeError("You must supply a subclass constructor.");
          }
          if (typeof constructor !== "function") {
            throw new TypeError("You must register the subclass constructor. Did you attempt to register an instance of the subclass?");
          }
          classMap[className] = constructor;
          if (!constructor.className) {
            constructor.className = className;
          }
        }
      }, {
        key: "extend",
        value: function(className, protoProps, classProps) {
          if (typeof className !== "string") {
            if (className && typeof className.className === "string") {
              return ParseObject2.extend(className.className, className, protoProps);
            }
            throw new Error("Parse.Object.extend's first argument should be the className.");
          }
          var adjustedClassName = className;
          if (adjustedClassName === "User" && _CoreManager.default.get("PERFORM_USER_REWRITE")) {
            adjustedClassName = "_User";
          }
          var parentProto = ParseObject2.prototype;
          if (this.hasOwnProperty("__super__") && this.__super__) {
            parentProto = this.prototype;
          } else if (classMap[adjustedClassName]) {
            parentProto = classMap[adjustedClassName].prototype;
          }
          var ParseObjectSubclass = function(attributes, options) {
            this.className = adjustedClassName;
            this._objCount = objectCount++;
            if (typeof this.initialize === "function") {
              this.initialize.apply(this, arguments);
            }
            if (attributes && (0, _typeof2.default)(attributes) === "object") {
              if (!this.set(attributes || {}, options)) {
                throw new Error("Can't create an invalid Parse Object");
              }
            }
          };
          ParseObjectSubclass.className = adjustedClassName;
          ParseObjectSubclass.__super__ = parentProto;
          ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {
            constructor: {
              value: ParseObjectSubclass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (protoProps) {
            for (var prop in protoProps) {
              if (prop !== "className") {
                (0, _defineProperty3.default)(ParseObjectSubclass.prototype, prop, {
                  value: protoProps[prop],
                  enumerable: false,
                  writable: true,
                  configurable: true
                });
              }
            }
          }
          if (classProps) {
            for (var _prop in classProps) {
              if (_prop !== "className") {
                (0, _defineProperty3.default)(ParseObjectSubclass, _prop, {
                  value: classProps[_prop],
                  enumerable: false,
                  writable: true,
                  configurable: true
                });
              }
            }
          }
          ParseObjectSubclass.extend = function(name, protoProps2, classProps2) {
            if (typeof name === "string") {
              return ParseObject2.extend.call(ParseObjectSubclass, name, protoProps2, classProps2);
            }
            return ParseObject2.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps2);
          };
          ParseObjectSubclass.createWithoutData = ParseObject2.createWithoutData;
          classMap[adjustedClassName] = ParseObjectSubclass;
          return ParseObjectSubclass;
        }
      }, {
        key: "enableSingleInstance",
        value: function() {
          singleInstance = true;
          _CoreManager.default.setObjectStateController(SingleInstanceStateController);
        }
      }, {
        key: "disableSingleInstance",
        value: function() {
          singleInstance = false;
          _CoreManager.default.setObjectStateController(UniqueInstanceStateController);
        }
      }, {
        key: "pinAll",
        value: function(objects) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return ParseObject2.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);
        }
      }, {
        key: "pinAllWithName",
        value: function(name, objects) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return localDatastore._handlePinAllWithName(name, objects);
        }
      }, {
        key: "unPinAll",
        value: function(objects) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return ParseObject2.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);
        }
      }, {
        key: "unPinAllWithName",
        value: function(name, objects) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return localDatastore._handleUnPinAllWithName(name, objects);
        }
      }, {
        key: "unPinAllObjects",
        value: function() {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);
        }
      }, {
        key: "unPinAllObjectsWithName",
        value: function(name) {
          var localDatastore = _CoreManager.default.getLocalDatastore();
          if (!localDatastore.isEnabled) {
            return _promise.default.reject("Parse.enableLocalDatastore() must be called first");
          }
          return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);
        }
      }]);
      return ParseObject2;
    }();
    var DefaultController = {
      fetch: function(target, forceFetch, options) {
        var localDatastore = _CoreManager.default.getLocalDatastore();
        if ((0, _isArray.default)(target)) {
          if (target.length < 1) {
            return _promise.default.resolve([]);
          }
          var objs = [];
          var ids = [];
          var className = null;
          var results = [];
          var error = null;
          (0, _forEach.default)(target).call(target, function(el) {
            if (error) {
              return;
            }
            if (!className) {
              className = el.className;
            }
            if (className !== el.className) {
              error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, "All objects should be of the same class");
            }
            if (!el.id) {
              error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, "All objects must have an ID");
            }
            if (forceFetch || !el.isDataAvailable()) {
              ids.push(el.id);
              objs.push(el);
            }
            results.push(el);
          });
          if (error) {
            return _promise.default.reject(error);
          }
          var query = new _ParseQuery.default(className);
          query.containedIn("objectId", ids);
          if (options && options.include) {
            query.include(options.include);
          }
          query._limit = ids.length;
          return (0, _find.default)(query).call(query, options).then(/* @__PURE__ */ function() {
            var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(objects) {
              var idMap, i2, obj, _i, _obj, id, _iterator2, _step2, object;
              return _regenerator.default.wrap(function(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      idMap = {};
                      (0, _forEach.default)(objects).call(objects, function(o2) {
                        idMap[o2.id] = o2;
                      });
                      i2 = 0;
                    case 3:
                      if (!(i2 < objs.length)) {
                        _context8.next = 11;
                        break;
                      }
                      obj = objs[i2];
                      if (!(!obj || !obj.id || !idMap[obj.id])) {
                        _context8.next = 8;
                        break;
                      }
                      if (!forceFetch) {
                        _context8.next = 8;
                        break;
                      }
                      return _context8.abrupt("return", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, "All objects must exist on the server.")));
                    case 8:
                      i2++;
                      _context8.next = 3;
                      break;
                    case 11:
                      if (!singleInstance) {
                        for (_i = 0; _i < results.length; _i++) {
                          _obj = results[_i];
                          if (_obj && _obj.id && idMap[_obj.id]) {
                            id = _obj.id;
                            _obj._finishFetch(idMap[id].toJSON());
                            results[_i] = idMap[id];
                          }
                        }
                      }
                      _iterator2 = _createForOfIteratorHelper(results);
                      _context8.prev = 13;
                      _iterator2.s();
                    case 15:
                      if ((_step2 = _iterator2.n()).done) {
                        _context8.next = 21;
                        break;
                      }
                      object = _step2.value;
                      _context8.next = 19;
                      return localDatastore._updateObjectIfPinned(object);
                    case 19:
                      _context8.next = 15;
                      break;
                    case 21:
                      _context8.next = 26;
                      break;
                    case 23:
                      _context8.prev = 23;
                      _context8.t0 = _context8["catch"](13);
                      _iterator2.e(_context8.t0);
                    case 26:
                      _context8.prev = 26;
                      _iterator2.f();
                      return _context8.finish(26);
                    case 29:
                      return _context8.abrupt("return", _promise.default.resolve(results));
                    case 30:
                    case "end":
                      return _context8.stop();
                  }
                }
              }, _callee4, null, [[13, 23, 26, 29]]);
            }));
            return function() {
              return _ref.apply(this, arguments);
            };
          }());
        }
        if (target instanceof ParseObject) {
          var _context9;
          if (!target.id) {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, "Object does not have an ID"));
          }
          var RESTController = _CoreManager.default.getRESTController();
          var params = {};
          if (options && options.include) {
            params.include = options.include.join();
          }
          return RESTController.request("GET", (0, _concat.default)(_context9 = "classes/".concat(target.className, "/")).call(_context9, target._getId()), params, options).then(/* @__PURE__ */ function() {
            var _ref2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(response) {
              return _regenerator.default.wrap(function(_context10) {
                while (1) {
                  switch (_context10.prev = _context10.next) {
                    case 0:
                      target._clearPendingOps();
                      target._clearServerData();
                      target._finishFetch(response);
                      _context10.next = 5;
                      return localDatastore._updateObjectIfPinned(target);
                    case 5:
                      return _context10.abrupt("return", target);
                    case 6:
                    case "end":
                      return _context10.stop();
                  }
                }
              }, _callee5);
            }));
            return function() {
              return _ref2.apply(this, arguments);
            };
          }());
        }
        return _promise.default.resolve();
      },
      destroy: function(target, options) {
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee8() {
          var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors, _context14;
          return _regenerator.default.wrap(function(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get("REQUEST_BATCH_SIZE");
                  localDatastore = _CoreManager.default.getLocalDatastore();
                  RESTController = _CoreManager.default.getRESTController();
                  if (!(0, _isArray.default)(target)) {
                    _context16.next = 13;
                    break;
                  }
                  if (!(target.length < 1)) {
                    _context16.next = 6;
                    break;
                  }
                  return _context16.abrupt("return", _promise.default.resolve([]));
                case 6:
                  batches = [[]];
                  (0, _forEach.default)(target).call(target, function(obj) {
                    if (!obj.id) {
                      return;
                    }
                    batches[batches.length - 1].push(obj);
                    if (batches[batches.length - 1].length >= batchSize) {
                      batches.push([]);
                    }
                  });
                  if (batches[batches.length - 1].length === 0) {
                    batches.pop();
                  }
                  deleteCompleted = _promise.default.resolve();
                  errors = [];
                  (0, _forEach.default)(batches).call(batches, function(batch) {
                    deleteCompleted = deleteCompleted.then(function() {
                      return RESTController.request("POST", "batch", {
                        requests: (0, _map.default)(batch).call(batch, function(obj) {
                          var _context11, _context12;
                          return {
                            method: "DELETE",
                            path: (0, _concat.default)(_context11 = (0, _concat.default)(_context12 = "".concat(getServerUrlPath(), "classes/")).call(_context12, obj.className, "/")).call(_context11, obj._getId()),
                            body: {}
                          };
                        })
                      }, options).then(function(results) {
                        for (var i2 = 0; i2 < results.length; i2++) {
                          if (results[i2] && results[i2].hasOwnProperty("error")) {
                            var err = new _ParseError.default(results[i2].error.code, results[i2].error.error);
                            err.object = batch[i2];
                            errors.push(err);
                          }
                        }
                      });
                    });
                  });
                  return _context16.abrupt("return", deleteCompleted.then(/* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6() {
                    var aggregate, _iterator3, _step3, object;
                    return _regenerator.default.wrap(function(_context13) {
                      while (1) {
                        switch (_context13.prev = _context13.next) {
                          case 0:
                            if (!errors.length) {
                              _context13.next = 4;
                              break;
                            }
                            aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);
                            aggregate.errors = errors;
                            return _context13.abrupt("return", _promise.default.reject(aggregate));
                          case 4:
                            _iterator3 = _createForOfIteratorHelper(target);
                            _context13.prev = 5;
                            _iterator3.s();
                          case 7:
                            if ((_step3 = _iterator3.n()).done) {
                              _context13.next = 13;
                              break;
                            }
                            object = _step3.value;
                            _context13.next = 11;
                            return localDatastore._destroyObjectIfPinned(object);
                          case 11:
                            _context13.next = 7;
                            break;
                          case 13:
                            _context13.next = 18;
                            break;
                          case 15:
                            _context13.prev = 15;
                            _context13.t0 = _context13["catch"](5);
                            _iterator3.e(_context13.t0);
                          case 18:
                            _context13.prev = 18;
                            _iterator3.f();
                            return _context13.finish(18);
                          case 21:
                            return _context13.abrupt("return", _promise.default.resolve(target));
                          case 22:
                          case "end":
                            return _context13.stop();
                        }
                      }
                    }, _callee6, null, [[5, 15, 18, 21]]);
                  }))));
                case 13:
                  if (!(target instanceof ParseObject)) {
                    _context16.next = 15;
                    break;
                  }
                  return _context16.abrupt("return", RESTController.request("DELETE", (0, _concat.default)(_context14 = "classes/".concat(target.className, "/")).call(_context14, target._getId()), {}, options).then(/* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7() {
                    return _regenerator.default.wrap(function(_context15) {
                      while (1) {
                        switch (_context15.prev = _context15.next) {
                          case 0:
                            _context15.next = 2;
                            return localDatastore._destroyObjectIfPinned(target);
                          case 2:
                            return _context15.abrupt("return", _promise.default.resolve(target));
                          case 3:
                          case "end":
                            return _context15.stop();
                        }
                      }
                    }, _callee7);
                  }))));
                case 15:
                  return _context16.abrupt("return", _promise.default.resolve(target));
                case 16:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee8);
        }))();
      },
      save: function(target, options) {
        var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get("REQUEST_BATCH_SIZE");
        var localDatastore = _CoreManager.default.getLocalDatastore();
        var mapIdForPin = {};
        var RESTController = _CoreManager.default.getRESTController();
        var stateController = _CoreManager.default.getObjectStateController();
        options = options || {};
        options.returnStatus = options.returnStatus || true;
        if ((0, _isArray.default)(target)) {
          if (target.length < 1) {
            return _promise.default.resolve([]);
          }
          var unsaved = (0, _concat.default)(target).call(target);
          for (var i2 = 0; i2 < target.length; i2++) {
            if (target[i2] instanceof ParseObject) {
              unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i2], true));
            }
          }
          unsaved = (0, _unique.default)(unsaved);
          var filesSaved = [];
          var pending = [];
          (0, _forEach.default)(unsaved).call(unsaved, function(el) {
            if (el instanceof _ParseFile.default) {
              filesSaved.push(el.save(options));
            } else if (el instanceof ParseObject) {
              pending.push(el);
            }
          });
          return _promise.default.all(filesSaved).then(function() {
            var objectError = null;
            return (0, _promiseUtils.continueWhile)(function() {
              return pending.length > 0;
            }, function() {
              var batch = [];
              var nextPending = [];
              (0, _forEach.default)(pending).call(pending, function(el) {
                if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {
                  batch.push(el);
                } else {
                  nextPending.push(el);
                }
              });
              pending = nextPending;
              if (batch.length < 1) {
                return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Tried to save a batch with a cycle."));
              }
              var batchReturned = new _promiseUtils.resolvingPromise();
              var batchReady = [];
              var batchTasks = [];
              (0, _forEach.default)(batch).call(batch, function(obj, index) {
                var ready = new _promiseUtils.resolvingPromise();
                batchReady.push(ready);
                stateController.pushPendingState(obj._getStateIdentifier());
                batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function() {
                  ready.resolve();
                  return batchReturned.then(function(responses) {
                    if (responses[index].hasOwnProperty("success")) {
                      var objectId = responses[index].success.objectId;
                      var status = responses[index]._status;
                      delete responses[index]._status;
                      mapIdForPin[objectId] = obj._localId;
                      obj._handleSaveResponse(responses[index].success, status);
                    } else {
                      if (!objectError && responses[index].hasOwnProperty("error")) {
                        var serverError = responses[index].error;
                        objectError = new _ParseError.default(serverError.code, serverError.error);
                        pending = [];
                      }
                      obj._handleSaveError();
                    }
                  });
                }));
              });
              (0, _promiseUtils.when)(batchReady).then(function() {
                return RESTController.request("POST", "batch", {
                  requests: (0, _map.default)(batch).call(batch, function(obj) {
                    var params = obj._getSaveParams();
                    params.path = getServerUrlPath() + params.path;
                    return params;
                  })
                }, options);
              }).then(batchReturned.resolve, function(error) {
                batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));
              });
              return (0, _promiseUtils.when)(batchTasks);
            }).then(/* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee9() {
              var _iterator4, _step4, object;
              return _regenerator.default.wrap(function(_context17) {
                while (1) {
                  switch (_context17.prev = _context17.next) {
                    case 0:
                      if (!objectError) {
                        _context17.next = 2;
                        break;
                      }
                      return _context17.abrupt("return", _promise.default.reject(objectError));
                    case 2:
                      _iterator4 = _createForOfIteratorHelper(target);
                      _context17.prev = 3;
                      _iterator4.s();
                    case 5:
                      if ((_step4 = _iterator4.n()).done) {
                        _context17.next = 13;
                        break;
                      }
                      object = _step4.value;
                      _context17.next = 9;
                      return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);
                    case 9:
                      _context17.next = 11;
                      return localDatastore._updateObjectIfPinned(object);
                    case 11:
                      _context17.next = 5;
                      break;
                    case 13:
                      _context17.next = 18;
                      break;
                    case 15:
                      _context17.prev = 15;
                      _context17.t0 = _context17["catch"](3);
                      _iterator4.e(_context17.t0);
                    case 18:
                      _context17.prev = 18;
                      _iterator4.f();
                      return _context17.finish(18);
                    case 21:
                      return _context17.abrupt("return", _promise.default.resolve(target));
                    case 22:
                    case "end":
                      return _context17.stop();
                  }
                }
              }, _callee9, null, [[3, 15, 18, 21]]);
            })));
          });
        }
        if (target instanceof ParseObject) {
          target._getId();
          var localId = target._localId;
          var targetCopy = target;
          var task = function() {
            var params = targetCopy._getSaveParams();
            return RESTController.request(params.method, params.path, params.body, options).then(function(response) {
              var status = response._status;
              delete response._status;
              targetCopy._handleSaveResponse(response, status);
            }, function(error) {
              targetCopy._handleSaveError();
              return _promise.default.reject(error);
            });
          };
          stateController.pushPendingState(target._getStateIdentifier());
          return stateController.enqueueTask(target._getStateIdentifier(), task).then(/* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee10() {
            return _regenerator.default.wrap(function(_context18) {
              while (1) {
                switch (_context18.prev = _context18.next) {
                  case 0:
                    _context18.next = 2;
                    return localDatastore._updateLocalIdForObject(localId, target);
                  case 2:
                    _context18.next = 4;
                    return localDatastore._updateObjectIfPinned(target);
                  case 4:
                    return _context18.abrupt("return", target);
                  case 5:
                  case "end":
                    return _context18.stop();
                }
              }
            }, _callee10);
          })), function(error) {
            return _promise.default.reject(error);
          });
        }
        return _promise.default.resolve();
      }
    };
    _CoreManager.default.setObjectController(DefaultController);
    var _default = ParseObject;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseRole.js
var require_ParseRole = __commonJS({
  "node_modules/moralis/lib/browser/ParseRole.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _get2 = _interopRequireDefault(require_get6());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseObject2 = _interopRequireDefault(require_ParseObject());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var ParseRole = /* @__PURE__ */ function(_ParseObject) {
      (0, _inherits2.default)(ParseRole2, _ParseObject);
      var _super = _createSuper(ParseRole2);
      function ParseRole2(name, acl) {
        var _this;
        (0, _classCallCheck2.default)(this, ParseRole2);
        _this = _super.call(this, "_Role");
        if (typeof name === "string" && acl instanceof _ParseACL.default) {
          _this.setName(name);
          _this.setACL(acl);
        }
        return _this;
      }
      (0, _createClass2.default)(ParseRole2, [{
        key: "getName",
        value: function() {
          var name = this.get("name");
          if (name == null || typeof name === "string") {
            return name;
          }
          return "";
        }
      }, {
        key: "setName",
        value: function(name, options) {
          return this.set("name", name, options);
        }
      }, {
        key: "getUsers",
        value: function() {
          return this.relation("users");
        }
      }, {
        key: "getRoles",
        value: function() {
          return this.relation("roles");
        }
      }, {
        key: "validate",
        value: function(attrs, options) {
          var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole2.prototype), "validate", this).call(this, attrs, options);
          if (isInvalid) {
            return isInvalid;
          }
          if ("name" in attrs && attrs.name !== this.getName()) {
            var newName = attrs.name;
            if (this.id && this.id !== attrs.objectId) {
              return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "A role's name can only be set before it has been saved.");
            }
            if (typeof newName !== "string") {
              return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "A role's name must be a String.");
            }
            if (!/^[0-9a-zA-Z\-_ ]+$/.test(newName)) {
              return new _ParseError.default(_ParseError.default.OTHER_CAUSE, "A role's name can be only contain alphanumeric characters, _, -, and spaces.");
            }
          }
          return false;
        }
      }]);
      return ParseRole2;
    }(_ParseObject2.default);
    _ParseObject2.default.registerSubclass("_Role", ParseRole);
    var _default = ParseRole;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/AnonymousUtils.js
var require_AnonymousUtils = __commonJS({
  "node_modules/moralis/lib/browser/AnonymousUtils.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _require = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var uuidv4 = _require.v4;
    var registered = false;
    var AnonymousUtils = {
      isLinked: function(user) {
        var provider = this._getAuthProvider();
        return user._isLinked(provider.getAuthType());
      },
      logIn: function(options) {
        var provider = this._getAuthProvider();
        return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);
      },
      link: function(user, options) {
        var provider = this._getAuthProvider();
        return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);
      },
      _getAuthProvider: function() {
        var provider = {
          restoreAuthentication: function() {
            return true;
          },
          getAuthType: function() {
            return "anonymous";
          },
          getAuthData: function() {
            return {
              authData: {
                id: uuidv4()
              }
            };
          }
        };
        if (!registered) {
          _ParseUser.default._registerAuthenticationProvider(provider);
          registered = true;
        }
        return provider;
      }
    };
    var _default = AnonymousUtils;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/isRevocableSession.js
var require_isRevocableSession = __commonJS({
  "node_modules/moralis/lib/browser/isRevocableSession.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isRevocableSession;
    var _indexOf = _interopRequireDefault(require_index_of7());
    function isRevocableSession(token) {
      return (0, _indexOf.default)(token).call(token, "r:") > -1;
    }
  }
});

// node_modules/moralis/lib/browser/ParseSession.js
var require_ParseSession = __commonJS({
  "node_modules/moralis/lib/browser/ParseSession.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _promise = _interopRequireDefault(require_promise3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _isRevocableSession = _interopRequireDefault(require_isRevocableSession());
    var _ParseObject2 = _interopRequireDefault(require_ParseObject());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var ParseSession = /* @__PURE__ */ function(_ParseObject) {
      (0, _inherits2.default)(ParseSession2, _ParseObject);
      var _super = _createSuper(ParseSession2);
      function ParseSession2(attributes) {
        var _this;
        (0, _classCallCheck2.default)(this, ParseSession2);
        _this = _super.call(this, "_Session");
        if (attributes && (0, _typeof2.default)(attributes) === "object") {
          if (!_this.set(attributes || {})) {
            throw new Error("Can't create an invalid Session");
          }
        }
        return _this;
      }
      (0, _createClass2.default)(ParseSession2, [{
        key: "getSessionToken",
        value: function() {
          var token = this.get("sessionToken");
          if (typeof token === "string") {
            return token;
          }
          return "";
        }
      }], [{
        key: "readOnlyAttributes",
        value: function() {
          return ["createdWith", "expiresAt", "installationId", "restricted", "sessionToken", "user"];
        }
      }, {
        key: "current",
        value: function(options) {
          options = options || {};
          var controller = _CoreManager.default.getSessionController();
          var sessionOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            sessionOptions.useMasterKey = options.useMasterKey;
          }
          return _ParseUser.default.currentAsync().then(function(user) {
            if (!user) {
              return _promise.default.reject("There is no current user.");
            }
            sessionOptions.sessionToken = user.getSessionToken();
            return controller.getSession(sessionOptions);
          });
        }
      }, {
        key: "isCurrentSessionRevocable",
        value: function() {
          var currentUser = _ParseUser.default.current();
          if (currentUser) {
            return (0, _isRevocableSession.default)(currentUser.getSessionToken() || "");
          }
          return false;
        }
      }]);
      return ParseSession2;
    }(_ParseObject2.default);
    _ParseObject2.default.registerSubclass("_Session", ParseSession);
    var DefaultController = {
      getSession: function(options) {
        var RESTController = _CoreManager.default.getRESTController();
        var session = new ParseSession();
        return RESTController.request("GET", "sessions/me", {}, options).then(function(sessionData) {
          session._finishFetch(sessionData);
          session._setExisted(true);
          return session;
        });
      }
    };
    _CoreManager.default.setSessionController(DefaultController);
    var _default = ParseSession;
    exports.default = _default;
  }
});

// node_modules/core-js-pure/internals/string-trim-forced.js
var require_string_trim_forced = __commonJS({
  "node_modules/core-js-pure/internals/string-trim-forced.js"(exports, module) {
    init_react();
    var PROPER_FUNCTION_NAME = require_function_name().PROPER;
    var fails = require_fails();
    var whitespaces = require_whitespaces();
    var non = "\u200B\x85\u180E";
    module.exports = function(METHOD_NAME) {
      return fails(function() {
        return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME;
      });
    };
  }
});

// node_modules/core-js-pure/modules/es.string.trim.js
var require_es_string_trim = __commonJS({
  "node_modules/core-js-pure/modules/es.string.trim.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $trim = require_string_trim().trim;
    var forcedStringTrimMethod = require_string_trim_forced();
    $({ target: "String", proto: true, forced: forcedStringTrimMethod("trim") }, {
      trim: function trim() {
        return $trim(this);
      }
    });
  }
});

// node_modules/core-js-pure/es/string/virtual/trim.js
var require_trim = __commonJS({
  "node_modules/core-js-pure/es/string/virtual/trim.js"(exports, module) {
    init_react();
    require_es_string_trim();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("String").trim;
  }
});

// node_modules/core-js-pure/es/instance/trim.js
var require_trim2 = __commonJS({
  "node_modules/core-js-pure/es/instance/trim.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_trim();
    var StringPrototype = String.prototype;
    module.exports = function(it) {
      var own = it.trim;
      return typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.trim ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/trim.js
var require_trim3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/trim.js"(exports, module) {
    init_react();
    var parent = require_trim2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/trim.js
var require_trim4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/trim.js"(exports, module) {
    init_react();
    module.exports = require_trim3();
  }
});

// node_modules/core-js-pure/modules/es.array.every.js
var require_es_array_every = __commonJS({
  "node_modules/core-js-pure/modules/es.array.every.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $every = require_array_iteration().every;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var STRICT_METHOD = arrayMethodIsStrict("every");
    $({ target: "Array", proto: true, forced: !STRICT_METHOD }, {
      every: function every(callbackfn) {
        return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/every.js
var require_every = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/every.js"(exports, module) {
    init_react();
    require_es_array_every();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").every;
  }
});

// node_modules/core-js-pure/es/instance/every.js
var require_every2 = __commonJS({
  "node_modules/core-js-pure/es/instance/every.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_every();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.every;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.every ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/every.js
var require_every3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/every.js"(exports, module) {
    init_react();
    var parent = require_every2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/every.js
var require_every4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/every.js"(exports, module) {
    init_react();
    module.exports = require_every3();
  }
});

// node_modules/core-js-pure/modules/es.object.values.js
var require_es_object_values = __commonJS({
  "node_modules/core-js-pure/modules/es.object.values.js"() {
    init_react();
    var $ = require_export();
    var $values = require_object_to_array().values;
    $({ target: "Object", stat: true }, {
      values: function values(O2) {
        return $values(O2);
      }
    });
  }
});

// node_modules/core-js-pure/es/object/values.js
var require_values = __commonJS({
  "node_modules/core-js-pure/es/object/values.js"(exports, module) {
    init_react();
    require_es_object_values();
    var path = require_path();
    module.exports = path.Object.values;
  }
});

// node_modules/core-js-pure/stable/object/values.js
var require_values2 = __commonJS({
  "node_modules/core-js-pure/stable/object/values.js"(exports, module) {
    init_react();
    var parent = require_values();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/values.js
var require_values3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/values.js"(exports, module) {
    init_react();
    module.exports = require_values2();
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/bind.js
var require_bind7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/bind.js"(exports, module) {
    init_react();
    module.exports = require_bind3();
  }
});

// node_modules/moralis/lib/browser/Cloud.js
var require_Cloud = __commonJS({
  "node_modules/moralis/lib/browser/Cloud.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getJobStatus = getJobStatus;
    exports.getJobsData = getJobsData;
    exports.run = run;
    exports.startJob = startJob;
    var _keys = _interopRequireDefault(require_keys3());
    var _promise = _interopRequireDefault(require_promise3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _decode = _interopRequireDefault(require_decode());
    var _encode = _interopRequireDefault(require_encode());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    function run(name, data, options) {
      options = options || {};
      if (typeof name !== "string" || name.length === 0) {
        throw new TypeError("Cloud function name must be a string.");
      }
      var requestOptions = {};
      if (options.useMasterKey) {
        requestOptions.useMasterKey = options.useMasterKey;
      }
      if (options.sessionToken) {
        requestOptions.sessionToken = options.sessionToken;
      }
      if (options.context && (0, _typeof2.default)(options.context) === "object") {
        requestOptions.context = options.context;
      }
      return _CoreManager.default.getCloudController().run(name, data, requestOptions);
    }
    function getJobsData() {
      return _CoreManager.default.getCloudController().getJobsData({
        useMasterKey: true
      });
    }
    function startJob(name, data) {
      if (typeof name !== "string" || name.length === 0) {
        throw new TypeError("Cloud job name must be a string.");
      }
      return _CoreManager.default.getCloudController().startJob(name, data, {
        useMasterKey: true
      });
    }
    function getJobStatus(jobStatusId) {
      var query = new _ParseQuery.default("_JobStatus");
      return query.get(jobStatusId, {
        useMasterKey: true
      });
    }
    var DefaultController = {
      run: function(name, data, options) {
        var RESTController = _CoreManager.default.getRESTController();
        var payload = (0, _encode.default)(data, true);
        var request = RESTController.request("POST", "functions/".concat(name), payload, options);
        return request.then(function(res) {
          if ((0, _typeof2.default)(res) === "object" && (0, _keys.default)(res).length > 0 && !res.hasOwnProperty("result")) {
            throw new _ParseError.default(_ParseError.default.INVALID_JSON, "The server returned an invalid response.");
          }
          var decoded = (0, _decode.default)(res);
          if (decoded && decoded.hasOwnProperty("result")) {
            return _promise.default.resolve(decoded.result);
          }
          return _promise.default.resolve(void 0);
        });
      },
      getJobsData: function(options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "cloud_code/jobs/data", null, options);
      },
      startJob: function(name, data, options) {
        var RESTController = _CoreManager.default.getRESTController();
        var payload = (0, _encode.default)(data, true);
        return RESTController.request("POST", "jobs/".concat(name), payload, options);
      }
    };
    _CoreManager.default.setCloudController(DefaultController);
  }
});

// node_modules/moralis/lib/browser/createSigningData.js
var require_createSigningData = __commonJS({
  "node_modules/moralis/lib/browser/createSigningData.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = createSigningData;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _concat = _interopRequireDefault(require_concat4());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _Cloud = require_Cloud();
    function createSigningData() {
      return _createSigningData.apply(this, arguments);
    }
    function _createSigningData() {
      _createSigningData = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(message) {
        var data, _context, _context2, _yield$run, dateTime, applicationId;
        return _regenerator.default.wrap(function(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.next = 3;
                return (0, _Cloud.run)("getServerTime");
              case 3:
                _yield$run = _context3.sent;
                dateTime = _yield$run.dateTime;
                applicationId = _CoreManager.default.get("APPLICATION_ID");
                data = (0, _concat.default)(_context = (0, _concat.default)(_context2 = "".concat(message, "\n\nId: ")).call(_context2, applicationId, ":")).call(_context, dateTime);
                _context3.next = 12;
                break;
              case 9:
                _context3.prev = 9;
                _context3.t0 = _context3["catch"](0);
                data = "".concat(message);
              case 12:
                return _context3.abrupt("return", data);
              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee, null, [[0, 9]]);
      }));
      return _createSigningData.apply(this, arguments);
    }
  }
});

// node_modules/moralis/lib/browser/MoralisErd.js
var require_MoralisErd = __commonJS({
  "node_modules/moralis/lib/browser/MoralisErd.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _filter = _interopRequireDefault(require_filter4());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _createSigningData = _interopRequireDefault(require_createSigningData());
    var INIT_ERROR = "Could not initialise ledger app, make sure Elrond app is open";
    function getErdJs() {
      return MoralisErd.getErdJs();
    }
    var MoralisErd = /* @__PURE__ */ function() {
      function MoralisErd2() {
        (0, _classCallCheck2.default)(this, MoralisErd2);
      }
      (0, _createClass2.default)(MoralisErd2, null, [{
        key: "getErdJs",
        value: function() {
          if (typeof window !== "undefined" && window.erdjs)
            return window.erdjs;
          throw new Error("Please add erdjs scripts");
        }
      }, {
        key: "gatewayAddress",
        value: function() {
          return "https://gateway.elrond.com";
        }
      }, {
        key: "hwProxy",
        value: function() {
          var _hwProxy = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
            var _getErdJs, ProxyProvider, proxy;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!MoralisErd2._proxy) {
                      _context.next = 2;
                      break;
                    }
                    return _context.abrupt("return", MoralisErd2._proxy);
                  case 2:
                    _getErdJs = getErdJs(), ProxyProvider = _getErdJs.ProxyProvider;
                    proxy = new ProxyProvider(MoralisErd2.gatewayAddress());
                    MoralisErd2._proxy = proxy;
                    return _context.abrupt("return", MoralisErd2._proxy);
                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
          return function() {
            return _hwProxy.apply(this, arguments);
          };
        }()
      }, {
        key: "hwProvider",
        value: function() {
          return MoralisErd2._hw;
        }
      }, {
        key: "enable",
        value: function() {
          var _enable = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            var _getErdJs2, HWProvider, proxy, hw, success;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _getErdJs2 = getErdJs(), HWProvider = _getErdJs2.HWProvider;
                    _context2.next = 3;
                    return MoralisErd2.hwProxy();
                  case 3:
                    proxy = _context2.sent;
                    hw = new HWProvider(proxy);
                    _context2.next = 7;
                    return hw.init();
                  case 7:
                    success = _context2.sent;
                    if (success) {
                      _context2.next = 10;
                      break;
                    }
                    throw new Error(INIT_ERROR);
                  case 10:
                    MoralisErd2._hw = hw;
                    return _context2.abrupt("return", hw);
                  case 12:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));
          return function() {
            return _enable.apply(this, arguments);
          };
        }()
      }, {
        key: "authenticate",
        value: function() {
          var _authenticate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
            var hw, address, erdAddress, accounts, message, data, signature, authData, user;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return MoralisErd2.enable();
                  case 2:
                    hw = _context3.sent;
                    _context3.next = 5;
                    return hw.login();
                  case 5:
                    address = _context3.sent;
                    erdAddress = address.toLowerCase();
                    accounts = [erdAddress];
                    message = MoralisErd2.getSigningData();
                    _context3.next = 11;
                    return (0, _createSigningData.default)(message);
                  case 11:
                    data = _context3.sent;
                    _context3.next = 14;
                    return MoralisErd2.sign(data);
                  case 14:
                    signature = _context3.sent;
                    authData = {
                      id: erdAddress,
                      signature,
                      data
                    };
                    _context3.next = 18;
                    return _ParseUser.default.logInWith("moralisErd", {
                      authData
                    });
                  case 18:
                    user = _context3.sent;
                    if (user) {
                      _context3.next = 21;
                      break;
                    }
                    throw new Error("Could not get user");
                  case 21:
                    _context3.next = 23;
                    return user.setACL(new _ParseACL.default(user));
                  case 23:
                    user.addAllUnique("erdAccounts", accounts);
                    user.set("erdAddress", erdAddress);
                    _context3.next = 27;
                    return user.save();
                  case 27:
                    return _context3.abrupt("return", user);
                  case 28:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }));
          return function() {
            return _authenticate.apply(this, arguments);
          };
        }()
      }, {
        key: "link",
        value: function() {
          var _link = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(account, options) {
            var message, user, erdAddress, ErdAddress, query, erdAddressRecord, data, signature, authData;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisErd2.getSigningData();
                    _context4.next = 3;
                    return _ParseUser.default.current();
                  case 3:
                    user = _context4.sent;
                    erdAddress = account.toLowerCase();
                    ErdAddress = _ParseObject.default.extend("_ErdAddress");
                    query = new _ParseQuery.default(ErdAddress);
                    _context4.next = 9;
                    return query.get(erdAddress).catch(function() {
                      return null;
                    });
                  case 9:
                    erdAddressRecord = _context4.sent;
                    if (erdAddressRecord) {
                      _context4.next = 20;
                      break;
                    }
                    _context4.next = 13;
                    return (0, _createSigningData.default)(message);
                  case 13:
                    data = _context4.sent;
                    _context4.next = 16;
                    return MoralisErd2.sign(data);
                  case 16:
                    signature = _context4.sent;
                    authData = {
                      id: erdAddress,
                      signature,
                      data
                    };
                    _context4.next = 20;
                    return user.linkWith("moralisErd", {
                      authData
                    });
                  case 20:
                    user.addAllUnique("erdAccounts", [erdAddress]);
                    user.set("erdAddress", erdAddress);
                    _context4.next = 24;
                    return user.save();
                  case 24:
                    return _context4.abrupt("return", user);
                  case 25:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));
          return function() {
            return _link.apply(this, arguments);
          };
        }()
      }, {
        key: "unlink",
        value: function() {
          var _unlink = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(account) {
            var _user$get;
            var accountsLower, ErdAddress, query, erdAddressRecord, user, accounts, nextAccounts;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    accountsLower = account.toLowerCase();
                    ErdAddress = _ParseObject.default.extend("_ErdAddress");
                    query = new _ParseQuery.default(ErdAddress);
                    _context5.next = 5;
                    return query.get(accountsLower);
                  case 5:
                    erdAddressRecord = _context5.sent;
                    _context5.next = 8;
                    return erdAddressRecord.destroy();
                  case 8:
                    _context5.next = 10;
                    return _ParseUser.default.current();
                  case 10:
                    user = _context5.sent;
                    accounts = (_user$get = user.get("erdAccounts")) !== null && _user$get !== void 0 ? _user$get : [];
                    nextAccounts = (0, _filter.default)(accounts).call(accounts, function(v2) {
                      return v2 !== accountsLower;
                    });
                    user.set("erdAccounts", nextAccounts);
                    user.set("erdAddress", nextAccounts[0]);
                    _context5.next = 17;
                    return user._unlinkFrom("moralisErd");
                  case 17:
                    _context5.next = 19;
                    return user.save();
                  case 19:
                    return _context5.abrupt("return", user);
                  case 20:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }));
          return function() {
            return _unlink.apply(this, arguments);
          };
        }()
      }, {
        key: "sign",
        value: function() {
          var _sign = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6(data) {
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    return _context6.abrupt("return", data);
                  case 1:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6);
          }));
          return function() {
            return _sign.apply(this, arguments);
          };
        }()
      }, {
        key: "getSigningData",
        value: function() {
          return "Moralis Authentication";
        }
      }]);
      return MoralisErd2;
    }();
    var _default = MoralisErd;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/MoralisDot.js
var require_MoralisDot = __commonJS({
  "node_modules/moralis/lib/browser/MoralisDot.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _keys = _interopRequireDefault(require_keys3());
    var _filter = _interopRequireDefault(require_filter4());
    var _from = _interopRequireDefault(require_from3());
    var _slice = _interopRequireDefault(require_slice4());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _createSigningData = _interopRequireDefault(require_createSigningData());
    var web3EnablePromise = null;
    var MoralisDot = /* @__PURE__ */ function() {
      function MoralisDot2() {
        (0, _classCallCheck2.default)(this, MoralisDot2);
      }
      (0, _createClass2.default)(MoralisDot2, null, [{
        key: "web3IsInjected",
        value: function() {
          return (0, _keys.default)(window.injectedWeb3).length !== 0;
        }
      }, {
        key: "enable",
        value: function() {
          var _enable = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(opts) {
            var _window$injectedWeb, _window$injectedWeb$t;
            var type, _args = arguments;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    type = _args.length > 1 && _args[1] !== void 0 ? _args[1] : "polkadot-js";
                    if (!web3EnablePromise) {
                      _context.next = 3;
                      break;
                    }
                    return _context.abrupt("return", web3EnablePromise);
                  case 3:
                    web3EnablePromise = (_window$injectedWeb = window.injectedWeb3) === null || _window$injectedWeb === void 0 ? void 0 : (_window$injectedWeb$t = _window$injectedWeb[type]) === null || _window$injectedWeb$t === void 0 ? void 0 : _window$injectedWeb$t.enable(opts);
                    return _context.abrupt("return", web3EnablePromise);
                  case 5:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
          return function() {
            return _enable.apply(this, arguments);
          };
        }()
      }, {
        key: "authenticate",
        value: function() {
          var _authenticate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(opts) {
            var _opts$name;
            var allAccounts, account, address, dotAddress, accounts, message, data, signature, authData, user;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return MoralisDot2.enable((_opts$name = opts === null || opts === void 0 ? void 0 : opts.name) !== null && _opts$name !== void 0 ? _opts$name : "Moralis");
                  case 2:
                    MoralisDot2.web3 = _context2.sent;
                    _context2.next = 5;
                    return MoralisDot2.web3.accounts.get();
                  case 5:
                    allAccounts = _context2.sent;
                    account = allAccounts[0];
                    address = account === null || account === void 0 ? void 0 : account.address;
                    if (address) {
                      _context2.next = 10;
                      break;
                    }
                    throw new Error("Address not found");
                  case 10:
                    dotAddress = address;
                    accounts = [dotAddress];
                    message = MoralisDot2.getSigningData();
                    _context2.next = 15;
                    return (0, _createSigningData.default)(message);
                  case 15:
                    data = _context2.sent;
                    _context2.next = 18;
                    return MoralisDot2.sign(address, data);
                  case 18:
                    signature = _context2.sent;
                    authData = {
                      id: dotAddress,
                      signature,
                      data
                    };
                    _context2.next = 22;
                    return _ParseUser.default.logInWith("moralisDot", {
                      authData
                    });
                  case 22:
                    user = _context2.sent;
                    if (user) {
                      _context2.next = 25;
                      break;
                    }
                    throw new Error("Could not get user");
                  case 25:
                    _context2.next = 27;
                    return user.setACL(new _ParseACL.default(user));
                  case 27:
                    user.addAllUnique("dotAccounts", accounts);
                    user.set("dotAddress", dotAddress);
                    _context2.next = 31;
                    return user.save();
                  case 31:
                    return _context2.abrupt("return", user);
                  case 32:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));
          return function() {
            return _authenticate.apply(this, arguments);
          };
        }()
      }, {
        key: "link",
        value: function() {
          var _link = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3(account, options) {
            var message, user, dotAddress, DotAddress, query, dotAddressRecord, data, signature, authData;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisDot2.getSigningData();
                    _context3.next = 3;
                    return _ParseUser.default.current();
                  case 3:
                    user = _context3.sent;
                    dotAddress = account;
                    DotAddress = _ParseObject.default.extend("_DotAddress");
                    query = new _ParseQuery.default(DotAddress);
                    _context3.next = 9;
                    return query.get(dotAddress).catch(function() {
                      return null;
                    });
                  case 9:
                    dotAddressRecord = _context3.sent;
                    if (dotAddressRecord) {
                      _context3.next = 20;
                      break;
                    }
                    _context3.next = 13;
                    return (0, _createSigningData.default)(message);
                  case 13:
                    data = _context3.sent;
                    _context3.next = 16;
                    return MoralisDot2.sign(dotAddress, data);
                  case 16:
                    signature = _context3.sent;
                    authData = {
                      id: dotAddress,
                      signature,
                      data
                    };
                    _context3.next = 20;
                    return user.linkWith("moralisDot", {
                      authData
                    });
                  case 20:
                    user.addAllUnique("dotAccounts", [dotAddress]);
                    user.set("dotAddress", dotAddress);
                    _context3.next = 24;
                    return user.save();
                  case 24:
                    return _context3.abrupt("return", user);
                  case 25:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }));
          return function() {
            return _link.apply(this, arguments);
          };
        }()
      }, {
        key: "unlink",
        value: function() {
          var _unlink = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(account) {
            var _user$get;
            var accountsLower, DotAddress, query, dotAddressRecord, user, accounts, nextAccounts;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    accountsLower = account;
                    DotAddress = _ParseObject.default.extend("_DotAddress");
                    query = new _ParseQuery.default(DotAddress);
                    _context4.next = 5;
                    return query.get(accountsLower);
                  case 5:
                    dotAddressRecord = _context4.sent;
                    _context4.next = 8;
                    return dotAddressRecord.destroy();
                  case 8:
                    _context4.next = 10;
                    return _ParseUser.default.current();
                  case 10:
                    user = _context4.sent;
                    accounts = (_user$get = user.get("dotAccounts")) !== null && _user$get !== void 0 ? _user$get : [];
                    nextAccounts = (0, _filter.default)(accounts).call(accounts, function(v2) {
                      return v2 !== accountsLower;
                    });
                    user.set("dotAccounts", nextAccounts);
                    user.set("dotAddress", nextAccounts[0]);
                    _context4.next = 17;
                    return user._unlinkFrom("moralisDot");
                  case 17:
                    _context4.next = 19;
                    return user.save();
                  case 19:
                    return _context4.abrupt("return", user);
                  case 20:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));
          return function() {
            return _unlink.apply(this, arguments);
          };
        }()
      }, {
        key: "sign",
        value: function() {
          var _sign = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(address, data) {
            var web3, _yield$web3$signer$si, signature;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    if (web3EnablePromise) {
                      _context5.next = 2;
                      break;
                    }
                    throw new Error("Must enable MoralisDot");
                  case 2:
                    _context5.next = 4;
                    return web3EnablePromise;
                  case 4:
                    web3 = _context5.sent;
                    if (web3.signer) {
                      _context5.next = 7;
                      break;
                    }
                    throw new Error("No signer found");
                  case 7:
                    _context5.next = 9;
                    return web3.signer.signRaw({
                      address,
                      data: stringToHex(data),
                      type: "bytes"
                    });
                  case 9:
                    _yield$web3$signer$si = _context5.sent;
                    signature = _yield$web3$signer$si.signature;
                    return _context5.abrupt("return", signature);
                  case 12:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }));
          return function() {
            return _sign.apply(this, arguments);
          };
        }()
      }, {
        key: "getSigningData",
        value: function() {
          return "Moralis Authentication";
        }
      }]);
      return MoralisDot2;
    }();
    var _default = MoralisDot;
    exports.default = _default;
    function stringToHex(value) {
      return toHexString(stringToU8a(value));
    }
    function stringToU8a(value) {
      var u8a = new Uint8Array(value.length);
      for (var i2 = 0; i2 < value.length; i2++) {
        u8a[i2] = value.charCodeAt(i2);
      }
      return u8a;
    }
    function toHexString(byteArray) {
      return "0x".concat((0, _from.default)(byteArray, function(byte) {
        var _context6;
        return (0, _slice.default)(_context6 = "0".concat((byte & 255).toString(16))).call(_context6, -2);
      }).join(""));
    }
  }
});

// node_modules/core-js-pure/internals/array-reduce.js
var require_array_reduce = __commonJS({
  "node_modules/core-js-pure/internals/array-reduce.js"(exports, module) {
    init_react();
    var global2 = require_global();
    var aCallable = require_a_callable();
    var toObject = require_to_object();
    var IndexedObject = require_indexed_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var TypeError2 = global2.TypeError;
    var createMethod = function(IS_RIGHT) {
      return function(that, callbackfn, argumentsLength, memo) {
        aCallable(callbackfn);
        var O2 = toObject(that);
        var self2 = IndexedObject(O2);
        var length = lengthOfArrayLike(O2);
        var index = IS_RIGHT ? length - 1 : 0;
        var i2 = IS_RIGHT ? -1 : 1;
        if (argumentsLength < 2)
          while (true) {
            if (index in self2) {
              memo = self2[index];
              index += i2;
              break;
            }
            index += i2;
            if (IS_RIGHT ? index < 0 : length <= index) {
              throw TypeError2("Reduce of empty array with no initial value");
            }
          }
        for (; IS_RIGHT ? index >= 0 : length > index; index += i2)
          if (index in self2) {
            memo = callbackfn(memo, self2[index], index, O2);
          }
        return memo;
      };
    };
    module.exports = {
      left: createMethod(false),
      right: createMethod(true)
    };
  }
});

// node_modules/core-js-pure/modules/es.array.reduce.js
var require_es_array_reduce = __commonJS({
  "node_modules/core-js-pure/modules/es.array.reduce.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $reduce = require_array_reduce().left;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var CHROME_VERSION = require_engine_v8_version();
    var IS_NODE = require_engine_is_node();
    var STRICT_METHOD = arrayMethodIsStrict("reduce");
    var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
    $({ target: "Array", proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {
      reduce: function reduce(callbackfn) {
        var length = arguments.length;
        return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/reduce.js
var require_reduce = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/reduce.js"(exports, module) {
    init_react();
    require_es_array_reduce();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").reduce;
  }
});

// node_modules/core-js-pure/es/instance/reduce.js
var require_reduce2 = __commonJS({
  "node_modules/core-js-pure/es/instance/reduce.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_reduce();
    var ArrayPrototype = Array.prototype;
    module.exports = function(it) {
      var own = it.reduce;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.reduce ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/reduce.js
var require_reduce3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/reduce.js"(exports, module) {
    init_react();
    var parent = require_reduce2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js
var require_reduce4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js"(exports, module) {
    init_react();
    module.exports = require_reduce3();
  }
});

// node_modules/core-js-pure/internals/string-repeat.js
var require_string_repeat = __commonJS({
  "node_modules/core-js-pure/internals/string-repeat.js"(exports, module) {
    "use strict";
    init_react();
    var global2 = require_global();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toString2 = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var RangeError = global2.RangeError;
    module.exports = function repeat(count) {
      var str = toString2(requireObjectCoercible(this));
      var result = "";
      var n2 = toIntegerOrInfinity(count);
      if (n2 < 0 || n2 == Infinity)
        throw RangeError("Wrong number of repetitions");
      for (; n2 > 0; (n2 >>>= 1) && (str += str))
        if (n2 & 1)
          result += str;
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/string-pad.js
var require_string_pad = __commonJS({
  "node_modules/core-js-pure/internals/string-pad.js"(exports, module) {
    init_react();
    var uncurryThis = require_function_uncurry_this();
    var toLength = require_to_length();
    var toString2 = require_to_string();
    var $repeat = require_string_repeat();
    var requireObjectCoercible = require_require_object_coercible();
    var repeat = uncurryThis($repeat);
    var stringSlice = uncurryThis("".slice);
    var ceil = Math.ceil;
    var createMethod = function(IS_END) {
      return function($this, maxLength, fillString) {
        var S2 = toString2(requireObjectCoercible($this));
        var intMaxLength = toLength(maxLength);
        var stringLength = S2.length;
        var fillStr = fillString === void 0 ? " " : toString2(fillString);
        var fillLen, stringFiller;
        if (intMaxLength <= stringLength || fillStr == "")
          return S2;
        fillLen = intMaxLength - stringLength;
        stringFiller = repeat(fillStr, ceil(fillLen / fillStr.length));
        if (stringFiller.length > fillLen)
          stringFiller = stringSlice(stringFiller, 0, fillLen);
        return IS_END ? S2 + stringFiller : stringFiller + S2;
      };
    };
    module.exports = {
      start: createMethod(false),
      end: createMethod(true)
    };
  }
});

// node_modules/core-js-pure/internals/string-pad-webkit-bug.js
var require_string_pad_webkit_bug = __commonJS({
  "node_modules/core-js-pure/internals/string-pad-webkit-bug.js"(exports, module) {
    init_react();
    var userAgent = require_engine_user_agent();
    module.exports = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent);
  }
});

// node_modules/core-js-pure/modules/es.string.pad-start.js
var require_es_string_pad_start = __commonJS({
  "node_modules/core-js-pure/modules/es.string.pad-start.js"() {
    "use strict";
    init_react();
    var $ = require_export();
    var $padStart = require_string_pad().start;
    var WEBKIT_BUG = require_string_pad_webkit_bug();
    $({ target: "String", proto: true, forced: WEBKIT_BUG }, {
      padStart: function padStart(maxLength) {
        return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/string/virtual/pad-start.js
var require_pad_start = __commonJS({
  "node_modules/core-js-pure/es/string/virtual/pad-start.js"(exports, module) {
    init_react();
    require_es_string_pad_start();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("String").padStart;
  }
});

// node_modules/core-js-pure/es/instance/pad-start.js
var require_pad_start2 = __commonJS({
  "node_modules/core-js-pure/es/instance/pad-start.js"(exports, module) {
    init_react();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_pad_start();
    var StringPrototype = String.prototype;
    module.exports = function(it) {
      var own = it.padStart;
      return typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.padStart ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/pad-start.js
var require_pad_start3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/pad-start.js"(exports, module) {
    init_react();
    var parent = require_pad_start2();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/pad-start.js
var require_pad_start4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/pad-start.js"(exports, module) {
    init_react();
    module.exports = require_pad_start3();
  }
});

// node_modules/moralis/lib/browser/MoralisSol.js
var require_MoralisSol = __commonJS({
  "node_modules/moralis/lib/browser/MoralisSol.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _concat = _interopRequireDefault(require_concat4());
    var _filter = _interopRequireDefault(require_filter4());
    var _reduce = _interopRequireDefault(require_reduce4());
    var _padStart = _interopRequireDefault(require_pad_start4());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _createSigningData = _interopRequireDefault(require_createSigningData());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var base64 = {
      decode: function(s2) {
        return Uint8Array.from(atob(s2), function(c2) {
          return c2.charCodeAt(0);
        });
      },
      encode: function(b2) {
        return btoa(String.fromCharCode.apply(String, (0, _toConsumableArray2.default)(new Uint8Array(b2))));
      }
    };
    var MoralisSol = /* @__PURE__ */ function() {
      function MoralisSol2() {
        (0, _classCallCheck2.default)(this, MoralisSol2);
      }
      (0, _createClass2.default)(MoralisSol2, null, [{
        key: "authenticate",
        value: function() {
          var _authenticate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(options) {
            var _context, _user$get;
            var phantom, solAddress, accounts, message, data, signature, authData, user;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return MoralisSol2.enable();
                  case 2:
                    phantom = _context2.sent;
                    if (phantom) {
                      _context2.next = 5;
                      break;
                    }
                    throw new Error("Phantom wallet not available");
                  case 5:
                    solAddress = phantom.publicKey.toString();
                    if (solAddress) {
                      _context2.next = 8;
                      break;
                    }
                    throw new Error("Address not found");
                  case 8:
                    accounts = [solAddress];
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisSol2.getSigningData();
                    _context2.next = 12;
                    return (0, _createSigningData.default)(message);
                  case 12:
                    data = _context2.sent;
                    _context2.next = 15;
                    return MoralisSol2.sign(data);
                  case 15:
                    signature = _context2.sent;
                    authData = {
                      id: solAddress,
                      signature,
                      data
                    };
                    _context2.next = 19;
                    return _ParseUser.default.logInWith("moralisSol", {
                      authData
                    });
                  case 19:
                    user = _context2.sent;
                    _context2.next = 22;
                    return user.setACL(new _ParseACL.default(user));
                  case 22:
                    if (user) {
                      _context2.next = 24;
                      break;
                    }
                    throw new Error("Could not get user");
                  case 24:
                    user.set("solAccounts", uniq((0, _concat.default)(_context = []).call(_context, accounts, (_user$get = user.get("solAccounts")) !== null && _user$get !== void 0 ? _user$get : [])));
                    user.set("solAddress", solAddress);
                    _context2.next = 28;
                    return user.save();
                  case 28:
                    return _context2.abrupt("return", user);
                  case 29:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee);
          }));
          return function() {
            return _authenticate.apply(this, arguments);
          };
        }()
      }, {
        key: "link",
        value: function() {
          var _link = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(account, options) {
            var _context3, _user$get2;
            var message, user, solAddress, SolAddress, query, solAddressRecord, data, signature, authData;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisSol2.getSigningData();
                    _context4.next = 3;
                    return _ParseUser.default.current();
                  case 3:
                    user = _context4.sent;
                    solAddress = account;
                    SolAddress = _ParseObject.default.extend("_SolAddress");
                    query = new _ParseQuery.default(SolAddress);
                    _context4.next = 9;
                    return query.get(solAddress).catch(function() {
                      return null;
                    });
                  case 9:
                    solAddressRecord = _context4.sent;
                    if (solAddressRecord) {
                      _context4.next = 20;
                      break;
                    }
                    _context4.next = 13;
                    return (0, _createSigningData.default)(message);
                  case 13:
                    data = _context4.sent;
                    _context4.next = 16;
                    return MoralisSol2.sign(solAddress, data);
                  case 16:
                    signature = _context4.sent;
                    authData = {
                      id: solAddress,
                      signature,
                      data
                    };
                    _context4.next = 20;
                    return user.linkWith("moralisSol", {
                      authData
                    });
                  case 20:
                    user.set("SolAccounts", uniq((0, _concat.default)(_context3 = [solAddress]).call(_context3, (_user$get2 = user.get("SolAccounts")) !== null && _user$get2 !== void 0 ? _user$get2 : [])));
                    user.set("solAddress", solAddress);
                    _context4.next = 24;
                    return user.save();
                  case 24:
                    return _context4.abrupt("return", user);
                  case 25:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee2);
          }));
          return function() {
            return _link.apply(this, arguments);
          };
        }()
      }, {
        key: "unlink",
        value: function() {
          var _unlink = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3(account) {
            var _user$get3;
            var accountsLower, SolAddress, query, solAddressRecord, user, accounts, nextAccounts;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    accountsLower = account;
                    SolAddress = _ParseObject.default.extend("_SolAddress");
                    query = new _ParseQuery.default(SolAddress);
                    _context5.next = 5;
                    return query.get(accountsLower);
                  case 5:
                    solAddressRecord = _context5.sent;
                    _context5.next = 8;
                    return solAddressRecord.destroy();
                  case 8:
                    _context5.next = 10;
                    return _ParseUser.default.current();
                  case 10:
                    user = _context5.sent;
                    accounts = (_user$get3 = user.get("solAccounts")) !== null && _user$get3 !== void 0 ? _user$get3 : [];
                    nextAccounts = (0, _filter.default)(accounts).call(accounts, function(v2) {
                      return v2 !== accountsLower;
                    });
                    user.set("solAccounts", nextAccounts);
                    user.set("solAddress", nextAccounts[0]);
                    _context5.next = 17;
                    return user._unlinkFrom("moralisSol");
                  case 17:
                    _context5.next = 19;
                    return user.save();
                  case 19:
                    return _context5.abrupt("return", user);
                  case 20:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee3);
          }));
          return function() {
            return _unlink.apply(this, arguments);
          };
        }()
      }, {
        key: "sign",
        value: function() {
          var _sign = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(message) {
            var phantom, encodedMessage, signedMessage;
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _context6.next = 2;
                    return MoralisSol2.enable();
                  case 2:
                    phantom = _context6.sent;
                    encodedMessage = new TextEncoder().encode(message);
                    _context6.next = 6;
                    return phantom.signMessage(encodedMessage, "utf8");
                  case 6:
                    signedMessage = _context6.sent;
                    return _context6.abrupt("return", base64.encode(signedMessage.signature));
                  case 8:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee4);
          }));
          return function() {
            return _sign.apply(this, arguments);
          };
        }()
      }, {
        key: "getSigningData",
        value: function() {
          return "Moralis Authentication";
        }
      }]);
      return MoralisSol2;
    }();
    (0, _defineProperty2.default)(MoralisSol, "enable", /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5() {
      var provider;
      return _regenerator.default.wrap(function(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (!(window && "solana" in window)) {
                _context8.next = 17;
                break;
              }
              provider = window.solana;
              if (!provider.isPhantom) {
                _context8.next = 17;
                break;
              }
              _context8.prev = 3;
              _context8.next = 6;
              return provider.connect({
                onlyIfTrusted: true
              });
            case 6:
              _context8.next = 16;
              break;
            case 8:
              _context8.prev = 8;
              _context8.t0 = _context8["catch"](3);
              if (!(_context8.t0.message === "User rejected the request.")) {
                _context8.next = 15;
                break;
              }
              _context8.next = 13;
              return provider.connect();
            case 13:
              _context8.next = 16;
              break;
            case 15:
              throw _context8.t0;
            case 16:
              return _context8.abrupt("return", provider);
            case 17:
              throw new Error("Phantom wallet not available");
            case 18:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee5, null, [[3, 8]]);
    })));
    function uniq(arr) {
      return (0, _filter.default)(arr).call(arr, function(v2, i2) {
        return (0, _indexOf.default)(arr).call(arr, v2) === i2;
      });
    }
    var _default = MoralisSol;
    exports.default = _default;
  }
});

// node_modules/core-js-pure/internals/is-integral-number.js
var require_is_integral_number = __commonJS({
  "node_modules/core-js-pure/internals/is-integral-number.js"(exports, module) {
    init_react();
    var isObject = require_is_object();
    var floor = Math.floor;
    module.exports = Number.isInteger || function isInteger(it) {
      return !isObject(it) && isFinite(it) && floor(it) === it;
    };
  }
});

// node_modules/core-js-pure/modules/es.number.is-integer.js
var require_es_number_is_integer = __commonJS({
  "node_modules/core-js-pure/modules/es.number.is-integer.js"() {
    init_react();
    var $ = require_export();
    var isIntegralNumber = require_is_integral_number();
    $({ target: "Number", stat: true }, {
      isInteger: isIntegralNumber
    });
  }
});

// node_modules/core-js-pure/es/number/is-integer.js
var require_is_integer = __commonJS({
  "node_modules/core-js-pure/es/number/is-integer.js"(exports, module) {
    init_react();
    require_es_number_is_integer();
    var path = require_path();
    module.exports = path.Number.isInteger;
  }
});

// node_modules/core-js-pure/stable/number/is-integer.js
var require_is_integer2 = __commonJS({
  "node_modules/core-js-pure/stable/number/is-integer.js"(exports, module) {
    init_react();
    var parent = require_is_integer();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/number/is-integer.js
var require_is_integer3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/number/is-integer.js"(exports, module) {
    init_react();
    module.exports = require_is_integer2();
  }
});

// node_modules/moralis/lib/browser/TransferUtils.js
var require_TransferUtils = __commonJS({
  "node_modules/moralis/lib/browser/TransferUtils.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _keys = _interopRequireDefault(require_keys3());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _isInteger = _interopRequireDefault(require_is_integer3());
    var supportedTypes = ["native", "erc20", "erc721", "erc1155"];
    var ERC1155TransferABI = [{
      inputs: [{
        internalType: "address",
        name: "from",
        type: "address"
      }, {
        internalType: "address",
        name: "to",
        type: "address"
      }, {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }, {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }, {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }],
      outputs: [{
        name: "",
        type: "bool"
      }],
      name: "safeTransferFrom",
      type: "function",
      constant: false,
      payable: false
    }, {
      inputs: [{
        internalType: "address",
        name: "from",
        type: "address"
      }, {
        internalType: "address",
        name: "to",
        type: "address"
      }, {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }, {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }],
      outputs: [{
        name: "",
        type: "bool"
      }],
      name: "transferFrom",
      type: "function",
      constant: false,
      payable: false
    }];
    var ERC721TransferABI = [{
      inputs: [{
        internalType: "address",
        name: "from",
        type: "address"
      }, {
        internalType: "address",
        name: "to",
        type: "address"
      }, {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }],
      outputs: [{
        name: "",
        type: "bool"
      }],
      name: "safeTransferFrom",
      type: "function",
      constant: false,
      payable: false
    }, {
      inputs: [{
        internalType: "address",
        name: "from",
        type: "address"
      }, {
        internalType: "address",
        name: "to",
        type: "address"
      }, {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }],
      outputs: [{
        name: "",
        type: "bool"
      }],
      name: "transferFrom",
      type: "function",
      constant: false,
      payable: false
    }];
    var ERC20TransferABI = [{
      constant: false,
      inputs: [{
        name: "_to",
        type: "address"
      }, {
        name: "_value",
        type: "uint256"
      }],
      name: "transfer",
      outputs: [{
        name: "",
        type: "bool"
      }],
      payable: false,
      stateMutability: "nonpayable",
      type: "function"
    }, {
      constant: true,
      inputs: [{
        name: "_owner",
        type: "address"
      }],
      name: "balanceOf",
      outputs: [{
        name: "balance",
        type: "uint256"
      }],
      payable: false,
      stateMutability: "view",
      type: "function"
    }];
    var tokenParams = {
      native: {
        receiver: "",
        amount: ""
      },
      erc20: {
        contractAddress: "",
        receiver: "",
        amount: ""
      },
      erc721: {
        contractAddress: "",
        receiver: "",
        tokenId: ""
      },
      erc1155: {
        contractAddress: "",
        receiver: "",
        tokenId: "",
        amount: ""
      }
    };
    var isNotEmpty = function(value) {
      return typeof value !== "undefined" && value ? true : false;
    };
    var validateInput = function(type, payload) {
      var errors = [];
      var parameters = tokenParams[type];
      for (var _i = 0, _Object$keys = (0, _keys.default)(parameters); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        if (!isNotEmpty(payload[key])) {
          errors.push("".concat(key, " is required"));
        }
      }
      if (errors.length > 0) {
        throw errors;
      }
    };
    var isSupportedType = function(type) {
      if ((0, _indexOf.default)(supportedTypes).call(supportedTypes, type) === -1)
        throw "Unsupported type";
      return true;
    };
    var isUint256 = function(tokenId) {
      if (!(0, _isInteger.default)(+tokenId) || +tokenId < 0)
        throw new Error("Invalid token Id");
      return true;
    };
    module.exports = {
      abi: {
        erc1155: ERC1155TransferABI,
        erc721: ERC721TransferABI,
        erc20: ERC20TransferABI
      },
      validateInput,
      isSupportedType,
      isNotEmpty,
      isUint256
    };
  }
});

// node_modules/moralis/lib/browser/utils/convert.js
var require_convert = __commonJS({
  "node_modules/moralis/lib/browser/utils/convert.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _parseInt2 = _interopRequireDefault(require_parse_int3());
    function fromDecimalToHex(number) {
      if (typeof number !== "number")
        throw "The input provided should be a number";
      return "0x".concat(number.toString(16));
    }
    function fromHexToDecimal(hex) {
      if (typeof hex !== "string")
        throw "The input provided should be a string";
      return (0, _parseInt2.default)(hex, 16);
    }
    module.exports = {
      fromDecimalToHex,
      fromHexToDecimal
    };
  }
});

// node_modules/moralis/lib/browser/utils/verifyChainId.js
var require_verifyChainId = __commonJS({
  "node_modules/moralis/lib/browser/utils/verifyChainId.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _convert = require_convert();
    function verifyChainId(chainId) {
      if (typeof chainId === "number")
        chainId = (0, _convert.fromDecimalToHex)(chainId);
      return chainId;
    }
    var _default = verifyChainId;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/events.js
var require_events2 = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/events.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EthereumEvents = exports.ConnectorEvents = void 0;
    var _freeze = _interopRequireDefault(require_freeze3());
    var EthereumEvents = (0, _freeze.default)({
      CONNECT: "connect",
      DISCONNECT: "disconnect",
      CHAIN_CHANGED: "chainChanged",
      ACCOUNTS_CHANGED: "accountsChanged"
    });
    exports.EthereumEvents = EthereumEvents;
    var ConnectorEvents = (0, _freeze.default)({
      CONNECT: "connect",
      DISCONNECT: "disconnect",
      CHAIN_CHANGED: "chainChanged",
      ACCOUNT_CHANGED: "accountChanged"
    });
    exports.ConnectorEvents = ConnectorEvents;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/AbstractWeb3Connector.js
var require_AbstractWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/AbstractWeb3Connector.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _bind = _interopRequireDefault(require_bind7());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _events = _interopRequireDefault(require_events());
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    var _events2 = require_events2();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var AbstractWeb3Connector = /* @__PURE__ */ function(_EventEmitter) {
      (0, _inherits2.default)(AbstractWeb3Connector2, _EventEmitter);
      var _super = _createSuper(AbstractWeb3Connector2);
      function AbstractWeb3Connector2() {
        var _context, _context2, _context3, _context4;
        var _this;
        (0, _classCallCheck2.default)(this, AbstractWeb3Connector2);
        _this = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", "abstract");
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "network", "evm");
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "account", null);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "chainId", null);
        _this.handleAccountsChanged = (0, _bind.default)(_context = _this.handleAccountsChanged).call(_context, (0, _assertThisInitialized2.default)(_this));
        _this.handleChainChanged = (0, _bind.default)(_context2 = _this.handleChainChanged).call(_context2, (0, _assertThisInitialized2.default)(_this));
        _this.handleConnect = (0, _bind.default)(_context3 = _this.handleConnect).call(_context3, (0, _assertThisInitialized2.default)(_this));
        _this.handleDisconnect = (0, _bind.default)(_context4 = _this.handleDisconnect).call(_context4, (0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      (0, _createClass2.default)(AbstractWeb3Connector2, [{
        key: "subscribeToEvents",
        value: function(provider) {
          if (provider && provider.on) {
            provider.on(_events2.EthereumEvents.CHAIN_CHANGED, this.handleChainChanged);
            provider.on(_events2.EthereumEvents.ACCOUNTS_CHANGED, this.handleAccountsChanged);
            provider.on(_events2.EthereumEvents.CONNECT, this.handleConnect);
            provider.on(_events2.EthereumEvents.DISCONNECT, this.handleDisconnect);
          }
        }
      }, {
        key: "unsubscribeToEvents",
        value: function(provider) {
          if (provider && provider.removeListener) {
            provider.removeListener(_events2.EthereumEvents.CHAIN_CHANGED, this.handleChainChanged);
            provider.removeListener(_events2.EthereumEvents.ACCOUNTS_CHANGED, this.handleAccountsChanged);
            provider.removeListener(_events2.EthereumEvents.CONNECT, this.handleConnect);
            provider.removeListener(_events2.EthereumEvents.DISCONNECT, this.handleDisconnect);
          }
        }
      }, {
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    throw new Error("Not implemented: activate()");
                  case 1:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }, {
        key: "handleAccountsChanged",
        value: function(accounts) {
          var account = accounts && accounts[0] ? accounts[0].toLowerCase() : null;
          this.account = account;
          this.emit(_events2.ConnectorEvents.ACCOUNT_CHANGED, account);
        }
      }, {
        key: "handleChainChanged",
        value: function(chainId) {
          var newChainId = (0, _verifyChainId.default)(chainId);
          this.chainId = newChainId;
          this.emit(_events2.ConnectorEvents.CHAIN_CHANGED, newChainId);
        }
      }, {
        key: "handleConnect",
        value: function(connectInfo) {
          this.emit(_events2.ConnectorEvents.CONNECT, connectInfo);
        }
      }, {
        key: "handleDisconnect",
        value: function(error) {
          this.emit(_events2.ConnectorEvents.DISCONNECT, error);
        }
      }, {
        key: "deactivate",
        value: function() {
          var _deactivate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    this.unsubscribeToEvents(this.provider);
                    this.account = null;
                    this.chainId = null;
                  case 3:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _deactivate.apply(this, arguments);
          };
        }()
      }]);
      return AbstractWeb3Connector2;
    }(_events.default);
    var _default = AbstractWeb3Connector;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/MoralisRpcs.js
var require_MoralisRpcs = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/MoralisRpcs.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getMoralisRpcs = void 0;
    var getMoralisRpcs = function(speedyNodeKey) {
      return {
        1: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/mainnet"),
        3: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/ropsten"),
        4: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/rinkeby"),
        5: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/goerli"),
        42: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/kovan"),
        137: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/polygon/mainnet"),
        80001: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/polygon/mumbai"),
        56: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/bsc/mainnet"),
        97: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/bsc/testnet"),
        43114: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/avalanche/mainnet"),
        43113: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/avalanche/testnet"),
        250: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/fantom/mainnet")
      };
    };
    exports.getMoralisRpcs = getMoralisRpcs;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/WalletConnectWeb3Connector.js
var require_WalletConnectWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/WalletConnectWeb3Connector.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.WalletConnectEvent = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _concat = _interopRequireDefault(require_concat4());
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    var _events = require_events2();
    var _MoralisRpcs = require_MoralisRpcs();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var WalletConnectEvent = (0, _freeze.default)({
      ACCOUNTS_CHANGED: "accountsChanged",
      CHAIN_CHANGED: "chainChanged",
      DISCONNECT: "disconnect"
    });
    exports.WalletConnectEvent = WalletConnectEvent;
    var WalletConnectWeb3Connector = /* @__PURE__ */ function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(WalletConnectWeb3Connector2, _AbstractWeb3Connecto);
      var _super = _createSuper(WalletConnectWeb3Connector2);
      function WalletConnectWeb3Connector2() {
        var _context;
        var _this;
        (0, _classCallCheck2.default)(this, WalletConnectWeb3Connector2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, (0, _concat.default)(_context = [this]).call(_context, args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", "WalletConnect");
        return _this;
      }
      (0, _createClass2.default)(WalletConnectWeb3Connector2, [{
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
            var _ref, providedChainId, mobileLinks, newSession, WalletConnectProvider, config, _require, _window, _window$WalletConnect, accounts, account, chainId, verifiedChainId, _args = arguments;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _ref = _args.length > 0 && _args[0] !== void 0 ? _args[0] : {}, providedChainId = _ref.chainId, mobileLinks = _ref.mobileLinks, newSession = _ref.newSession;
                    if (newSession) {
                      this.cleanup();
                    }
                    if (this.provider) {
                      _context2.next = 9;
                      break;
                    }
                    config = {
                      rpc: (0, _MoralisRpcs.getMoralisRpcs)("WalletConnect"),
                      chainId: providedChainId,
                      qrcodeModalOptions: {
                        mobileLinks
                      }
                    };
                    try {
                      WalletConnectProvider = (_require = __require("@walletconnect/web3-provider")) === null || _require === void 0 ? void 0 : _require.default;
                    } catch (error) {
                    }
                    if (!WalletConnectProvider) {
                      WalletConnectProvider = (_window = window) === null || _window === void 0 ? void 0 : (_window$WalletConnect = _window.WalletConnectProvider) === null || _window$WalletConnect === void 0 ? void 0 : _window$WalletConnect.default;
                    }
                    if (WalletConnectProvider) {
                      _context2.next = 8;
                      break;
                    }
                    throw new Error('Cannot enable via WalletConnect: dependency "@walletconnect/web3-provider" is missing');
                  case 8:
                    if (typeof WalletConnectProvider === "function") {
                      this.provider = new WalletConnectProvider(config);
                    } else {
                      this.provider = new window.WalletConnectProvider(config);
                    }
                  case 9:
                    if (this.provider) {
                      _context2.next = 11;
                      break;
                    }
                    throw new Error("Could not connect via WalletConnect, error in connecting to provider");
                  case 11:
                    _context2.next = 13;
                    return this.provider.enable();
                  case 13:
                    accounts = _context2.sent;
                    account = accounts[0].toLowerCase();
                    chainId = this.provider.chainId;
                    verifiedChainId = (0, _verifyChainId.default)(chainId);
                    this.account = account;
                    this.chainId = verifiedChainId;
                    this.subscribeToEvents(this.provider);
                    return _context2.abrupt("return", {
                      provider: this.provider,
                      account,
                      chainId: verifiedChainId
                    });
                  case 21:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }, {
        key: "cleanup",
        value: function() {
          try {
            if (window) {
              window.localStorage.removeItem("walletconnect");
            }
          } catch (error) {
          }
        }
      }, {
        key: "deactivate",
        value: function() {
          var _deactivate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    this.unsubscribeToEvents(this.provider);
                    if (!this.provider) {
                      _context3.next = 9;
                      break;
                    }
                    _context3.prev = 2;
                    _context3.next = 5;
                    return this.provider.close();
                  case 5:
                    _context3.next = 9;
                    break;
                  case 7:
                    _context3.prev = 7;
                    _context3.t0 = _context3["catch"](2);
                  case 9:
                    this.account = null;
                    this.chainId = null;
                    this.provider = null;
                  case 12:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this, [[2, 7]]);
          }));
          return function() {
            return _deactivate.apply(this, arguments);
          };
        }()
      }]);
      return WalletConnectWeb3Connector2;
    }(_AbstractWeb3Connector.default);
    var _default = WalletConnectWeb3Connector;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/InjectedWeb3Connector.js
var require_InjectedWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/InjectedWeb3Connector.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.InjectedEvents = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _wrapNativeSuper2 = _interopRequireDefault(require_wrapNativeSuper());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _concat = _interopRequireDefault(require_concat4());
    var _promise = _interopRequireDefault(require_promise3());
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    var _events = _interopRequireDefault(require_events());
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var InjectedEvents = (0, _freeze.default)({
      ACCOUNTS_CHANGED: "accountsChanged",
      CHAIN_CHANGED: "chainChanged",
      CONNECT: "connect",
      DISCONNECT: "disconnect"
    });
    exports.InjectedEvents = InjectedEvents;
    var NoEthereumProviderError = /* @__PURE__ */ function(_Error) {
      (0, _inherits2.default)(NoEthereumProviderError2, _Error);
      var _super = _createSuper(NoEthereumProviderError2);
      function NoEthereumProviderError2() {
        var _this;
        (0, _classCallCheck2.default)(this, NoEthereumProviderError2);
        _this = _super.call(this);
        _this.message = "Non ethereum enabled browser";
        return _this;
      }
      return (0, _createClass2.default)(NoEthereumProviderError2);
    }(/* @__PURE__ */ (0, _wrapNativeSuper2.default)(Error));
    var InjectedWeb3Connector = /* @__PURE__ */ function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(InjectedWeb3Connector2, _AbstractWeb3Connecto);
      var _super2 = _createSuper(InjectedWeb3Connector2);
      function InjectedWeb3Connector2() {
        var _context;
        var _this2;
        (0, _classCallCheck2.default)(this, InjectedWeb3Connector2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this2 = _super2.call.apply(_super2, (0, _concat.default)(_context = [this]).call(_context, args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "type", "injected");
        return _this2;
      }
      (0, _createClass2.default)(InjectedWeb3Connector2, [{
        key: "verifyEthereumBrowser",
        value: function() {
          var _window;
          if (!((_window = window) !== null && _window !== void 0 && _window.ethereum)) {
            throw new NoEthereumProviderError();
          }
        }
      }, {
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
            var _yield$Promise$all, _yield$Promise$all2, accounts, chainId, account, provider;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    this.verifyEthereumBrowser();
                    _context2.next = 3;
                    return _promise.default.all([window.ethereum.request({
                      method: "eth_requestAccounts"
                    }), window.ethereum.request({
                      method: "eth_chainId"
                    })]);
                  case 3:
                    _yield$Promise$all = _context2.sent;
                    _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2);
                    accounts = _yield$Promise$all2[0];
                    chainId = _yield$Promise$all2[1];
                    account = accounts[0] ? accounts[0].toLowerCase() : null;
                    provider = window.ethereum;
                    this.chainId = chainId;
                    this.account = account;
                    this.provider = provider;
                    this.subscribeToEvents(provider);
                    return _context2.abrupt("return", {
                      provider,
                      chainId,
                      account
                    });
                  case 14:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }, {
        key: "switchNetwork",
        value: function() {
          var _switchNetwork = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(chainId) {
            var currentNetwork;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    this.verifyEthereumBrowser();
                    chainId = (0, _verifyChainId.default)(chainId);
                    currentNetwork = this.chainId;
                    if (!(currentNetwork === chainId)) {
                      _context3.next = 5;
                      break;
                    }
                    return _context3.abrupt("return");
                  case 5:
                    _context3.next = 7;
                    return window.ethereum.request({
                      method: "wallet_switchEthereumChain",
                      params: [{
                        chainId
                      }]
                    });
                  case 7:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _switchNetwork.apply(this, arguments);
          };
        }()
      }, {
        key: "addNetwork",
        value: function() {
          var _addNetwork = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3(chainId, chainName, currencyName, currencySymbol, rpcUrl, blockExplorerUrl) {
            var newchainId;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    this.verifyEthereumBrowser();
                    newchainId = (0, _verifyChainId.default)(chainId);
                    _context4.next = 4;
                    return window.ethereum.request({
                      method: "wallet_addEthereumChain",
                      params: [{
                        chainId: newchainId,
                        chainName,
                        nativeCurrency: {
                          name: currencyName,
                          symbol: currencySymbol,
                          decimals: 18
                        },
                        rpcUrls: [rpcUrl],
                        blockExplorerUrls: blockExplorerUrl ? [blockExplorerUrl] : null
                      }]
                    });
                  case 4:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee3, this);
          }));
          return function() {
            return _addNetwork.apply(this, arguments);
          };
        }()
      }]);
      return InjectedWeb3Connector2;
    }(_AbstractWeb3Connector.default);
    var _default = InjectedWeb3Connector;
    exports.default = _default;
  }
});

// node_modules/core-js-pure/internals/native-url.js
var require_native_url = __commonJS({
  "node_modules/core-js-pure/internals/native-url.js"(exports, module) {
    init_react();
    var fails = require_fails();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_PURE = require_is_pure();
    var ITERATOR = wellKnownSymbol("iterator");
    module.exports = !fails(function() {
      var url = new URL("b?a=1&b=2&c=3", "http://a");
      var searchParams = url.searchParams;
      var result = "";
      url.pathname = "c%20d";
      searchParams.forEach(function(value, key) {
        searchParams["delete"]("b");
        result += key + value;
      });
      return IS_PURE && !url.toJSON || !searchParams.sort || url.href !== "http://a/c%20d?a=1&c=3" || searchParams.get("c") !== "3" || String(new URLSearchParams("?a=1")) !== "a=1" || !searchParams[ITERATOR] || new URL("https://a@b").username !== "a" || new URLSearchParams(new URLSearchParams("a=b")).get("a") !== "b" || new URL("http://\u0442\u0435\u0441\u0442").host !== "xn--e1aybc" || new URL("http://a#\u0431").hash !== "#%D0%B1" || result !== "a1c3" || new URL("http://x", void 0).host !== "x";
    });
  }
});

// node_modules/core-js-pure/internals/object-assign.js
var require_object_assign = __commonJS({
  "node_modules/core-js-pure/internals/object-assign.js"(exports, module) {
    "use strict";
    init_react();
    var DESCRIPTORS = require_descriptors();
    var uncurryThis = require_function_uncurry_this();
    var call = require_function_call();
    var fails = require_fails();
    var objectKeys = require_object_keys();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var toObject = require_to_object();
    var IndexedObject = require_indexed_object();
    var $assign = Object.assign;
    var defineProperty = Object.defineProperty;
    var concat = uncurryThis([].concat);
    module.exports = !$assign || fails(function() {
      if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, "a", {
        enumerable: true,
        get: function() {
          defineProperty(this, "b", {
            value: 3,
            enumerable: false
          });
        }
      }), { b: 2 })).b !== 1)
        return true;
      var A2 = {};
      var B2 = {};
      var symbol = Symbol();
      var alphabet = "abcdefghijklmnopqrst";
      A2[symbol] = 7;
      alphabet.split("").forEach(function(chr) {
        B2[chr] = chr;
      });
      return $assign({}, A2)[symbol] != 7 || objectKeys($assign({}, B2)).join("") != alphabet;
    }) ? function assign(target, source) {
      var T = toObject(target);
      var argumentsLength = arguments.length;
      var index = 1;
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      var propertyIsEnumerable = propertyIsEnumerableModule.f;
      while (argumentsLength > index) {
        var S2 = IndexedObject(arguments[index++]);
        var keys = getOwnPropertySymbols ? concat(objectKeys(S2), getOwnPropertySymbols(S2)) : objectKeys(S2);
        var length = keys.length;
        var j2 = 0;
        var key;
        while (length > j2) {
          key = keys[j2++];
          if (!DESCRIPTORS || call(propertyIsEnumerable, S2, key))
            T[key] = S2[key];
        }
      }
      return T;
    } : $assign;
  }
});

// node_modules/core-js-pure/internals/string-punycode-to-ascii.js
var require_string_punycode_to_ascii = __commonJS({
  "node_modules/core-js-pure/internals/string-punycode-to-ascii.js"(exports, module) {
    "use strict";
    init_react();
    var global2 = require_global();
    var uncurryThis = require_function_uncurry_this();
    var maxInt = 2147483647;
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128;
    var delimiter = "-";
    var regexNonASCII = /[^\0-\u007E]/;
    var regexSeparators = /[.\u3002\uFF0E\uFF61]/g;
    var OVERFLOW_ERROR = "Overflow: input needs wider integers to process";
    var baseMinusTMin = base - tMin;
    var RangeError = global2.RangeError;
    var exec = uncurryThis(regexSeparators.exec);
    var floor = Math.floor;
    var fromCharCode = String.fromCharCode;
    var charCodeAt = uncurryThis("".charCodeAt);
    var join = uncurryThis([].join);
    var push = uncurryThis([].push);
    var replace = uncurryThis("".replace);
    var split = uncurryThis("".split);
    var toLowerCase = uncurryThis("".toLowerCase);
    var ucs2decode = function(string) {
      var output = [];
      var counter = 0;
      var length = string.length;
      while (counter < length) {
        var value = charCodeAt(string, counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
          var extra = charCodeAt(string, counter++);
          if ((extra & 64512) == 56320) {
            push(output, ((value & 1023) << 10) + (extra & 1023) + 65536);
          } else {
            push(output, value);
            counter--;
          }
        } else {
          push(output, value);
        }
      }
      return output;
    };
    var digitToBasic = function(digit) {
      return digit + 22 + 75 * (digit < 26);
    };
    var adapt = function(delta, numPoints, firstTime) {
      var k2 = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      while (delta > baseMinusTMin * tMax >> 1) {
        delta = floor(delta / baseMinusTMin);
        k2 += base;
      }
      return floor(k2 + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    var encode = function(input) {
      var output = [];
      input = ucs2decode(input);
      var inputLength = input.length;
      var n2 = initialN;
      var delta = 0;
      var bias = initialBias;
      var i2, currentValue;
      for (i2 = 0; i2 < input.length; i2++) {
        currentValue = input[i2];
        if (currentValue < 128) {
          push(output, fromCharCode(currentValue));
        }
      }
      var basicLength = output.length;
      var handledCPCount = basicLength;
      if (basicLength) {
        push(output, delimiter);
      }
      while (handledCPCount < inputLength) {
        var m = maxInt;
        for (i2 = 0; i2 < input.length; i2++) {
          currentValue = input[i2];
          if (currentValue >= n2 && currentValue < m) {
            m = currentValue;
          }
        }
        var handledCPCountPlusOne = handledCPCount + 1;
        if (m - n2 > floor((maxInt - delta) / handledCPCountPlusOne)) {
          throw RangeError(OVERFLOW_ERROR);
        }
        delta += (m - n2) * handledCPCountPlusOne;
        n2 = m;
        for (i2 = 0; i2 < input.length; i2++) {
          currentValue = input[i2];
          if (currentValue < n2 && ++delta > maxInt) {
            throw RangeError(OVERFLOW_ERROR);
          }
          if (currentValue == n2) {
            var q2 = delta;
            var k2 = base;
            while (true) {
              var t2 = k2 <= bias ? tMin : k2 >= bias + tMax ? tMax : k2 - bias;
              if (q2 < t2)
                break;
              var qMinusT = q2 - t2;
              var baseMinusT = base - t2;
              push(output, fromCharCode(digitToBasic(t2 + qMinusT % baseMinusT)));
              q2 = floor(qMinusT / baseMinusT);
              k2 += base;
            }
            push(output, fromCharCode(digitToBasic(q2)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            handledCPCount++;
          }
        }
        delta++;
        n2++;
      }
      return join(output, "");
    };
    module.exports = function(input) {
      var encoded = [];
      var labels = split(replace(toLowerCase(input), regexSeparators, "."), ".");
      var i2, label;
      for (i2 = 0; i2 < labels.length; i2++) {
        label = labels[i2];
        push(encoded, exec(regexNonASCII, label) ? "xn--" + encode(label) : label);
      }
      return join(encoded, ".");
    };
  }
});

// node_modules/core-js-pure/modules/web.url-search-params.js
var require_web_url_search_params = __commonJS({
  "node_modules/core-js-pure/modules/web.url-search-params.js"(exports, module) {
    "use strict";
    init_react();
    require_es_array_iterator();
    var $ = require_export();
    var global2 = require_global();
    var getBuiltIn = require_get_built_in();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var USE_NATIVE_URL = require_native_url();
    var redefine = require_redefine();
    var redefineAll = require_redefine_all();
    var setToStringTag = require_set_to_string_tag();
    var createIteratorConstructor = require_create_iterator_constructor();
    var InternalStateModule = require_internal_state();
    var anInstance = require_an_instance();
    var isCallable = require_is_callable();
    var hasOwn = require_has_own_property();
    var bind = require_function_bind_context();
    var classof = require_classof();
    var anObject = require_an_object();
    var isObject = require_is_object();
    var $toString = require_to_string();
    var create = require_object_create();
    var createPropertyDescriptor = require_create_property_descriptor();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var validateArgumentsLength = require_validate_arguments_length();
    var wellKnownSymbol = require_well_known_symbol();
    var arraySort = require_array_sort();
    var ITERATOR = wellKnownSymbol("iterator");
    var URL_SEARCH_PARAMS = "URLSearchParams";
    var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + "Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
    var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
    var n$Fetch = getBuiltIn("fetch");
    var N$Request = getBuiltIn("Request");
    var Headers = getBuiltIn("Headers");
    var RequestPrototype = N$Request && N$Request.prototype;
    var HeadersPrototype = Headers && Headers.prototype;
    var RegExp2 = global2.RegExp;
    var TypeError2 = global2.TypeError;
    var decodeURIComponent = global2.decodeURIComponent;
    var encodeURIComponent2 = global2.encodeURIComponent;
    var charAt = uncurryThis("".charAt);
    var join = uncurryThis([].join);
    var push = uncurryThis([].push);
    var replace = uncurryThis("".replace);
    var shift = uncurryThis([].shift);
    var splice = uncurryThis([].splice);
    var split = uncurryThis("".split);
    var stringSlice = uncurryThis("".slice);
    var plus = /\+/g;
    var sequences = Array(4);
    var percentSequence = function(bytes) {
      return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp2("((?:%[\\da-f]{2}){" + bytes + "})", "gi"));
    };
    var percentDecode = function(sequence) {
      try {
        return decodeURIComponent(sequence);
      } catch (error) {
        return sequence;
      }
    };
    var deserialize = function(it) {
      var result = replace(it, plus, " ");
      var bytes = 4;
      try {
        return decodeURIComponent(result);
      } catch (error) {
        while (bytes) {
          result = replace(result, percentSequence(bytes--), percentDecode);
        }
        return result;
      }
    };
    var find = /[!'()~]|%20/g;
    var replacements = {
      "!": "%21",
      "'": "%27",
      "(": "%28",
      ")": "%29",
      "~": "%7E",
      "%20": "+"
    };
    var replacer = function(match) {
      return replacements[match];
    };
    var serialize = function(it) {
      return replace(encodeURIComponent2(it), find, replacer);
    };
    var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
      setInternalState(this, {
        type: URL_SEARCH_PARAMS_ITERATOR,
        iterator: getIterator(getInternalParamsState(params).entries),
        kind
      });
    }, "Iterator", function next() {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var step = state.iterator.next();
      var entry = step.value;
      if (!step.done) {
        step.value = kind === "keys" ? entry.key : kind === "values" ? entry.value : [entry.key, entry.value];
      }
      return step;
    }, true);
    var URLSearchParamsState = function(init) {
      this.entries = [];
      this.url = null;
      if (init !== void 0) {
        if (isObject(init))
          this.parseObject(init);
        else
          this.parseQuery(typeof init == "string" ? charAt(init, 0) === "?" ? stringSlice(init, 1) : init : $toString(init));
      }
    };
    URLSearchParamsState.prototype = {
      type: URL_SEARCH_PARAMS,
      bindURL: function(url) {
        this.url = url;
        this.update();
      },
      parseObject: function(object) {
        var iteratorMethod = getIteratorMethod(object);
        var iterator, next, step, entryIterator, entryNext, first, second;
        if (iteratorMethod) {
          iterator = getIterator(object, iteratorMethod);
          next = iterator.next;
          while (!(step = call(next, iterator)).done) {
            entryIterator = getIterator(anObject(step.value));
            entryNext = entryIterator.next;
            if ((first = call(entryNext, entryIterator)).done || (second = call(entryNext, entryIterator)).done || !call(entryNext, entryIterator).done)
              throw TypeError2("Expected sequence with length 2");
            push(this.entries, { key: $toString(first.value), value: $toString(second.value) });
          }
        } else
          for (var key in object)
            if (hasOwn(object, key)) {
              push(this.entries, { key, value: $toString(object[key]) });
            }
      },
      parseQuery: function(query) {
        if (query) {
          var attributes = split(query, "&");
          var index = 0;
          var attribute, entry;
          while (index < attributes.length) {
            attribute = attributes[index++];
            if (attribute.length) {
              entry = split(attribute, "=");
              push(this.entries, {
                key: deserialize(shift(entry)),
                value: deserialize(join(entry, "="))
              });
            }
          }
        }
      },
      serialize: function() {
        var entries = this.entries;
        var result = [];
        var index = 0;
        var entry;
        while (index < entries.length) {
          entry = entries[index++];
          push(result, serialize(entry.key) + "=" + serialize(entry.value));
        }
        return join(result, "&");
      },
      update: function() {
        this.entries.length = 0;
        this.parseQuery(this.url.query);
      },
      updateURL: function() {
        if (this.url)
          this.url.update();
      }
    };
    var URLSearchParamsConstructor = function URLSearchParams2() {
      anInstance(this, URLSearchParamsPrototype);
      var init = arguments.length > 0 ? arguments[0] : void 0;
      setInternalState(this, new URLSearchParamsState(init));
    };
    var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
    redefineAll(URLSearchParamsPrototype, {
      append: function append(name, value) {
        validateArgumentsLength(arguments.length, 2);
        var state = getInternalParamsState(this);
        push(state.entries, { key: $toString(name), value: $toString(value) });
        state.updateURL();
      },
      "delete": function(name) {
        validateArgumentsLength(arguments.length, 1);
        var state = getInternalParamsState(this);
        var entries = state.entries;
        var key = $toString(name);
        var index = 0;
        while (index < entries.length) {
          if (entries[index].key === key)
            splice(entries, index, 1);
          else
            index++;
        }
        state.updateURL();
      },
      get: function get(name) {
        validateArgumentsLength(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key = $toString(name);
        var index = 0;
        for (; index < entries.length; index++) {
          if (entries[index].key === key)
            return entries[index].value;
        }
        return null;
      },
      getAll: function getAll(name) {
        validateArgumentsLength(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key = $toString(name);
        var result = [];
        var index = 0;
        for (; index < entries.length; index++) {
          if (entries[index].key === key)
            push(result, entries[index].value);
        }
        return result;
      },
      has: function has(name) {
        validateArgumentsLength(arguments.length, 1);
        var entries = getInternalParamsState(this).entries;
        var key = $toString(name);
        var index = 0;
        while (index < entries.length) {
          if (entries[index++].key === key)
            return true;
        }
        return false;
      },
      set: function set(name, value) {
        validateArgumentsLength(arguments.length, 1);
        var state = getInternalParamsState(this);
        var entries = state.entries;
        var found = false;
        var key = $toString(name);
        var val = $toString(value);
        var index = 0;
        var entry;
        for (; index < entries.length; index++) {
          entry = entries[index];
          if (entry.key === key) {
            if (found)
              splice(entries, index--, 1);
            else {
              found = true;
              entry.value = val;
            }
          }
        }
        if (!found)
          push(entries, { key, value: val });
        state.updateURL();
      },
      sort: function sort() {
        var state = getInternalParamsState(this);
        arraySort(state.entries, function(a2, b2) {
          return a2.key > b2.key ? 1 : -1;
        });
        state.updateURL();
      },
      forEach: function forEach(callback) {
        var entries = getInternalParamsState(this).entries;
        var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : void 0);
        var index = 0;
        var entry;
        while (index < entries.length) {
          entry = entries[index++];
          boundFunction(entry.value, entry.key, this);
        }
      },
      keys: function keys() {
        return new URLSearchParamsIterator(this, "keys");
      },
      values: function values() {
        return new URLSearchParamsIterator(this, "values");
      },
      entries: function entries() {
        return new URLSearchParamsIterator(this, "entries");
      }
    }, { enumerable: true });
    redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, { name: "entries" });
    redefine(URLSearchParamsPrototype, "toString", function toString2() {
      return getInternalParamsState(this).serialize();
    }, { enumerable: true });
    setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
    $({ global: true, forced: !USE_NATIVE_URL }, {
      URLSearchParams: URLSearchParamsConstructor
    });
    if (!USE_NATIVE_URL && isCallable(Headers)) {
      headersHas = uncurryThis(HeadersPrototype.has);
      headersSet = uncurryThis(HeadersPrototype.set);
      wrapRequestOptions = function(init) {
        if (isObject(init)) {
          var body = init.body;
          var headers;
          if (classof(body) === URL_SEARCH_PARAMS) {
            headers = init.headers ? new Headers(init.headers) : new Headers();
            if (!headersHas(headers, "content-type")) {
              headersSet(headers, "content-type", "application/x-www-form-urlencoded;charset=UTF-8");
            }
            return create(init, {
              body: createPropertyDescriptor(0, $toString(body)),
              headers: createPropertyDescriptor(0, headers)
            });
          }
        }
        return init;
      };
      if (isCallable(n$Fetch)) {
        $({ global: true, enumerable: true, forced: true }, {
          fetch: function fetch(input) {
            return n$Fetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
          }
        });
      }
      if (isCallable(N$Request)) {
        RequestConstructor = function Request(input) {
          anInstance(this, RequestPrototype);
          return new N$Request(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
        };
        RequestPrototype.constructor = RequestConstructor;
        RequestConstructor.prototype = RequestPrototype;
        $({ global: true, forced: true }, {
          Request: RequestConstructor
        });
      }
    }
    var headersHas;
    var headersSet;
    var wrapRequestOptions;
    var RequestConstructor;
    module.exports = {
      URLSearchParams: URLSearchParamsConstructor,
      getState: getInternalParamsState
    };
  }
});

// node_modules/core-js-pure/modules/web.url.js
var require_web_url = __commonJS({
  "node_modules/core-js-pure/modules/web.url.js"() {
    "use strict";
    init_react();
    require_es_string_iterator();
    var $ = require_export();
    var DESCRIPTORS = require_descriptors();
    var USE_NATIVE_URL = require_native_url();
    var global2 = require_global();
    var bind = require_function_bind_context();
    var uncurryThis = require_function_uncurry_this();
    var defineProperties = require_object_define_properties().f;
    var redefine = require_redefine();
    var anInstance = require_an_instance();
    var hasOwn = require_has_own_property();
    var assign = require_object_assign();
    var arrayFrom = require_array_from();
    var arraySlice = require_array_slice_simple();
    var codeAt = require_string_multibyte().codeAt;
    var toASCII = require_string_punycode_to_ascii();
    var $toString = require_to_string();
    var setToStringTag = require_set_to_string_tag();
    var validateArgumentsLength = require_validate_arguments_length();
    var URLSearchParamsModule = require_web_url_search_params();
    var InternalStateModule = require_internal_state();
    var setInternalState = InternalStateModule.set;
    var getInternalURLState = InternalStateModule.getterFor("URL");
    var URLSearchParams2 = URLSearchParamsModule.URLSearchParams;
    var getInternalSearchParamsState = URLSearchParamsModule.getState;
    var NativeURL = global2.URL;
    var TypeError2 = global2.TypeError;
    var parseInt2 = global2.parseInt;
    var floor = Math.floor;
    var pow = Math.pow;
    var charAt = uncurryThis("".charAt);
    var exec = uncurryThis(/./.exec);
    var join = uncurryThis([].join);
    var numberToString = uncurryThis(1 .toString);
    var pop = uncurryThis([].pop);
    var push = uncurryThis([].push);
    var replace = uncurryThis("".replace);
    var shift = uncurryThis([].shift);
    var split = uncurryThis("".split);
    var stringSlice = uncurryThis("".slice);
    var toLowerCase = uncurryThis("".toLowerCase);
    var unshift = uncurryThis([].unshift);
    var INVALID_AUTHORITY = "Invalid authority";
    var INVALID_SCHEME = "Invalid scheme";
    var INVALID_HOST = "Invalid host";
    var INVALID_PORT = "Invalid port";
    var ALPHA = /[a-z]/i;
    var ALPHANUMERIC = /[\d+-.a-z]/i;
    var DIGIT = /\d/;
    var HEX_START = /^0x/i;
    var OCT = /^[0-7]+$/;
    var DEC = /^\d+$/;
    var HEX = /^[\da-f]+$/i;
    var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
    var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
    var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
    var TAB_AND_NEW_LINE = /[\t\n\r]/g;
    var EOF;
    var parseIPv4 = function(input) {
      var parts = split(input, ".");
      var partsLength, numbers, index, part, radix, number, ipv4;
      if (parts.length && parts[parts.length - 1] == "") {
        parts.length--;
      }
      partsLength = parts.length;
      if (partsLength > 4)
        return input;
      numbers = [];
      for (index = 0; index < partsLength; index++) {
        part = parts[index];
        if (part == "")
          return input;
        radix = 10;
        if (part.length > 1 && charAt(part, 0) == "0") {
          radix = exec(HEX_START, part) ? 16 : 8;
          part = stringSlice(part, radix == 8 ? 1 : 2);
        }
        if (part === "") {
          number = 0;
        } else {
          if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part))
            return input;
          number = parseInt2(part, radix);
        }
        push(numbers, number);
      }
      for (index = 0; index < partsLength; index++) {
        number = numbers[index];
        if (index == partsLength - 1) {
          if (number >= pow(256, 5 - partsLength))
            return null;
        } else if (number > 255)
          return null;
      }
      ipv4 = pop(numbers);
      for (index = 0; index < numbers.length; index++) {
        ipv4 += numbers[index] * pow(256, 3 - index);
      }
      return ipv4;
    };
    var parseIPv6 = function(input) {
      var address = [0, 0, 0, 0, 0, 0, 0, 0];
      var pieceIndex = 0;
      var compress = null;
      var pointer = 0;
      var value, length, numbersSeen, ipv4Piece, number, swaps, swap;
      var chr = function() {
        return charAt(input, pointer);
      };
      if (chr() == ":") {
        if (charAt(input, 1) != ":")
          return;
        pointer += 2;
        pieceIndex++;
        compress = pieceIndex;
      }
      while (chr()) {
        if (pieceIndex == 8)
          return;
        if (chr() == ":") {
          if (compress !== null)
            return;
          pointer++;
          pieceIndex++;
          compress = pieceIndex;
          continue;
        }
        value = length = 0;
        while (length < 4 && exec(HEX, chr())) {
          value = value * 16 + parseInt2(chr(), 16);
          pointer++;
          length++;
        }
        if (chr() == ".") {
          if (length == 0)
            return;
          pointer -= length;
          if (pieceIndex > 6)
            return;
          numbersSeen = 0;
          while (chr()) {
            ipv4Piece = null;
            if (numbersSeen > 0) {
              if (chr() == "." && numbersSeen < 4)
                pointer++;
              else
                return;
            }
            if (!exec(DIGIT, chr()))
              return;
            while (exec(DIGIT, chr())) {
              number = parseInt2(chr(), 10);
              if (ipv4Piece === null)
                ipv4Piece = number;
              else if (ipv4Piece == 0)
                return;
              else
                ipv4Piece = ipv4Piece * 10 + number;
              if (ipv4Piece > 255)
                return;
              pointer++;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            numbersSeen++;
            if (numbersSeen == 2 || numbersSeen == 4)
              pieceIndex++;
          }
          if (numbersSeen != 4)
            return;
          break;
        } else if (chr() == ":") {
          pointer++;
          if (!chr())
            return;
        } else if (chr())
          return;
        address[pieceIndex++] = value;
      }
      if (compress !== null) {
        swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex != 0 && swaps > 0) {
          swap = address[pieceIndex];
          address[pieceIndex--] = address[compress + swaps - 1];
          address[compress + --swaps] = swap;
        }
      } else if (pieceIndex != 8)
        return;
      return address;
    };
    var findLongestZeroSequence = function(ipv6) {
      var maxIndex = null;
      var maxLength = 1;
      var currStart = null;
      var currLength = 0;
      var index = 0;
      for (; index < 8; index++) {
        if (ipv6[index] !== 0) {
          if (currLength > maxLength) {
            maxIndex = currStart;
            maxLength = currLength;
          }
          currStart = null;
          currLength = 0;
        } else {
          if (currStart === null)
            currStart = index;
          ++currLength;
        }
      }
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      return maxIndex;
    };
    var serializeHost = function(host) {
      var result, index, compress, ignore0;
      if (typeof host == "number") {
        result = [];
        for (index = 0; index < 4; index++) {
          unshift(result, host % 256);
          host = floor(host / 256);
        }
        return join(result, ".");
      } else if (typeof host == "object") {
        result = "";
        compress = findLongestZeroSequence(host);
        for (index = 0; index < 8; index++) {
          if (ignore0 && host[index] === 0)
            continue;
          if (ignore0)
            ignore0 = false;
          if (compress === index) {
            result += index ? ":" : "::";
            ignore0 = true;
          } else {
            result += numberToString(host[index], 16);
            if (index < 7)
              result += ":";
          }
        }
        return "[" + result + "]";
      }
      return host;
    };
    var C0ControlPercentEncodeSet = {};
    var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
      " ": 1,
      '"': 1,
      "<": 1,
      ">": 1,
      "`": 1
    });
    var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
      "#": 1,
      "?": 1,
      "{": 1,
      "}": 1
    });
    var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
      "/": 1,
      ":": 1,
      ";": 1,
      "=": 1,
      "@": 1,
      "[": 1,
      "\\": 1,
      "]": 1,
      "^": 1,
      "|": 1
    });
    var percentEncode = function(chr, set) {
      var code = codeAt(chr, 0);
      return code > 32 && code < 127 && !hasOwn(set, chr) ? chr : encodeURIComponent(chr);
    };
    var specialSchemes = {
      ftp: 21,
      file: null,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var isWindowsDriveLetter = function(string, normalized) {
      var second;
      return string.length == 2 && exec(ALPHA, charAt(string, 0)) && ((second = charAt(string, 1)) == ":" || !normalized && second == "|");
    };
    var startsWithWindowsDriveLetter = function(string) {
      var third;
      return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (string.length == 2 || ((third = charAt(string, 2)) === "/" || third === "\\" || third === "?" || third === "#"));
    };
    var isSingleDot = function(segment) {
      return segment === "." || toLowerCase(segment) === "%2e";
    };
    var isDoubleDot = function(segment) {
      segment = toLowerCase(segment);
      return segment === ".." || segment === "%2e." || segment === ".%2e" || segment === "%2e%2e";
    };
    var SCHEME_START = {};
    var SCHEME = {};
    var NO_SCHEME = {};
    var SPECIAL_RELATIVE_OR_AUTHORITY = {};
    var PATH_OR_AUTHORITY = {};
    var RELATIVE = {};
    var RELATIVE_SLASH = {};
    var SPECIAL_AUTHORITY_SLASHES = {};
    var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
    var AUTHORITY = {};
    var HOST = {};
    var HOSTNAME = {};
    var PORT = {};
    var FILE = {};
    var FILE_SLASH = {};
    var FILE_HOST = {};
    var PATH_START = {};
    var PATH = {};
    var CANNOT_BE_A_BASE_URL_PATH = {};
    var QUERY = {};
    var FRAGMENT = {};
    var URLState = function(url, isBase, base) {
      var urlString = $toString(url);
      var baseState, failure, searchParams;
      if (isBase) {
        failure = this.parse(urlString);
        if (failure)
          throw TypeError2(failure);
        this.searchParams = null;
      } else {
        if (base !== void 0)
          baseState = new URLState(base, true);
        failure = this.parse(urlString, null, baseState);
        if (failure)
          throw TypeError2(failure);
        searchParams = getInternalSearchParamsState(new URLSearchParams2());
        searchParams.bindURL(this);
        this.searchParams = searchParams;
      }
    };
    URLState.prototype = {
      type: "URL",
      parse: function(input, stateOverride, base) {
        var url = this;
        var state = stateOverride || SCHEME_START;
        var pointer = 0;
        var buffer = "";
        var seenAt = false;
        var seenBracket = false;
        var seenPasswordToken = false;
        var codePoints, chr, bufferCodePoints, failure;
        input = $toString(input);
        if (!stateOverride) {
          url.scheme = "";
          url.username = "";
          url.password = "";
          url.host = null;
          url.port = null;
          url.path = [];
          url.query = null;
          url.fragment = null;
          url.cannotBeABaseURL = false;
          input = replace(input, LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, "");
        }
        input = replace(input, TAB_AND_NEW_LINE, "");
        codePoints = arrayFrom(input);
        while (pointer <= codePoints.length) {
          chr = codePoints[pointer];
          switch (state) {
            case SCHEME_START:
              if (chr && exec(ALPHA, chr)) {
                buffer += toLowerCase(chr);
                state = SCHEME;
              } else if (!stateOverride) {
                state = NO_SCHEME;
                continue;
              } else
                return INVALID_SCHEME;
              break;
            case SCHEME:
              if (chr && (exec(ALPHANUMERIC, chr) || chr == "+" || chr == "-" || chr == ".")) {
                buffer += toLowerCase(chr);
              } else if (chr == ":") {
                if (stateOverride && (url.isSpecial() != hasOwn(specialSchemes, buffer) || buffer == "file" && (url.includesCredentials() || url.port !== null) || url.scheme == "file" && !url.host))
                  return;
                url.scheme = buffer;
                if (stateOverride) {
                  if (url.isSpecial() && specialSchemes[url.scheme] == url.port)
                    url.port = null;
                  return;
                }
                buffer = "";
                if (url.scheme == "file") {
                  state = FILE;
                } else if (url.isSpecial() && base && base.scheme == url.scheme) {
                  state = SPECIAL_RELATIVE_OR_AUTHORITY;
                } else if (url.isSpecial()) {
                  state = SPECIAL_AUTHORITY_SLASHES;
                } else if (codePoints[pointer + 1] == "/") {
                  state = PATH_OR_AUTHORITY;
                  pointer++;
                } else {
                  url.cannotBeABaseURL = true;
                  push(url.path, "");
                  state = CANNOT_BE_A_BASE_URL_PATH;
                }
              } else if (!stateOverride) {
                buffer = "";
                state = NO_SCHEME;
                pointer = 0;
                continue;
              } else
                return INVALID_SCHEME;
              break;
            case NO_SCHEME:
              if (!base || base.cannotBeABaseURL && chr != "#")
                return INVALID_SCHEME;
              if (base.cannotBeABaseURL && chr == "#") {
                url.scheme = base.scheme;
                url.path = arraySlice(base.path);
                url.query = base.query;
                url.fragment = "";
                url.cannotBeABaseURL = true;
                state = FRAGMENT;
                break;
              }
              state = base.scheme == "file" ? FILE : RELATIVE;
              continue;
            case SPECIAL_RELATIVE_OR_AUTHORITY:
              if (chr == "/" && codePoints[pointer + 1] == "/") {
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                pointer++;
              } else {
                state = RELATIVE;
                continue;
              }
              break;
            case PATH_OR_AUTHORITY:
              if (chr == "/") {
                state = AUTHORITY;
                break;
              } else {
                state = PATH;
                continue;
              }
            case RELATIVE:
              url.scheme = base.scheme;
              if (chr == EOF) {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = arraySlice(base.path);
                url.query = base.query;
              } else if (chr == "/" || chr == "\\" && url.isSpecial()) {
                state = RELATIVE_SLASH;
              } else if (chr == "?") {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = arraySlice(base.path);
                url.query = "";
                state = QUERY;
              } else if (chr == "#") {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = arraySlice(base.path);
                url.query = base.query;
                url.fragment = "";
                state = FRAGMENT;
              } else {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = arraySlice(base.path);
                url.path.length--;
                state = PATH;
                continue;
              }
              break;
            case RELATIVE_SLASH:
              if (url.isSpecial() && (chr == "/" || chr == "\\")) {
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
              } else if (chr == "/") {
                state = AUTHORITY;
              } else {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                state = PATH;
                continue;
              }
              break;
            case SPECIAL_AUTHORITY_SLASHES:
              state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
              if (chr != "/" || charAt(buffer, pointer + 1) != "/")
                continue;
              pointer++;
              break;
            case SPECIAL_AUTHORITY_IGNORE_SLASHES:
              if (chr != "/" && chr != "\\") {
                state = AUTHORITY;
                continue;
              }
              break;
            case AUTHORITY:
              if (chr == "@") {
                if (seenAt)
                  buffer = "%40" + buffer;
                seenAt = true;
                bufferCodePoints = arrayFrom(buffer);
                for (var i2 = 0; i2 < bufferCodePoints.length; i2++) {
                  var codePoint = bufferCodePoints[i2];
                  if (codePoint == ":" && !seenPasswordToken) {
                    seenPasswordToken = true;
                    continue;
                  }
                  var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                  if (seenPasswordToken)
                    url.password += encodedCodePoints;
                  else
                    url.username += encodedCodePoints;
                }
                buffer = "";
              } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial()) {
                if (seenAt && buffer == "")
                  return INVALID_AUTHORITY;
                pointer -= arrayFrom(buffer).length + 1;
                buffer = "";
                state = HOST;
              } else
                buffer += chr;
              break;
            case HOST:
            case HOSTNAME:
              if (stateOverride && url.scheme == "file") {
                state = FILE_HOST;
                continue;
              } else if (chr == ":" && !seenBracket) {
                if (buffer == "")
                  return INVALID_HOST;
                failure = url.parseHost(buffer);
                if (failure)
                  return failure;
                buffer = "";
                state = PORT;
                if (stateOverride == HOSTNAME)
                  return;
              } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial()) {
                if (url.isSpecial() && buffer == "")
                  return INVALID_HOST;
                if (stateOverride && buffer == "" && (url.includesCredentials() || url.port !== null))
                  return;
                failure = url.parseHost(buffer);
                if (failure)
                  return failure;
                buffer = "";
                state = PATH_START;
                if (stateOverride)
                  return;
                continue;
              } else {
                if (chr == "[")
                  seenBracket = true;
                else if (chr == "]")
                  seenBracket = false;
                buffer += chr;
              }
              break;
            case PORT:
              if (exec(DIGIT, chr)) {
                buffer += chr;
              } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial() || stateOverride) {
                if (buffer != "") {
                  var port = parseInt2(buffer, 10);
                  if (port > 65535)
                    return INVALID_PORT;
                  url.port = url.isSpecial() && port === specialSchemes[url.scheme] ? null : port;
                  buffer = "";
                }
                if (stateOverride)
                  return;
                state = PATH_START;
                continue;
              } else
                return INVALID_PORT;
              break;
            case FILE:
              url.scheme = "file";
              if (chr == "/" || chr == "\\")
                state = FILE_SLASH;
              else if (base && base.scheme == "file") {
                if (chr == EOF) {
                  url.host = base.host;
                  url.path = arraySlice(base.path);
                  url.query = base.query;
                } else if (chr == "?") {
                  url.host = base.host;
                  url.path = arraySlice(base.path);
                  url.query = "";
                  state = QUERY;
                } else if (chr == "#") {
                  url.host = base.host;
                  url.path = arraySlice(base.path);
                  url.query = base.query;
                  url.fragment = "";
                  state = FRAGMENT;
                } else {
                  if (!startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ""))) {
                    url.host = base.host;
                    url.path = arraySlice(base.path);
                    url.shortenPath();
                  }
                  state = PATH;
                  continue;
                }
              } else {
                state = PATH;
                continue;
              }
              break;
            case FILE_SLASH:
              if (chr == "/" || chr == "\\") {
                state = FILE_HOST;
                break;
              }
              if (base && base.scheme == "file" && !startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ""))) {
                if (isWindowsDriveLetter(base.path[0], true))
                  push(url.path, base.path[0]);
                else
                  url.host = base.host;
              }
              state = PATH;
              continue;
            case FILE_HOST:
              if (chr == EOF || chr == "/" || chr == "\\" || chr == "?" || chr == "#") {
                if (!stateOverride && isWindowsDriveLetter(buffer)) {
                  state = PATH;
                } else if (buffer == "") {
                  url.host = "";
                  if (stateOverride)
                    return;
                  state = PATH_START;
                } else {
                  failure = url.parseHost(buffer);
                  if (failure)
                    return failure;
                  if (url.host == "localhost")
                    url.host = "";
                  if (stateOverride)
                    return;
                  buffer = "";
                  state = PATH_START;
                }
                continue;
              } else
                buffer += chr;
              break;
            case PATH_START:
              if (url.isSpecial()) {
                state = PATH;
                if (chr != "/" && chr != "\\")
                  continue;
              } else if (!stateOverride && chr == "?") {
                url.query = "";
                state = QUERY;
              } else if (!stateOverride && chr == "#") {
                url.fragment = "";
                state = FRAGMENT;
              } else if (chr != EOF) {
                state = PATH;
                if (chr != "/")
                  continue;
              }
              break;
            case PATH:
              if (chr == EOF || chr == "/" || chr == "\\" && url.isSpecial() || !stateOverride && (chr == "?" || chr == "#")) {
                if (isDoubleDot(buffer)) {
                  url.shortenPath();
                  if (chr != "/" && !(chr == "\\" && url.isSpecial())) {
                    push(url.path, "");
                  }
                } else if (isSingleDot(buffer)) {
                  if (chr != "/" && !(chr == "\\" && url.isSpecial())) {
                    push(url.path, "");
                  }
                } else {
                  if (url.scheme == "file" && !url.path.length && isWindowsDriveLetter(buffer)) {
                    if (url.host)
                      url.host = "";
                    buffer = charAt(buffer, 0) + ":";
                  }
                  push(url.path, buffer);
                }
                buffer = "";
                if (url.scheme == "file" && (chr == EOF || chr == "?" || chr == "#")) {
                  while (url.path.length > 1 && url.path[0] === "") {
                    shift(url.path);
                  }
                }
                if (chr == "?") {
                  url.query = "";
                  state = QUERY;
                } else if (chr == "#") {
                  url.fragment = "";
                  state = FRAGMENT;
                }
              } else {
                buffer += percentEncode(chr, pathPercentEncodeSet);
              }
              break;
            case CANNOT_BE_A_BASE_URL_PATH:
              if (chr == "?") {
                url.query = "";
                state = QUERY;
              } else if (chr == "#") {
                url.fragment = "";
                state = FRAGMENT;
              } else if (chr != EOF) {
                url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
              }
              break;
            case QUERY:
              if (!stateOverride && chr == "#") {
                url.fragment = "";
                state = FRAGMENT;
              } else if (chr != EOF) {
                if (chr == "'" && url.isSpecial())
                  url.query += "%27";
                else if (chr == "#")
                  url.query += "%23";
                else
                  url.query += percentEncode(chr, C0ControlPercentEncodeSet);
              }
              break;
            case FRAGMENT:
              if (chr != EOF)
                url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
              break;
          }
          pointer++;
        }
      },
      parseHost: function(input) {
        var result, codePoints, index;
        if (charAt(input, 0) == "[") {
          if (charAt(input, input.length - 1) != "]")
            return INVALID_HOST;
          result = parseIPv6(stringSlice(input, 1, -1));
          if (!result)
            return INVALID_HOST;
          this.host = result;
        } else if (!this.isSpecial()) {
          if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input))
            return INVALID_HOST;
          result = "";
          codePoints = arrayFrom(input);
          for (index = 0; index < codePoints.length; index++) {
            result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
          }
          this.host = result;
        } else {
          input = toASCII(input);
          if (exec(FORBIDDEN_HOST_CODE_POINT, input))
            return INVALID_HOST;
          result = parseIPv4(input);
          if (result === null)
            return INVALID_HOST;
          this.host = result;
        }
      },
      cannotHaveUsernamePasswordPort: function() {
        return !this.host || this.cannotBeABaseURL || this.scheme == "file";
      },
      includesCredentials: function() {
        return this.username != "" || this.password != "";
      },
      isSpecial: function() {
        return hasOwn(specialSchemes, this.scheme);
      },
      shortenPath: function() {
        var path = this.path;
        var pathSize = path.length;
        if (pathSize && (this.scheme != "file" || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
          path.length--;
        }
      },
      serialize: function() {
        var url = this;
        var scheme = url.scheme;
        var username = url.username;
        var password = url.password;
        var host = url.host;
        var port = url.port;
        var path = url.path;
        var query = url.query;
        var fragment = url.fragment;
        var output = scheme + ":";
        if (host !== null) {
          output += "//";
          if (url.includesCredentials()) {
            output += username + (password ? ":" + password : "") + "@";
          }
          output += serializeHost(host);
          if (port !== null)
            output += ":" + port;
        } else if (scheme == "file")
          output += "//";
        output += url.cannotBeABaseURL ? path[0] : path.length ? "/" + join(path, "/") : "";
        if (query !== null)
          output += "?" + query;
        if (fragment !== null)
          output += "#" + fragment;
        return output;
      },
      setHref: function(href) {
        var failure = this.parse(href);
        if (failure)
          throw TypeError2(failure);
        this.searchParams.update();
      },
      getOrigin: function() {
        var scheme = this.scheme;
        var port = this.port;
        if (scheme == "blob")
          try {
            return new URLConstructor(scheme.path[0]).origin;
          } catch (error) {
            return "null";
          }
        if (scheme == "file" || !this.isSpecial())
          return "null";
        return scheme + "://" + serializeHost(this.host) + (port !== null ? ":" + port : "");
      },
      getProtocol: function() {
        return this.scheme + ":";
      },
      setProtocol: function(protocol) {
        this.parse($toString(protocol) + ":", SCHEME_START);
      },
      getUsername: function() {
        return this.username;
      },
      setUsername: function(username) {
        var codePoints = arrayFrom($toString(username));
        if (this.cannotHaveUsernamePasswordPort())
          return;
        this.username = "";
        for (var i2 = 0; i2 < codePoints.length; i2++) {
          this.username += percentEncode(codePoints[i2], userinfoPercentEncodeSet);
        }
      },
      getPassword: function() {
        return this.password;
      },
      setPassword: function(password) {
        var codePoints = arrayFrom($toString(password));
        if (this.cannotHaveUsernamePasswordPort())
          return;
        this.password = "";
        for (var i2 = 0; i2 < codePoints.length; i2++) {
          this.password += percentEncode(codePoints[i2], userinfoPercentEncodeSet);
        }
      },
      getHost: function() {
        var host = this.host;
        var port = this.port;
        return host === null ? "" : port === null ? serializeHost(host) : serializeHost(host) + ":" + port;
      },
      setHost: function(host) {
        if (this.cannotBeABaseURL)
          return;
        this.parse(host, HOST);
      },
      getHostname: function() {
        var host = this.host;
        return host === null ? "" : serializeHost(host);
      },
      setHostname: function(hostname) {
        if (this.cannotBeABaseURL)
          return;
        this.parse(hostname, HOSTNAME);
      },
      getPort: function() {
        var port = this.port;
        return port === null ? "" : $toString(port);
      },
      setPort: function(port) {
        if (this.cannotHaveUsernamePasswordPort())
          return;
        port = $toString(port);
        if (port == "")
          this.port = null;
        else
          this.parse(port, PORT);
      },
      getPathname: function() {
        var path = this.path;
        return this.cannotBeABaseURL ? path[0] : path.length ? "/" + join(path, "/") : "";
      },
      setPathname: function(pathname) {
        if (this.cannotBeABaseURL)
          return;
        this.path = [];
        this.parse(pathname, PATH_START);
      },
      getSearch: function() {
        var query = this.query;
        return query ? "?" + query : "";
      },
      setSearch: function(search) {
        search = $toString(search);
        if (search == "") {
          this.query = null;
        } else {
          if (charAt(search, 0) == "?")
            search = stringSlice(search, 1);
          this.query = "";
          this.parse(search, QUERY);
        }
        this.searchParams.update();
      },
      getSearchParams: function() {
        return this.searchParams.facade;
      },
      getHash: function() {
        var fragment = this.fragment;
        return fragment ? "#" + fragment : "";
      },
      setHash: function(hash) {
        hash = $toString(hash);
        if (hash == "") {
          this.fragment = null;
          return;
        }
        if (charAt(hash, 0) == "#")
          hash = stringSlice(hash, 1);
        this.fragment = "";
        this.parse(hash, FRAGMENT);
      },
      update: function() {
        this.query = this.searchParams.serialize() || null;
      }
    };
    var URLConstructor = function URL2(url) {
      var that = anInstance(this, URLPrototype);
      var base = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : void 0;
      var state = setInternalState(that, new URLState(url, false, base));
      if (!DESCRIPTORS) {
        that.href = state.serialize();
        that.origin = state.getOrigin();
        that.protocol = state.getProtocol();
        that.username = state.getUsername();
        that.password = state.getPassword();
        that.host = state.getHost();
        that.hostname = state.getHostname();
        that.port = state.getPort();
        that.pathname = state.getPathname();
        that.search = state.getSearch();
        that.searchParams = state.getSearchParams();
        that.hash = state.getHash();
      }
    };
    var URLPrototype = URLConstructor.prototype;
    var accessorDescriptor = function(getter, setter) {
      return {
        get: function() {
          return getInternalURLState(this)[getter]();
        },
        set: setter && function(value) {
          return getInternalURLState(this)[setter](value);
        },
        configurable: true,
        enumerable: true
      };
    };
    if (DESCRIPTORS) {
      defineProperties(URLPrototype, {
        href: accessorDescriptor("serialize", "setHref"),
        origin: accessorDescriptor("getOrigin"),
        protocol: accessorDescriptor("getProtocol", "setProtocol"),
        username: accessorDescriptor("getUsername", "setUsername"),
        password: accessorDescriptor("getPassword", "setPassword"),
        host: accessorDescriptor("getHost", "setHost"),
        hostname: accessorDescriptor("getHostname", "setHostname"),
        port: accessorDescriptor("getPort", "setPort"),
        pathname: accessorDescriptor("getPathname", "setPathname"),
        search: accessorDescriptor("getSearch", "setSearch"),
        searchParams: accessorDescriptor("getSearchParams"),
        hash: accessorDescriptor("getHash", "setHash")
      });
    }
    redefine(URLPrototype, "toJSON", function toJSON() {
      return getInternalURLState(this).serialize();
    }, { enumerable: true });
    redefine(URLPrototype, "toString", function toString2() {
      return getInternalURLState(this).serialize();
    }, { enumerable: true });
    if (NativeURL) {
      nativeCreateObjectURL = NativeURL.createObjectURL;
      nativeRevokeObjectURL = NativeURL.revokeObjectURL;
      if (nativeCreateObjectURL)
        redefine(URLConstructor, "createObjectURL", bind(nativeCreateObjectURL, NativeURL));
      if (nativeRevokeObjectURL)
        redefine(URLConstructor, "revokeObjectURL", bind(nativeRevokeObjectURL, NativeURL));
    }
    var nativeCreateObjectURL;
    var nativeRevokeObjectURL;
    setToStringTag(URLConstructor, "URL");
    $({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
      URL: URLConstructor
    });
  }
});

// node_modules/core-js-pure/modules/web.url.to-json.js
var require_web_url_to_json = __commonJS({
  "node_modules/core-js-pure/modules/web.url.to-json.js"() {
    init_react();
  }
});

// node_modules/core-js-pure/web/url.js
var require_url = __commonJS({
  "node_modules/core-js-pure/web/url.js"(exports, module) {
    init_react();
    require_web_url();
    require_web_url_to_json();
    require_web_url_search_params();
    var path = require_path();
    module.exports = path.URL;
  }
});

// node_modules/core-js-pure/stable/url/index.js
var require_url2 = __commonJS({
  "node_modules/core-js-pure/stable/url/index.js"(exports, module) {
    init_react();
    var parent = require_url();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/url.js
var require_url3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/url.js"(exports, module) {
    init_react();
    module.exports = require_url2();
  }
});

// node_modules/moralis/lib/browser/Web3Connector/NetworkWeb3Connector.js
var require_NetworkWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/NetworkWeb3Connector.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _concat = _interopRequireDefault(require_concat4());
    var _url = _interopRequireDefault(require_url3());
    var _keys = _interopRequireDefault(require_keys3());
    var _reduce = _interopRequireDefault(require_reduce4());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _convert = require_convert();
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    var _MoralisRpcs = require_MoralisRpcs();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var MiniRpcProvider = /* @__PURE__ */ (0, _createClass2.default)(function MiniRpcProvider2(chainId, url) {
      var _this = this;
      (0, _classCallCheck2.default)(this, MiniRpcProvider2);
      (0, _defineProperty2.default)(this, "request", /* @__PURE__ */ function() {
        var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(method, params) {
          var RESTController, response, _context, body, _body$error, _body$error2, _body$error3, _context2;
          return _regenerator.default.wrap(function(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (typeof method !== "string") {
                    params = method.params;
                    method = method.method;
                  }
                  RESTController = _CoreManager.default.getRESTController();
                  _context3.prev = 2;
                  _context3.next = 5;
                  return RESTController.ajax("POST", _this.url, (0, _stringify.default)({
                    jsonrpc: "2.0",
                    id: 1,
                    method,
                    params
                  }), {
                    "Content-Type": "application/json"
                  });
                case 5:
                  response = _context3.sent;
                  if (response) {
                    _context3.next = 8;
                    break;
                  }
                  throw new Error("No response");
                case 8:
                  if (!(!response.status || response.status > 400)) {
                    _context3.next = 10;
                    break;
                  }
                  throw new Error((0, _concat.default)(_context = "Error response [".concat(response.status, "] ")).call(_context, response.statusText));
                case 10:
                  body = response.response;
                  if (!("error" in body)) {
                    _context3.next = 13;
                    break;
                  }
                  throw new Error(body === null || body === void 0 ? void 0 : (_body$error = body.error) === null || _body$error === void 0 ? void 0 : _body$error.message, body === null || body === void 0 ? void 0 : (_body$error2 = body.error) === null || _body$error2 === void 0 ? void 0 : _body$error2.code, body === null || body === void 0 ? void 0 : (_body$error3 = body.error) === null || _body$error3 === void 0 ? void 0 : _body$error3.data);
                case 13:
                  if ("result" in body) {
                    _context3.next = 15;
                    break;
                  }
                  throw new Error("Received unexpected JSON-RPC response");
                case 15:
                  return _context3.abrupt("return", body.result);
                case 18:
                  _context3.prev = 18;
                  _context3.t0 = _context3["catch"](2);
                  throw new Error((0, _concat.default)(_context2 = 'Failed to make "'.concat(method, '" request with networkConnector: "')).call(_context2, _context3.t0.message, '"'));
                case 21:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee, null, [[2, 18]]);
        }));
        return function() {
          return _ref.apply(this, arguments);
        };
      }());
      this.chainId = chainId;
      this.url = url;
      var parsed = new _url.default(url);
      this.host = parsed.host;
      this.path = parsed.pathname;
    });
    var NetworkWeb3Connector = /* @__PURE__ */ function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(NetworkWeb3Connector2, _AbstractWeb3Connecto);
      var _super = _createSuper(NetworkWeb3Connector2);
      function NetworkWeb3Connector2() {
        var _ref3, _context4;
        var _this2;
        var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, urls = _ref2.urls, defaultChainId = _ref2.defaultChainId, chainId = _ref2.chainId, speedyNodeApiKey = _ref2.speedyNodeApiKey;
        (0, _classCallCheck2.default)(this, NetworkWeb3Connector2);
        _this2 = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "type", "network");
        if (!urls && speedyNodeApiKey) {
          urls = (0, _MoralisRpcs.getMoralisRpcs)(speedyNodeApiKey);
        }
        if (!urls && !speedyNodeApiKey) {
          throw new Error("Cannot connect to rpc: No urls or speedyNodeApiKey provided for NetworkWeb3Connector.");
        }
        if (speedyNodeApiKey) {
          console.warn("Using speedyNodeApiKey on the browser enviroment is not recommended, as it is publicly visible.");
        }
        _this2.chainId = (0, _verifyChainId.default)((_ref3 = chainId !== null && chainId !== void 0 ? chainId : defaultChainId) !== null && _ref3 !== void 0 ? _ref3 : Number((0, _keys.default)(urls)[0]));
        _this2.providers = (0, _reduce.default)(_context4 = (0, _keys.default)(urls)).call(_context4, function(accumulator, chainId2) {
          accumulator[Number(chainId2)] = new MiniRpcProvider(Number(chainId2), urls[Number(chainId2)]);
          return accumulator;
        }, {});
        return _this2;
      }
      (0, _createClass2.default)(NetworkWeb3Connector2, [{
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            var _ref4, providedChainId, provider, _args2 = arguments;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _ref4 = _args2.length > 0 && _args2[0] !== void 0 ? _args2[0] : {}, providedChainId = _ref4.chainId;
                    if (providedChainId) {
                      this.chainId = (0, _verifyChainId.default)(providedChainId);
                    }
                    provider = this.providers[(0, _convert.fromHexToDecimal)(this.chainId)];
                    if (provider) {
                      _context5.next = 5;
                      break;
                    }
                    throw new Error("No rpc url provided for chainId ".concat(this.chainId));
                  case 5:
                    return _context5.abrupt("return", {
                      provider,
                      chainId: this.chainId,
                      account: null
                    });
                  case 6:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }]);
      return NetworkWeb3Connector2;
    }(_AbstractWeb3Connector.default);
    var _default = NetworkWeb3Connector;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/InternalWeb3Provider.js
var require_InternalWeb3Provider = __commonJS({
  "node_modules/moralis/lib/browser/InternalWeb3Provider.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.InternalWeb3Events = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _freeze = _interopRequireDefault(require_freeze3());
    var _bind = _interopRequireDefault(require_bind7());
    var _events = _interopRequireDefault(require_events());
    var _events2 = require_events2();
    var _ethers = (init_lib(), __toCommonJS(lib_exports));
    var _convert = require_convert();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var InternalWeb3Events = (0, _freeze.default)({
      ACCOUNT_CHANGED: "accountChanged",
      CHAIN_CHANGED: "chainChanged",
      PROVIDER_CONNECT: "provider-connect",
      PROVIDER_DISCONNECT: "provider-disconnect",
      WEB3_ENABLED: "web3Enabled",
      WEB3_DEACTIVATED: "web3Deactivated"
    });
    exports.InternalWeb3Events = InternalWeb3Events;
    var InternalWeb3Provider = /* @__PURE__ */ function(_EventEmitter) {
      (0, _inherits2.default)(InternalWeb3Provider2, _EventEmitter);
      var _super = _createSuper(InternalWeb3Provider2);
      function InternalWeb3Provider2(connector) {
        var _context, _context2, _context3, _context4;
        var _this;
        var anyNetwork = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        (0, _classCallCheck2.default)(this, InternalWeb3Provider2);
        _this = _super.call(this);
        if (!connector) {
          throw new Error("Cannot initialize InternalWeb3Provider without a connector");
        }
        _this.connector = connector;
        _this.anyNetwork = anyNetwork;
        _this.handleAccountChanged = (0, _bind.default)(_context = _this.handleAccountChanged).call(_context, (0, _assertThisInitialized2.default)(_this));
        _this.handleChainChanged = (0, _bind.default)(_context2 = _this.handleChainChanged).call(_context2, (0, _assertThisInitialized2.default)(_this));
        _this.handleConnect = (0, _bind.default)(_context3 = _this.handleConnect).call(_context3, (0, _assertThisInitialized2.default)(_this));
        _this.handleDisconnect = (0, _bind.default)(_context4 = _this.handleDisconnect).call(_context4, (0, _assertThisInitialized2.default)(_this));
        return _this;
      }
      (0, _createClass2.default)(InternalWeb3Provider2, [{
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(options) {
            var _yield$this$connector, provider, chainId, account, network;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    if (this.connector) {
                      _context5.next = 2;
                      break;
                    }
                    throw new Error("Cannot acticate InternalWeb3Provider without a connector");
                  case 2:
                    _context5.next = 4;
                    return this.connector.activate(options);
                  case 4:
                    _yield$this$connector = _context5.sent;
                    provider = _yield$this$connector.provider;
                    chainId = _yield$this$connector.chainId;
                    account = _yield$this$connector.account;
                    this.provider = provider;
                    this.chainId = chainId;
                    this.account = account;
                    network = this.anyNetwork ? "any" : (0, _convert.fromHexToDecimal)(chainId);
                    this.web3 = new _ethers.ethers.providers.Web3Provider(provider, network);
                    if (this.connector.on) {
                      this.connector.on(_events2.ConnectorEvents.ACCOUNT_CHANGED, this.handleAccountChanged);
                      this.connector.on(_events2.ConnectorEvents.CHAIN_CHANGED, this.handleChainChanged);
                      this.connector.on(_events2.ConnectorEvents.CONNECT, this.handleConnect);
                      this.connector.on(_events2.ConnectorEvents.DISCONNECT, this.handleDisconnect);
                    }
                    return _context5.abrupt("return", {
                      provider,
                      chainId,
                      account,
                      web3: this.web3
                    });
                  case 15:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }, {
        key: "signer",
        get: function() {
          return this.web3.getSigner(this.account);
        }
      }, {
        key: "signerOrProvider",
        get: function() {
          try {
            if (this.account) {
              return this.web3.getSigner(this.account);
            }
            return this.web3;
          } catch (error) {
            return this.web3;
          }
        }
      }, {
        key: "handleChainChanged",
        value: function(chainId) {
          this.chainId = chainId;
          this.web3 = new _ethers.ethers.providers.Web3Provider(this.provider, (0, _convert.fromHexToDecimal)(chainId));
          this.emit(InternalWeb3Events.CHAIN_CHANGED, chainId);
        }
      }, {
        key: "handleAccountChanged",
        value: function(account) {
          this.account = account;
          this.emit(InternalWeb3Events.ACCOUNT_CHANGED, account);
        }
      }, {
        key: "handleConnect",
        value: function(connectInfo) {
          this.emit(InternalWeb3Events.PROVIDER_CONNECT, connectInfo);
        }
      }, {
        key: "handleDisconnect",
        value: function(error) {
          this.emit(InternalWeb3Events.PROVIDER_DISCONNECT, error);
        }
      }, {
        key: "deactivate",
        value: function() {
          var _deactivate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    this.account = null;
                    this.chianId = null;
                    this.web3 = null;
                    this.provider = null;
                    if (!this.connector) {
                      _context6.next = 9;
                      break;
                    }
                    if (this.connector.removeListener) {
                      this.connector.removeListener(InternalWeb3Events.CHAIN_CHANGED, this.handleChainChanged);
                      this.connector.removeListener(InternalWeb3Events.ACCOUNT_CHANGED, this.handleAccountChanged);
                      this.connector.removeListener(InternalWeb3Events.PROVIDER_CONNECT, this.handleConnect);
                      this.connector.removeListener(InternalWeb3Events.PROVIDER_DISCONNECT, this.handleDisconnect);
                    }
                    if (!this.connector.deactivate) {
                      _context6.next = 9;
                      break;
                    }
                    _context6.next = 9;
                    return this.connector.deactivate();
                  case 9:
                    this.connector = null;
                  case 10:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _deactivate.apply(this, arguments);
          };
        }()
      }]);
      return InternalWeb3Provider2;
    }(_events.default);
    var _default = InternalWeb3Provider;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/MagicWeb3Connector.js
var require_MagicWeb3Connector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/MagicWeb3Connector.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _concat = _interopRequireDefault(require_concat4());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ethers = (init_lib(), __toCommonJS(lib_exports));
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var MagicWeb3Connector = /* @__PURE__ */ function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(MagicWeb3Connector2, _AbstractWeb3Connecto);
      var _super = _createSuper(MagicWeb3Connector2);
      function MagicWeb3Connector2() {
        var _context;
        var _this;
        (0, _classCallCheck2.default)(this, MagicWeb3Connector2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, (0, _concat.default)(_context = [this]).call(_context, args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", "MagicLink");
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "deactivate", /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
          return _regenerator.default.wrap(function(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _this.unsubscribeToEvents(_this.provider);
                  if (!_this.magicUser) {
                    _context2.next = 4;
                    break;
                  }
                  _context2.next = 4;
                  return _this.magicUser.user.logout();
                case 4:
                  _this.account = null;
                  _this.chainId = null;
                  _this.provider = null;
                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee);
        })));
        return _this;
      }
      (0, _createClass2.default)(MagicWeb3Connector2, [{
        key: "activate",
        value: function() {
          var _activate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            var _ref2, email, apiKey, network, newSession, magic, ether, Magic, _require, _window, _magic, _magic2, _magic2$user, loggedIn, signer, _yield$ether$getNetwo, chainId, address, _args2 = arguments;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _ref2 = _args2.length > 0 && _args2[0] !== void 0 ? _args2[0] : {}, email = _ref2.email, apiKey = _ref2.apiKey, network = _ref2.network, newSession = _ref2.newSession;
                    magic = null;
                    ether = null;
                    if (email) {
                      _context3.next = 5;
                      break;
                    }
                    throw new Error('"email" not provided, please provide Email');
                  case 5:
                    if (apiKey) {
                      _context3.next = 7;
                      break;
                    }
                    throw new Error('"apiKey" not provided, please provide Api Key');
                  case 7:
                    if (network) {
                      _context3.next = 9;
                      break;
                    }
                    throw new Error('"network" not provided, please provide network');
                  case 9:
                    try {
                      Magic = (_require = __require("magic-sdk")) === null || _require === void 0 ? void 0 : _require.Magic;
                    } catch (error) {
                    }
                    if (!Magic) {
                      Magic = (_window = window) === null || _window === void 0 ? void 0 : _window.Magic;
                    }
                    if (Magic) {
                      _context3.next = 13;
                      break;
                    }
                    throw new Error('Cannot enable via MagicLink: dependency "magic-sdk" is missing');
                  case 13:
                    _context3.prev = 13;
                    magic = new Magic(apiKey, {
                      network
                    });
                    if (!newSession) {
                      _context3.next = 24;
                      break;
                    }
                    if (!((_magic = magic) !== null && _magic !== void 0 && _magic.user)) {
                      _context3.next = 24;
                      break;
                    }
                    _context3.prev = 17;
                    _context3.next = 20;
                    return (_magic2 = magic) === null || _magic2 === void 0 ? void 0 : (_magic2$user = _magic2.user) === null || _magic2$user === void 0 ? void 0 : _magic2$user.logout();
                  case 20:
                    _context3.next = 24;
                    break;
                  case 22:
                    _context3.prev = 22;
                    _context3.t0 = _context3["catch"](17);
                  case 24:
                    ether = new _ethers.ethers.providers.Web3Provider(magic.rpcProvider);
                    _context3.next = 27;
                    return magic.auth.loginWithMagicLink({
                      email
                    });
                  case 27:
                    _context3.next = 32;
                    break;
                  case 29:
                    _context3.prev = 29;
                    _context3.t1 = _context3["catch"](13);
                    throw new Error("Error during enable via MagicLink, please double check network and apikey");
                  case 32:
                    _context3.next = 34;
                    return magic.user.isLoggedIn();
                  case 34:
                    loggedIn = _context3.sent;
                    if (!loggedIn) {
                      _context3.next = 50;
                      break;
                    }
                    signer = ether.getSigner();
                    _context3.next = 39;
                    return ether.getNetwork();
                  case 39:
                    _yield$ether$getNetwo = _context3.sent;
                    chainId = _yield$ether$getNetwo.chainId;
                    _context3.next = 43;
                    return signer.getAddress();
                  case 43:
                    address = _context3.sent.toLowerCase();
                    this.account = address;
                    this.provider = ether.provider;
                    this.chainId = "0x".concat(chainId.toString(16));
                    this.magicUser = magic;
                    this.subscribeToEvents(this.provider);
                    return _context3.abrupt("return", {
                      provider: this.provider,
                      account: this.account,
                      chainId: this.chainId
                    });
                  case 50:
                    throw new Error("Error during enable via MagicLink, login to magic failed");
                  case 51:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this, [[13, 29], [17, 22]]);
          }));
          return function() {
            return _activate.apply(this, arguments);
          };
        }()
      }]);
      return MagicWeb3Connector2;
    }(_AbstractWeb3Connector.default);
    exports.default = MagicWeb3Connector;
  }
});

// node_modules/moralis/lib/browser/Web3Connector/Web3AuthConnector.js
var require_Web3AuthConnector = __commonJS({
  "node_modules/moralis/lib/browser/Web3Connector/Web3AuthConnector.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Web3Auth = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _concat = _interopRequireDefault(require_concat4());
    var _promise = _interopRequireDefault(require_promise3());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ethers = (init_lib(), __toCommonJS(lib_exports));
    var _verifyChainId = _interopRequireDefault(require_verifyChainId());
    var _AbstractWeb3Connector = _interopRequireDefault(require_AbstractWeb3Connector());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Web3Auth = /* @__PURE__ */ function(_AbstractWeb3Connecto) {
      (0, _inherits2.default)(Web3Auth2, _AbstractWeb3Connecto);
      var _super = _createSuper(Web3Auth2);
      function Web3Auth2() {
        var _context;
        var _this;
        (0, _classCallCheck2.default)(this, Web3Auth2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, (0, _concat.default)(_context = [this]).call(_context, args));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "type", "web3Auth");
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "activate", /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
          var _ref2, _ref2$chainId, chainId, clientId, theme, appLogo, loginMethodsOrder, _Web3Auth, _require, _window, _window$Web3auth, ethChainConfig, web3auth, provider, _web3auth, _web3auth2, _web3auth3, isSocialLogin, ether, signer, values, providerChainId, _args = arguments;
          return _regenerator.default.wrap(function(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _ref2 = _args.length > 0 && _args[0] !== void 0 ? _args[0] : {}, _ref2$chainId = _ref2.chainId, chainId = _ref2$chainId === void 0 ? "0x1" : _ref2$chainId, clientId = _ref2.clientId, theme = _ref2.theme, appLogo = _ref2.appLogo, loginMethodsOrder = _ref2.loginMethodsOrder;
                  if (clientId) {
                    _context2.next = 3;
                    break;
                  }
                  throw new Error('"clientId" not provided, please provide clientId');
                case 3:
                  try {
                    _Web3Auth = (_require = (init_web3auth_esm(), __toCommonJS(web3auth_esm_exports))) === null || _require === void 0 ? void 0 : _require.Web3Auth;
                  } catch (_unused) {
                  }
                  if (!_Web3Auth) {
                    _Web3Auth = (_window = window) === null || _window === void 0 ? void 0 : (_window$Web3auth = _window.Web3auth) === null || _window$Web3auth === void 0 ? void 0 : _window$Web3auth.Web3Auth;
                  }
                  if (_Web3Auth) {
                    _context2.next = 7;
                    break;
                  }
                  throw new Error('"@web3auth/web3auth" not installed, please install');
                case 7:
                  ethChainConfig = {
                    chainNamespace: "eip155",
                    chainId: (0, _verifyChainId.default)(chainId)
                  };
                  try {
                    web3auth = new _Web3Auth({
                      chainConfig: ethChainConfig,
                      uiConfig: {
                        theme: theme !== null && theme !== void 0 ? theme : "dark",
                        appLogo: appLogo !== null && appLogo !== void 0 ? appLogo : "https://moralis.io/wp-content/uploads/2021/05/moralisWhiteLogo.svg",
                        loginMethodsOrder
                      },
                      clientId
                    });
                  } catch (_unused2) {
                  }
                  if (web3auth) {
                    _context2.next = 11;
                    break;
                  }
                  throw new Error("Could not connect via Web3Auth, error during initializing Web3Auth");
                case 11:
                  _context2.next = 13;
                  return web3auth.initModal();
                case 13:
                  provider = null;
                  _context2.prev = 14;
                  _context2.next = 17;
                  return web3auth.connect();
                case 17:
                  provider = _context2.sent;
                  _context2.next = 22;
                  break;
                case 20:
                  _context2.prev = 20;
                  _context2.t0 = _context2["catch"](14);
                case 22:
                  if (provider) {
                    _context2.next = 24;
                    break;
                  }
                  throw new Error("Could not connect via Web3Auth, error in connecting to provider");
                case 24:
                  _context2.prev = 24;
                  isSocialLogin = (_web3auth = web3auth) !== null && _web3auth !== void 0 && _web3auth.provider ? false : true;
                  ether = new _ethers.ethers.providers.Web3Provider((_web3auth2 = web3auth) !== null && _web3auth2 !== void 0 && _web3auth2.provider ? web3auth.provider : web3auth);
                  signer = ether.getSigner();
                  _context2.next = 30;
                  return _promise.default.all([ether.getNetwork(), signer.getAddress()]);
                case 30:
                  values = _context2.sent;
                  providerChainId = values[0].chainId;
                  _this.account = values[1].toLocaleLowerCase();
                  _this.chainId = "0x".concat(providerChainId.toString(16));
                  _this.provider = isSocialLogin ? ether : (_web3auth3 = web3auth) === null || _web3auth3 === void 0 ? void 0 : _web3auth3.provider;
                  _this.web3Instance = web3auth;
                  _this.subscribeToEvents(_this.provider);
                  return _context2.abrupt("return", {
                    chainId: _this.chainId,
                    account: _this.account,
                    provider: _this.provider
                  });
                case 40:
                  _context2.prev = 40;
                  _context2.t1 = _context2["catch"](24);
                  throw new Error("Could not connect via Web3Auth, error while authenticating");
                case 43:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee, null, [[14, 20], [24, 40]]);
        })));
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "deactivate", /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
          return _regenerator.default.wrap(function(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _this.unsubscribeToEvents(_this.provider);
                  if (!_this.web3Instance) {
                    _context3.next = 4;
                    break;
                  }
                  _context3.next = 4;
                  return _this.web3Instance.logout();
                case 4:
                  _this.account = null;
                  _this.chainId = null;
                  _this.provider = null;
                case 7:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee2);
        })));
        return _this;
      }
      return (0, _createClass2.default)(Web3Auth2);
    }(_AbstractWeb3Connector.default);
    exports.Web3Auth = Web3Auth;
  }
});

// node_modules/moralis/lib/browser/MoralisWeb3.js
var require_MoralisWeb3 = __commonJS({
  "node_modules/moralis/lib/browser/MoralisWeb3.js"(exports) {
    "use strict";
    init_react();
    var _typeof3 = require_typeof();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray = require_is_array4();
    var _WeakMap = require_weak_map3();
    var _Object$defineProperty = require_define_property3();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _filter = _interopRequireDefault(require_filter4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _concat = _interopRequireDefault(require_concat4());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _map = _interopRequireDefault(require_map9());
    var _trim = _interopRequireDefault(require_trim4());
    var _find = _interopRequireDefault(require_find4());
    var _every = _interopRequireDefault(require_every4());
    var _values = _interopRequireDefault(require_values3());
    var _bind = _interopRequireDefault(require_bind7());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ethers = (init_lib(), __toCommonJS(lib_exports));
    var _events = _interopRequireDefault(require_events());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _MoralisErd = _interopRequireDefault(require_MoralisErd());
    var _MoralisDot = _interopRequireDefault(require_MoralisDot());
    var _MoralisSol = _interopRequireDefault(require_MoralisSol());
    var _TransferUtils = _interopRequireDefault(require_TransferUtils());
    var _Cloud = require_Cloud();
    var _createSigningData = _interopRequireDefault(require_createSigningData());
    var _WalletConnectWeb3Connector = _interopRequireDefault(require_WalletConnectWeb3Connector());
    var _InjectedWeb3Connector = _interopRequireDefault(require_InjectedWeb3Connector());
    var _NetworkWeb3Connector = _interopRequireDefault(require_NetworkWeb3Connector());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _InternalWeb3Provider = _interopRequireWildcard(require_InternalWeb3Provider());
    var _detectProvider = _interopRequireDefault(require_dist());
    var _MagicWeb3Connector = _interopRequireDefault(require_MagicWeb3Connector());
    var _Web3AuthConnector = require_Web3AuthConnector();
    var _context30;
    var _context31;
    var _context32;
    var _context33;
    var _context34;
    var _context35;
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap();
      var cacheNodeInterop = new _WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i2 = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i2 >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i2++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context36;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty(_context36 = Object.prototype.toString.call(o2)).call(_context36, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    var MoralisEmitter = new _events.default();
    var ERROR_WEB3_MISSING = "Missing web3 instance, make sure to call Moralis.enableWeb3() or Moralis.authenticate()";
    var MoralisWeb3 = /* @__PURE__ */ function() {
      function MoralisWeb32() {
        (0, _classCallCheck2.default)(this, MoralisWeb32);
      }
      (0, _createClass2.default)(MoralisWeb32, null, [{
        key: "addListener",
        value: function(eventName, listener) {
          MoralisEmitter.on(eventName, listener);
          return function() {
            return MoralisEmitter.removeListener(eventName, listener);
          };
        }
      }, {
        key: "on",
        value: function(eventName, listener) {
          MoralisEmitter.on(eventName, listener);
          return function() {
            return MoralisEmitter.removeListener(eventName, listener);
          };
        }
      }, {
        key: "once",
        value: function(eventName, listener) {
          MoralisEmitter.once(eventName, listener);
          return function() {
            return MoralisEmitter.removeListener(eventName, listener);
          };
        }
      }, {
        key: "removeListener",
        value: function(eventName, listener) {
          return MoralisEmitter.removeListener(eventName, listener);
        }
      }, {
        key: "off",
        value: function(eventName, listener) {
          return MoralisEmitter.off(eventName, listener);
        }
      }, {
        key: "removeAllListeners",
        value: function(eventName, listener) {
          return MoralisEmitter.removeAllListeners(eventName, listener);
        }
      }, {
        key: "isWeb3Enabled",
        value: function() {
          return this.ensureWeb3IsInstalled();
        }
      }, {
        key: "handleWeb3AccountChanged",
        value: function(account) {
          MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.ACCOUNT_CHANGED, account);
        }
      }, {
        key: "handleWeb3ChainChanged",
        value: function(chainId) {
          var _this$internalWeb3Pro;
          this.web3 = (_this$internalWeb3Pro = this.internalWeb3Provider) === null || _this$internalWeb3Pro === void 0 ? void 0 : _this$internalWeb3Pro.web3;
          MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.CHAIN_CHANGED, chainId);
        }
      }, {
        key: "handleWeb3Connect",
        value: function(connectInfo) {
          MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_CONNECT, connectInfo);
        }
      }, {
        key: "handleWeb3Disconnect",
        value: function(error) {
          if ((error === null || error === void 0 ? void 0 : error.message) === "MetaMask: Disconnected from chain. Attempting to connect.") {
            return;
          }
          this.cleanup();
          MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_DISCONNECT, error);
        }
      }, {
        key: "enableWeb3",
        value: function() {
          var _enableWeb = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(options) {
            var _this = this;
            var _options$connector, Connector, connector, anyNetwork, provider, chainId, account, internalWeb3, _yield$this$internalW, web3;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (!this.isEnablingWeb3) {
                      _context.next = 2;
                      break;
                    }
                    throw new Error("Cannot execute Moralis.enableWeb3(), as Moralis Moralis.enableWeb3() already has been called, but is not finished yet ");
                  case 2:
                    _context.prev = 2;
                    this.isEnablingWeb3 = true;
                    if (this.speedyNodeApiKey) {
                      options.speedyNodeApiKey = this.speedyNodeApiKey;
                      options.provider = "network";
                    }
                    Connector = (_options$connector = options === null || options === void 0 ? void 0 : options.connector) !== null && _options$connector !== void 0 ? _options$connector : MoralisWeb32.getWeb3Connector(options === null || options === void 0 ? void 0 : options.provider);
                    connector = new Connector(options);
                    anyNetwork = (options === null || options === void 0 ? void 0 : options.anyNetwork) === true ? true : false;
                    this.internalWeb3Provider = new _InternalWeb3Provider.default(connector, anyNetwork);
                    this.internalWeb3Provider.on(_InternalWeb3Provider.InternalWeb3Events.ACCOUNT_CHANGED, function(args) {
                      return _this.handleWeb3AccountChanged(args);
                    });
                    this.internalWeb3Provider.on(_InternalWeb3Provider.InternalWeb3Events.CHAIN_CHANGED, function(args) {
                      return _this.handleWeb3ChainChanged(args);
                    });
                    this.internalWeb3Provider.on(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_CONNECT, function(args) {
                      return _this.handleWeb3Connect(args);
                    });
                    this.internalWeb3Provider.on(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_DISCONNECT, function(args) {
                      return _this.handleWeb3Disconnect(args);
                    });
                    _context.prev = 13;
                    _context.next = 16;
                    return this.internalWeb3Provider.activate(options);
                  case 16:
                    _yield$this$internalW = _context.sent;
                    provider = _yield$this$internalW.provider;
                    chainId = _yield$this$internalW.chainId;
                    account = _yield$this$internalW.account;
                    internalWeb3 = _yield$this$internalW.web3;
                    if (provider) {
                      _context.next = 23;
                      break;
                    }
                    throw new Error("Failed to activate, no provider returned");
                  case 23:
                    _context.next = 30;
                    break;
                  case 25:
                    _context.prev = 25;
                    _context.t0 = _context["catch"](13);
                    _context.next = 29;
                    return this.cleanup();
                  case 29:
                    throw _context.t0;
                  case 30:
                    web3 = internalWeb3;
                    this.web3 = internalWeb3;
                    MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.WEB3_ENABLED, {
                      chainId,
                      account,
                      connector,
                      provider,
                      web3
                    });
                    return _context.abrupt("return", web3);
                  case 36:
                    _context.prev = 36;
                    _context.t1 = _context["catch"](2);
                    throw _context.t1;
                  case 39:
                    _context.prev = 39;
                    this.isEnablingWeb3 = false;
                    return _context.finish(39);
                  case 42:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[2, 36, 39, 42], [13, 25]]);
          }));
          return function() {
            return _enableWeb.apply(this, arguments);
          };
        }()
      }, {
        key: "isDotAuth",
        value: function(options) {
          switch (options === null || options === void 0 ? void 0 : options.type) {
            case "dot":
            case "polkadot":
            case "kusama":
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "isElrondAuth",
        value: function(options) {
          switch (options === null || options === void 0 ? void 0 : options.type) {
            case "erd":
            case "elrond":
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "isSolAuth",
        value: function(options) {
          switch (options === null || options === void 0 ? void 0 : options.type) {
            case "sol":
              return true;
            default:
              return false;
          }
        }
      }, {
        key: "getWeb3Connector",
        value: function(provider) {
          switch (provider) {
            case "walletconnect":
            case "walletConnect":
            case "wc":
              return _WalletConnectWeb3Connector.default;
            case "network":
              return _NetworkWeb3Connector.default;
            case "magicLink":
              return _MagicWeb3Connector.default;
            case "web3Auth":
              return _Web3AuthConnector.Web3Auth;
            default:
              return _InjectedWeb3Connector.default;
          }
        }
      }, {
        key: "deactivateWeb3",
        value: function() {
          var _deactivateWeb = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    return _context2.abrupt("return", this.cleanup());
                  case 1:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
          return function() {
            return _deactivateWeb.apply(this, arguments);
          };
        }()
      }, {
        key: "cleanup",
        value: function() {
          var _cleanup = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (!this.isEnablingWeb3) {
                      _context3.next = 2;
                      break;
                    }
                    return _context3.abrupt("return");
                  case 2:
                    if (this.web3 && this.internalWeb3Provider) {
                      MoralisEmitter.emit(_InternalWeb3Provider.InternalWeb3Events.WEB3_DEACTIVATED, {
                        connector: this.internalWeb3Provider.connector,
                        provider: this.internalWeb3Provider.provider
                      });
                    }
                    if (!this.internalWeb3Provider) {
                      _context3.next = 15;
                      break;
                    }
                    this.internalWeb3Provider.removeListener(_InternalWeb3Provider.InternalWeb3Events.ACCOUNT_CHANGED, this.handleWeb3AccountChanged);
                    this.internalWeb3Provider.removeListener(_InternalWeb3Provider.InternalWeb3Events.CHAIN_CHANGED, this.handleWeb3ChainChanged);
                    this.internalWeb3Provider.removeListener(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_CONNECT, this.handleWeb3Connect);
                    this.internalWeb3Provider.removeListener(_InternalWeb3Provider.InternalWeb3Events.PROVIDER_DISCONNECT, this.handleWeb3Disconnect);
                    _context3.prev = 8;
                    _context3.next = 11;
                    return this.internalWeb3Provider.deactivate();
                  case 11:
                    _context3.next = 15;
                    break;
                  case 13:
                    _context3.prev = 13;
                    _context3.t0 = _context3["catch"](8);
                  case 15:
                    this.internalWeb3Provider = null;
                    this.web3 = null;
                  case 17:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this, [[8, 13]]);
          }));
          return function() {
            return _cleanup.apply(this, arguments);
          };
        }()
      }, {
        key: "authenticate",
        value: function() {
          var _authenticate = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(options) {
            var isLoggedIn, _this$getInternalWeb, account, internalWeb3, signer, message, data, ethAddress, signature, authData, user;
            return _regenerator.default.wrap(function(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return _ParseUser.default.currentAsync();
                  case 2:
                    isLoggedIn = _context4.sent;
                    if (!isLoggedIn) {
                      _context4.next = 6;
                      break;
                    }
                    _context4.next = 6;
                    return _ParseUser.default.logOut();
                  case 6:
                    if (!MoralisWeb32.isDotAuth(options)) {
                      _context4.next = 8;
                      break;
                    }
                    return _context4.abrupt("return", _MoralisDot.default.authenticate(options));
                  case 8:
                    if (!MoralisWeb32.isElrondAuth(options)) {
                      _context4.next = 10;
                      break;
                    }
                    return _context4.abrupt("return", _MoralisErd.default.authenticate(options));
                  case 10:
                    if (!MoralisWeb32.isSolAuth(options)) {
                      _context4.next = 12;
                      break;
                    }
                    return _context4.abrupt("return", _MoralisSol.default.authenticate(options));
                  case 12:
                    _context4.next = 14;
                    return this.enableWeb3(options);
                  case 14:
                    _this$getInternalWeb = this.getInternalWeb3Provider(), account = _this$getInternalWeb.account, internalWeb3 = _this$getInternalWeb.web3, signer = _this$getInternalWeb.signer;
                    if (account) {
                      _context4.next = 17;
                      break;
                    }
                    throw new Error("Cannot authenticate, no account returned from provider");
                  case 17:
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisWeb32.getSigningData();
                    _context4.next = 20;
                    return (0, _createSigningData.default)(message);
                  case 20:
                    data = _context4.sent;
                    ethAddress = account.toLowerCase();
                    if (ethAddress) {
                      _context4.next = 24;
                      break;
                    }
                    throw new Error("Address not found");
                  case 24:
                    _context4.next = 26;
                    return signer.signMessage(data);
                  case 26:
                    signature = _context4.sent;
                    if (signature) {
                      _context4.next = 29;
                      break;
                    }
                    throw new Error("Data not signed");
                  case 29:
                    authData = {
                      id: ethAddress,
                      signature,
                      data
                    };
                    _context4.next = 32;
                    return _ParseUser.default.logInWith("moralisEth", {
                      authData
                    });
                  case 32:
                    user = _context4.sent;
                    if (user) {
                      _context4.next = 35;
                      break;
                    }
                    throw new Error("Could not get user");
                  case 35:
                    _context4.next = 37;
                    return user.setACL(new _ParseACL.default(user));
                  case 37:
                    user.addAllUnique("accounts", [ethAddress]);
                    user.set("ethAddress", ethAddress);
                    _context4.next = 41;
                    return user.save(null, options);
                  case 41:
                    return _context4.abrupt("return", user);
                  case 42:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));
          return function() {
            return _authenticate.apply(this, arguments);
          };
        }()
      }, {
        key: "link",
        value: function() {
          var _link = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5(account, options) {
            var _this$getInternalWeb2, signer, message, user, ethAddress, EthAddress, query, ethAddressRecord, data, signature, authData;
            return _regenerator.default.wrap(function(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _this$getInternalWeb2 = this.getInternalWeb3Provider(), signer = _this$getInternalWeb2.signer;
                    message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisWeb32.getSigningData();
                    _context5.next = 4;
                    return _ParseUser.default.currentAsync();
                  case 4:
                    user = _context5.sent;
                    ethAddress = account.toLowerCase();
                    EthAddress = _ParseObject.default.extend("_EthAddress");
                    query = new _ParseQuery.default(EthAddress);
                    _context5.next = 10;
                    return query.get(ethAddress).catch(function() {
                      return null;
                    });
                  case 10:
                    ethAddressRecord = _context5.sent;
                    if (ethAddressRecord) {
                      _context5.next = 23;
                      break;
                    }
                    _context5.next = 14;
                    return (0, _createSigningData.default)(message);
                  case 14:
                    data = _context5.sent;
                    _context5.next = 17;
                    return signer.signMessage(data);
                  case 17:
                    signature = _context5.sent;
                    if (signature) {
                      _context5.next = 20;
                      break;
                    }
                    throw new Error("Data not signed");
                  case 20:
                    authData = {
                      id: ethAddress,
                      signature,
                      data
                    };
                    _context5.next = 23;
                    return user.linkWith("moralisEth", {
                      authData
                    });
                  case 23:
                    user.addAllUnique("accounts", [ethAddress]);
                    user.set("ethAddress", ethAddress);
                    _context5.next = 27;
                    return user.save(null, options);
                  case 27:
                    return _context5.abrupt("return", user);
                  case 28:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));
          return function() {
            return _link.apply(this, arguments);
          };
        }()
      }, {
        key: "unlink",
        value: function() {
          var _unlink = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6(account) {
            var _user$get;
            var accountsLower, EthAddress, query, ethAddressRecord, user, accounts, nextAccounts;
            return _regenerator.default.wrap(function(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    accountsLower = account.toLowerCase();
                    EthAddress = _ParseObject.default.extend("_EthAddress");
                    query = new _ParseQuery.default(EthAddress);
                    _context6.next = 5;
                    return query.get(accountsLower);
                  case 5:
                    ethAddressRecord = _context6.sent;
                    _context6.next = 8;
                    return ethAddressRecord.destroy();
                  case 8:
                    _context6.next = 10;
                    return _ParseUser.default.currentAsync();
                  case 10:
                    user = _context6.sent;
                    accounts = (_user$get = user.get("accounts")) !== null && _user$get !== void 0 ? _user$get : [];
                    nextAccounts = (0, _filter.default)(accounts).call(accounts, function(v2) {
                      return v2 !== accountsLower;
                    });
                    user.set("accounts", nextAccounts);
                    user.set("ethAddress", nextAccounts[0]);
                    _context6.next = 17;
                    return user._unlinkFrom("moralisEth");
                  case 17:
                    _context6.next = 19;
                    return user.save();
                  case 19:
                    return _context6.abrupt("return", user);
                  case 20:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6);
          }));
          return function() {
            return _unlink.apply(this, arguments);
          };
        }()
      }, {
        key: "initPlugins",
        value: function() {
          var _initPlugins = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee8(installedPlugins) {
            var _this2 = this;
            var specs, allPlugins;
            return _regenerator.default.wrap(function(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    _context10.t0 = installedPlugins;
                    if (_context10.t0) {
                      _context10.next = 5;
                      break;
                    }
                    _context10.next = 4;
                    return (0, _Cloud.run)("getPluginSpecs");
                  case 4:
                    _context10.t0 = _context10.sent;
                  case 5:
                    specs = _context10.t0;
                    if (!this.Plugins)
                      this.Plugins = {};
                    if (specs) {
                      _context10.next = 9;
                      break;
                    }
                    return _context10.abrupt("return");
                  case 9:
                    allPlugins = this.Plugins;
                    (0, _forEach.default)(specs).call(specs, function(plugin) {
                      var _context7;
                      allPlugins[plugin.name] = {};
                      (0, _forEach.default)(_context7 = plugin.functions).call(_context7, function(f2) {
                        allPlugins[plugin.name][f2] = /* @__PURE__ */ function() {
                          var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7(params, options) {
                            var _context8;
                            var response, error, triggerReturn;
                            return _regenerator.default.wrap(function(_context9) {
                              while (1) {
                                switch (_context9.prev = _context9.next) {
                                  case 0:
                                    if (!options)
                                      options = {};
                                    _context9.next = 3;
                                    return (0, _Cloud.run)((0, _concat.default)(_context8 = "".concat(plugin.name, "_")).call(_context8, f2), params);
                                  case 3:
                                    response = _context9.sent;
                                    if (response.data.success) {
                                      _context9.next = 7;
                                      break;
                                    }
                                    error = (0, _stringify.default)(response.data.data, null, 2);
                                    throw new Error("Something went wrong\n".concat(error));
                                  case 7:
                                    if (!(options.disableTriggers !== true)) {
                                      _context9.next = 13;
                                      break;
                                    }
                                    _context9.next = 10;
                                    return _this2.handleTriggers(response.data.result.triggers, response.data.result.data);
                                  case 10:
                                    triggerReturn = _context9.sent;
                                    if (!triggerReturn) {
                                      _context9.next = 13;
                                      break;
                                    }
                                    return _context9.abrupt("return", triggerReturn);
                                  case 13:
                                    return _context9.abrupt("return", response.data.result);
                                  case 14:
                                  case "end":
                                    return _context9.stop();
                                }
                              }
                            }, _callee7);
                          }));
                          return function() {
                            return _ref.apply(this, arguments);
                          };
                        }();
                      });
                    });
                    this.Plugins = allPlugins;
                  case 12:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee8, this);
          }));
          return function() {
            return _initPlugins.apply(this, arguments);
          };
        }()
      }, {
        key: "handleTriggers",
        value: function() {
          var _handleTriggers = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee9(triggersArray, payload) {
            var _this3 = this;
            var _loop, i2, _ret;
            return _regenerator.default.wrap(function(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    if (triggersArray) {
                      _context14.next = 2;
                      break;
                    }
                    return _context14.abrupt("return");
                  case 2:
                    _loop = /* @__PURE__ */ _regenerator.default.mark(function _loop2(i3) {
                      var _triggersArray$i, _triggersArray$i$data, _triggersArray$i2, _triggersArray$i2$dat, _triggersArray$i$data2, _triggersArray$i3, _triggersArray$i3$dat, _triggersArray$i4, _triggersArray$i4$dat, _triggersArray$i5, _triggersArray$i6, _triggersArray$i7, _triggersArray$i8, _triggersArray$i9, _triggersArray$i10, _triggersArray$i11, _triggersArray$i12, _triggersArray$i13, _triggersArray$i14, _triggersArray$i15, _triggersArray$i16, _triggersArray$i17, _triggersArray$i18, _triggersArray$i19, _triggersArray$i21, _triggersArray$i23, _triggersArray$i24, _triggersArray$i25;
                      var _response, _context11, _context12, _triggersArray$i20, _JSON$parse, domain, types, message, signature, result, _JSON$parse2, _domain, _types, _message;
                      return _regenerator.default.wrap(function(_context13) {
                        while (1) {
                          switch (_context13.prev = _context13.next) {
                            case 0:
                              _context13.t0 = triggersArray[i3].name;
                              _context13.next = _context13.t0 === "openUrl" ? 3 : _context13.t0 === "web3Transaction" ? 5 : _context13.t0 === "web3Sign" ? 18 : _context13.t0 === "callPluginEndpoint" ? 35 : _context13.t0 === "web3SignV4" ? 57 : 82;
                              break;
                            case 3:
                              if (triggersArray[i3].newTab)
                                window.open(triggersArray[i3].url);
                              else
                                window.open(triggersArray[i3].url, "_self");
                              return _context13.abrupt("break", 83);
                            case 5:
                              _context13.next = 7;
                              return _this3.getInternalWeb3Provider().signer.sendTransaction({
                                from: (_triggersArray$i = triggersArray[i3]) === null || _triggersArray$i === void 0 ? void 0 : (_triggersArray$i$data = _triggersArray$i.data) === null || _triggersArray$i$data === void 0 ? void 0 : _triggersArray$i$data.from,
                                to: (_triggersArray$i2 = triggersArray[i3]) === null || _triggersArray$i2 === void 0 ? void 0 : (_triggersArray$i2$dat = _triggersArray$i2.data) === null || _triggersArray$i2$dat === void 0 ? void 0 : _triggersArray$i2$dat.to,
                                value: _ethers.ethers.BigNumber.from((_triggersArray$i$data2 = (_triggersArray$i3 = triggersArray[i3]) === null || _triggersArray$i3 === void 0 ? void 0 : (_triggersArray$i3$dat = _triggersArray$i3.data) === null || _triggersArray$i3$dat === void 0 ? void 0 : _triggersArray$i3$dat.value) !== null && _triggersArray$i$data2 !== void 0 ? _triggersArray$i$data2 : 0),
                                data: (_triggersArray$i4 = triggersArray[i3]) === null || _triggersArray$i4 === void 0 ? void 0 : (_triggersArray$i4$dat = _triggersArray$i4.data) === null || _triggersArray$i4$dat === void 0 ? void 0 : _triggersArray$i4$dat.data
                              });
                            case 7:
                              _response = _context13.sent;
                              if (!(((_triggersArray$i5 = triggersArray[i3]) === null || _triggersArray$i5 === void 0 ? void 0 : _triggersArray$i5.shouldAwait) === true)) {
                                _context13.next = 12;
                                break;
                              }
                              _context13.next = 11;
                              return _response.wait();
                            case 11:
                              _response = _context13.sent;
                            case 12:
                              if (((_triggersArray$i6 = triggersArray[i3]) === null || _triggersArray$i6 === void 0 ? void 0 : _triggersArray$i6.saveResponse) === true)
                                _this3.memoryCard.save(_response);
                              if (!(((_triggersArray$i7 = triggersArray[i3]) === null || _triggersArray$i7 === void 0 ? void 0 : _triggersArray$i7.shouldReturnPayload) === true)) {
                                _context13.next = 15;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: {
                                  payload,
                                  response: _response
                                }
                              });
                            case 15:
                              if (!(((_triggersArray$i8 = triggersArray[i3]) === null || _triggersArray$i8 === void 0 ? void 0 : _triggersArray$i8.shouldReturnResponse) === true)) {
                                _context13.next = 17;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: _response
                              });
                            case 17:
                              return _context13.abrupt("break", 83);
                            case 18:
                              if (triggersArray[i3].message) {
                                _context13.next = 20;
                                break;
                              }
                              throw new Error("web3Sign trigger does not have a message to sign");
                            case 20:
                              if (!(!triggersArray[i3].signer || triggersArray[i3].signer)) {
                                _context13.next = 22;
                                break;
                              }
                              throw new Error("web3Sign trigger signer address missing or invalid");
                            case 22:
                              _context13.next = 24;
                              return _this3.getInternalWeb3Provider().signer.signMessage(triggersArray[i3].message);
                            case 24:
                              _response = _context13.sent;
                              if (!((_triggersArray$i9 = triggersArray[i3]) !== null && _triggersArray$i9 !== void 0 && _triggersArray$i9.shouldAwait)) {
                                _context13.next = 29;
                                break;
                              }
                              _context13.next = 28;
                              return _response.wait();
                            case 28:
                              _response = _context13.sent;
                            case 29:
                              if (((_triggersArray$i10 = triggersArray[i3]) === null || _triggersArray$i10 === void 0 ? void 0 : _triggersArray$i10.saveResponse) === true)
                                _this3.memoryCard.save(_response);
                              if (!(((_triggersArray$i11 = triggersArray[i3]) === null || _triggersArray$i11 === void 0 ? void 0 : _triggersArray$i11.shouldReturnPayload) === true)) {
                                _context13.next = 32;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: {
                                  payload,
                                  response: _response
                                }
                              });
                            case 32:
                              if (!(((_triggersArray$i12 = triggersArray[i3]) === null || _triggersArray$i12 === void 0 ? void 0 : _triggersArray$i12.shouldReturnResponse) === true)) {
                                _context13.next = 34;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: _response
                              });
                            case 34:
                              return _context13.abrupt("break", 83);
                            case 35:
                              if (triggersArray[i3].pluginName) {
                                _context13.next = 37;
                                break;
                              }
                              throw new Error("callPluginEndpoint trigger does not have an plugin name to call");
                            case 37:
                              if (triggersArray[i3].endpoint) {
                                _context13.next = 39;
                                break;
                              }
                              throw new Error("callPluginEndpoint trigger does not have an endpoint to call");
                            case 39:
                              if (!(((_triggersArray$i13 = triggersArray[i3]) === null || _triggersArray$i13 === void 0 ? void 0 : _triggersArray$i13.shouldAwait) === true)) {
                                _context13.next = 44;
                                break;
                              }
                              if (triggersArray[i3].useSavedResponse === true) {
                                triggersArray[i3].params[triggersArray[i3].savedResponseAs] = _this3.memoryCard.get(triggersArray[i3].savedResponseAt);
                              }
                              _context13.next = 43;
                              return (0, _Cloud.run)((0, _concat.default)(_context11 = "".concat(triggersArray[i3].pluginName, "_")).call(_context11, triggersArray[i3].endpoint), triggersArray[i3].params);
                            case 43:
                              _response = _context13.sent;
                            case 44:
                              if (((_triggersArray$i14 = triggersArray[i3]) === null || _triggersArray$i14 === void 0 ? void 0 : _triggersArray$i14.shouldAwait) === false) {
                                if (triggersArray[i3].useSavedResponse === true) {
                                  triggersArray[i3].params[triggersArray[i3].savedResponseAs] = _this3.memoryCard.get(triggersArray[i3].savedResponseAt);
                                }
                                _response = (0, _Cloud.run)((0, _concat.default)(_context12 = "".concat(triggersArray[i3].pluginName, "_")).call(_context12, triggersArray[i3].endpoint), triggersArray[i3].params);
                              }
                              if (!(triggersArray[i3].runResponseTrigger === true)) {
                                _context13.next = 49;
                                break;
                              }
                              _context13.next = 48;
                              return _this3.handleTriggers(_response.data.result.triggers, _response.data.result.data);
                            case 48:
                              _response = _context13.sent;
                            case 49:
                              if (((_triggersArray$i15 = triggersArray[i3]) === null || _triggersArray$i15 === void 0 ? void 0 : _triggersArray$i15.saveResponse) === true)
                                _this3.memoryCard.save(_response);
                              if (!(((_triggersArray$i16 = triggersArray[i3]) === null || _triggersArray$i16 === void 0 ? void 0 : _triggersArray$i16.runResponseTrigger) === false)) {
                                _context13.next = 52;
                                break;
                              }
                              return _context13.abrupt("return", "continue");
                            case 52:
                              if (!(((_triggersArray$i17 = triggersArray[i3]) === null || _triggersArray$i17 === void 0 ? void 0 : _triggersArray$i17.shouldReturnPayload) === true)) {
                                _context13.next = 54;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: {
                                  payload: "payload",
                                  response: _response
                                }
                              });
                            case 54:
                              if (!(((_triggersArray$i18 = triggersArray[i3]) === null || _triggersArray$i18 === void 0 ? void 0 : _triggersArray$i18.shouldReturnResponse) === true)) {
                                _context13.next = 56;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: _response
                              });
                            case 56:
                              return _context13.abrupt("break", 83);
                            case 57:
                              if (triggersArray[i3].parameters) {
                                _context13.next = 59;
                                break;
                              }
                              throw new Error("web3SignV4 trigger does not have `parameters` to sign");
                            case 59:
                              if (triggersArray[i3].from) {
                                _context13.next = 61;
                                break;
                              }
                              throw new Error("web3SignV4 trigger does not have a `from` address");
                            case 61:
                              if (!(((_triggersArray$i19 = triggersArray[i3]) === null || _triggersArray$i19 === void 0 ? void 0 : _triggersArray$i19.shouldAwait) === true)) {
                                _context13.next = 76;
                                break;
                              }
                              _context13.prev = 62;
                              _JSON$parse = JSON.parse(triggersArray[i3].parameters[1]), domain = _JSON$parse.domain, types = _JSON$parse.types, message = _JSON$parse.message;
                              if (types.EIP712Domain) {
                                delete types.EIP712Domain;
                              }
                              _context13.next = 67;
                              return _this3.getInternalWeb3Provider().signer._signTypedData(domain, types, message);
                            case 67:
                              signature = _context13.sent;
                              result = {
                                result: signature
                              };
                              if (((_triggersArray$i20 = triggersArray[i3]) === null || _triggersArray$i20 === void 0 ? void 0 : _triggersArray$i20.saveResponse) === true)
                                _this3.memoryCard.save(result);
                              _response = result;
                              _context13.next = 76;
                              break;
                            case 73:
                              _context13.prev = 73;
                              _context13.t1 = _context13["catch"](62);
                              throw new Error(_context13.t1.message || _context13.t1);
                            case 76:
                              if (((_triggersArray$i21 = triggersArray[i3]) === null || _triggersArray$i21 === void 0 ? void 0 : _triggersArray$i21.shouldAwait) === false) {
                                _JSON$parse2 = JSON.parse(triggersArray[i3].parameters[1]), _domain = _JSON$parse2.domain, _types = _JSON$parse2.types, _message = _JSON$parse2.message;
                                if (_types.EIP712Domain) {
                                  delete _types.EIP712Domain;
                                }
                                _this3.getInternalWeb3Provider().signer._signTypedData(_domain, _types, _message).then(function(signature2) {
                                  var _triggersArray$i22;
                                  var result2 = {
                                    result: signature2
                                  };
                                  if (((_triggersArray$i22 = triggersArray[i3]) === null || _triggersArray$i22 === void 0 ? void 0 : _triggersArray$i22.saveResponse) === true)
                                    _this3.memoryCard.save(result2);
                                  _response = result2;
                                }).catch(function(error) {
                                  throw new Error(error.message || error);
                                });
                              }
                              if (!(((_triggersArray$i23 = triggersArray[i3]) === null || _triggersArray$i23 === void 0 ? void 0 : _triggersArray$i23.shouldReturnPayload) === true)) {
                                _context13.next = 79;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: {
                                  payload,
                                  response: _response
                                }
                              });
                            case 79:
                              if (!(((_triggersArray$i24 = triggersArray[i3]) === null || _triggersArray$i24 === void 0 ? void 0 : _triggersArray$i24.shouldReturnResponse) === true)) {
                                _context13.next = 81;
                                break;
                              }
                              return _context13.abrupt("return", {
                                v: _response
                              });
                            case 81:
                              return _context13.abrupt("break", 83);
                            case 82:
                              throw new Error('Unknown trigger: "'.concat((_triggersArray$i25 = triggersArray[i3]) === null || _triggersArray$i25 === void 0 ? void 0 : _triggersArray$i25.name, '"'));
                            case 83:
                            case "end":
                              return _context13.stop();
                          }
                        }
                      }, _loop2, null, [[62, 73]]);
                    });
                    i2 = 0;
                  case 4:
                    if (!(i2 < triggersArray.length)) {
                      _context14.next = 14;
                      break;
                    }
                    return _context14.delegateYield(_loop(i2), "t0", 6);
                  case 6:
                    _ret = _context14.t0;
                    if (!(_ret === "continue")) {
                      _context14.next = 9;
                      break;
                    }
                    return _context14.abrupt("continue", 11);
                  case 9:
                    if (!((0, _typeof2.default)(_ret) === "object")) {
                      _context14.next = 11;
                      break;
                    }
                    return _context14.abrupt("return", _ret.v);
                  case 11:
                    i2++;
                    _context14.next = 4;
                    break;
                  case 14:
                    this.memoryCard.deleteSaved();
                  case 15:
                  case "end":
                    return _context14.stop();
                }
              }
            }, _callee9, this);
          }));
          return function() {
            return _handleTriggers.apply(this, arguments);
          };
        }()
      }, {
        key: "getAllERC20",
        value: function() {
          var _getAllERC = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee10() {
            var _ref2, chain, address, result, _args11 = arguments;
            return _regenerator.default.wrap(function(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    _ref2 = _args11.length > 0 && _args11[0] !== void 0 ? _args11[0] : {}, chain = _ref2.chain, address = _ref2.address;
                    _context15.next = 3;
                    return (0, _Cloud.run)("getAllERC20", {
                      chain,
                      address
                    });
                  case 3:
                    result = _context15.sent;
                    return _context15.abrupt("return", result);
                  case 5:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee10);
          }));
          return function() {
            return _getAllERC.apply(this, arguments);
          };
        }()
      }, {
        key: "getERC20",
        value: function() {
          var _getERC = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee11() {
            var _ref3, chain, address, symbol, tokenAddress, result, _args12 = arguments;
            return _regenerator.default.wrap(function(_context16) {
              while (1) {
                switch (_context16.prev = _context16.next) {
                  case 0:
                    _ref3 = _args12.length > 0 && _args12[0] !== void 0 ? _args12[0] : {}, chain = _ref3.chain, address = _ref3.address, symbol = _ref3.symbol, tokenAddress = _ref3.tokenAddress;
                    result = (0, _Cloud.run)("getERC20", {
                      chain,
                      address,
                      symbol,
                      tokenAddress
                    });
                    return _context16.abrupt("return", result);
                  case 3:
                  case "end":
                    return _context16.stop();
                }
              }
            }, _callee11);
          }));
          return function() {
            return _getERC.apply(this, arguments);
          };
        }()
      }, {
        key: "getNFTs",
        value: function() {
          var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref4$chain = _ref4.chain, chain = _ref4$chain === void 0 ? "Eth" : _ref4$chain, _ref4$address = _ref4.address, address = _ref4$address === void 0 ? "" : _ref4$address;
          return (0, _Cloud.run)("getNFTs_old", {
            chain,
            address
          });
        }
      }, {
        key: "getNFTsCount",
        value: function() {
          var _ref5 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref5$chain = _ref5.chain, chain = _ref5$chain === void 0 ? "Eth" : _ref5$chain, _ref5$address = _ref5.address, address = _ref5$address === void 0 ? "" : _ref5$address;
          return (0, _Cloud.run)("getNFTsCount_old", {
            chain,
            address
          });
        }
      }, {
        key: "getTransactions",
        value: function() {
          var _ref6 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref6$chain = _ref6.chain, chain = _ref6$chain === void 0 ? "Eth" : _ref6$chain, _ref6$address = _ref6.address, address = _ref6$address === void 0 ? "" : _ref6$address, _ref6$order = _ref6.order, order = _ref6$order === void 0 ? "desc" : _ref6$order;
          return (0, _Cloud.run)("getTransactions", {
            chain,
            address,
            order
          });
        }
      }, {
        key: "getTransactionsCount",
        value: function() {
          var _ref7 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref7$chain = _ref7.chain, chain = _ref7$chain === void 0 ? "Eth" : _ref7$chain, _ref7$address = _ref7.address, address = _ref7$address === void 0 ? "" : _ref7$address;
          return (0, _Cloud.run)("getTransactionsCount", {
            chain,
            address
          });
        }
      }, {
        key: "transfer",
        value: function() {
          var _transfer = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee12() {
            var _ref8, _ref8$type, type, _ref8$receiver, receiver, _ref8$contractAddress, contractAddress, contract_address, _ref8$amount, amount, _ref8$tokenId, tokenId, token_id, _ref8$system, system, options, _this$getInternalWeb3, internalWeb3, sender, signer, transferOperation, customToken, result, _args13 = arguments;
            return _regenerator.default.wrap(function(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    _ref8 = _args13.length > 0 && _args13[0] !== void 0 ? _args13[0] : {}, _ref8$type = _ref8.type, type = _ref8$type === void 0 ? "native" : _ref8$type, _ref8$receiver = _ref8.receiver, receiver = _ref8$receiver === void 0 ? "" : _ref8$receiver, _ref8$contractAddress = _ref8.contractAddress, contractAddress = _ref8$contractAddress === void 0 ? "" : _ref8$contractAddress, contract_address = _ref8.contract_address, _ref8$amount = _ref8.amount, amount = _ref8$amount === void 0 ? "" : _ref8$amount, _ref8$tokenId = _ref8.tokenId, tokenId = _ref8$tokenId === void 0 ? "" : _ref8$tokenId, token_id = _ref8.token_id, _ref8$system = _ref8.system, system = _ref8$system === void 0 ? "evm" : _ref8$system;
                    contractAddress = contractAddress || contract_address;
                    tokenId = tokenId || token_id;
                    options = {
                      receiver,
                      contractAddress,
                      amount,
                      tokenId,
                      system
                    };
                    _TransferUtils.default.isSupportedType(type);
                    _TransferUtils.default.validateInput(type, options);
                    _this$getInternalWeb3 = this.getInternalWeb3Provider(), internalWeb3 = _this$getInternalWeb3.web3, sender = _this$getInternalWeb3.account, signer = _this$getInternalWeb3.signer;
                    if (sender) {
                      _context17.next = 9;
                      break;
                    }
                    throw new Error("Sender address not found");
                  case 9:
                    if (tokenId)
                      _TransferUtils.default.isUint256(tokenId);
                    if (type !== "native") {
                      customToken = new _ethers.ethers.Contract(contractAddress, _TransferUtils.default.abi[type], signer);
                    }
                    _context17.t0 = type;
                    _context17.next = _context17.t0 === "native" ? 14 : _context17.t0 === "erc20" ? 16 : _context17.t0 === "erc721" ? 18 : _context17.t0 === "erc1155" ? 20 : 22;
                    break;
                  case 14:
                    transferOperation = signer.sendTransaction({
                      to: receiver,
                      value: _ethers.ethers.BigNumber.from(amount)
                    });
                    return _context17.abrupt("break", 23);
                  case 16:
                    transferOperation = customToken.transfer(receiver, amount, {
                      from: sender
                    });
                    return _context17.abrupt("break", 23);
                  case 18:
                    transferOperation = customToken.safeTransferFrom(sender, receiver, "".concat(tokenId), {
                      from: sender
                    });
                    return _context17.abrupt("break", 23);
                  case 20:
                    transferOperation = customToken.safeTransferFrom(sender, receiver, "".concat(tokenId), amount, "0x", {
                      from: sender
                    });
                    return _context17.abrupt("break", 23);
                  case 22:
                    throw new Error('Unknown transfer type: "'.concat(type, '"'));
                  case 23:
                    _context17.next = 25;
                    return transferOperation;
                  case 25:
                    result = _context17.sent;
                    return _context17.abrupt("return", result);
                  case 27:
                  case "end":
                    return _context17.stop();
                }
              }
            }, _callee12, this);
          }));
          return function() {
            return _transfer.apply(this, arguments);
          };
        }()
      }, {
        key: "executeFunction",
        value: function() {
          var _executeFunction = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee13() {
            var _functionData, _context25, _context26;
            var _ref9, contractAddress, abi, functionName, msgValue, _ref9$params, params, _ref9$overrides, overrides, contractOptions, _this$getInternalWeb4, account, internalWeb3, provider, signerOrProvider, overloadedFunction, functionData, _context18, _context19, nameWithoutTopics, topics, functionDataArray, possibleTopics, _functionDataArray, _possibleTopics, stateMutability, isReadFunction, currentAddress, errors, _iterator, _step, input, value, parsedInputs, contract, contractMethod, response, _args14 = arguments;
            return _regenerator.default.wrap(function(_context27) {
              while (1) {
                switch (_context27.prev = _context27.next) {
                  case 0:
                    _ref9 = _args14.length > 0 && _args14[0] !== void 0 ? _args14[0] : {}, contractAddress = _ref9.contractAddress, abi = _ref9.abi, functionName = _ref9.functionName, msgValue = _ref9.msgValue, _ref9$params = _ref9.params, params = _ref9$params === void 0 ? {} : _ref9$params, _ref9$overrides = _ref9.overrides, overrides = _ref9$overrides === void 0 ? {} : _ref9$overrides;
                    contractOptions = {};
                    _this$getInternalWeb4 = this.getInternalWeb3Provider(), account = _this$getInternalWeb4.account, internalWeb3 = _this$getInternalWeb4.web3, provider = _this$getInternalWeb4.provider, signerOrProvider = _this$getInternalWeb4.signerOrProvider;
                    overloadedFunction = functionName.match(/^(.+)\((.*)\)$/);
                    if (!overloadedFunction) {
                      _context27.next = 16;
                      break;
                    }
                    nameWithoutTopics = overloadedFunction[1];
                    topics = (0, _filter.default)(_context18 = (0, _map.default)(_context19 = overloadedFunction[2].split(",")).call(_context19, function(topic) {
                      return (0, _trim.default)(topic).call(topic);
                    })).call(_context18, function(topic) {
                      return !!topic;
                    });
                    functionDataArray = (0, _filter.default)(abi).call(abi, function(x2) {
                      return x2.name === nameWithoutTopics;
                    });
                    if (!(functionDataArray.length === 0)) {
                      _context27.next = 10;
                      break;
                    }
                    throw new Error("Function does not exist in abi");
                  case 10:
                    functionData = (0, _find.default)(functionDataArray).call(functionDataArray, function(data) {
                      var _data$inputs$length, _context20;
                      return ((_data$inputs$length = data === null || data === void 0 ? void 0 : data.inputs.length) !== null && _data$inputs$length !== void 0 ? _data$inputs$length : 0) === topics.length && (0, _every.default)(_context20 = data.inputs).call(_context20, function(input2, index) {
                        return input2.type === topics[index];
                      });
                    });
                    if (functionData) {
                      _context27.next = 14;
                      break;
                    }
                    possibleTopics = (0, _map.default)(functionDataArray).call(functionDataArray, function(data) {
                      var _context21, _context22;
                      return (0, _concat.default)(_context21 = "".concat(data.name, "(")).call(_context21, (0, _map.default)(_context22 = data.inputs).call(_context22, function(input2) {
                        return input2.type;
                      }).join(","), ")");
                    });
                    throw new Error("Function with the provided topic does not exist in abi. Possible funcationNames: ".concat(possibleTopics.join(" ,")));
                  case 14:
                    _context27.next = 23;
                    break;
                  case 16:
                    _functionDataArray = (0, _filter.default)(abi).call(abi, function(x2) {
                      return x2.name === functionName;
                    });
                    if (!(_functionDataArray.length === 0)) {
                      _context27.next = 19;
                      break;
                    }
                    throw new Error("Function does not exist in abi");
                  case 19:
                    if (!(_functionDataArray.length > 1)) {
                      _context27.next = 22;
                      break;
                    }
                    _possibleTopics = (0, _map.default)(_functionDataArray).call(_functionDataArray, function(data) {
                      var _context23, _context24;
                      return (0, _concat.default)(_context23 = "".concat(data.name, "(")).call(_context23, (0, _map.default)(_context24 = data.inputs).call(_context24, function(input2) {
                        return input2.type;
                      }).join(","), ")");
                    });
                    throw new Error("Multiple function definitions found in the abi. Please include the topic in the functionName. Possible funcationNames: ".concat(_possibleTopics.join(" ,")));
                  case 22:
                    functionData = _functionDataArray[0];
                  case 23:
                    stateMutability = (_functionData = functionData) === null || _functionData === void 0 ? void 0 : _functionData.stateMutability;
                    isReadFunction = stateMutability === "view" || stateMutability === "pure";
                    if (isReadFunction) {
                      _context27.next = 31;
                      break;
                    }
                    if (params.from) {
                      _context27.next = 31;
                      break;
                    }
                    currentAddress = account;
                    if (currentAddress) {
                      _context27.next = 30;
                      break;
                    }
                    throw new Error("From address is required");
                  case 30:
                    contractOptions.from = currentAddress;
                  case 31:
                    errors = [];
                    _iterator = _createForOfIteratorHelper(functionData.inputs);
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        input = _step.value;
                        value = params[input.name];
                        if (!value && typeof value !== "number" && typeof value !== "boolean") {
                          errors.push("".concat(input.name, " is required"));
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                    if (!(errors.length > 0)) {
                      _context27.next = 36;
                      break;
                    }
                    throw errors;
                  case 36:
                    parsedInputs = (0, _map.default)(_context25 = functionData.inputs).call(_context25, function(x2) {
                      return params[x2.name];
                    });
                    contract = new _ethers.ethers.Contract(contractAddress, abi, signerOrProvider);
                    contractMethod = contract[functionName];
                    if (contractMethod) {
                      _context27.next = 41;
                      break;
                    }
                    throw new Error('Cannot find function "'.concat(functionName, '" on the contract'));
                  case 41:
                    _context27.next = 43;
                    return contractMethod.apply(void 0, (0, _concat.default)(_context26 = (0, _toConsumableArray2.default)((0, _values.default)(parsedInputs))).call(_context26, [msgValue ? {
                      value: _ethers.ethers.BigNumber.from("".concat(msgValue))
                    } : {}]));
                  case 43:
                    response = _context27.sent;
                    return _context27.abrupt("return", response);
                  case 45:
                  case "end":
                    return _context27.stop();
                }
              }
            }, _callee13, this);
          }));
          return function() {
            return _executeFunction.apply(this, arguments);
          };
        }()
      }, {
        key: "getSigningData",
        value: function() {
          return "Moralis Authentication";
        }
      }, {
        key: "ensureWeb3IsInstalled",
        value: function() {
          return this.internalWeb3Provider && this.internalWeb3Provider.web3 ? true : false;
        }
      }, {
        key: "getInternalWeb3Provider",
        value: function() {
          if (!this.ensureWeb3IsInstalled())
            throw new Error(ERROR_WEB3_MISSING);
          return this.internalWeb3Provider;
        }
      }, {
        key: "getInternalWeb3",
        value: function() {
          return this.getInternalWeb3Provider().web3;
        }
      }, {
        key: "provider",
        get: function() {
          var _this$internalWeb3Pro2, _this$internalWeb3Pro3;
          return (_this$internalWeb3Pro2 = (_this$internalWeb3Pro3 = this.internalWeb3Provider) === null || _this$internalWeb3Pro3 === void 0 ? void 0 : _this$internalWeb3Pro3.provider) !== null && _this$internalWeb3Pro2 !== void 0 ? _this$internalWeb3Pro2 : null;
        }
      }, {
        key: "connector",
        get: function() {
          var _this$internalWeb3Pro4, _this$internalWeb3Pro5;
          return (_this$internalWeb3Pro4 = (_this$internalWeb3Pro5 = this.internalWeb3Provider) === null || _this$internalWeb3Pro5 === void 0 ? void 0 : _this$internalWeb3Pro5.connector) !== null && _this$internalWeb3Pro4 !== void 0 ? _this$internalWeb3Pro4 : null;
        }
      }, {
        key: "connectorType",
        get: function() {
          var _this$connector$type, _this$connector;
          return (_this$connector$type = (_this$connector = this.connector) === null || _this$connector === void 0 ? void 0 : _this$connector.type) !== null && _this$connector$type !== void 0 ? _this$connector$type : null;
        }
      }, {
        key: "network",
        get: function() {
          var _this$connector$netwo, _this$connector2;
          return (_this$connector$netwo = (_this$connector2 = this.connector) === null || _this$connector2 === void 0 ? void 0 : _this$connector2.network) !== null && _this$connector$netwo !== void 0 ? _this$connector$netwo : null;
        }
      }, {
        key: "account",
        get: function() {
          var _this$internalWeb3Pro6, _this$internalWeb3Pro7;
          return (_this$internalWeb3Pro6 = (_this$internalWeb3Pro7 = this.internalWeb3Provider) === null || _this$internalWeb3Pro7 === void 0 ? void 0 : _this$internalWeb3Pro7.account) !== null && _this$internalWeb3Pro6 !== void 0 ? _this$internalWeb3Pro6 : null;
        }
      }, {
        key: "chainId",
        get: function() {
          var _this$internalWeb3Pro8, _this$internalWeb3Pro9;
          return (_this$internalWeb3Pro8 = (_this$internalWeb3Pro9 = this.internalWeb3Provider) === null || _this$internalWeb3Pro9 === void 0 ? void 0 : _this$internalWeb3Pro9.chainId) !== null && _this$internalWeb3Pro8 !== void 0 ? _this$internalWeb3Pro8 : null;
        }
      }, {
        key: "getChainId",
        value: function() {
          return this.chainId;
        }
      }, {
        key: "web3Library",
        get: function() {
          return _ethers.ethers;
        }
      }, {
        key: "_forwardToConnector",
        value: function(methodName, args) {
          var _this$getInternalWeb5 = this.getInternalWeb3Provider(), connector = _this$getInternalWeb5.connector;
          var hasMethod = Boolean(connector[methodName]);
          if (!hasMethod) {
            var _context28;
            throw new Error((0, _concat.default)(_context28 = "Cannot call ".concat(methodName, ', as it does not exist on connector type "')).call(_context28, connector.type, '"'));
          }
          return connector[methodName].apply(connector, (0, _toConsumableArray2.default)(args));
        }
      }, {
        key: "switchNetwork",
        value: function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return this._forwardToConnector("switchNetwork", args);
        }
      }, {
        key: "addNetwork",
        value: function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return this._forwardToConnector("addNetwork", args);
        }
      }, {
        key: "isMetaMaskInstalled",
        value: function() {
          var _isMetaMaskInstalled = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee14() {
            return _regenerator.default.wrap(function(_context29) {
              while (1) {
                switch (_context29.prev = _context29.next) {
                  case 0:
                    _context29.next = 2;
                    return (0, _detectProvider.default)();
                  case 2:
                    if (!_context29.sent) {
                      _context29.next = 6;
                      break;
                    }
                    _context29.t0 = true;
                    _context29.next = 7;
                    break;
                  case 6:
                    _context29.t0 = false;
                  case 7:
                    return _context29.abrupt("return", _context29.t0);
                  case 8:
                  case "end":
                    return _context29.stop();
                }
              }
            }, _callee14);
          }));
          return function() {
            return _isMetaMaskInstalled.apply(this, arguments);
          };
        }()
      }]);
      return MoralisWeb32;
    }();
    (0, _defineProperty2.default)(MoralisWeb3, "speedyNodeApiKey", void 0);
    (0, _defineProperty2.default)(MoralisWeb3, "web3", null);
    (0, _defineProperty2.default)(MoralisWeb3, "internalWeb3Provider", null);
    (0, _defineProperty2.default)(MoralisWeb3, "Plugins", {});
    (0, _defineProperty2.default)(MoralisWeb3, "isEnablingWeb3", false);
    (0, _defineProperty2.default)(MoralisWeb3, "memoryCard", {
      save: function(what) {
        this.saved = what;
      },
      get: function(where) {
        if (!this.saved)
          throw new Error("Nothing saved to memory card");
        if (where.length === 0)
          return this.getSaved();
        var tmp;
        var savedTmp = this.saved;
        for (var i2 = 0; i2 < where.length; i2++) {
          tmp = savedTmp[where[i2]];
          savedTmp = tmp;
        }
        return savedTmp;
      },
      getSaved: function() {
        return this.saved;
      },
      deleteSaved: function() {
        this.saved = void 0;
      }
    });
    MoralisWeb3.onConnect = (0, _bind.default)(_context30 = MoralisWeb3.on).call(_context30, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.PROVIDER_CONNECT);
    MoralisWeb3.onDisconnect = (0, _bind.default)(_context31 = MoralisWeb3.on).call(_context31, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.PROVIDER_DISCONNECT);
    MoralisWeb3.onWeb3Enabled = (0, _bind.default)(_context32 = MoralisWeb3.on).call(_context32, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.WEB3_ENABLED);
    MoralisWeb3.onWeb3Deactivated = (0, _bind.default)(_context33 = MoralisWeb3.on).call(_context33, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.WEB3_DEACTIVATED);
    MoralisWeb3.onChainChanged = (0, _bind.default)(_context34 = MoralisWeb3.on).call(_context34, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.CHAIN_CHANGED);
    MoralisWeb3.onAccountChanged = (0, _bind.default)(_context35 = MoralisWeb3.on).call(_context35, MoralisWeb3, _InternalWeb3Provider.InternalWeb3Events.ACCOUNT_CHANGED);
    var _default = MoralisWeb3;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/StorageController.browser.js
var require_StorageController_browser = __commonJS({
  "node_modules/moralis/lib/browser/StorageController.browser.js"(exports, module) {
    "use strict";
    init_react();
    var StorageController = {
      async: 0,
      getItem: function(path) {
        return localStorage.getItem(path);
      },
      setItem: function(path, value) {
        try {
          localStorage.setItem(path, value);
        } catch (e) {
          console.log(e.message);
        }
      },
      removeItem: function(path) {
        localStorage.removeItem(path);
      },
      getAllKeys: function() {
        var keys = [];
        for (var i2 = 0; i2 < localStorage.length; i2 += 1) {
          keys.push(localStorage.key(i2));
        }
        return keys;
      },
      clear: function() {
        localStorage.clear();
      }
    };
    module.exports = StorageController;
  }
});

// node_modules/moralis/lib/browser/Storage.js
var require_Storage = __commonJS({
  "node_modules/moralis/lib/browser/Storage.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _promise = _interopRequireDefault(require_promise3());
    var _concat = _interopRequireDefault(require_concat4());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var Storage = {
      async: function() {
        var controller = _CoreManager.default.getStorageController();
        return !!controller.async;
      },
      getItem: function(path) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          throw new Error("Synchronous storage is not supported by the current storage controller");
        }
        return controller.getItem(path);
      },
      getItemAsync: function(path) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          return controller.getItemAsync(path);
        }
        return _promise.default.resolve(controller.getItem(path));
      },
      setItem: function(path, value) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          throw new Error("Synchronous storage is not supported by the current storage controller");
        }
        return controller.setItem(path, value);
      },
      setItemAsync: function(path, value) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          return controller.setItemAsync(path, value);
        }
        return _promise.default.resolve(controller.setItem(path, value));
      },
      removeItem: function(path) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          throw new Error("Synchronous storage is not supported by the current storage controller");
        }
        return controller.removeItem(path);
      },
      removeItemAsync: function(path) {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          return controller.removeItemAsync(path);
        }
        return _promise.default.resolve(controller.removeItem(path));
      },
      getAllKeys: function() {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          throw new Error("Synchronous storage is not supported by the current storage controller");
        }
        return controller.getAllKeys();
      },
      getAllKeysAsync: function() {
        var controller = _CoreManager.default.getStorageController();
        if (controller.async === 1) {
          return controller.getAllKeysAsync();
        }
        return _promise.default.resolve(controller.getAllKeys());
      },
      generatePath: function(path) {
        var _context;
        if (!_CoreManager.default.get("APPLICATION_ID")) {
          throw new Error("You need to call Moralis.start with an applicationId before using Moralis.");
        }
        if (typeof path !== "string") {
          throw new Error("Tried to get a Storage path that was not a String.");
        }
        if (path[0] === "/") {
          path = path.substr(1);
        }
        return (0, _concat.default)(_context = "Parse/".concat(_CoreManager.default.get("APPLICATION_ID"), "/")).call(_context, path);
      },
      _clear: function() {
        var controller = _CoreManager.default.getStorageController();
        if (controller.hasOwnProperty("clear")) {
          controller.clear();
        }
      }
    };
    module.exports = Storage;
    _CoreManager.default.setStorageController(require_StorageController_browser());
  }
});

// node_modules/moralis/lib/browser/ParseUser.js
var require_ParseUser = __commonJS({
  "node_modules/moralis/lib/browser/ParseUser.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty2 = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty2(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _promise = _interopRequireDefault(require_promise3());
    var _defineProperty = _interopRequireDefault(require_define_property3());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _get2 = _interopRequireDefault(require_get6());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _AnonymousUtils = _interopRequireDefault(require_AnonymousUtils());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _isRevocableSession = _interopRequireDefault(require_isRevocableSession());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _ParseObject2 = _interopRequireDefault(require_ParseObject());
    var _ParseSession = _interopRequireDefault(require_ParseSession());
    var _MoralisWeb = _interopRequireDefault(require_MoralisWeb3());
    var _Storage = _interopRequireDefault(require_Storage());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var CURRENT_USER_KEY = "currentUser";
    var canUseCurrentUser = !_CoreManager.default.get("IS_NODE");
    var currentUserCacheMatchesDisk = false;
    var currentUserCache = null;
    var authProviders = {};
    var ParseUser = /* @__PURE__ */ function(_ParseObject) {
      (0, _inherits2.default)(ParseUser2, _ParseObject);
      var _super = _createSuper(ParseUser2);
      function ParseUser2(attributes) {
        var _this;
        (0, _classCallCheck2.default)(this, ParseUser2);
        _this = _super.call(this, "_User");
        if (attributes && (0, _typeof2.default)(attributes) === "object") {
          if (!_this.set(attributes || {})) {
            throw new Error("Can't create an invalid Parse User");
          }
        }
        return _this;
      }
      (0, _createClass2.default)(ParseUser2, [{
        key: "_upgradeToRevocableSession",
        value: function(options) {
          options = options || {};
          var upgradeOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            upgradeOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.upgradeToRevocableSession(this, upgradeOptions);
        }
      }, {
        key: "linkWith",
        value: function(provider, options) {
          var _this2 = this;
          var saveOpts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || "";
          var authType;
          if (typeof provider === "string") {
            authType = provider;
            if (authProviders[provider]) {
              provider = authProviders[provider];
            } else {
              var authProvider = {
                restoreAuthentication: function() {
                  return true;
                },
                getAuthType: function() {
                  return authType;
                }
              };
              authProviders[authProvider.getAuthType()] = authProvider;
              provider = authProvider;
            }
          } else {
            authType = provider.getAuthType();
          }
          if (options && options.hasOwnProperty("authData")) {
            var authData = this.get("authData") || {};
            if ((0, _typeof2.default)(authData) !== "object") {
              throw new Error("Invalid type: authData field should be an object");
            }
            authData[authType] = options.authData;
            var controller = _CoreManager.default.getUserController();
            return controller.linkWith(this, authData, saveOpts);
          }
          return new _promise.default(function(resolve, reject) {
            provider.authenticate({
              success: function(provider2, result) {
                var opts = {};
                opts.authData = result;
                _this2.linkWith(provider2, opts, saveOpts).then(function() {
                  resolve(_this2);
                }, function(error) {
                  reject(error);
                });
              },
              error: function(provider2, _error) {
                reject(_error);
              }
            });
          });
        }
      }, {
        key: "_linkWith",
        value: function(provider, options) {
          var saveOpts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          return this.linkWith(provider, options, saveOpts);
        }
      }, {
        key: "_synchronizeAuthData",
        value: function(provider) {
          if (!this.isCurrent() || !provider) {
            return;
          }
          var authType;
          if (typeof provider === "string") {
            authType = provider;
            provider = authProviders[authType];
          } else {
            authType = provider.getAuthType();
          }
          var authData = this.get("authData");
          if (!provider || !authData || (0, _typeof2.default)(authData) !== "object") {
            return;
          }
          var success = provider.restoreAuthentication(authData[authType]);
          if (!success) {
            this._unlinkFrom(provider);
          }
        }
      }, {
        key: "_synchronizeAllAuthData",
        value: function() {
          var authData = this.get("authData");
          if ((0, _typeof2.default)(authData) !== "object") {
            return;
          }
          for (var _key in authData) {
            this._synchronizeAuthData(_key);
          }
        }
      }, {
        key: "_cleanupAuthData",
        value: function() {
          if (!this.isCurrent()) {
            return;
          }
          var authData = this.get("authData");
          if ((0, _typeof2.default)(authData) !== "object") {
            return;
          }
          for (var _key2 in authData) {
            if (!authData[_key2]) {
              delete authData[_key2];
            }
          }
        }
      }, {
        key: "_unlinkFrom",
        value: function(provider, options) {
          var _this3 = this;
          return this.linkWith(provider, {
            authData: null
          }, options).then(function() {
            _this3._synchronizeAuthData(provider);
            return _promise.default.resolve(_this3);
          });
        }
      }, {
        key: "_isLinked",
        value: function(provider) {
          var authType;
          if (typeof provider === "string") {
            authType = provider;
          } else {
            authType = provider.getAuthType();
          }
          var authData = this.get("authData") || {};
          if ((0, _typeof2.default)(authData) !== "object") {
            return false;
          }
          return !!authData[authType];
        }
      }, {
        key: "_logOutWithAll",
        value: function() {
          var authData = this.get("authData");
          if ((0, _typeof2.default)(authData) !== "object") {
            return;
          }
          for (var _key3 in authData) {
            this._logOutWith(_key3);
          }
        }
      }, {
        key: "_logOutWith",
        value: function(provider) {
          if (!this.isCurrent()) {
            return;
          }
          if (typeof provider === "string") {
            provider = authProviders[provider];
          }
          if (provider && provider.deauthenticate) {
            provider.deauthenticate();
          }
        }
      }, {
        key: "_preserveFieldsOnFetch",
        value: function() {
          return {
            sessionToken: this.get("sessionToken")
          };
        }
      }, {
        key: "isCurrent",
        value: function() {
          var current = ParseUser2.current();
          return !!current && current.id === this.id;
        }
      }, {
        key: "getUsername",
        value: function() {
          var username = this.get("username");
          if (username == null || typeof username === "string") {
            return username;
          }
          return "";
        }
      }, {
        key: "setUsername",
        value: function(username) {
          var authData = this.get("authData");
          if (authData && (0, _typeof2.default)(authData) === "object" && authData.hasOwnProperty("anonymous")) {
            authData.anonymous = null;
          }
          this.set("username", username);
        }
      }, {
        key: "setPassword",
        value: function(password) {
          this.set("password", password);
        }
      }, {
        key: "getEmail",
        value: function() {
          var email = this.get("email");
          if (email == null || typeof email === "string") {
            return email;
          }
          return "";
        }
      }, {
        key: "setEmail",
        value: function(email) {
          return this.set("email", email);
        }
      }, {
        key: "getSessionToken",
        value: function() {
          var token = this.get("sessionToken");
          if (token == null || typeof token === "string") {
            return token;
          }
          return "";
        }
      }, {
        key: "authenticated",
        value: function() {
          var current = ParseUser2.current();
          return !!this.get("sessionToken") && !!current && current.id === this.id;
        }
      }, {
        key: "signUp",
        value: function(attrs, options) {
          options = options || {};
          var signupOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            signupOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("installationId")) {
            signupOptions.installationId = options.installationId;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.signUp(this, attrs, signupOptions);
        }
      }, {
        key: "logIn",
        value: function(options) {
          options = options || {};
          var loginOptions = {
            usePost: true
          };
          if (options.hasOwnProperty("useMasterKey")) {
            loginOptions.useMasterKey = options.useMasterKey;
          }
          if (options.hasOwnProperty("installationId")) {
            loginOptions.installationId = options.installationId;
          }
          if (options.hasOwnProperty("usePost")) {
            loginOptions.usePost = options.usePost;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.logIn(this, loginOptions);
        }
      }, {
        key: "save",
        value: function() {
          var _this4 = this;
          for (var _len = arguments.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {
            args[_key4] = arguments[_key4];
          }
          return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser2.prototype), "save", this).apply(this, args).then(function() {
            if (_this4.isCurrent()) {
              return _CoreManager.default.getUserController().updateUserOnDisk(_this4);
            }
            return _this4;
          });
        }
      }, {
        key: "destroy",
        value: function() {
          var _this5 = this;
          for (var _len2 = arguments.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {
            args[_key5] = arguments[_key5];
          }
          return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser2.prototype), "destroy", this).apply(this, args).then(function() {
            if (_this5.isCurrent()) {
              return _CoreManager.default.getUserController().removeUserFromDisk();
            }
            return _this5;
          });
        }
      }, {
        key: "fetch",
        value: function() {
          var _this6 = this;
          for (var _len3 = arguments.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {
            args[_key6] = arguments[_key6];
          }
          return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser2.prototype), "fetch", this).apply(this, args).then(function() {
            if (_this6.isCurrent()) {
              return _CoreManager.default.getUserController().updateUserOnDisk(_this6);
            }
            return _this6;
          });
        }
      }, {
        key: "fetchWithInclude",
        value: function() {
          var _this7 = this;
          for (var _len4 = arguments.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {
            args[_key7] = arguments[_key7];
          }
          return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser2.prototype), "fetchWithInclude", this).apply(this, args).then(function() {
            if (_this7.isCurrent()) {
              return _CoreManager.default.getUserController().updateUserOnDisk(_this7);
            }
            return _this7;
          });
        }
      }, {
        key: "verifyPassword",
        value: function(password, options) {
          var username = this.getUsername() || "";
          return ParseUser2.verifyPassword(username, password, options);
        }
      }], [{
        key: "readOnlyAttributes",
        value: function() {
          return ["sessionToken"];
        }
      }, {
        key: "extend",
        value: function(protoProps, classProps) {
          if (protoProps) {
            for (var _prop in protoProps) {
              if (_prop !== "className") {
                (0, _defineProperty.default)(ParseUser2.prototype, _prop, {
                  value: protoProps[_prop],
                  enumerable: false,
                  writable: true,
                  configurable: true
                });
              }
            }
          }
          if (classProps) {
            for (var _prop2 in classProps) {
              if (_prop2 !== "className") {
                (0, _defineProperty.default)(ParseUser2, _prop2, {
                  value: classProps[_prop2],
                  enumerable: false,
                  writable: true,
                  configurable: true
                });
              }
            }
          }
          return ParseUser2;
        }
      }, {
        key: "current",
        value: function() {
          if (!canUseCurrentUser) {
            return null;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.currentUser();
        }
      }, {
        key: "currentAsync",
        value: function() {
          if (!canUseCurrentUser) {
            return _promise.default.resolve(null);
          }
          var controller = _CoreManager.default.getUserController();
          return controller.currentUserAsync();
        }
      }, {
        key: "signUp",
        value: function(username, password, attrs, options) {
          attrs = attrs || {};
          attrs.username = username;
          attrs.password = password;
          var user = new this(attrs);
          return user.signUp({}, options);
        }
      }, {
        key: "logIn",
        value: function(username, password, options) {
          if (typeof username !== "string") {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Username must be a string."));
          }
          if (typeof password !== "string") {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Password must be a string."));
          }
          var user = new this();
          user._finishFetch({
            username,
            password
          });
          return user.logIn(options);
        }
      }, {
        key: "loginOrSignup",
        value: function(username, password) {
          var _this8 = this;
          return this.logIn(username, password).catch(function(err) {
            if (err.code === 101) {
              var newUser = new _this8();
              newUser.set("username", username);
              newUser.set("password", password);
              return newUser.signUp();
            }
            throw err;
          });
        }
      }, {
        key: "become",
        value: function(sessionToken, options) {
          if (!canUseCurrentUser) {
            throw new Error("It is not memory-safe to become a user in a server environment");
          }
          options = options || {};
          var becomeOptions = {
            sessionToken
          };
          if (options.hasOwnProperty("useMasterKey")) {
            becomeOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          var user = new this();
          return controller.become(user, becomeOptions);
        }
      }, {
        key: "me",
        value: function(sessionToken) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var controller = _CoreManager.default.getUserController();
          var meOptions = {
            sessionToken
          };
          if (options.useMasterKey) {
            meOptions.useMasterKey = options.useMasterKey;
          }
          var user = new this();
          return controller.me(user, meOptions);
        }
      }, {
        key: "hydrate",
        value: function(userJSON) {
          var controller = _CoreManager.default.getUserController();
          var user = new this();
          return controller.hydrate(user, userJSON);
        }
      }, {
        key: "logInWith",
        value: function(provider, options, saveOpts) {
          var user = new this();
          return user.linkWith(provider, options, saveOpts);
        }
      }, {
        key: "logOut",
        value: function() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var controller = _CoreManager.default.getUserController();
          return controller.logOut(options);
        }
      }, {
        key: "requestPasswordReset",
        value: function(email, options) {
          options = options || {};
          var requestOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            requestOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.requestPasswordReset(email, requestOptions);
        }
      }, {
        key: "requestEmailVerification",
        value: function(email, options) {
          options = options || {};
          var requestOptions = {};
          if (options.hasOwnProperty("useMasterKey")) {
            requestOptions.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.requestEmailVerification(email, requestOptions);
        }
      }, {
        key: "verifyPassword",
        value: function(username, password, options) {
          if (typeof username !== "string") {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Username must be a string."));
          }
          if (typeof password !== "string") {
            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Password must be a string."));
          }
          options = options || {};
          var verificationOption = {};
          if (options.hasOwnProperty("useMasterKey")) {
            verificationOption.useMasterKey = options.useMasterKey;
          }
          var controller = _CoreManager.default.getUserController();
          return controller.verifyPassword(username, password, verificationOption);
        }
      }, {
        key: "allowCustomUserClass",
        value: function(isAllowed) {
          _CoreManager.default.set("PERFORM_USER_REWRITE", !isAllowed);
        }
      }, {
        key: "enableRevocableSession",
        value: function(options) {
          options = options || {};
          _CoreManager.default.set("FORCE_REVOCABLE_SESSION", true);
          if (canUseCurrentUser) {
            var current = ParseUser2.current();
            if (current) {
              return current._upgradeToRevocableSession(options);
            }
          }
          return _promise.default.resolve();
        }
      }, {
        key: "enableUnsafeCurrentUser",
        value: function() {
          canUseCurrentUser = true;
        }
      }, {
        key: "disableUnsafeCurrentUser",
        value: function() {
          canUseCurrentUser = false;
        }
      }, {
        key: "_registerAuthenticationProvider",
        value: function(provider) {
          authProviders[provider.getAuthType()] = provider;
          ParseUser2.currentAsync().then(function(current) {
            if (current) {
              current._synchronizeAuthData(provider.getAuthType());
            }
          });
        }
      }, {
        key: "_logInWith",
        value: function(provider, options, saveOpts) {
          var user = new this();
          return user.linkWith(provider, options, saveOpts);
        }
      }, {
        key: "_clearCache",
        value: function() {
          currentUserCache = null;
          currentUserCacheMatchesDisk = false;
        }
      }, {
        key: "_setCurrentUserCache",
        value: function(user) {
          currentUserCache = user;
        }
      }]);
      return ParseUser2;
    }(_ParseObject2.default);
    _ParseObject2.default.registerSubclass("_User", ParseUser);
    var DefaultController = {
      updateUserOnDisk: function(user) {
        var path = _Storage.default.generatePath(CURRENT_USER_KEY);
        var json = user.toJSON();
        delete json.password;
        json.className = "_User";
        var userData = (0, _stringify.default)(json);
        if (_CoreManager.default.get("ENCRYPTED_USER")) {
          var crypto = _CoreManager.default.getCryptoController();
          userData = crypto.encrypt(json, _CoreManager.default.get("ENCRYPTED_KEY"));
        }
        return _Storage.default.setItemAsync(path, userData).then(function() {
          return user;
        });
      },
      removeUserFromDisk: function() {
        var path = _Storage.default.generatePath(CURRENT_USER_KEY);
        currentUserCacheMatchesDisk = true;
        currentUserCache = null;
        return _Storage.default.removeItemAsync(path);
      },
      setCurrentUser: function(user) {
        var _this9 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
          var currentUser;
          return _regenerator.default.wrap(function(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _this9.currentUserAsync();
                case 2:
                  currentUser = _context.sent;
                  if (!(currentUser && !user.equals(currentUser) && _AnonymousUtils.default.isLinked(currentUser))) {
                    _context.next = 6;
                    break;
                  }
                  _context.next = 6;
                  return currentUser.destroy({
                    sessionToken: currentUser.getSessionToken()
                  });
                case 6:
                  currentUserCache = user;
                  user._cleanupAuthData();
                  user._synchronizeAllAuthData();
                  return _context.abrupt("return", DefaultController.updateUserOnDisk(user));
                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      currentUser: function() {
        if (currentUserCache) {
          return currentUserCache;
        }
        if (currentUserCacheMatchesDisk) {
          return null;
        }
        if (_Storage.default.async()) {
          throw new Error("Cannot call currentUser() when using a platform with an async storage system. Call currentUserAsync() instead.");
        }
        var path = _Storage.default.generatePath(CURRENT_USER_KEY);
        var userData = _Storage.default.getItem(path);
        currentUserCacheMatchesDisk = true;
        if (!userData) {
          currentUserCache = null;
          return null;
        }
        if (_CoreManager.default.get("ENCRYPTED_USER")) {
          var crypto = _CoreManager.default.getCryptoController();
          userData = crypto.decrypt(userData, _CoreManager.default.get("ENCRYPTED_KEY"));
        }
        userData = JSON.parse(userData);
        if (!userData.className) {
          userData.className = "_User";
        }
        if (userData._id) {
          if (userData.objectId !== userData._id) {
            userData.objectId = userData._id;
          }
          delete userData._id;
        }
        if (userData._sessionToken) {
          userData.sessionToken = userData._sessionToken;
          delete userData._sessionToken;
        }
        var current = _ParseObject2.default.fromJSON(userData);
        currentUserCache = current;
        current._synchronizeAllAuthData();
        return current;
      },
      currentUserAsync: function() {
        if (currentUserCache) {
          return _promise.default.resolve(currentUserCache);
        }
        if (currentUserCacheMatchesDisk) {
          return _promise.default.resolve(null);
        }
        var path = _Storage.default.generatePath(CURRENT_USER_KEY);
        return _Storage.default.getItemAsync(path).then(function(userData) {
          currentUserCacheMatchesDisk = true;
          if (!userData) {
            currentUserCache = null;
            return _promise.default.resolve(null);
          }
          if (_CoreManager.default.get("ENCRYPTED_USER")) {
            var crypto = _CoreManager.default.getCryptoController();
            userData = crypto.decrypt(userData.toString(), _CoreManager.default.get("ENCRYPTED_KEY"));
          }
          userData = JSON.parse(userData);
          if (!userData.className) {
            userData.className = "_User";
          }
          if (userData._id) {
            if (userData.objectId !== userData._id) {
              userData.objectId = userData._id;
            }
            delete userData._id;
          }
          if (userData._sessionToken) {
            userData.sessionToken = userData._sessionToken;
            delete userData._sessionToken;
          }
          var current = _ParseObject2.default.fromJSON(userData);
          currentUserCache = current;
          current._synchronizeAllAuthData();
          return _promise.default.resolve(current);
        });
      },
      signUp: function(user, attrs, options) {
        var username = attrs && attrs.username || user.get("username");
        var password = attrs && attrs.password || user.get("password");
        if (!username || !username.length) {
          return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Cannot sign up user with an empty username."));
        }
        if (!password || !password.length) {
          return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, "Cannot sign up user with an empty password."));
        }
        return user.save(attrs, options).then(function() {
          user._finishFetch({
            password: void 0
          });
          if (canUseCurrentUser) {
            return DefaultController.setCurrentUser(user);
          }
          return user;
        });
      },
      logIn: function(user, options) {
        var RESTController = _CoreManager.default.getRESTController();
        var stateController = _CoreManager.default.getObjectStateController();
        var auth = {
          username: user.get("username"),
          password: user.get("password")
        };
        return RESTController.request(options.usePost ? "POST" : "GET", "login", auth, options).then(function(response) {
          user._migrateId(response.objectId);
          user._setExisted(true);
          stateController.setPendingOp(user._getStateIdentifier(), "username", void 0);
          stateController.setPendingOp(user._getStateIdentifier(), "password", void 0);
          response.password = void 0;
          user._finishFetch(response);
          if (!canUseCurrentUser) {
            return _promise.default.resolve(user);
          }
          return DefaultController.setCurrentUser(user);
        });
      },
      become: function(user, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "users/me", {}, options).then(function(response) {
          user._finishFetch(response);
          user._setExisted(true);
          return DefaultController.setCurrentUser(user);
        });
      },
      hydrate: function(user, userJSON) {
        user._finishFetch(userJSON);
        user._setExisted(true);
        if (userJSON.sessionToken && canUseCurrentUser) {
          return DefaultController.setCurrentUser(user);
        }
        return _promise.default.resolve(user);
      },
      me: function(user, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "users/me", {}, options).then(function(response) {
          user._finishFetch(response);
          user._setExisted(true);
          return user;
        });
      },
      logOut: function(options) {
        var Moralis = require_Parse();
        Moralis.cleanup();
        var RESTController = _CoreManager.default.getRESTController();
        if (options.sessionToken) {
          return RESTController.request("POST", "logout", {}, options);
        }
        return DefaultController.currentUserAsync().then(function(currentUser) {
          var path = _Storage.default.generatePath(CURRENT_USER_KEY);
          var promise = _Storage.default.removeItemAsync(path);
          if (currentUser !== null) {
            var isAnonymous = _AnonymousUtils.default.isLinked(currentUser);
            var currentSession = currentUser.getSessionToken();
            if (currentSession && (0, _isRevocableSession.default)(currentSession)) {
              promise = promise.then(function() {
                if (isAnonymous) {
                  return currentUser.destroy({
                    sessionToken: currentSession
                  });
                }
              }).then(function() {
                return RESTController.request("POST", "logout", {}, {
                  sessionToken: currentSession
                });
              });
            }
            currentUser._logOutWithAll();
            currentUser._finishFetch({
              sessionToken: void 0
            });
            currentUser._clearServerData();
          }
          currentUserCacheMatchesDisk = true;
          currentUserCache = null;
          return promise;
        });
      },
      requestPasswordReset: function(email, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("POST", "requestPasswordReset", {
          email
        }, options);
      },
      upgradeToRevocableSession: function(user, options) {
        var token = user.getSessionToken();
        if (!token) {
          return _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, "Cannot upgrade a user with no session token"));
        }
        options.sessionToken = token;
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("POST", "upgradeToRevocableSession", {}, options).then(function(result) {
          var session = new _ParseSession.default();
          session._finishFetch(result);
          user._finishFetch({
            sessionToken: session.getSessionToken()
          });
          if (user.isCurrent()) {
            return DefaultController.setCurrentUser(user);
          }
          return _promise.default.resolve(user);
        });
      },
      linkWith: function(user, authData, options) {
        return user.save({
          authData
        }, options).then(function() {
          if (canUseCurrentUser) {
            return DefaultController.setCurrentUser(user);
          }
          return user;
        });
      },
      verifyPassword: function(username, password, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "verifyPassword", {
          username,
          password
        }, options);
      },
      requestEmailVerification: function(email, options) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("POST", "verificationEmailRequest", {
          email
        }, options);
      }
    };
    _CoreManager.default.setUserController(DefaultController);
    var _default = ParseUser;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseACL.js
var require_ParseACL = __commonJS({
  "node_modules/moralis/lib/browser/ParseACL.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _keys = _interopRequireDefault(require_keys3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _ParseRole = _interopRequireDefault(require_ParseRole());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var PUBLIC_KEY = "*";
    var ParseACL = /* @__PURE__ */ function() {
      function ParseACL2(arg1) {
        (0, _classCallCheck2.default)(this, ParseACL2);
        (0, _defineProperty2.default)(this, "permissionsById", void 0);
        this.permissionsById = {};
        if (arg1 && (0, _typeof2.default)(arg1) === "object") {
          if (arg1 instanceof _ParseUser.default) {
            this.setReadAccess(arg1, true);
            this.setWriteAccess(arg1, true);
          } else {
            for (var _userId in arg1) {
              var accessList = arg1[_userId];
              this.permissionsById[_userId] = {};
              for (var _permission in accessList) {
                var allowed = accessList[_permission];
                if (_permission !== "read" && _permission !== "write") {
                  throw new TypeError("Tried to create an ACL with an invalid permission type.");
                }
                if (typeof allowed !== "boolean") {
                  throw new TypeError("Tried to create an ACL with an invalid permission value.");
                }
                this.permissionsById[_userId][_permission] = allowed;
              }
            }
          }
        } else if (typeof arg1 === "function") {
          throw new TypeError("ParseACL constructed with a function. Did you forget ()?");
        }
      }
      (0, _createClass2.default)(ParseACL2, [{
        key: "toJSON",
        value: function() {
          var permissions = {};
          for (var p2 in this.permissionsById) {
            permissions[p2] = this.permissionsById[p2];
          }
          return permissions;
        }
      }, {
        key: "equals",
        value: function(other) {
          if (!(other instanceof ParseACL2)) {
            return false;
          }
          var users = (0, _keys.default)(this.permissionsById);
          var otherUsers = (0, _keys.default)(other.permissionsById);
          if (users.length !== otherUsers.length) {
            return false;
          }
          for (var u2 in this.permissionsById) {
            if (!other.permissionsById[u2]) {
              return false;
            }
            if (this.permissionsById[u2].read !== other.permissionsById[u2].read) {
              return false;
            }
            if (this.permissionsById[u2].write !== other.permissionsById[u2].write) {
              return false;
            }
          }
          return true;
        }
      }, {
        key: "_setAccess",
        value: function(accessType, userId, allowed) {
          if (userId instanceof _ParseUser.default) {
            userId = userId.id;
          } else if (userId instanceof _ParseRole.default) {
            var name = userId.getName();
            if (!name) {
              throw new TypeError("Role must have a name");
            }
            userId = "role:".concat(name);
          }
          if (typeof userId !== "string") {
            throw new TypeError("userId must be a string.");
          }
          if (typeof allowed !== "boolean") {
            throw new TypeError("allowed must be either true or false.");
          }
          var permissions = this.permissionsById[userId];
          if (!permissions) {
            if (!allowed) {
              return;
            }
            permissions = {};
            this.permissionsById[userId] = permissions;
          }
          if (allowed) {
            this.permissionsById[userId][accessType] = true;
          } else {
            delete permissions[accessType];
            if ((0, _keys.default)(permissions).length === 0) {
              delete this.permissionsById[userId];
            }
          }
        }
      }, {
        key: "_getAccess",
        value: function(accessType, userId) {
          if (userId instanceof _ParseUser.default) {
            userId = userId.id;
            if (!userId) {
              throw new Error("Cannot get access for a ParseUser without an ID");
            }
          } else if (userId instanceof _ParseRole.default) {
            var name = userId.getName();
            if (!name) {
              throw new TypeError("Role must have a name");
            }
            userId = "role:".concat(name);
          }
          var permissions = this.permissionsById[userId];
          if (!permissions) {
            return false;
          }
          return !!permissions[accessType];
        }
      }, {
        key: "setReadAccess",
        value: function(userId, allowed) {
          this._setAccess("read", userId, allowed);
        }
      }, {
        key: "getReadAccess",
        value: function(userId) {
          return this._getAccess("read", userId);
        }
      }, {
        key: "setWriteAccess",
        value: function(userId, allowed) {
          this._setAccess("write", userId, allowed);
        }
      }, {
        key: "getWriteAccess",
        value: function(userId) {
          return this._getAccess("write", userId);
        }
      }, {
        key: "setPublicReadAccess",
        value: function(allowed) {
          this.setReadAccess(PUBLIC_KEY, allowed);
        }
      }, {
        key: "getPublicReadAccess",
        value: function() {
          return this.getReadAccess(PUBLIC_KEY);
        }
      }, {
        key: "setPublicWriteAccess",
        value: function(allowed) {
          this.setWriteAccess(PUBLIC_KEY, allowed);
        }
      }, {
        key: "getPublicWriteAccess",
        value: function() {
          return this.getWriteAccess(PUBLIC_KEY);
        }
      }, {
        key: "getRoleReadAccess",
        value: function(role) {
          if (role instanceof _ParseRole.default) {
            role = role.getName();
          }
          if (typeof role !== "string") {
            throw new TypeError("role must be a ParseRole or a String");
          }
          return this.getReadAccess("role:".concat(role));
        }
      }, {
        key: "getRoleWriteAccess",
        value: function(role) {
          if (role instanceof _ParseRole.default) {
            role = role.getName();
          }
          if (typeof role !== "string") {
            throw new TypeError("role must be a ParseRole or a String");
          }
          return this.getWriteAccess("role:".concat(role));
        }
      }, {
        key: "setRoleReadAccess",
        value: function(role, allowed) {
          if (role instanceof _ParseRole.default) {
            role = role.getName();
          }
          if (typeof role !== "string") {
            throw new TypeError("role must be a ParseRole or a String");
          }
          this.setReadAccess("role:".concat(role), allowed);
        }
      }, {
        key: "setRoleWriteAccess",
        value: function(role, allowed) {
          if (role instanceof _ParseRole.default) {
            role = role.getName();
          }
          if (typeof role !== "string") {
            throw new TypeError("role must be a ParseRole or a String");
          }
          this.setWriteAccess("role:".concat(role), allowed);
        }
      }]);
      return ParseACL2;
    }();
    var _default = ParseACL;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/decode.js
var require_decode = __commonJS({
  "node_modules/moralis/lib/browser/decode.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = decode;
    var _isArray = _interopRequireDefault(require_is_array4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _ParseACL = _interopRequireDefault(require_ParseACL());
    var _ParseFile = _interopRequireDefault(require_ParseFile());
    var _ParseGeoPoint = _interopRequireDefault(require_ParseGeoPoint());
    var _ParsePolygon = _interopRequireDefault(require_ParsePolygon());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseOp = require_ParseOp();
    var _ParseRelation = _interopRequireDefault(require_ParseRelation());
    function decode(value) {
      if (value === null || (0, _typeof2.default)(value) !== "object") {
        return value;
      }
      if ((0, _isArray.default)(value)) {
        var dup = [];
        (0, _forEach.default)(value).call(value, function(v2, i2) {
          dup[i2] = decode(v2);
        });
        return dup;
      }
      if (typeof value.__op === "string") {
        return (0, _ParseOp.opFromJSON)(value);
      }
      if (value.__type === "Pointer" && value.className) {
        return _ParseObject.default.fromJSON(value);
      }
      if (value.__type === "Object" && value.className) {
        return _ParseObject.default.fromJSON(value);
      }
      if (value.__type === "Relation") {
        var relation = new _ParseRelation.default(null, null);
        relation.targetClassName = value.className;
        return relation;
      }
      if (value.__type === "Date") {
        return new Date(value.iso);
      }
      if (value.__type === "File") {
        return _ParseFile.default.fromJSON(value);
      }
      if (value.__type === "GeoPoint") {
        return new _ParseGeoPoint.default({
          latitude: value.latitude,
          longitude: value.longitude
        });
      }
      if (value.__type === "Polygon") {
        return new _ParsePolygon.default(value.coordinates);
      }
      var copy = {};
      for (var k2 in value) {
        copy[k2] = decode(value[k2]);
      }
      return copy;
    }
  }
});

// node_modules/moralis/lib/browser/CryptoController.js
var require_CryptoController = __commonJS({
  "node_modules/moralis/lib/browser/CryptoController.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _stringify = _interopRequireDefault(require_stringify3());
    var AES;
    var ENC;
    AES = require_aes();
    ENC = require_enc_utf8();
    var CryptoController = {
      encrypt: function(obj, secretKey) {
        var encrypted = AES.encrypt((0, _stringify.default)(obj), secretKey);
        return encrypted.toString();
      },
      decrypt: function(encryptedText, secretKey) {
        var decryptedStr = AES.decrypt(encryptedText, secretKey).toString(ENC);
        return decryptedStr;
      }
    };
    module.exports = CryptoController;
  }
});

// node_modules/moralis/lib/browser/InstallationController.js
var require_InstallationController = __commonJS({
  "node_modules/moralis/lib/browser/InstallationController.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _promise = _interopRequireDefault(require_promise3());
    var _Storage = _interopRequireDefault(require_Storage());
    var _require = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var uuidv4 = _require.v4;
    var iidCache = null;
    var InstallationController = {
      currentInstallationId: function() {
        if (typeof iidCache === "string") {
          return _promise.default.resolve(iidCache);
        }
        var path = _Storage.default.generatePath("installationId");
        return _Storage.default.getItemAsync(path).then(function(iid) {
          if (!iid) {
            iid = uuidv4();
            return _Storage.default.setItemAsync(path, iid).then(function() {
              iidCache = iid;
              return iid;
            });
          }
          iidCache = iid;
          return iid;
        });
      },
      _clearCache: function() {
        iidCache = null;
      },
      _setInstallationIdCache: function(iid) {
        iidCache = iid;
      }
    };
    module.exports = InstallationController;
  }
});

// node_modules/core-js-pure/modules/web.timers.js
var require_web_timers = __commonJS({
  "node_modules/core-js-pure/modules/web.timers.js"() {
    init_react();
    var $ = require_export();
    var global2 = require_global();
    var apply = require_function_apply();
    var isCallable = require_is_callable();
    var userAgent = require_engine_user_agent();
    var arraySlice = require_array_slice();
    var validateArgumentsLength = require_validate_arguments_length();
    var MSIE = /MSIE .\./.test(userAgent);
    var Function2 = global2.Function;
    var wrap = function(scheduler) {
      return function(handler, timeout) {
        var boundArgs = validateArgumentsLength(arguments.length, 1) > 2;
        var fn2 = isCallable(handler) ? handler : Function2(handler);
        var args = boundArgs ? arraySlice(arguments, 2) : void 0;
        return scheduler(boundArgs ? function() {
          apply(fn2, this, args);
        } : fn2, timeout);
      };
    };
    $({ global: true, bind: true, forced: MSIE }, {
      setTimeout: wrap(global2.setTimeout),
      setInterval: wrap(global2.setInterval)
    });
  }
});

// node_modules/core-js-pure/stable/set-timeout.js
var require_set_timeout = __commonJS({
  "node_modules/core-js-pure/stable/set-timeout.js"(exports, module) {
    init_react();
    require_web_timers();
    var path = require_path();
    module.exports = path.setTimeout;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js
var require_set_timeout2 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js"(exports, module) {
    init_react();
    module.exports = require_set_timeout();
  }
});

// node_modules/moralis/lib/browser/RESTController.js
var require_RESTController = __commonJS({
  "node_modules/moralis/lib/browser/RESTController.js"(exports, module) {
    "use strict";
    init_react();
    var _Object$keys = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _promise = _interopRequireDefault(require_promise3());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _includes = _interopRequireDefault(require_includes5());
    var _setTimeout2 = _interopRequireDefault(require_set_timeout2());
    var _concat = _interopRequireDefault(require_concat4());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _promiseUtils = require_promiseUtils();
    function ownKeys(object, enumerableOnly) {
      var keys = _Object$keys(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var _context5, _context6;
        var source = arguments[i2] != null ? arguments[i2] : {};
        i2 % 2 ? _forEachInstanceProperty(_context5 = ownKeys(Object(source), true)).call(_context5, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context6 = ownKeys(Object(source))).call(_context6, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var _require = (init_esm_browser(), __toCommonJS(esm_browser_exports));
    var uuidv4 = _require.v4;
    var XHR = null;
    if (typeof XMLHttpRequest !== "undefined") {
      XHR = XMLHttpRequest;
    }
    var useXDomainRequest = false;
    if (typeof XDomainRequest !== "undefined" && !("withCredentials" in new XMLHttpRequest())) {
      useXDomainRequest = true;
    }
    function ajaxIE9(method, url, data, headers, options) {
      return new _promise.default(function(resolve, reject) {
        var xdr = new XDomainRequest();
        xdr.onload = function() {
          var response;
          try {
            response = JSON.parse(xdr.responseText);
          } catch (e) {
            reject(e);
          }
          if (response) {
            resolve({
              response
            });
          }
        };
        xdr.onerror = xdr.ontimeout = function() {
          var fakeResponse = {
            responseText: (0, _stringify.default)({
              code: _ParseError.default.X_DOMAIN_REQUEST,
              error: "IE's XDomainRequest does not supply error info."
            })
          };
          reject(fakeResponse);
        };
        xdr.onprogress = function() {
          if (options && typeof options.progress === "function") {
            options.progress(xdr.responseText);
          }
        };
        xdr.open(method, url);
        xdr.send(data);
        if (options && typeof options.requestTask === "function") {
          options.requestTask(xdr);
        }
      });
    }
    var RESTController = {
      ajax: function(method, url, data, headers, options) {
        var _context;
        if (useXDomainRequest) {
          return ajaxIE9(method, url, data, headers, options);
        }
        var promise = (0, _promiseUtils.resolvingPromise)();
        var isIdempotent = _CoreManager.default.get("IDEMPOTENCY") && (0, _includes.default)(_context = ["POST", "PUT"]).call(_context, method);
        var requestId = isIdempotent ? uuidv4() : "";
        var attempts = 0;
        var dispatch = function dispatch2() {
          if (XHR == null) {
            throw new Error("Cannot make a request: No definition of XMLHttpRequest was found.");
          }
          var handled = false;
          var xhr = new XHR();
          xhr.onreadystatechange = function() {
            if (xhr.readyState !== 4 || handled || xhr._aborted) {
              return;
            }
            handled = true;
            if (xhr.status >= 200 && xhr.status < 300) {
              var response;
              try {
                response = JSON.parse(xhr.responseText);
                if (typeof xhr.getResponseHeader === "function") {
                  var _context2;
                  if ((0, _includes.default)(_context2 = xhr.getAllResponseHeaders() || "").call(_context2, "x-parse-job-status-id: ")) {
                    response = xhr.getResponseHeader("x-parse-job-status-id");
                  }
                }
              } catch (e) {
                promise.reject(e.toString());
              }
              if (response) {
                promise.resolve({
                  response,
                  status: xhr.status,
                  xhr
                });
              }
            } else if (xhr.status >= 500 || xhr.status === 0) {
              if (++attempts < _CoreManager.default.get("REQUEST_ATTEMPT_LIMIT")) {
                var delay = Math.round(Math.random() * 125 * Math.pow(2, attempts));
                (0, _setTimeout2.default)(dispatch2, delay);
              } else if (xhr.status === 0) {
                promise.reject("Unable to connect to the Parse API");
              } else {
                promise.reject(xhr);
              }
            } else {
              promise.reject(xhr);
            }
          };
          headers = headers || {};
          if (typeof headers["Content-Type"] !== "string") {
            headers["Content-Type"] = "text/plain";
          }
          if (_CoreManager.default.get("IS_NODE")) {
            var _context3;
            headers["User-Agent"] = (0, _concat.default)(_context3 = "Parse/".concat(_CoreManager.default.get("VERSION"), " (NodeJS ")).call(_context3, process.versions.node, ")");
          }
          if (isIdempotent) {
            headers["X-Parse-Request-Id"] = requestId;
          }
          if (_CoreManager.default.get("SERVER_AUTH_TYPE") && _CoreManager.default.get("SERVER_AUTH_TOKEN")) {
            var _context4;
            headers.Authorization = (0, _concat.default)(_context4 = "".concat(_CoreManager.default.get("SERVER_AUTH_TYPE"), " ")).call(_context4, _CoreManager.default.get("SERVER_AUTH_TOKEN"));
          }
          var customHeaders = _CoreManager.default.get("REQUEST_HEADERS");
          for (var key in customHeaders) {
            headers[key] = customHeaders[key];
          }
          function handleProgress(type, event) {
            if (options && typeof options.progress === "function") {
              if (event.lengthComputable) {
                options.progress(event.loaded / event.total, event.loaded, event.total, {
                  type
                });
              } else {
                options.progress(null, null, null, {
                  type
                });
              }
            }
          }
          xhr.onprogress = function(event) {
            handleProgress("download", event);
          };
          if (xhr.upload) {
            xhr.upload.onprogress = function(event) {
              handleProgress("upload", event);
            };
          }
          xhr.open(method, url, true);
          for (var h2 in headers) {
            xhr.setRequestHeader(h2, headers[h2]);
          }
          xhr.onabort = function() {
            promise.resolve({
              response: {
                results: []
              },
              status: 0,
              xhr
            });
          };
          xhr.send(data);
          if (options && typeof options.requestTask === "function") {
            options.requestTask(xhr);
          }
        };
        dispatch();
        return promise;
      },
      request: function(method, path, data, options) {
        options = options || {};
        var url = _CoreManager.default.get("SERVER_URL");
        if (url[url.length - 1] !== "/") {
          url += "/";
        }
        url += path;
        var payload = {};
        if (data && (0, _typeof2.default)(data) === "object") {
          for (var k2 in data) {
            payload[k2] = data[k2];
          }
        }
        var _options = options, context = _options.context;
        if (context !== void 0) {
          payload._context = context;
        }
        if (method !== "POST") {
          payload._method = method;
          method = "POST";
        }
        payload._ApplicationId = _CoreManager.default.get("APPLICATION_ID");
        var jsKey = _CoreManager.default.get("JAVASCRIPT_KEY");
        if (jsKey) {
          payload._JavaScriptKey = jsKey;
        }
        payload._ClientVersion = _CoreManager.default.get("VERSION");
        var _options2 = options, useMasterKey = _options2.useMasterKey;
        if (typeof useMasterKey === "undefined") {
          useMasterKey = _CoreManager.default.get("USE_MASTER_KEY");
        }
        if (useMasterKey) {
          if (_CoreManager.default.get("MASTER_KEY")) {
            delete payload._JavaScriptKey;
            payload._MasterKey = _CoreManager.default.get("MASTER_KEY");
          }
        }
        if (_CoreManager.default.get("FORCE_REVOCABLE_SESSION")) {
          payload._RevocableSession = "1";
        }
        var _options3 = options, installationId = _options3.installationId;
        var installationIdPromise;
        if (installationId && typeof installationId === "string") {
          installationIdPromise = _promise.default.resolve(installationId);
        } else {
          var installationController = _CoreManager.default.getInstallationController();
          installationIdPromise = installationController.currentInstallationId();
        }
        return installationIdPromise.then(function(iid) {
          payload._InstallationId = iid;
          var userController = _CoreManager.default.getUserController();
          if (options && typeof options.sessionToken === "string") {
            return _promise.default.resolve(options.sessionToken);
          }
          if (userController) {
            return userController.currentUserAsync().then(function(user) {
              if (user) {
                return _promise.default.resolve(user.getSessionToken());
              }
              return _promise.default.resolve(null);
            });
          }
          return _promise.default.resolve(null);
        }).then(function(token) {
          if (token) {
            payload._SessionToken = token;
          }
          var payloadString = (0, _stringify.default)(payload);
          return RESTController.ajax(method, url, payloadString, {}, options).then(function(_ref) {
            var response = _ref.response, status = _ref.status;
            if (options.returnStatus) {
              return _objectSpread(_objectSpread({}, response), {}, {
                _status: status
              });
            }
            return response;
          });
        }).catch(RESTController.handleError);
      },
      handleError: function(response) {
        var error;
        if (response && response.responseText) {
          try {
            var errorJSON = JSON.parse(response.responseText);
            error = new _ParseError.default(errorJSON.code, errorJSON.error);
          } catch (e) {
            error = new _ParseError.default(_ParseError.default.INVALID_JSON, "Received an error with invalid JSON from Parse: ".concat(response.responseText));
          }
        } else {
          var message = response.message ? response.message : response;
          error = new _ParseError.default(_ParseError.default.CONNECTION_FAILED, "XMLHttpRequest failed: ".concat((0, _stringify.default)(message)));
        }
        return _promise.default.reject(error);
      },
      _setXHR: function(xhr) {
        XHR = xhr;
      },
      _getXHR: function() {
        return XHR;
      }
    };
    module.exports = RESTController;
  }
});

// node_modules/moralis/lib/browser/filterConsole.js
var require_filterConsole = __commonJS({
  "node_modules/moralis/lib/browser/filterConsole.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _filter = _interopRequireDefault(require_filter4());
    var _includes = _interopRequireDefault(require_includes5());
    var filteredWarnings = [
      "Module not found: Can't resolve '@walletconnect/web3-provider'",
      "Module not found: Can't resolve 'magic-sdk'",
      "Module not found: Can't resolve '@web3auth/web3auth'"
    ];
    var filterConsole = function() {
      var preservedConsoleWarn = console.warn;
      console.warn = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var value = args ? args[0] : null;
        if (!value || typeof value !== "string") {
          return preservedConsoleWarn.apply(console, args);
        }
        value = value.replace("\u2019", "'").replace("\u2018", "'").replace("\u2019", "'");
        if ((0, _filter.default)(filteredWarnings).call(filteredWarnings, function(filter) {
          return (0, _includes.default)(value).call(value, filter);
        }).length >= 1) {
          return;
        }
        return preservedConsoleWarn.apply(console, args);
      };
    };
    module.exports = {
      filterConsole
    };
  }
});

// node_modules/core-js-pure/modules/es.number.is-nan.js
var require_es_number_is_nan = __commonJS({
  "node_modules/core-js-pure/modules/es.number.is-nan.js"() {
    init_react();
    var $ = require_export();
    $({ target: "Number", stat: true }, {
      isNaN: function isNaN2(number) {
        return number != number;
      }
    });
  }
});

// node_modules/core-js-pure/es/number/is-nan.js
var require_is_nan = __commonJS({
  "node_modules/core-js-pure/es/number/is-nan.js"(exports, module) {
    init_react();
    require_es_number_is_nan();
    var path = require_path();
    module.exports = path.Number.isNaN;
  }
});

// node_modules/core-js-pure/stable/number/is-nan.js
var require_is_nan2 = __commonJS({
  "node_modules/core-js-pure/stable/number/is-nan.js"(exports, module) {
    init_react();
    var parent = require_is_nan();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/number/is-nan.js
var require_is_nan3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/number/is-nan.js"(exports, module) {
    init_react();
    module.exports = require_is_nan2();
  }
});

// node_modules/moralis/lib/browser/utils.js
var require_utils = __commonJS({
  "node_modules/moralis/lib/browser/utils.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _map = _interopRequireDefault(require_map9());
    var _entries = _interopRequireDefault(require_entries3());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    var _isNan = _interopRequireDefault(require_is_nan3());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _RESTController = _interopRequireDefault(require_RESTController());
    var DEEP_INDEX_API_HOST = "deep-index.moralis.io";
    var DEEP_INDEX_SWAGGER_PATH = "/api-docs/v2/swagger.json";
    var fetchSwaggerJson = /* @__PURE__ */ function() {
      var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
        var _yield$RESTController, response;
        return _regenerator.default.wrap(function(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _RESTController.default.ajax("GET", "https://".concat(DEEP_INDEX_API_HOST).concat(DEEP_INDEX_SWAGGER_PATH));
              case 2:
                _yield$RESTController = _context.sent;
                response = _yield$RESTController.response;
                return _context.abrupt("return", response);
              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return function() {
        return _ref.apply(this, arguments);
      };
    }();
    var getPathByTag = function(swaggerJSON) {
      var _context2;
      var pathByTag = {};
      var pathDetails = {};
      (0, _map.default)(_context2 = (0, _entries.default)(swaggerJSON.paths)).call(_context2, function(_ref2) {
        var _context3;
        var _ref3 = (0, _slicedToArray2.default)(_ref2, 2), pathName = _ref3[0], requestData = _ref3[1];
        return (0, _forEach.default)(_context3 = (0, _entries.default)(requestData)).call(_context3, function(_ref4) {
          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2), method = _ref5[0], data = _ref5[1];
          var tags = data.tags;
          if (tags.length > 0) {
            if (!pathByTag[tags[0]]) {
              pathByTag[tags[0]] = [];
            }
            pathByTag[tags[0]].push(data.operationId);
            pathDetails[data.operationId] = {
              method,
              pathName,
              data
            };
          }
        });
      });
      return {
        pathByTag,
        pathDetails
      };
    };
    var fetchEndpoints = /* @__PURE__ */ function() {
      var _ref6 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
        var _context4;
        var swaggerJSON, _yield$getPathByTag, pathDetails, data;
        return _regenerator.default.wrap(function(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return fetchSwaggerJson();
              case 2:
                swaggerJSON = _context5.sent;
                _context5.next = 5;
                return getPathByTag(swaggerJSON);
              case 5:
                _yield$getPathByTag = _context5.sent;
                pathDetails = _yield$getPathByTag.pathDetails;
                data = [];
                (0, _forEach.default)(_context4 = (0, _keys.default)(pathDetails)).call(_context4, function(x2) {
                  var item = pathDetails[x2];
                  var endpoint = {
                    method: item.method.toUpperCase(),
                    group: item.data.tags[0],
                    name: x2,
                    url: item.pathName.split("{").join(":").split("}").join("")
                  };
                  data.push(endpoint);
                });
                return _context5.abrupt("return", data);
              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee2);
      }));
      return function() {
        return _ref6.apply(this, arguments);
      };
    }();
    var isSemanticVersionLarger = function(version1, version2) {
      var _context6, _context7;
      var _version1$split = version1.split("-"), _version1$split2 = (0, _slicedToArray2.default)(_version1$split, 2), version1Main = _version1$split2[0], version1Pre = _version1$split2[1];
      var version1Arr = (0, _map.default)(_context6 = version1Main.split(".")).call(_context6, function(s2) {
        return Number(s2);
      });
      var _version2$split = version2.split("-"), _version2$split2 = (0, _slicedToArray2.default)(_version2$split, 2), version2Main = _version2$split2[0], version2Pre = _version2$split2[1];
      var version2Arr = (0, _map.default)(_context7 = version2Main.split(".")).call(_context7, function(s2) {
        return Number(s2);
      });
      for (var index = 0; index < 3; index++) {
        var compare1 = version1Arr[index];
        var compare2 = version2Arr[index];
        if (compare1 > compare2)
          return true;
        if (compare1 < compare2)
          return false;
        if (!(0, _isNan.default)(compare1) && (0, _isNan.default)(compare2))
          return true;
        if ((0, _isNan.default)(compare1) && !(0, _isNan.default)(compare2))
          return false;
      }
      if (version1Pre && version2Pre) {
        var _version1Pre$split$, _version2Pre$split$;
        var version1PreNumber = (_version1Pre$split$ = version1Pre.split(".")[1]) !== null && _version1Pre$split$ !== void 0 ? _version1Pre$split$ : 0;
        var version2PreNumber = (_version2Pre$split$ = version2Pre.split(".")[1]) !== null && _version2Pre$split$ !== void 0 ? _version2Pre$split$ : 0;
        return version1PreNumber > version2PreNumber;
      }
      if (version2Pre) {
        return true;
      }
      return false;
    };
    var checkForSdkUpdates = /* @__PURE__ */ function() {
      var _ref7 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
        var _yield$RESTController2, response, latestVersion, installedVersion;
        return _regenerator.default.wrap(function(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.prev = 0;
                _context8.next = 3;
                return _RESTController.default.ajax("GET", "https://www.unpkg.com/moralis/package.json");
              case 3:
                _yield$RESTController2 = _context8.sent;
                response = _yield$RESTController2.response;
                latestVersion = response.version;
                installedVersion = "1.3.5";
                if (isSemanticVersionLarger(latestVersion, installedVersion))
                  console.warn("You are not using the latest version of the SDK. Please update it as soon as possible to enjoy the newest features. Most recent version: ".concat(latestVersion));
                _context8.next = 12;
                break;
              case 10:
                _context8.prev = 10;
                _context8.t0 = _context8["catch"](0);
              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee3, null, [[0, 10]]);
      }));
      return function() {
        return _ref7.apply(this, arguments);
      };
    }();
    module.exports = {
      fetchSwaggerJson,
      getPathByTag,
      fetchEndpoints,
      checkForSdkUpdates
    };
  }
});

// node_modules/moralis/lib/browser/Analytics.js
var require_Analytics = __commonJS({
  "node_modules/moralis/lib/browser/Analytics.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.track = track;
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    function track(name, dimensions) {
      name = name || "";
      name = name.replace(/^\s*/, "");
      name = name.replace(/\s*$/, "");
      if (name.length === 0) {
        throw new TypeError("A name for the custom event must be provided");
      }
      for (var _key in dimensions) {
        if (typeof _key !== "string" || typeof dimensions[_key] !== "string") {
          throw new TypeError('track() dimensions expects keys and values of type "string".');
        }
      }
      return _CoreManager.default.getAnalyticsController().track(name, dimensions);
    }
    var DefaultController = {
      track: function(name, dimensions) {
        var path = "events/".concat(name);
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("POST", path, {
          dimensions
        });
      }
    };
    _CoreManager.default.setAnalyticsController(DefaultController);
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/map.js
var require_map10 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/map.js"(exports, module) {
    init_react();
    module.exports = require_map2();
  }
});

// node_modules/core-js-pure/es/array/virtual/entries.js
var require_entries4 = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/entries.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_object_to_string();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").entries;
  }
});

// node_modules/core-js-pure/stable/array/virtual/entries.js
var require_entries5 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/entries.js"(exports, module) {
    init_react();
    var parent = require_entries4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/entries.js
var require_entries6 = __commonJS({
  "node_modules/core-js-pure/stable/instance/entries.js"(exports, module) {
    init_react();
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_entries5();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module.exports = function(it) {
      var own = it.entries;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.entries || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/entries.js
var require_entries7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/entries.js"(exports, module) {
    init_react();
    module.exports = require_entries6();
  }
});

// node_modules/moralis/lib/browser/ParseCLP.js
var require_ParseCLP = __commonJS({
  "node_modules/moralis/lib/browser/ParseCLP.js"(exports) {
    "use strict";
    init_react();
    var _sliceInstanceProperty2 = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray2 = require_is_array4();
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _map = _interopRequireDefault(require_map10());
    var _includes = _interopRequireDefault(require_includes5());
    var _every = _interopRequireDefault(require_every4());
    var _entries = _interopRequireDefault(require_entries7());
    var _slice = _interopRequireDefault(require_slice4());
    var _keys = _interopRequireDefault(require_keys3());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _ParseRole = _interopRequireDefault(require_ParseRole());
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    function ownKeys(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var _context3, _context4;
        var source = arguments[i2] != null ? arguments[i2] : {};
        i2 % 2 ? _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray2(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i2 = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i2 >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i2++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context2;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty2(_context2 = Object.prototype.toString.call(o2)).call(_context2, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    var PUBLIC_KEY = "*";
    var VALID_PERMISSIONS = new _map.default();
    VALID_PERMISSIONS.set("get", {});
    VALID_PERMISSIONS.set("find", {});
    VALID_PERMISSIONS.set("count", {});
    VALID_PERMISSIONS.set("create", {});
    VALID_PERMISSIONS.set("update", {});
    VALID_PERMISSIONS.set("delete", {});
    VALID_PERMISSIONS.set("addField", {});
    var VALID_PERMISSIONS_EXTENDED = new _map.default();
    VALID_PERMISSIONS_EXTENDED.set("protectedFields", {});
    var ParseCLP = /* @__PURE__ */ function() {
      function ParseCLP2(userId) {
        var _this = this;
        (0, _classCallCheck2.default)(this, ParseCLP2);
        (0, _defineProperty2.default)(this, "permissionsMap", void 0);
        this.permissionsMap = {};
        var _iterator = _createForOfIteratorHelper((0, _entries.default)(VALID_PERMISSIONS).call(VALID_PERMISSIONS)), _step;
        try {
          var _loop = function() {
            var _step$value = (0, _slicedToArray2.default)(_step.value, 2), operation2 = _step$value[0], group2 = _step$value[1];
            _this.permissionsMap[operation2] = _objectSpread({}, group2);
            var action = operation2.charAt(0).toUpperCase() + (0, _slice.default)(operation2).call(operation2, 1);
            _this["get".concat(action, "RequiresAuthentication")] = function() {
              return this._getAccess(operation2, "requiresAuthentication");
            };
            _this["set".concat(action, "RequiresAuthentication")] = function(allowed2) {
              this._setAccess(operation2, "requiresAuthentication", allowed2);
            };
            _this["get".concat(action, "PointerFields")] = function() {
              return this._getAccess(operation2, "pointerFields", false);
            };
            _this["set".concat(action, "PointerFields")] = function(pointerFields) {
              this._setArrayAccess(operation2, "pointerFields", pointerFields);
            };
            _this["get".concat(action, "Access")] = function(entity) {
              return this._getAccess(operation2, entity);
            };
            _this["set".concat(action, "Access")] = function(entity, allowed2) {
              this._setAccess(operation2, entity, allowed2);
            };
            _this["getPublic".concat(action, "Access")] = function() {
              return this["get".concat(action, "Access")](PUBLIC_KEY);
            };
            _this["setPublic".concat(action, "Access")] = function(allowed2) {
              this["set".concat(action, "Access")](PUBLIC_KEY, allowed2);
            };
            _this["getRole".concat(action, "Access")] = function(role) {
              return this["get".concat(action, "Access")](this._getRoleName(role));
            };
            _this["setRole".concat(action, "Access")] = function(role, allowed2) {
              this["set".concat(action, "Access")](this._getRoleName(role), allowed2);
            };
          };
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        var _iterator2 = _createForOfIteratorHelper((0, _entries.default)(VALID_PERMISSIONS_EXTENDED).call(VALID_PERMISSIONS_EXTENDED)), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _step2$value = (0, _slicedToArray2.default)(_step2.value, 2), operation = _step2$value[0], group = _step2$value[1];
            this.permissionsMap[operation] = _objectSpread({}, group);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        if (userId && (0, _typeof2.default)(userId) === "object") {
          if (userId instanceof _ParseUser.default) {
            this.setReadAccess(userId, true);
            this.setWriteAccess(userId, true);
          } else if (userId instanceof _ParseRole.default) {
            this.setRoleReadAccess(userId, true);
            this.setRoleWriteAccess(userId, true);
          } else {
            for (var _permission in userId) {
              var _context;
              var users = userId[_permission];
              var isValidPermission = !!VALID_PERMISSIONS.get(_permission);
              var isValidPermissionExtended = !!VALID_PERMISSIONS_EXTENDED.get(_permission);
              var isValidGroupPermission = (0, _includes.default)(_context = ["readUserFields", "writeUserFields"]).call(_context, _permission);
              if (typeof _permission !== "string" || !(isValidPermission || isValidPermissionExtended || isValidGroupPermission)) {
                throw new TypeError("Tried to create an CLP with an invalid permission type.");
              }
              if (isValidGroupPermission) {
                if ((0, _every.default)(users).call(users, function(pointer) {
                  return typeof pointer === "string";
                })) {
                  this.permissionsMap[_permission] = users;
                  continue;
                } else {
                  throw new TypeError("Tried to create an CLP with an invalid permission value.");
                }
              }
              for (var user in users) {
                var allowed = users[user];
                if (typeof allowed !== "boolean" && !isValidPermissionExtended && user !== "pointerFields") {
                  throw new TypeError("Tried to create an CLP with an invalid permission value.");
                }
                this.permissionsMap[_permission][user] = allowed;
              }
            }
          }
        } else if (typeof userId === "function") {
          throw new TypeError("ParseCLP constructed with a function. Did you forget ()?");
        }
      }
      (0, _createClass2.default)(ParseCLP2, [{
        key: "toJSON",
        value: function() {
          return _objectSpread({}, this.permissionsMap);
        }
      }, {
        key: "equals",
        value: function(other) {
          if (!(other instanceof ParseCLP2)) {
            return false;
          }
          var permissions = (0, _keys.default)(this.permissionsMap);
          var otherPermissions = (0, _keys.default)(other.permissionsMap);
          if (permissions.length !== otherPermissions.length) {
            return false;
          }
          for (var _permission2 in this.permissionsMap) {
            if (!other.permissionsMap[_permission2]) {
              return false;
            }
            var users = (0, _keys.default)(this.permissionsMap[_permission2]);
            var otherUsers = (0, _keys.default)(other.permissionsMap[_permission2]);
            if (users.length !== otherUsers.length) {
              return false;
            }
            for (var user in this.permissionsMap[_permission2]) {
              if (!other.permissionsMap[_permission2][user]) {
                return false;
              }
              if (this.permissionsMap[_permission2][user] !== other.permissionsMap[_permission2][user]) {
                return false;
              }
            }
          }
          return true;
        }
      }, {
        key: "_getRoleName",
        value: function(role) {
          var name = role;
          if (role instanceof _ParseRole.default) {
            name = role.getName();
          }
          if (typeof name !== "string") {
            throw new TypeError("role must be a Parse.Role or a String");
          }
          return "role:".concat(name);
        }
      }, {
        key: "_parseEntity",
        value: function(entity) {
          var userId = entity;
          if (userId instanceof _ParseUser.default) {
            userId = userId.id;
            if (!userId) {
              throw new Error("Cannot get access for a Parse.User without an id.");
            }
          } else if (userId instanceof _ParseRole.default) {
            userId = this._getRoleName(userId);
          }
          if (typeof userId !== "string") {
            throw new TypeError("userId must be a string.");
          }
          return userId;
        }
      }, {
        key: "_setAccess",
        value: function(permission, userId, allowed) {
          userId = this._parseEntity(userId);
          if (typeof allowed !== "boolean") {
            throw new TypeError("allowed must be either true or false.");
          }
          var permissions = this.permissionsMap[permission][userId];
          if (!permissions) {
            if (!allowed) {
              return;
            }
            this.permissionsMap[permission][userId] = {};
          }
          if (allowed) {
            this.permissionsMap[permission][userId] = true;
          } else {
            delete this.permissionsMap[permission][userId];
          }
        }
      }, {
        key: "_getAccess",
        value: function(permission, userId) {
          var returnBoolean = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
          userId = this._parseEntity(userId);
          var permissions = this.permissionsMap[permission][userId];
          if (returnBoolean) {
            if (!permissions) {
              return false;
            }
            return !!this.permissionsMap[permission][userId];
          }
          return permissions;
        }
      }, {
        key: "_setArrayAccess",
        value: function(permission, userId, fields) {
          userId = this._parseEntity(userId);
          var permissions = this.permissionsMap[permission][userId];
          if (!permissions) {
            this.permissionsMap[permission][userId] = [];
          }
          if (!fields || (0, _isArray.default)(fields) && fields.length === 0) {
            delete this.permissionsMap[permission][userId];
          } else if ((0, _isArray.default)(fields) && (0, _every.default)(fields).call(fields, function(field) {
            return typeof field === "string";
          })) {
            this.permissionsMap[permission][userId] = fields;
          } else {
            throw new TypeError("fields must be an array of strings or undefined.");
          }
        }
      }, {
        key: "_setGroupPointerPermission",
        value: function(operation, pointerFields) {
          var fields = this.permissionsMap[operation];
          if (!fields) {
            this.permissionsMap[operation] = [];
          }
          if (!pointerFields || (0, _isArray.default)(pointerFields) && pointerFields.length === 0) {
            delete this.permissionsMap[operation];
          } else if ((0, _isArray.default)(pointerFields) && (0, _every.default)(pointerFields).call(pointerFields, function(field) {
            return typeof field === "string";
          })) {
            this.permissionsMap[operation] = pointerFields;
          } else {
            throw new TypeError("".concat(operation, ".pointerFields must be an array of strings or undefined."));
          }
        }
      }, {
        key: "_getGroupPointerPermissions",
        value: function(operation) {
          return this.permissionsMap[operation];
        }
      }, {
        key: "setReadUserFields",
        value: function(pointerFields) {
          this._setGroupPointerPermission("readUserFields", pointerFields);
        }
      }, {
        key: "getReadUserFields",
        value: function() {
          return this._getGroupPointerPermissions("readUserFields");
        }
      }, {
        key: "setWriteUserFields",
        value: function(pointerFields) {
          this._setGroupPointerPermission("writeUserFields", pointerFields);
        }
      }, {
        key: "getWriteUserFields",
        value: function() {
          return this._getGroupPointerPermissions("writeUserFields");
        }
      }, {
        key: "setProtectedFields",
        value: function(userId, fields) {
          this._setArrayAccess("protectedFields", userId, fields);
        }
      }, {
        key: "getProtectedFields",
        value: function(userId) {
          return this._getAccess("protectedFields", userId, false);
        }
      }, {
        key: "setReadAccess",
        value: function(userId, allowed) {
          this._setAccess("find", userId, allowed);
          this._setAccess("get", userId, allowed);
          this._setAccess("count", userId, allowed);
        }
      }, {
        key: "getReadAccess",
        value: function(userId) {
          return this._getAccess("find", userId) && this._getAccess("get", userId) && this._getAccess("count", userId);
        }
      }, {
        key: "setWriteAccess",
        value: function(userId, allowed) {
          this._setAccess("create", userId, allowed);
          this._setAccess("update", userId, allowed);
          this._setAccess("delete", userId, allowed);
          this._setAccess("addField", userId, allowed);
        }
      }, {
        key: "getWriteAccess",
        value: function(userId) {
          return this._getAccess("create", userId) && this._getAccess("update", userId) && this._getAccess("delete", userId) && this._getAccess("addField", userId);
        }
      }, {
        key: "setPublicReadAccess",
        value: function(allowed) {
          this.setReadAccess(PUBLIC_KEY, allowed);
        }
      }, {
        key: "getPublicReadAccess",
        value: function() {
          return this.getReadAccess(PUBLIC_KEY);
        }
      }, {
        key: "setPublicWriteAccess",
        value: function(allowed) {
          this.setWriteAccess(PUBLIC_KEY, allowed);
        }
      }, {
        key: "getPublicWriteAccess",
        value: function() {
          return this.getWriteAccess(PUBLIC_KEY);
        }
      }, {
        key: "setPublicProtectedFields",
        value: function(fields) {
          this.setProtectedFields(PUBLIC_KEY, fields);
        }
      }, {
        key: "getPublicProtectedFields",
        value: function() {
          return this.getProtectedFields(PUBLIC_KEY);
        }
      }, {
        key: "getRoleReadAccess",
        value: function(role) {
          return this.getReadAccess(this._getRoleName(role));
        }
      }, {
        key: "getRoleWriteAccess",
        value: function(role) {
          return this.getWriteAccess(this._getRoleName(role));
        }
      }, {
        key: "setRoleReadAccess",
        value: function(role, allowed) {
          this.setReadAccess(this._getRoleName(role), allowed);
        }
      }, {
        key: "setRoleWriteAccess",
        value: function(role, allowed) {
          this.setWriteAccess(this._getRoleName(role), allowed);
        }
      }, {
        key: "getRoleProtectedFields",
        value: function(role) {
          return this.getProtectedFields(this._getRoleName(role));
        }
      }, {
        key: "setRoleProtectedFields",
        value: function(role, fields) {
          this.setProtectedFields(this._getRoleName(role), fields);
        }
      }]);
      return ParseCLP2;
    }();
    var _default = ParseCLP;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseConfig.js
var require_ParseConfig = __commonJS({
  "node_modules/moralis/lib/browser/ParseConfig.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _promise = _interopRequireDefault(require_promise3());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _decode = _interopRequireDefault(require_decode());
    var _encode = _interopRequireDefault(require_encode());
    var _escape2 = _interopRequireDefault(require_escape());
    var _ParseError = _interopRequireDefault(require_ParseError());
    var _Storage = _interopRequireDefault(require_Storage());
    var ParseConfig = /* @__PURE__ */ function() {
      function ParseConfig2() {
        (0, _classCallCheck2.default)(this, ParseConfig2);
        (0, _defineProperty2.default)(this, "attributes", void 0);
        (0, _defineProperty2.default)(this, "_escapedAttributes", void 0);
        this.attributes = {};
        this._escapedAttributes = {};
      }
      (0, _createClass2.default)(ParseConfig2, [{
        key: "get",
        value: function(attr) {
          return this.attributes[attr];
        }
      }, {
        key: "escape",
        value: function(attr) {
          var html = this._escapedAttributes[attr];
          if (html) {
            return html;
          }
          var val = this.attributes[attr];
          var escaped = "";
          if (val != null) {
            escaped = (0, _escape2.default)(val.toString());
          }
          this._escapedAttributes[attr] = escaped;
          return escaped;
        }
      }], [{
        key: "current",
        value: function() {
          var controller = _CoreManager.default.getConfigController();
          return controller.current();
        }
      }, {
        key: "get",
        value: function() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var controller = _CoreManager.default.getConfigController();
          return controller.get(options);
        }
      }, {
        key: "save",
        value: function(attrs, masterKeyOnlyFlags) {
          var controller = _CoreManager.default.getConfigController();
          return controller.save(attrs, masterKeyOnlyFlags).then(function() {
            return controller.get({
              useMasterKey: true
            });
          }, function(error) {
            return _promise.default.reject(error);
          });
        }
      }, {
        key: "_clearCache",
        value: function() {
          currentConfig = null;
        }
      }]);
      return ParseConfig2;
    }();
    var currentConfig = null;
    var CURRENT_CONFIG_KEY = "currentConfig";
    function decodePayload(data) {
      try {
        var json = JSON.parse(data);
        if (json && (0, _typeof2.default)(json) === "object") {
          return (0, _decode.default)(json);
        }
      } catch (e) {
        return null;
      }
    }
    var DefaultController = {
      current: function() {
        if (currentConfig) {
          return currentConfig;
        }
        var config = new ParseConfig();
        var storagePath = _Storage.default.generatePath(CURRENT_CONFIG_KEY);
        if (!_Storage.default.async()) {
          var configData = _Storage.default.getItem(storagePath);
          if (configData) {
            var attributes = decodePayload(configData);
            if (attributes) {
              config.attributes = attributes;
              currentConfig = config;
            }
          }
          return config;
        }
        return _Storage.default.getItemAsync(storagePath).then(function(configData2) {
          if (configData2) {
            var _attributes = decodePayload(configData2);
            if (_attributes) {
              config.attributes = _attributes;
              currentConfig = config;
            }
          }
          return config;
        });
      },
      get: function() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("GET", "config", {}, options).then(function(response) {
          if (!response || !response.params) {
            var error = new _ParseError.default(_ParseError.default.INVALID_JSON, "Config JSON response invalid.");
            return _promise.default.reject(error);
          }
          var config = new ParseConfig();
          config.attributes = {};
          for (var attr in response.params) {
            config.attributes[attr] = (0, _decode.default)(response.params[attr]);
          }
          currentConfig = config;
          return _Storage.default.setItemAsync(_Storage.default.generatePath(CURRENT_CONFIG_KEY), (0, _stringify.default)(response.params)).then(function() {
            return config;
          });
        });
      },
      save: function(attrs, masterKeyOnlyFlags) {
        var RESTController = _CoreManager.default.getRESTController();
        var encodedAttrs = {};
        for (var _key in attrs) {
          encodedAttrs[_key] = (0, _encode.default)(attrs[_key]);
        }
        return RESTController.request("PUT", "config", {
          params: encodedAttrs,
          masterKeyOnly: masterKeyOnlyFlags
        }, {
          useMasterKey: true
        }).then(function(response) {
          if (response && response.result) {
            return _promise.default.resolve();
          }
          var error = new _ParseError.default(_ParseError.default.INTERNAL_SERVER_ERROR, "Error occured updating Config.");
          return _promise.default.reject(error);
        });
      }
    };
    _CoreManager.default.setConfigController(DefaultController);
    var _default = ParseConfig;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/FacebookUtils.js
var require_FacebookUtils = __commonJS({
  "node_modules/moralis/lib/browser/FacebookUtils.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _ParseUser = _interopRequireDefault(require_ParseUser());
    var initialized = false;
    var requestedPermissions;
    var initOptions;
    var provider = {
      authenticate: function(options) {
        var _this = this;
        if (typeof FB === "undefined") {
          options.error(this, "Facebook SDK not found.");
        }
        FB.login(function(response) {
          if (response.authResponse) {
            if (options.success) {
              options.success(_this, {
                id: response.authResponse.userID,
                access_token: response.authResponse.accessToken,
                expiration_date: new Date(response.authResponse.expiresIn * 1e3 + new Date().getTime()).toJSON()
              });
            }
          } else {
            if (options.error) {
              options.error(_this, response);
            }
          }
        }, {
          scope: requestedPermissions
        });
      },
      restoreAuthentication: function(authData) {
        if (authData) {
          var newOptions = {};
          if (initOptions) {
            for (var key in initOptions) {
              newOptions[key] = initOptions[key];
            }
          }
          newOptions.status = false;
          var existingResponse = FB.getAuthResponse();
          if (existingResponse && existingResponse.userID !== authData.id) {
            FB.logout();
          }
          FB.init(newOptions);
        }
        return true;
      },
      getAuthType: function() {
        return "facebook";
      },
      deauthenticate: function() {
        this.restoreAuthentication(null);
      }
    };
    var FacebookUtils = {
      init: function(options) {
        if (typeof FB === "undefined") {
          throw new Error("The Facebook JavaScript SDK must be loaded before calling init.");
        }
        initOptions = {};
        if (options) {
          for (var key in options) {
            initOptions[key] = options[key];
          }
        }
        if (initOptions.status && typeof console !== "undefined") {
          var warn = console.warn || console.log || function() {
          };
          warn.call(console, 'The "status" flag passed into FB.init, when set to true, can interfere with Parse Facebook integration, so it has been suppressed. Please call FB.getLoginStatus() explicitly if you require this behavior.');
        }
        initOptions.status = false;
        FB.init(initOptions);
        _ParseUser.default._registerAuthenticationProvider(provider);
        initialized = true;
      },
      isLinked: function(user) {
        return user._isLinked("facebook");
      },
      logIn: function(permissions, options) {
        if (!permissions || typeof permissions === "string") {
          if (!initialized) {
            throw new Error("You must initialize FacebookUtils before calling logIn.");
          }
          requestedPermissions = permissions;
          return _ParseUser.default.logInWith("facebook", options);
        }
        return _ParseUser.default.logInWith("facebook", {
          authData: permissions
        }, options);
      },
      link: function(user, permissions, options) {
        if (!permissions || typeof permissions === "string") {
          if (!initialized) {
            throw new Error("You must initialize FacebookUtils before calling link.");
          }
          requestedPermissions = permissions;
          return user.linkWith("facebook", options);
        }
        return user.linkWith("facebook", {
          authData: permissions
        }, options);
      },
      unlink: function(user, options) {
        if (!initialized) {
          throw new Error("You must initialize FacebookUtils before calling unlink.");
        }
        return user._unlinkFrom("facebook", options);
      },
      _getAuthProvider: function() {
        return provider;
      }
    };
    var _default = FacebookUtils;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseInstallation.js
var require_ParseInstallation = __commonJS({
  "node_modules/moralis/lib/browser/ParseInstallation.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _ParseObject2 = _interopRequireDefault(require_ParseObject());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Installation = /* @__PURE__ */ function(_ParseObject) {
      (0, _inherits2.default)(Installation2, _ParseObject);
      var _super = _createSuper(Installation2);
      function Installation2(attributes) {
        var _this;
        (0, _classCallCheck2.default)(this, Installation2);
        _this = _super.call(this, "_Installation");
        if (attributes && (0, _typeof2.default)(attributes) === "object") {
          if (!_this.set(attributes || {})) {
            throw new Error("Can't create an invalid Installation");
          }
        }
        return _this;
      }
      return (0, _createClass2.default)(Installation2);
    }(_ParseObject2.default);
    exports.default = Installation;
    _ParseObject2.default.registerSubclass("_Installation", Installation);
  }
});

// node_modules/core-js-pure/modules/es.set.js
var require_es_set = __commonJS({
  "node_modules/core-js-pure/modules/es.set.js"() {
    "use strict";
    init_react();
    var collection = require_collection();
    var collectionStrong = require_collection_strong();
    collection("Set", function(init) {
      return function Set2() {
        return init(this, arguments.length ? arguments[0] : void 0);
      };
    }, collectionStrong);
  }
});

// node_modules/core-js-pure/es/set/index.js
var require_set = __commonJS({
  "node_modules/core-js-pure/es/set/index.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_object_to_string();
    require_es_set();
    require_es_string_iterator();
    var path = require_path();
    module.exports = path.Set;
  }
});

// node_modules/core-js-pure/stable/set/index.js
var require_set2 = __commonJS({
  "node_modules/core-js-pure/stable/set/index.js"(exports, module) {
    init_react();
    var parent = require_set();
    require_web_dom_collections_iterator();
    module.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/set.js
var require_set3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/set.js"(exports, module) {
    init_react();
    module.exports = require_set2();
  }
});

// node_modules/moralis/lib/browser/LocalDatastoreController.js
var require_LocalDatastoreController = __commonJS({
  "node_modules/moralis/lib/browser/LocalDatastoreController.js"(exports, module) {
    "use strict";
    init_react();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray = require_is_array4();
    var _interopRequireDefault = require_interopRequireDefault();
    var _stringify = _interopRequireDefault(require_stringify3());
    var _reduce = _interopRequireDefault(require_reduce4());
    var _promise = _interopRequireDefault(require_promise3());
    var _map = _interopRequireDefault(require_map9());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _LocalDatastoreUtils = require_LocalDatastoreUtils();
    var _Storage = _interopRequireDefault(require_Storage());
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i2 = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i2 >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i2++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context7;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty(_context7 = Object.prototype.toString.call(o2)).call(_context7, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    var LocalDatastoreController = {
      fromPinWithName: function(name) {
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
          var values, objects;
          return _regenerator.default.wrap(function(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _Storage.default.getItemAsync(name);
                case 2:
                  values = _context.sent;
                  if (values) {
                    _context.next = 5;
                    break;
                  }
                  return _context.abrupt("return", []);
                case 5:
                  objects = JSON.parse(values);
                  return _context.abrupt("return", objects);
                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      pinWithName: function(name, value) {
        var values = (0, _stringify.default)(value);
        return _Storage.default.setItemAsync(name, values);
      },
      unPinWithName: function(name) {
        return _Storage.default.removeItemAsync(name);
      },
      getAllContents: function() {
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
          var keys;
          return _regenerator.default.wrap(function(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return _Storage.default.getAllKeysAsync();
                case 2:
                  keys = _context3.sent;
                  return _context3.abrupt("return", (0, _reduce.default)(keys).call(keys, /* @__PURE__ */ function() {
                    var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(previousPromise, key) {
                      var LDS, value;
                      return _regenerator.default.wrap(function(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.next = 2;
                              return previousPromise;
                            case 2:
                              LDS = _context2.sent;
                              if (!(0, _LocalDatastoreUtils.isLocalDatastoreKey)(key)) {
                                _context2.next = 8;
                                break;
                              }
                              _context2.next = 6;
                              return _Storage.default.getItemAsync(key);
                            case 6:
                              value = _context2.sent;
                              try {
                                LDS[key] = JSON.parse(value);
                              } catch (error) {
                                console.error("Error getAllContents: ", error);
                              }
                            case 8:
                              return _context2.abrupt("return", LDS);
                            case 9:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }));
                    return function() {
                      return _ref.apply(this, arguments);
                    };
                  }(), _promise.default.resolve({})));
                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }))();
      },
      getRawStorage: function() {
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5() {
          var keys;
          return _regenerator.default.wrap(function(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return _Storage.default.getAllKeysAsync();
                case 2:
                  keys = _context5.sent;
                  return _context5.abrupt("return", (0, _reduce.default)(keys).call(keys, /* @__PURE__ */ function() {
                    var _ref2 = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4(previousPromise, key) {
                      var LDS, value;
                      return _regenerator.default.wrap(function(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              _context4.next = 2;
                              return previousPromise;
                            case 2:
                              LDS = _context4.sent;
                              _context4.next = 5;
                              return _Storage.default.getItemAsync(key);
                            case 5:
                              value = _context4.sent;
                              LDS[key] = value;
                              return _context4.abrupt("return", LDS);
                            case 8:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, _callee4);
                    }));
                    return function() {
                      return _ref2.apply(this, arguments);
                    };
                  }(), _promise.default.resolve({})));
                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }))();
      },
      clear: function() {
        var _this = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6() {
          var keys, toRemove, _iterator, _step, key, promises;
          return _regenerator.default.wrap(function(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return _Storage.default.getAllKeysAsync();
                case 2:
                  keys = _context6.sent;
                  toRemove = [];
                  _iterator = _createForOfIteratorHelper(keys);
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      key = _step.value;
                      if ((0, _LocalDatastoreUtils.isLocalDatastoreKey)(key)) {
                        toRemove.push(key);
                      }
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  promises = (0, _map.default)(toRemove).call(toRemove, _this.unPinWithName);
                  return _context6.abrupt("return", _promise.default.all(promises));
                case 8:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }))();
      }
    };
    module.exports = LocalDatastoreController;
  }
});

// node_modules/moralis/lib/browser/LocalDatastore.js
var require_LocalDatastore = __commonJS({
  "node_modules/moralis/lib/browser/LocalDatastore.js"(exports, module) {
    "use strict";
    init_react();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from2 = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray2 = require_is_array4();
    var _interopRequireDefault = require_interopRequireDefault();
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _promise = _interopRequireDefault(require_promise3());
    var _set = _interopRequireDefault(require_set3());
    var _concat = _interopRequireDefault(require_concat4());
    var _filter = _interopRequireDefault(require_filter4());
    var _includes = _interopRequireDefault(require_includes5());
    var _keys2 = _interopRequireDefault(require_keys3());
    var _startsWith = _interopRequireDefault(require_starts_with4());
    var _keys3 = _interopRequireDefault(require_keys7());
    var _isArray = _interopRequireDefault(require_is_array4());
    var _map = _interopRequireDefault(require_map9());
    var _from = _interopRequireDefault(require_from3());
    var _find = _interopRequireDefault(require_find4());
    var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    var _LocalDatastoreUtils = require_LocalDatastoreUtils();
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray2(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i2 = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i2 >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i2++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context16;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty(_context16 = Object.prototype.toString.call(o2)).call(_context16, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from2(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    var LocalDatastore = {
      isEnabled: false,
      isSyncing: false,
      fromPinWithName: function(name) {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.fromPinWithName(name);
      },
      pinWithName: function(name, value) {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.pinWithName(name, value);
      },
      unPinWithName: function(name) {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.unPinWithName(name);
      },
      _getAllContents: function() {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.getAllContents();
      },
      _getRawStorage: function() {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.getRawStorage();
      },
      _clear: function() {
        var controller = _CoreManager.default.getLocalDatastoreController();
        return controller.clear();
      },
      _handlePinAllWithName: function(name, objects) {
        var _this = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
          var _context;
          var pinName, toPinPromises, objectKeys, _iterator, _step, parent, children, parentKey, json, objectKey, fromPinPromise, _yield$Promise$all, _yield$Promise$all2, pinned, toPin;
          return _regenerator.default.wrap(function(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  pinName = _this.getPinName(name);
                  toPinPromises = [];
                  objectKeys = [];
                  _iterator = _createForOfIteratorHelper(objects);
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      parent = _step.value;
                      children = _this._getChildren(parent);
                      parentKey = _this.getKeyForObject(parent);
                      json = parent._toFullJSON(void 0, true);
                      if (parent._localId) {
                        json._localId = parent._localId;
                      }
                      children[parentKey] = json;
                      for (objectKey in children) {
                        objectKeys.push(objectKey);
                        toPinPromises.push(_this.pinWithName(objectKey, [children[objectKey]]));
                      }
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  fromPinPromise = _this.fromPinWithName(pinName);
                  _context2.next = 8;
                  return _promise.default.all([fromPinPromise, toPinPromises]);
                case 8:
                  _yield$Promise$all = _context2.sent;
                  _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);
                  pinned = _yield$Promise$all2[0];
                  toPin = (0, _toConsumableArray2.default)(new _set.default((0, _concat.default)(_context = []).call(_context, (0, _toConsumableArray2.default)(pinned || []), objectKeys)));
                  return _context2.abrupt("return", _this.pinWithName(pinName, toPin));
                case 13:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee);
        }))();
      },
      _handleUnPinAllWithName: function(name, objects) {
        var _this2 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
          var localDatastore, pinName, promises, objectKeys, _iterator2, _step2, _objectKeys, _context3, parent, children, parentKey, pinned, _iterator3, _step3, objectKey, hasReference, key, pinnedObjects;
          return _regenerator.default.wrap(function(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return _this2._getAllContents();
                case 2:
                  localDatastore = _context4.sent;
                  pinName = _this2.getPinName(name);
                  promises = [];
                  objectKeys = [];
                  _iterator2 = _createForOfIteratorHelper(objects);
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                      parent = _step2.value;
                      children = _this2._getChildren(parent);
                      parentKey = _this2.getKeyForObject(parent);
                      (_objectKeys = objectKeys).push.apply(_objectKeys, (0, _concat.default)(_context3 = [parentKey]).call(_context3, (0, _toConsumableArray2.default)((0, _keys2.default)(children))));
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                  objectKeys = (0, _toConsumableArray2.default)(new _set.default(objectKeys));
                  pinned = localDatastore[pinName] || [];
                  pinned = (0, _filter.default)(pinned).call(pinned, function(item) {
                    return !(0, _includes.default)(objectKeys).call(objectKeys, item);
                  });
                  if (pinned.length === 0) {
                    promises.push(_this2.unPinWithName(pinName));
                    delete localDatastore[pinName];
                  } else {
                    promises.push(_this2.pinWithName(pinName, pinned));
                    localDatastore[pinName] = pinned;
                  }
                  _iterator3 = _createForOfIteratorHelper(objectKeys);
                  _context4.prev = 13;
                  _iterator3.s();
                case 15:
                  if ((_step3 = _iterator3.n()).done) {
                    _context4.next = 31;
                    break;
                  }
                  objectKey = _step3.value;
                  hasReference = false;
                  _context4.t0 = (0, _keys3.default)(_regenerator.default).call(_regenerator.default, localDatastore);
                case 19:
                  if ((_context4.t1 = _context4.t0()).done) {
                    _context4.next = 28;
                    break;
                  }
                  key = _context4.t1.value;
                  if (!(key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX))) {
                    _context4.next = 26;
                    break;
                  }
                  pinnedObjects = localDatastore[key] || [];
                  if (!(0, _includes.default)(pinnedObjects).call(pinnedObjects, objectKey)) {
                    _context4.next = 26;
                    break;
                  }
                  hasReference = true;
                  return _context4.abrupt("break", 28);
                case 26:
                  _context4.next = 19;
                  break;
                case 28:
                  if (!hasReference) {
                    promises.push(_this2.unPinWithName(objectKey));
                  }
                case 29:
                  _context4.next = 15;
                  break;
                case 31:
                  _context4.next = 36;
                  break;
                case 33:
                  _context4.prev = 33;
                  _context4.t2 = _context4["catch"](13);
                  _iterator3.e(_context4.t2);
                case 36:
                  _context4.prev = 36;
                  _iterator3.f();
                  return _context4.finish(36);
                case 39:
                  return _context4.abrupt("return", _promise.default.all(promises));
                case 40:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee2, null, [[13, 33, 36, 39]]);
        }))();
      },
      _getChildren: function(object) {
        var encountered = {};
        var json = object._toFullJSON(void 0, true);
        for (var key in json) {
          if (json[key] && json[key].__type && json[key].__type === "Object") {
            this._traverse(json[key], encountered);
          }
        }
        return encountered;
      },
      _traverse: function(object, encountered) {
        if (!object.objectId) {
          return;
        }
        var objectKey = this.getKeyForObject(object);
        if (encountered[objectKey]) {
          return;
        }
        encountered[objectKey] = object;
        for (var key in object) {
          var json = object[key];
          if (!object[key]) {
            json = object;
          }
          if (json.__type && json.__type === "Object") {
            this._traverse(json, encountered);
          }
        }
      },
      _serializeObjectsFromPinName: function(name) {
        var _this3 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
          var _ref;
          var localDatastore, allObjects, key, pinName, pinned, promises, objects;
          return _regenerator.default.wrap(function(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return _this3._getAllContents();
                case 2:
                  localDatastore = _context5.sent;
                  allObjects = [];
                  for (key in localDatastore) {
                    if ((0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.OBJECT_PREFIX)) {
                      allObjects.push(localDatastore[key][0]);
                    }
                  }
                  if (name) {
                    _context5.next = 7;
                    break;
                  }
                  return _context5.abrupt("return", allObjects);
                case 7:
                  pinName = _this3.getPinName(name);
                  pinned = localDatastore[pinName];
                  if ((0, _isArray.default)(pinned)) {
                    _context5.next = 11;
                    break;
                  }
                  return _context5.abrupt("return", []);
                case 11:
                  promises = (0, _map.default)(pinned).call(pinned, function(objectKey) {
                    return _this3.fromPinWithName(objectKey);
                  });
                  _context5.next = 14;
                  return _promise.default.all(promises);
                case 14:
                  objects = _context5.sent;
                  objects = (0, _concat.default)(_ref = []).apply(_ref, (0, _toConsumableArray2.default)(objects));
                  return _context5.abrupt("return", (0, _filter.default)(objects).call(objects, function(object) {
                    return object != null;
                  }));
                case 17:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee3);
        }))();
      },
      _serializeObject: function(objectKey, localDatastore) {
        var _this4 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4() {
          var LDS, root, queue, meta, uniqueId, nodeId, subTreeRoot, field, value, key, pointer;
          return _regenerator.default.wrap(function(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  LDS = localDatastore;
                  if (LDS) {
                    _context6.next = 5;
                    break;
                  }
                  _context6.next = 4;
                  return _this4._getAllContents();
                case 4:
                  LDS = _context6.sent;
                case 5:
                  if (!(!LDS[objectKey] || LDS[objectKey].length === 0)) {
                    _context6.next = 7;
                    break;
                  }
                  return _context6.abrupt("return", null);
                case 7:
                  root = LDS[objectKey][0];
                  queue = [];
                  meta = {};
                  uniqueId = 0;
                  meta[uniqueId] = root;
                  queue.push(uniqueId);
                  while (queue.length !== 0) {
                    nodeId = queue.shift();
                    subTreeRoot = meta[nodeId];
                    for (field in subTreeRoot) {
                      value = subTreeRoot[field];
                      if (value.__type && value.__type === "Object") {
                        key = _this4.getKeyForObject(value);
                        if (LDS[key] && LDS[key].length > 0) {
                          pointer = LDS[key][0];
                          uniqueId++;
                          meta[uniqueId] = pointer;
                          subTreeRoot[field] = pointer;
                          queue.push(uniqueId);
                        }
                      }
                    }
                  }
                  return _context6.abrupt("return", root);
                case 15:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee4);
        }))();
      },
      _updateObjectIfPinned: function(object) {
        var _this5 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5() {
          var objectKey, pinned;
          return _regenerator.default.wrap(function(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  if (_this5.isEnabled) {
                    _context7.next = 2;
                    break;
                  }
                  return _context7.abrupt("return");
                case 2:
                  objectKey = _this5.getKeyForObject(object);
                  _context7.next = 5;
                  return _this5.fromPinWithName(objectKey);
                case 5:
                  pinned = _context7.sent;
                  if (!(!pinned || pinned.length === 0)) {
                    _context7.next = 8;
                    break;
                  }
                  return _context7.abrupt("return");
                case 8:
                  return _context7.abrupt("return", _this5.pinWithName(objectKey, [object._toFullJSON()]));
                case 9:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee5);
        }))();
      },
      _destroyObjectIfPinned: function(object) {
        var _this6 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6() {
          var localDatastore, objectKey, pin, promises, key, pinned;
          return _regenerator.default.wrap(function(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  if (_this6.isEnabled) {
                    _context8.next = 2;
                    break;
                  }
                  return _context8.abrupt("return");
                case 2:
                  _context8.next = 4;
                  return _this6._getAllContents();
                case 4:
                  localDatastore = _context8.sent;
                  objectKey = _this6.getKeyForObject(object);
                  pin = localDatastore[objectKey];
                  if (pin) {
                    _context8.next = 9;
                    break;
                  }
                  return _context8.abrupt("return");
                case 9:
                  promises = [_this6.unPinWithName(objectKey)];
                  delete localDatastore[objectKey];
                  for (key in localDatastore) {
                    if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {
                      pinned = localDatastore[key] || [];
                      if ((0, _includes.default)(pinned).call(pinned, objectKey)) {
                        pinned = (0, _filter.default)(pinned).call(pinned, function(item) {
                          return item !== objectKey;
                        });
                        if (pinned.length === 0) {
                          promises.push(_this6.unPinWithName(key));
                          delete localDatastore[key];
                        } else {
                          promises.push(_this6.pinWithName(key, pinned));
                          localDatastore[key] = pinned;
                        }
                      }
                    }
                  }
                  return _context8.abrupt("return", _promise.default.all(promises));
                case 13:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee6);
        }))();
      },
      _updateLocalIdForObject: function(localId, object) {
        var _this7 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7() {
          var _context9, _context10;
          var localKey, objectKey, unsaved, promises, localDatastore, key, pinned;
          return _regenerator.default.wrap(function(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  if (_this7.isEnabled) {
                    _context11.next = 2;
                    break;
                  }
                  return _context11.abrupt("return");
                case 2:
                  localKey = (0, _concat.default)(_context9 = (0, _concat.default)(_context10 = "".concat(_LocalDatastoreUtils.OBJECT_PREFIX)).call(_context10, object.className, "_")).call(_context9, localId);
                  objectKey = _this7.getKeyForObject(object);
                  _context11.next = 6;
                  return _this7.fromPinWithName(localKey);
                case 6:
                  unsaved = _context11.sent;
                  if (!(!unsaved || unsaved.length === 0)) {
                    _context11.next = 9;
                    break;
                  }
                  return _context11.abrupt("return");
                case 9:
                  promises = [_this7.unPinWithName(localKey), _this7.pinWithName(objectKey, unsaved)];
                  _context11.next = 12;
                  return _this7._getAllContents();
                case 12:
                  localDatastore = _context11.sent;
                  for (key in localDatastore) {
                    if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {
                      pinned = localDatastore[key] || [];
                      if ((0, _includes.default)(pinned).call(pinned, localKey)) {
                        pinned = (0, _filter.default)(pinned).call(pinned, function(item) {
                          return item !== localKey;
                        });
                        pinned.push(objectKey);
                        promises.push(_this7.pinWithName(key, pinned));
                        localDatastore[key] = pinned;
                      }
                    }
                  }
                  return _context11.abrupt("return", _promise.default.all(promises));
                case 15:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee7);
        }))();
      },
      updateFromServer: function() {
        var _this8 = this;
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee8() {
          var _context12;
          var localDatastore, keys, key, pointersHash, _i, _keys, _key, _key$split, _key$split2, className, objectId, queryPromises, responses, objects, pinPromises;
          return _regenerator.default.wrap(function(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  if (!(!_this8.checkIfEnabled() || _this8.isSyncing)) {
                    _context13.next = 2;
                    break;
                  }
                  return _context13.abrupt("return");
                case 2:
                  _context13.next = 4;
                  return _this8._getAllContents();
                case 4:
                  localDatastore = _context13.sent;
                  keys = [];
                  for (key in localDatastore) {
                    if ((0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.OBJECT_PREFIX)) {
                      keys.push(key);
                    }
                  }
                  if (!(keys.length === 0)) {
                    _context13.next = 9;
                    break;
                  }
                  return _context13.abrupt("return");
                case 9:
                  _this8.isSyncing = true;
                  pointersHash = {};
                  _i = 0, _keys = keys;
                case 12:
                  if (!(_i < _keys.length)) {
                    _context13.next = 23;
                    break;
                  }
                  _key = _keys[_i];
                  _key$split = _key.split("_"), _key$split2 = (0, _slicedToArray2.default)(_key$split, 4), className = _key$split2[2], objectId = _key$split2[3];
                  if (_key.split("_").length === 5 && _key.split("_")[3] === "User") {
                    className = "_User";
                    objectId = _key.split("_")[4];
                  }
                  if (!(0, _startsWith.default)(objectId).call(objectId, "local")) {
                    _context13.next = 18;
                    break;
                  }
                  return _context13.abrupt("continue", 20);
                case 18:
                  if (!(className in pointersHash)) {
                    pointersHash[className] = new _set.default();
                  }
                  pointersHash[className].add(objectId);
                case 20:
                  _i++;
                  _context13.next = 12;
                  break;
                case 23:
                  queryPromises = (0, _map.default)(_context12 = (0, _keys2.default)(pointersHash)).call(_context12, function(className2) {
                    var objectIds = (0, _from.default)(pointersHash[className2]);
                    var query = new _ParseQuery.default(className2);
                    query.limit(objectIds.length);
                    if (objectIds.length === 1) {
                      query.equalTo("objectId", objectIds[0]);
                    } else {
                      query.containedIn("objectId", objectIds);
                    }
                    return (0, _find.default)(query).call(query);
                  });
                  _context13.prev = 24;
                  _context13.next = 27;
                  return _promise.default.all(queryPromises);
                case 27:
                  responses = _context13.sent;
                  objects = (0, _concat.default)([]).apply([], responses);
                  pinPromises = (0, _map.default)(objects).call(objects, function(object) {
                    var objectKey = _this8.getKeyForObject(object);
                    return _this8.pinWithName(objectKey, object._toFullJSON());
                  });
                  _context13.next = 32;
                  return _promise.default.all(pinPromises);
                case 32:
                  _this8.isSyncing = false;
                  _context13.next = 39;
                  break;
                case 35:
                  _context13.prev = 35;
                  _context13.t0 = _context13["catch"](24);
                  console.error("Error syncing LocalDatastore: ", _context13.t0);
                  _this8.isSyncing = false;
                case 39:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee8, null, [[24, 35]]);
        }))();
      },
      getKeyForObject: function(object) {
        var _context14, _context15;
        var objectId = object.objectId || object._getId();
        return (0, _concat.default)(_context14 = (0, _concat.default)(_context15 = "".concat(_LocalDatastoreUtils.OBJECT_PREFIX)).call(_context15, object.className, "_")).call(_context14, objectId);
      },
      getPinName: function(pinName) {
        if (!pinName || pinName === _LocalDatastoreUtils.DEFAULT_PIN) {
          return _LocalDatastoreUtils.DEFAULT_PIN;
        }
        return _LocalDatastoreUtils.PIN_PREFIX + pinName;
      },
      checkIfEnabled: function() {
        if (!this.isEnabled) {
          console.error("Parse.enableLocalDatastore() must be called first");
        }
        return this.isEnabled;
      }
    };
    module.exports = LocalDatastore;
    _CoreManager.default.setLocalDatastoreController(require_LocalDatastoreController());
    _CoreManager.default.setLocalDatastore(LocalDatastore);
  }
});

// node_modules/moralis/lib/browser/MoralisWeb3Api.js
var require_MoralisWeb3Api = __commonJS({
  "node_modules/moralis/lib/browser/MoralisWeb3Api.js"(exports) {
    "use strict";
    init_react();
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty2 = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty2 = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    var _filter = _interopRequireDefault(require_filter4());
    var _includes = _interopRequireDefault(require_includes5());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty2(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var _context42, _context43;
        var source = arguments[i2] != null ? arguments[i2] : {};
        i2 % 2 ? _forEachInstanceProperty2(_context42 = ownKeys(Object(source), true)).call(_context42, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context43 = ownKeys(Object(source))).call(_context43, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var axios = require_axios();
    var Web3Api = /* @__PURE__ */ function() {
      function Web3Api2() {
        (0, _classCallCheck2.default)(this, Web3Api2);
      }
      (0, _createClass2.default)(Web3Api2, null, [{
        key: "initialize",
        value: function(_ref) {
          var apiKey = _ref.apiKey, serverUrl = _ref.serverUrl, _ref$Moralis = _ref.Moralis, Moralis = _ref$Moralis === void 0 ? null : _ref$Moralis;
          if (!serverUrl && !apiKey) {
            throw new Error("Web3Api.initialize failed: initialize with apiKey or serverUrl");
          }
          if (apiKey)
            this.apiKey = apiKey;
          if (serverUrl)
            this.serverUrl = serverUrl;
          this.Moralis = Moralis;
        }
      }, {
        key: "getBody",
        value: function(params, bodyParams) {
          var _this = this;
          if (!params || !bodyParams || !bodyParams.length) {
            return void 0;
          }
          var body = {};
          (0, _forEach.default)(bodyParams).call(bodyParams, function(_ref2) {
            var key = _ref2.key, type = _ref2.type, required = _ref2.required;
            if (params[key] === void 0) {
              if (required)
                throw new Error("param ".concat(key, " is required!"));
            } else if (type === _this.BodyParamTypes.setBody) {
              body = params[key];
            } else {
              body[key] = params[key];
            }
            delete params[key];
          });
          return body;
        }
      }, {
        key: "getParameterizedUrl",
        value: function(url, params) {
          var _context;
          if (!(0, _keys.default)(params).length)
            return url;
          var requiredParams = (0, _filter.default)(_context = url.split("/")).call(_context, function(s2) {
            return s2 && (0, _includes.default)(s2).call(s2, ":");
          });
          if (!requiredParams.length)
            return url;
          var parameterizedUrl = url;
          (0, _forEach.default)(requiredParams).call(requiredParams, function(p2) {
            var key = p2.substr(1);
            var value = params[key];
            if (!value) {
              throw new Error("required param ".concat(key, " not provided"));
            }
            parameterizedUrl = parameterizedUrl.replace(p2, value);
            delete params[key];
          });
          return parameterizedUrl;
        }
      }, {
        key: "getErrorMessage",
        value: function(error, url) {
          var _error$response, _error$response$data;
          return (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()) || "Web3 API error while calling ".concat(url);
        }
      }, {
        key: "fetch",
        value: function() {
          var _fetch = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(_ref3) {
            var endpoint, providedParams, params, _endpoint$method, method, url, bodyParams, _this$Moralis, User, account, user, parameterizedUrl, body, response, msg;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    endpoint = _ref3.endpoint, providedParams = _ref3.params;
                    params = _objectSpread({}, providedParams);
                    _endpoint$method = endpoint.method, method = _endpoint$method === void 0 ? "GET" : _endpoint$method, url = endpoint.url, bodyParams = endpoint.bodyParams;
                    if (this.Moralis) {
                      _this$Moralis = this.Moralis, User = _this$Moralis.User, account = _this$Moralis.account;
                      user = User.current();
                      if (!params.address) {
                        if (user) {
                          params.address = user.get("ethAddress");
                        } else if (account) {
                          params.address = account;
                        }
                      }
                    }
                    if (this.apiKey) {
                      _context2.next = 6;
                      break;
                    }
                    return _context2.abrupt("return", this.apiCall(endpoint.name, params));
                  case 6:
                    _context2.prev = 6;
                    parameterizedUrl = this.getParameterizedUrl(url, params);
                    body = this.getBody(params, bodyParams);
                    _context2.next = 11;
                    return axios(this.baseURL + parameterizedUrl, {
                      params,
                      method,
                      body,
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                        "x-api-key": this.apiKey
                      }
                    });
                  case 11:
                    response = _context2.sent;
                    return _context2.abrupt("return", response.data);
                  case 15:
                    _context2.prev = 15;
                    _context2.t0 = _context2["catch"](6);
                    msg = this.getErrorMessage(_context2.t0, url);
                    throw new Error(msg);
                  case 19:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this, [[6, 15]]);
          }));
          return function() {
            return _fetch.apply(this, arguments);
          };
        }()
      }, {
        key: "apiCall",
        value: function() {
          var _apiCall = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(name, options) {
            var http, response, _error$response2, _error$response2$data;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (this.serverUrl) {
                      _context3.next = 2;
                      break;
                    }
                    throw new Error("Web3Api not initialized, run Moralis.start() first");
                  case 2:
                    _context3.prev = 2;
                    http = axios.create({
                      baseURL: this.serverUrl
                    });
                    if (!options.chain)
                      options.chain = "eth";
                    _context3.next = 7;
                    return http.post("/functions/".concat(name), options, {
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json"
                      }
                    });
                  case 7:
                    response = _context3.sent;
                    return _context3.abrupt("return", response.data.result);
                  case 11:
                    _context3.prev = 11;
                    _context3.t0 = _context3["catch"](2);
                    if (!((_error$response2 = _context3.t0.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.error)) {
                      _context3.next = 15;
                      break;
                    }
                    throw new Error(_context3.t0.response.data.error);
                  case 15:
                    throw _context3.t0;
                  case 16:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this, [[2, 11]]);
          }));
          return function() {
            return _apiCall.apply(this, arguments);
          };
        }()
      }]);
      return Web3Api2;
    }();
    (0, _defineProperty2.default)(Web3Api, "baseURL", "https://deep-index.moralis.io/api/v2");
    (0, _defineProperty2.default)(Web3Api, "BodyParamTypes", {
      setBody: "set body",
      property: "property"
    });
    (0, _defineProperty2.default)(Web3Api, "native", {
      getBlock: function() {
        var _getBlock = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
          var options, _args3 = arguments;
          return _regenerator.default.wrap(function(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  options = _args3.length > 0 && _args3[0] !== void 0 ? _args3[0] : {};
                  return _context4.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getBlock",
                      "url": "/block/:block_number_or_hash"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee3);
        }));
        return function() {
          return _getBlock.apply(this, arguments);
        };
      }(),
      getDateToBlock: function() {
        var _getDateToBlock = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4() {
          var options, _args4 = arguments;
          return _regenerator.default.wrap(function(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  options = _args4.length > 0 && _args4[0] !== void 0 ? _args4[0] : {};
                  return _context5.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getDateToBlock",
                      "url": "/dateToBlock"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee4);
        }));
        return function() {
          return _getDateToBlock.apply(this, arguments);
        };
      }(),
      getLogsByAddress: function() {
        var _getLogsByAddress = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5() {
          var options, _args5 = arguments;
          return _regenerator.default.wrap(function(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  options = _args5.length > 0 && _args5[0] !== void 0 ? _args5[0] : {};
                  return _context6.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getLogsByAddress",
                      "url": "/:address/logs"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee5);
        }));
        return function() {
          return _getLogsByAddress.apply(this, arguments);
        };
      }(),
      getNFTTransfersByBlock: function() {
        var _getNFTTransfersByBlock = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6() {
          var options, _args6 = arguments;
          return _regenerator.default.wrap(function(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  options = _args6.length > 0 && _args6[0] !== void 0 ? _args6[0] : {};
                  return _context7.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getNFTTransfersByBlock",
                      "url": "/block/:block_number_or_hash/nft/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee6);
        }));
        return function() {
          return _getNFTTransfersByBlock.apply(this, arguments);
        };
      }(),
      getTransaction: function() {
        var _getTransaction = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7() {
          var options, _args7 = arguments;
          return _regenerator.default.wrap(function(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  options = _args7.length > 0 && _args7[0] !== void 0 ? _args7[0] : {};
                  return _context8.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "native",
                      "name": "getTransaction",
                      "url": "/transaction/:transaction_hash"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee7);
        }));
        return function() {
          return _getTransaction.apply(this, arguments);
        };
      }(),
      getContractEvents: function() {
        var _getContractEvents = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee8() {
          var options, _args8 = arguments;
          return _regenerator.default.wrap(function(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  options = _args8.length > 0 && _args8[0] !== void 0 ? _args8[0] : {};
                  return _context9.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "POST",
                      "group": "native",
                      "name": "getContractEvents",
                      "url": "/:address/events",
                      "bodyParams": [{
                        "key": "data",
                        "type": "set body",
                        "required": false
                      }]
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee8);
        }));
        return function() {
          return _getContractEvents.apply(this, arguments);
        };
      }(),
      runContractFunction: function() {
        var _runContractFunction = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee9() {
          var options, _args9 = arguments;
          return _regenerator.default.wrap(function(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  options = _args9.length > 0 && _args9[0] !== void 0 ? _args9[0] : {};
                  return _context10.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "POST",
                      "group": "native",
                      "name": "runContractFunction",
                      "url": "/:address/function",
                      "bodyParams": [{
                        "key": "abi",
                        "type": "property",
                        "required": true
                      }, {
                        "key": "params",
                        "type": "property",
                        "required": false
                      }]
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee9);
        }));
        return function() {
          return _runContractFunction.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "account", {
      getTransactions: function() {
        var _getTransactions = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee10() {
          var options, _args10 = arguments;
          return _regenerator.default.wrap(function(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  options = _args10.length > 0 && _args10[0] !== void 0 ? _args10[0] : {};
                  return _context11.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getTransactions",
                      "url": "/:address"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee10);
        }));
        return function() {
          return _getTransactions.apply(this, arguments);
        };
      }(),
      getNativeBalance: function() {
        var _getNativeBalance = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee11() {
          var options, _args11 = arguments;
          return _regenerator.default.wrap(function(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  options = _args11.length > 0 && _args11[0] !== void 0 ? _args11[0] : {};
                  return _context12.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNativeBalance",
                      "url": "/:address/balance"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee11);
        }));
        return function() {
          return _getNativeBalance.apply(this, arguments);
        };
      }(),
      getTokenBalances: function() {
        var _getTokenBalances = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee12() {
          var options, _args12 = arguments;
          return _regenerator.default.wrap(function(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  options = _args12.length > 0 && _args12[0] !== void 0 ? _args12[0] : {};
                  return _context13.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getTokenBalances",
                      "url": "/:address/erc20"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee12);
        }));
        return function() {
          return _getTokenBalances.apply(this, arguments);
        };
      }(),
      getTokenTransfers: function() {
        var _getTokenTransfers = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee13() {
          var options, _args13 = arguments;
          return _regenerator.default.wrap(function(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  options = _args13.length > 0 && _args13[0] !== void 0 ? _args13[0] : {};
                  return _context14.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getTokenTransfers",
                      "url": "/:address/erc20/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee13);
        }));
        return function() {
          return _getTokenTransfers.apply(this, arguments);
        };
      }(),
      getNFTs: function() {
        var _getNFTs = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee14() {
          var options, _args14 = arguments;
          return _regenerator.default.wrap(function(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  options = _args14.length > 0 && _args14[0] !== void 0 ? _args14[0] : {};
                  return _context15.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNFTs",
                      "url": "/:address/nft"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee14);
        }));
        return function() {
          return _getNFTs.apply(this, arguments);
        };
      }(),
      getNFTTransfers: function() {
        var _getNFTTransfers = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee15() {
          var options, _args15 = arguments;
          return _regenerator.default.wrap(function(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  options = _args15.length > 0 && _args15[0] !== void 0 ? _args15[0] : {};
                  return _context16.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNFTTransfers",
                      "url": "/:address/nft/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee15);
        }));
        return function() {
          return _getNFTTransfers.apply(this, arguments);
        };
      }(),
      getNFTsForContract: function() {
        var _getNFTsForContract = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee16() {
          var options, _args16 = arguments;
          return _regenerator.default.wrap(function(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  options = _args16.length > 0 && _args16[0] !== void 0 ? _args16[0] : {};
                  return _context17.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNFTsForContract",
                      "url": "/:address/nft/:token_address"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee16);
        }));
        return function() {
          return _getNFTsForContract.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "token", {
      getTokenMetadata: function() {
        var _getTokenMetadata = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee17() {
          var options, _args17 = arguments;
          return _regenerator.default.wrap(function(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  options = _args17.length > 0 && _args17[0] !== void 0 ? _args17[0] : {};
                  return _context18.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenMetadata",
                      "url": "/erc20/metadata"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee17);
        }));
        return function() {
          return _getTokenMetadata.apply(this, arguments);
        };
      }(),
      getNFTTrades: function() {
        var _getNFTTrades = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee18() {
          var options, _args18 = arguments;
          return _regenerator.default.wrap(function(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  options = _args18.length > 0 && _args18[0] !== void 0 ? _args18[0] : {};
                  return _context19.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNFTTrades",
                      "url": "/nft/:address/trades"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee18);
        }));
        return function() {
          return _getNFTTrades.apply(this, arguments);
        };
      }(),
      getNFTLowestPrice: function() {
        var _getNFTLowestPrice = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee19() {
          var options, _args19 = arguments;
          return _regenerator.default.wrap(function(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  options = _args19.length > 0 && _args19[0] !== void 0 ? _args19[0] : {};
                  return _context20.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNFTLowestPrice",
                      "url": "/nft/:address/lowestprice"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee19);
        }));
        return function() {
          return _getNFTLowestPrice.apply(this, arguments);
        };
      }(),
      getTokenMetadataBySymbol: function() {
        var _getTokenMetadataBySymbol = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee20() {
          var options, _args20 = arguments;
          return _regenerator.default.wrap(function(_context21) {
            while (1) {
              switch (_context21.prev = _context21.next) {
                case 0:
                  options = _args20.length > 0 && _args20[0] !== void 0 ? _args20[0] : {};
                  return _context21.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenMetadataBySymbol",
                      "url": "/erc20/metadata/symbols"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context21.stop();
              }
            }
          }, _callee20);
        }));
        return function() {
          return _getTokenMetadataBySymbol.apply(this, arguments);
        };
      }(),
      getTokenPrice: function() {
        var _getTokenPrice = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee21() {
          var options, _args21 = arguments;
          return _regenerator.default.wrap(function(_context22) {
            while (1) {
              switch (_context22.prev = _context22.next) {
                case 0:
                  options = _args21.length > 0 && _args21[0] !== void 0 ? _args21[0] : {};
                  return _context22.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenPrice",
                      "url": "/erc20/:address/price"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context22.stop();
              }
            }
          }, _callee21);
        }));
        return function() {
          return _getTokenPrice.apply(this, arguments);
        };
      }(),
      getTokenAddressTransfers: function() {
        var _getTokenAddressTransfers = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee22() {
          var options, _args22 = arguments;
          return _regenerator.default.wrap(function(_context23) {
            while (1) {
              switch (_context23.prev = _context23.next) {
                case 0:
                  options = _args22.length > 0 && _args22[0] !== void 0 ? _args22[0] : {};
                  return _context23.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenAddressTransfers",
                      "url": "/erc20/:address/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context23.stop();
              }
            }
          }, _callee22);
        }));
        return function() {
          return _getTokenAddressTransfers.apply(this, arguments);
        };
      }(),
      getTokenAllowance: function() {
        var _getTokenAllowance = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee23() {
          var options, _args23 = arguments;
          return _regenerator.default.wrap(function(_context24) {
            while (1) {
              switch (_context24.prev = _context24.next) {
                case 0:
                  options = _args23.length > 0 && _args23[0] !== void 0 ? _args23[0] : {};
                  return _context24.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenAllowance",
                      "url": "/erc20/:address/allowance"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context24.stop();
              }
            }
          }, _callee23);
        }));
        return function() {
          return _getTokenAllowance.apply(this, arguments);
        };
      }(),
      searchNFTs: function() {
        var _searchNFTs = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee24() {
          var options, _args24 = arguments;
          return _regenerator.default.wrap(function(_context25) {
            while (1) {
              switch (_context25.prev = _context25.next) {
                case 0:
                  options = _args24.length > 0 && _args24[0] !== void 0 ? _args24[0] : {};
                  return _context25.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "searchNFTs",
                      "url": "/nft/search"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context25.stop();
              }
            }
          }, _callee24);
        }));
        return function() {
          return _searchNFTs.apply(this, arguments);
        };
      }(),
      getNftTransfersFromToBlock: function() {
        var _getNftTransfersFromToBlock = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee25() {
          var options, _args25 = arguments;
          return _regenerator.default.wrap(function(_context26) {
            while (1) {
              switch (_context26.prev = _context26.next) {
                case 0:
                  options = _args25.length > 0 && _args25[0] !== void 0 ? _args25[0] : {};
                  return _context26.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNftTransfersFromToBlock",
                      "url": "/nft/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context26.stop();
              }
            }
          }, _callee25);
        }));
        return function() {
          return _getNftTransfersFromToBlock.apply(this, arguments);
        };
      }(),
      getAllTokenIds: function() {
        var _getAllTokenIds = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee26() {
          var options, _args26 = arguments;
          return _regenerator.default.wrap(function(_context27) {
            while (1) {
              switch (_context27.prev = _context27.next) {
                case 0:
                  options = _args26.length > 0 && _args26[0] !== void 0 ? _args26[0] : {};
                  return _context27.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getAllTokenIds",
                      "url": "/nft/:address"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context27.stop();
              }
            }
          }, _callee26);
        }));
        return function() {
          return _getAllTokenIds.apply(this, arguments);
        };
      }(),
      getContractNFTTransfers: function() {
        var _getContractNFTTransfers = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee27() {
          var options, _args27 = arguments;
          return _regenerator.default.wrap(function(_context28) {
            while (1) {
              switch (_context28.prev = _context28.next) {
                case 0:
                  options = _args27.length > 0 && _args27[0] !== void 0 ? _args27[0] : {};
                  return _context28.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getContractNFTTransfers",
                      "url": "/nft/:address/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context28.stop();
              }
            }
          }, _callee27);
        }));
        return function() {
          return _getContractNFTTransfers.apply(this, arguments);
        };
      }(),
      getNFTOwners: function() {
        var _getNFTOwners = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee28() {
          var options, _args28 = arguments;
          return _regenerator.default.wrap(function(_context29) {
            while (1) {
              switch (_context29.prev = _context29.next) {
                case 0:
                  options = _args28.length > 0 && _args28[0] !== void 0 ? _args28[0] : {};
                  return _context29.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNFTOwners",
                      "url": "/nft/:address/owners"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context29.stop();
              }
            }
          }, _callee28);
        }));
        return function() {
          return _getNFTOwners.apply(this, arguments);
        };
      }(),
      getNFTMetadata: function() {
        var _getNFTMetadata = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee29() {
          var options, _args29 = arguments;
          return _regenerator.default.wrap(function(_context30) {
            while (1) {
              switch (_context30.prev = _context30.next) {
                case 0:
                  options = _args29.length > 0 && _args29[0] !== void 0 ? _args29[0] : {};
                  return _context30.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getNFTMetadata",
                      "url": "/nft/:address/metadata"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context30.stop();
              }
            }
          }, _callee29);
        }));
        return function() {
          return _getNFTMetadata.apply(this, arguments);
        };
      }(),
      reSyncMetadata: function() {
        var _reSyncMetadata = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee30() {
          var options, _args30 = arguments;
          return _regenerator.default.wrap(function(_context31) {
            while (1) {
              switch (_context31.prev = _context31.next) {
                case 0:
                  options = _args30.length > 0 && _args30[0] !== void 0 ? _args30[0] : {};
                  return _context31.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "reSyncMetadata",
                      "url": "/nft/:address/:token_id/metadata/resync"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context31.stop();
              }
            }
          }, _callee30);
        }));
        return function() {
          return _reSyncMetadata.apply(this, arguments);
        };
      }(),
      syncNFTContract: function() {
        var _syncNFTContract = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee31() {
          var options, _args31 = arguments;
          return _regenerator.default.wrap(function(_context32) {
            while (1) {
              switch (_context32.prev = _context32.next) {
                case 0:
                  options = _args31.length > 0 && _args31[0] !== void 0 ? _args31[0] : {};
                  return _context32.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "PUT",
                      "group": "token",
                      "name": "syncNFTContract",
                      "url": "/nft/:address/sync"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context32.stop();
              }
            }
          }, _callee31);
        }));
        return function() {
          return _syncNFTContract.apply(this, arguments);
        };
      }(),
      getTokenIdMetadata: function() {
        var _getTokenIdMetadata = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee32() {
          var options, _args32 = arguments;
          return _regenerator.default.wrap(function(_context33) {
            while (1) {
              switch (_context33.prev = _context33.next) {
                case 0:
                  options = _args32.length > 0 && _args32[0] !== void 0 ? _args32[0] : {};
                  return _context33.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenIdMetadata",
                      "url": "/nft/:address/:token_id"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context33.stop();
              }
            }
          }, _callee32);
        }));
        return function() {
          return _getTokenIdMetadata.apply(this, arguments);
        };
      }(),
      getTokenIdOwners: function() {
        var _getTokenIdOwners = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee33() {
          var options, _args33 = arguments;
          return _regenerator.default.wrap(function(_context34) {
            while (1) {
              switch (_context34.prev = _context34.next) {
                case 0:
                  options = _args33.length > 0 && _args33[0] !== void 0 ? _args33[0] : {};
                  return _context34.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getTokenIdOwners",
                      "url": "/nft/:address/:token_id/owners"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context34.stop();
              }
            }
          }, _callee33);
        }));
        return function() {
          return _getTokenIdOwners.apply(this, arguments);
        };
      }(),
      getWalletTokenIdTransfers: function() {
        var _getWalletTokenIdTransfers = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee34() {
          var options, _args34 = arguments;
          return _regenerator.default.wrap(function(_context35) {
            while (1) {
              switch (_context35.prev = _context35.next) {
                case 0:
                  options = _args34.length > 0 && _args34[0] !== void 0 ? _args34[0] : {};
                  return _context35.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "token",
                      "name": "getWalletTokenIdTransfers",
                      "url": "/nft/:address/:token_id/transfers"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context35.stop();
              }
            }
          }, _callee34);
        }));
        return function() {
          return _getWalletTokenIdTransfers.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "resolve", {
      resolveDomain: function() {
        var _resolveDomain = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee35() {
          var options, _args35 = arguments;
          return _regenerator.default.wrap(function(_context36) {
            while (1) {
              switch (_context36.prev = _context36.next) {
                case 0:
                  options = _args35.length > 0 && _args35[0] !== void 0 ? _args35[0] : {};
                  return _context36.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "resolve",
                      "name": "resolveDomain",
                      "url": "/resolve/:domain"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context36.stop();
              }
            }
          }, _callee35);
        }));
        return function() {
          return _resolveDomain.apply(this, arguments);
        };
      }(),
      resolveAddress: function() {
        var _resolveAddress = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee36() {
          var options, _args36 = arguments;
          return _regenerator.default.wrap(function(_context37) {
            while (1) {
              switch (_context37.prev = _context37.next) {
                case 0:
                  options = _args36.length > 0 && _args36[0] !== void 0 ? _args36[0] : {};
                  return _context37.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "resolve",
                      "name": "resolveAddress",
                      "url": "/resolve/:address/reverse"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context37.stop();
              }
            }
          }, _callee36);
        }));
        return function() {
          return _resolveAddress.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "defi", {
      getPairReserves: function() {
        var _getPairReserves = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee37() {
          var options, _args37 = arguments;
          return _regenerator.default.wrap(function(_context38) {
            while (1) {
              switch (_context38.prev = _context38.next) {
                case 0:
                  options = _args37.length > 0 && _args37[0] !== void 0 ? _args37[0] : {};
                  return _context38.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "defi",
                      "name": "getPairReserves",
                      "url": "/:pair_address/reserves"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context38.stop();
              }
            }
          }, _callee37);
        }));
        return function() {
          return _getPairReserves.apply(this, arguments);
        };
      }(),
      getPairAddress: function() {
        var _getPairAddress = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee38() {
          var options, _args38 = arguments;
          return _regenerator.default.wrap(function(_context39) {
            while (1) {
              switch (_context39.prev = _context39.next) {
                case 0:
                  options = _args38.length > 0 && _args38[0] !== void 0 ? _args38[0] : {};
                  return _context39.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "defi",
                      "name": "getPairAddress",
                      "url": "/:token0_address/:token1_address/pairAddress"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context39.stop();
              }
            }
          }, _callee38);
        }));
        return function() {
          return _getPairAddress.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "storage", {
      uploadFolder: function() {
        var _uploadFolder = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee39() {
          var options, _args39 = arguments;
          return _regenerator.default.wrap(function(_context40) {
            while (1) {
              switch (_context40.prev = _context40.next) {
                case 0:
                  options = _args39.length > 0 && _args39[0] !== void 0 ? _args39[0] : {};
                  return _context40.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "POST",
                      "group": "storage",
                      "name": "uploadFolder",
                      "url": "/ipfs/uploadFolder",
                      "bodyParams": [{
                        "key": "data",
                        "type": "set body",
                        "required": false
                      }]
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context40.stop();
              }
            }
          }, _callee39);
        }));
        return function() {
          return _uploadFolder.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(Web3Api, "info", {
      web3ApiVersion: function() {
        var _web3ApiVersion = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee40() {
          var options, _args40 = arguments;
          return _regenerator.default.wrap(function(_context41) {
            while (1) {
              switch (_context41.prev = _context41.next) {
                case 0:
                  options = _args40.length > 0 && _args40[0] !== void 0 ? _args40[0] : {};
                  return _context41.abrupt("return", Web3Api.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "info",
                      "name": "web3ApiVersion",
                      "url": "/web3/version"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context41.stop();
              }
            }
          }, _callee40);
        }));
        return function() {
          return _web3ApiVersion.apply(this, arguments);
        };
      }()
    });
    var _default = Web3Api;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/MoralisSolanaApi.js
var require_MoralisSolanaApi = __commonJS({
  "node_modules/moralis/lib/browser/MoralisSolanaApi.js"(exports) {
    "use strict";
    init_react();
    var _Object$keys2 = require_keys3();
    var _Object$getOwnPropertySymbols = require_get_own_property_symbols3();
    var _filterInstanceProperty2 = require_filter4();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _forEachInstanceProperty2 = require_for_each4();
    var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors3();
    var _Object$defineProperties = require_define_properties3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _keys = _interopRequireDefault(require_keys3());
    var _filter = _interopRequireDefault(require_filter4());
    var _includes = _interopRequireDefault(require_includes5());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    function ownKeys(object, enumerableOnly) {
      var keys = _Object$keys2(object);
      if (_Object$getOwnPropertySymbols) {
        var symbols = _Object$getOwnPropertySymbols(object);
        enumerableOnly && (symbols = _filterInstanceProperty2(symbols).call(symbols, function(sym) {
          return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var _context9, _context10;
        var source = arguments[i2] != null ? arguments[i2] : {};
        i2 % 2 ? _forEachInstanceProperty2(_context9 = ownKeys(Object(source), true)).call(_context9, function(key) {
          (0, _defineProperty2.default)(target, key, source[key]);
        }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context10 = ownKeys(Object(source))).call(_context10, function(key) {
          _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var axios = require_axios();
    var SolanaApi = /* @__PURE__ */ function() {
      function SolanaApi2() {
        (0, _classCallCheck2.default)(this, SolanaApi2);
      }
      (0, _createClass2.default)(SolanaApi2, null, [{
        key: "initialize",
        value: function(_ref) {
          var apiKey = _ref.apiKey, serverUrl = _ref.serverUrl, _ref$Moralis = _ref.Moralis, Moralis = _ref$Moralis === void 0 ? null : _ref$Moralis;
          if (!serverUrl && !apiKey) {
            throw new Error("SolanaApi.initialize failed: initialize with apiKey or serverUrl");
          }
          if (apiKey)
            this.apiKey = apiKey;
          if (serverUrl)
            this.serverUrl = serverUrl;
          this.Moralis = Moralis;
        }
      }, {
        key: "getBody",
        value: function(params, bodyParams) {
          var _this = this;
          if (!params || !bodyParams || !bodyParams.length) {
            return void 0;
          }
          var body = {};
          (0, _forEach.default)(bodyParams).call(bodyParams, function(_ref2) {
            var key = _ref2.key, type = _ref2.type, required = _ref2.required;
            if (params[key] === void 0) {
              if (required)
                throw new Error("param ".concat(key, " is required!"));
            } else if (type === _this.BodyParamTypes.setBody) {
              body = params[key];
            } else {
              body[key] = params[key];
            }
            delete params[key];
          });
          return body;
        }
      }, {
        key: "getParameterizedUrl",
        value: function(url, params) {
          var _context;
          if (!(0, _keys.default)(params).length)
            return url;
          var requiredParams = (0, _filter.default)(_context = url.split("/")).call(_context, function(s2) {
            return s2 && (0, _includes.default)(s2).call(s2, ":");
          });
          if (!requiredParams.length)
            return url;
          var parameterizedUrl = url;
          (0, _forEach.default)(requiredParams).call(requiredParams, function(p2) {
            var key = p2.substr(1);
            var value = params[key];
            if (!value) {
              throw new Error("required param ".concat(key, " not provided"));
            }
            parameterizedUrl = parameterizedUrl.replace(p2, value);
            delete params[key];
          });
          return parameterizedUrl;
        }
      }, {
        key: "getErrorMessage",
        value: function(error, url) {
          var _error$response, _error$response$data;
          return (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()) || "Solana API error while calling ".concat(url);
        }
      }, {
        key: "fetch",
        value: function() {
          var _fetch = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(_ref3) {
            var endpoint, providedParams, params, _endpoint$method, method, url, bodyParams, User, user, parameterizedUrl, body, response, msg;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    endpoint = _ref3.endpoint, providedParams = _ref3.params;
                    params = _objectSpread({}, providedParams);
                    _endpoint$method = endpoint.method, method = _endpoint$method === void 0 ? "GET" : _endpoint$method, url = endpoint.url, bodyParams = endpoint.bodyParams;
                    if (this.Moralis) {
                      User = this.Moralis.User;
                      user = User.current();
                      if (!params.address) {
                        if (user) {
                          params.address = user.get("solAddress");
                        }
                      }
                    }
                    if (!params.network)
                      params.network = "mainnet";
                    if (!params.responseType)
                      params.responseType = "native";
                    if (this.apiKey) {
                      _context2.next = 8;
                      break;
                    }
                    return _context2.abrupt("return", this.apiCall(endpoint.name, params));
                  case 8:
                    _context2.prev = 8;
                    parameterizedUrl = this.getParameterizedUrl(url, params);
                    body = this.getBody(params, bodyParams);
                    _context2.next = 13;
                    return axios(this.baseURL + parameterizedUrl, {
                      params,
                      method,
                      body,
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                        "x-api-key": this.apiKey
                      }
                    });
                  case 13:
                    response = _context2.sent;
                    return _context2.abrupt("return", response.data);
                  case 17:
                    _context2.prev = 17;
                    _context2.t0 = _context2["catch"](8);
                    msg = this.getErrorMessage(_context2.t0, url);
                    throw new Error(msg);
                  case 21:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee, this, [[8, 17]]);
          }));
          return function() {
            return _fetch.apply(this, arguments);
          };
        }()
      }, {
        key: "apiCall",
        value: function() {
          var _apiCall = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(name, options) {
            var http, response, _error$response2, _error$response2$data;
            return _regenerator.default.wrap(function(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    if (this.serverUrl) {
                      _context3.next = 2;
                      break;
                    }
                    throw new Error("SolanaAPI not initialized, run Moralis.start() first");
                  case 2:
                    _context3.prev = 2;
                    http = axios.create({
                      baseURL: this.serverUrl
                    });
                    _context3.next = 6;
                    return http.post("/functions/sol-".concat(name), options, {
                      headers: {
                        Accept: "application/json",
                        "Content-Type": "application/json"
                      }
                    });
                  case 6:
                    response = _context3.sent;
                    return _context3.abrupt("return", response.data.result);
                  case 10:
                    _context3.prev = 10;
                    _context3.t0 = _context3["catch"](2);
                    if (!((_error$response2 = _context3.t0.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.error)) {
                      _context3.next = 14;
                      break;
                    }
                    throw new Error(_context3.t0.response.data.error);
                  case 14:
                    throw _context3.t0;
                  case 15:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee2, this, [[2, 10]]);
          }));
          return function() {
            return _apiCall.apply(this, arguments);
          };
        }()
      }]);
      return SolanaApi2;
    }();
    (0, _defineProperty2.default)(SolanaApi, "baseURL", "https://solana-gateway.moralis.io");
    (0, _defineProperty2.default)(SolanaApi, "BodyParamTypes", {
      setBody: "set body",
      property: "property"
    });
    (0, _defineProperty2.default)(SolanaApi, "account", {
      balance: function() {
        var _balance = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
          var options, _args3 = arguments;
          return _regenerator.default.wrap(function(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  options = _args3.length > 0 && _args3[0] !== void 0 ? _args3[0] : {};
                  return _context4.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "balance",
                      "url": "/account/:network/:address/balance"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee3);
        }));
        return function() {
          return _balance.apply(this, arguments);
        };
      }(),
      getSPL: function() {
        var _getSPL = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee4() {
          var options, _args4 = arguments;
          return _regenerator.default.wrap(function(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  options = _args4.length > 0 && _args4[0] !== void 0 ? _args4[0] : {};
                  return _context5.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getSPL",
                      "url": "/account/:network/:address/tokens"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee4);
        }));
        return function() {
          return _getSPL.apply(this, arguments);
        };
      }(),
      getNFTs: function() {
        var _getNFTs = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee5() {
          var options, _args5 = arguments;
          return _regenerator.default.wrap(function(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  options = _args5.length > 0 && _args5[0] !== void 0 ? _args5[0] : {};
                  return _context6.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getNFTs",
                      "url": "/account/:network/:address/nft"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee5);
        }));
        return function() {
          return _getNFTs.apply(this, arguments);
        };
      }(),
      getPortfolio: function() {
        var _getPortfolio = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee6() {
          var options, _args6 = arguments;
          return _regenerator.default.wrap(function(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  options = _args6.length > 0 && _args6[0] !== void 0 ? _args6[0] : {};
                  return _context7.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "account",
                      "name": "getPortfolio",
                      "url": "/account/:network/:address/portfolio"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee6);
        }));
        return function() {
          return _getPortfolio.apply(this, arguments);
        };
      }()
    });
    (0, _defineProperty2.default)(SolanaApi, "nft", {
      getNFTMetadata: function() {
        var _getNFTMetadata = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee7() {
          var options, _args7 = arguments;
          return _regenerator.default.wrap(function(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  options = _args7.length > 0 && _args7[0] !== void 0 ? _args7[0] : {};
                  return _context8.abrupt("return", SolanaApi.fetch({
                    endpoint: {
                      "method": "GET",
                      "group": "nft",
                      "name": "getNFTMetadata",
                      "url": "/nft/:network/:address/metadata"
                    },
                    params: options
                  }));
                case 2:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee7);
        }));
        return function() {
          return _getNFTMetadata.apply(this, arguments);
        };
      }()
    });
    var _default = SolanaApi;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Push.js
var require_Push = __commonJS({
  "node_modules/moralis/lib/browser/Push.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.send = send;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseQuery = _interopRequireDefault(require_ParseQuery());
    function send(data) {
      if (data.where && data.where instanceof _ParseQuery.default) {
        data.where = data.where.toJSON().where;
      }
      if (data.push_time && (0, _typeof2.default)(data.push_time) === "object") {
        data.push_time = data.push_time.toJSON();
      }
      if (data.expiration_time && (0, _typeof2.default)(data.expiration_time) === "object") {
        data.expiration_time = data.expiration_time.toJSON();
      }
      if (data.expiration_time && data.expiration_interval) {
        throw new Error("expiration_time and expiration_interval cannot both be set.");
      }
      return _CoreManager.default.getPushController().send(data);
    }
    var DefaultController = {
      send: function(data) {
        return _CoreManager.default.getRESTController().request("POST", "push", data, {
          useMasterKey: true
        });
      }
    };
    _CoreManager.default.setPushController(DefaultController);
  }
});

// node_modules/moralis/lib/browser/ParseSchema.js
var require_ParseSchema = __commonJS({
  "node_modules/moralis/lib/browser/ParseSchema.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _ParseCLP = _interopRequireDefault(require_ParseCLP());
    var FIELD_TYPES = ["String", "Number", "Boolean", "Date", "File", "GeoPoint", "Polygon", "Array", "Object", "Pointer", "Relation"];
    var ParseSchema = /* @__PURE__ */ function() {
      function ParseSchema2(className) {
        (0, _classCallCheck2.default)(this, ParseSchema2);
        (0, _defineProperty2.default)(this, "className", void 0);
        (0, _defineProperty2.default)(this, "_fields", void 0);
        (0, _defineProperty2.default)(this, "_indexes", void 0);
        (0, _defineProperty2.default)(this, "_clp", void 0);
        if (typeof className === "string") {
          if (className === "User" && _CoreManager.default.get("PERFORM_USER_REWRITE")) {
            this.className = "_User";
          } else {
            this.className = className;
          }
        }
        this._fields = {};
        this._indexes = {};
      }
      (0, _createClass2.default)(ParseSchema2, [{
        key: "get",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          return controller.get(this.className).then(function(response) {
            if (!response) {
              throw new Error("Schema not found.");
            }
            return response;
          });
        }
      }, {
        key: "save",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          var params = {
            className: this.className,
            fields: this._fields,
            indexes: this._indexes,
            classLevelPermissions: this._clp
          };
          return controller.create(this.className, params);
        }
      }, {
        key: "update",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          var params = {
            className: this.className,
            fields: this._fields,
            indexes: this._indexes,
            classLevelPermissions: this._clp
          };
          this._fields = {};
          this._indexes = {};
          return controller.update(this.className, params);
        }
      }, {
        key: "delete",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          return controller.delete(this.className);
        }
      }, {
        key: "purge",
        value: function() {
          this.assertClassName();
          var controller = _CoreManager.default.getSchemaController();
          return controller.purge(this.className);
        }
      }, {
        key: "assertClassName",
        value: function() {
          if (!this.className) {
            throw new Error("You must set a Class Name before making any request.");
          }
        }
      }, {
        key: "setCLP",
        value: function(clp) {
          if (clp instanceof _ParseCLP.default) {
            this._clp = clp.toJSON();
          } else {
            this._clp = clp;
          }
          return this;
        }
      }, {
        key: "addField",
        value: function(name, type) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          type = type || "String";
          if (!name) {
            throw new Error("field name may not be null.");
          }
          if ((0, _indexOf.default)(FIELD_TYPES).call(FIELD_TYPES, type) === -1) {
            throw new Error("".concat(type, " is not a valid type."));
          }
          var fieldOptions = {
            type
          };
          if (typeof options.required === "boolean") {
            fieldOptions.required = options.required;
          }
          if (options.defaultValue !== void 0) {
            fieldOptions.defaultValue = options.defaultValue;
          }
          this._fields[name] = fieldOptions;
          return this;
        }
      }, {
        key: "addIndex",
        value: function(name, index) {
          if (!name) {
            throw new Error("index name may not be null.");
          }
          if (!index) {
            throw new Error("index may not be null.");
          }
          this._indexes[name] = index;
          return this;
        }
      }, {
        key: "addString",
        value: function(name, options) {
          return this.addField(name, "String", options);
        }
      }, {
        key: "addNumber",
        value: function(name, options) {
          return this.addField(name, "Number", options);
        }
      }, {
        key: "addBoolean",
        value: function(name, options) {
          return this.addField(name, "Boolean", options);
        }
      }, {
        key: "addDate",
        value: function(name, options) {
          if (options && options.defaultValue) {
            options.defaultValue = {
              __type: "Date",
              iso: new Date(options.defaultValue)
            };
          }
          return this.addField(name, "Date", options);
        }
      }, {
        key: "addFile",
        value: function(name, options) {
          return this.addField(name, "File", options);
        }
      }, {
        key: "addGeoPoint",
        value: function(name, options) {
          return this.addField(name, "GeoPoint", options);
        }
      }, {
        key: "addPolygon",
        value: function(name, options) {
          return this.addField(name, "Polygon", options);
        }
      }, {
        key: "addArray",
        value: function(name, options) {
          return this.addField(name, "Array", options);
        }
      }, {
        key: "addObject",
        value: function(name, options) {
          return this.addField(name, "Object", options);
        }
      }, {
        key: "addPointer",
        value: function(name, targetClass) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          if (!name) {
            throw new Error("field name may not be null.");
          }
          if (!targetClass) {
            throw new Error("You need to set the targetClass of the Pointer.");
          }
          var fieldOptions = {
            type: "Pointer",
            targetClass
          };
          if (typeof options.required === "boolean") {
            fieldOptions.required = options.required;
          }
          if (options.defaultValue !== void 0) {
            fieldOptions.defaultValue = options.defaultValue;
            if (options.defaultValue instanceof _ParseObject.default) {
              fieldOptions.defaultValue = options.defaultValue.toPointer();
            }
          }
          this._fields[name] = fieldOptions;
          return this;
        }
      }, {
        key: "addRelation",
        value: function(name, targetClass) {
          if (!name) {
            throw new Error("field name may not be null.");
          }
          if (!targetClass) {
            throw new Error("You need to set the targetClass of the Relation.");
          }
          this._fields[name] = {
            type: "Relation",
            targetClass
          };
          return this;
        }
      }, {
        key: "deleteField",
        value: function(name) {
          this._fields[name] = {
            __op: "Delete"
          };
          return this;
        }
      }, {
        key: "deleteIndex",
        value: function(name) {
          this._indexes[name] = {
            __op: "Delete"
          };
          return this;
        }
      }], [{
        key: "all",
        value: function() {
          var controller = _CoreManager.default.getSchemaController();
          return controller.get("").then(function(response) {
            if (response.results.length === 0) {
              throw new Error("Schema not found.");
            }
            return response.results;
          });
        }
      }]);
      return ParseSchema2;
    }();
    var DefaultController = {
      send: function(className, method) {
        var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request(method, "schemas/".concat(className), params, {
          useMasterKey: true
        });
      },
      get: function(className) {
        return this.send(className, "GET");
      },
      create: function(className, params) {
        return this.send(className, "POST", params);
      },
      update: function(className, params) {
        return this.send(className, "PUT", params);
      },
      delete: function(className) {
        return this.send(className, "DELETE");
      },
      purge: function(className) {
        var RESTController = _CoreManager.default.getRESTController();
        return RESTController.request("DELETE", "purge/".concat(className), {}, {
          useMasterKey: true
        });
      }
    };
    _CoreManager.default.setSchemaController(DefaultController);
    var _default = ParseSchema;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/EventEmitter.js
var require_EventEmitter = __commonJS({
  "node_modules/moralis/lib/browser/EventEmitter.js"(exports, module) {
    "use strict";
    init_react();
    module.exports = require_events().EventEmitter;
  }
});

// node_modules/core-js-pure/es/array/virtual/values.js
var require_values4 = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/values.js"(exports, module) {
    init_react();
    require_es_array_iterator();
    require_es_object_to_string();
    var entryVirtual = require_entry_virtual();
    module.exports = entryVirtual("Array").values;
  }
});

// node_modules/core-js-pure/stable/array/virtual/values.js
var require_values5 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/values.js"(exports, module) {
    init_react();
    var parent = require_values4();
    module.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/values.js
var require_values6 = __commonJS({
  "node_modules/core-js-pure/stable/instance/values.js"(exports, module) {
    init_react();
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_values5();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module.exports = function(it) {
      var own = it.values;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.values || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/values.js
var require_values7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/values.js"(exports, module) {
    init_react();
    module.exports = require_values6();
  }
});

// node_modules/moralis/lib/browser/LiveQuerySubscription.js
var require_LiveQuerySubscription = __commonJS({
  "node_modules/moralis/lib/browser/LiveQuerySubscription.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _EventEmitter2 = _interopRequireDefault(require_EventEmitter());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _promiseUtils = require_promiseUtils();
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Subscription = /* @__PURE__ */ function(_EventEmitter) {
      (0, _inherits2.default)(Subscription2, _EventEmitter);
      var _super = _createSuper(Subscription2);
      function Subscription2(id, query, sessionToken) {
        var _this;
        (0, _classCallCheck2.default)(this, Subscription2);
        _this = _super.call(this);
        _this.id = id;
        _this.query = query;
        _this.sessionToken = sessionToken;
        _this.subscribePromise = (0, _promiseUtils.resolvingPromise)();
        _this.subscribed = false;
        _this.on("error", function() {
        });
        return _this;
      }
      (0, _createClass2.default)(Subscription2, [{
        key: "unsubscribe",
        value: function() {
          var _this2 = this;
          return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient().then(function(liveQueryClient) {
            liveQueryClient.unsubscribe(_this2);
            _this2.emit("close");
          });
        }
      }]);
      return Subscription2;
    }(_EventEmitter2.default);
    var _default = Subscription;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/LiveQueryClient.js
var require_LiveQueryClient = __commonJS({
  "node_modules/moralis/lib/browser/LiveQueryClient.js"(exports) {
    "use strict";
    init_react();
    var _Reflect$construct = require_construct3();
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _Array$isArray = require_is_array4();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _map = _interopRequireDefault(require_map10());
    var _keys = _interopRequireDefault(require_keys7());
    var _stringify = _interopRequireDefault(require_stringify3());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _values = _interopRequireDefault(require_values7());
    var _setTimeout2 = _interopRequireDefault(require_set_timeout2());
    var _bind = _interopRequireDefault(require_bind7());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _EventEmitter2 = _interopRequireDefault(require_EventEmitter());
    var _ParseObject = _interopRequireDefault(require_ParseObject());
    var _LiveQuerySubscription = _interopRequireDefault(require_LiveQuerySubscription());
    var _promiseUtils = require_promiseUtils();
    function _createForOfIteratorHelper(o2, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
      if (!it) {
        if (_Array$isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
          if (it)
            o2 = it;
          var i2 = 0;
          var F2 = function() {
          };
          return {
            s: F2,
            n: function() {
              if (i2 >= o2.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o2[i2++]
              };
            },
            e: function(_e) {
              throw _e;
            },
            f: F2
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function() {
          it = it.call(o2);
        },
        n: function() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function() {
          try {
            if (!normalCompletion && it.return != null)
              it.return();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o2, minLen) {
      var _context6;
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = _sliceInstanceProperty(_context6 = Object.prototype.toString.call(o2)).call(_context6, 8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return _Array$from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var CLIENT_STATE = {
      INITIALIZED: "initialized",
      CONNECTING: "connecting",
      CONNECTED: "connected",
      CLOSED: "closed",
      RECONNECTING: "reconnecting",
      DISCONNECTED: "disconnected"
    };
    var OP_TYPES = {
      CONNECT: "connect",
      SUBSCRIBE: "subscribe",
      UNSUBSCRIBE: "unsubscribe",
      ERROR: "error"
    };
    var OP_EVENTS = {
      CONNECTED: "connected",
      SUBSCRIBED: "subscribed",
      UNSUBSCRIBED: "unsubscribed",
      ERROR: "error",
      CREATE: "create",
      UPDATE: "update",
      ENTER: "enter",
      LEAVE: "leave",
      DELETE: "delete"
    };
    var CLIENT_EMMITER_TYPES = {
      CLOSE: "close",
      ERROR: "error",
      OPEN: "open"
    };
    var SUBSCRIPTION_EMMITER_TYPES = {
      OPEN: "open",
      CLOSE: "close",
      ERROR: "error",
      CREATE: "create",
      UPDATE: "update",
      ENTER: "enter",
      LEAVE: "leave",
      DELETE: "delete"
    };
    var generateInterval = function(k2) {
      return Math.random() * Math.min(30, Math.pow(2, k2) - 1) * 1e3;
    };
    var LiveQueryClient = /* @__PURE__ */ function(_EventEmitter) {
      (0, _inherits2.default)(LiveQueryClient2, _EventEmitter);
      var _super = _createSuper(LiveQueryClient2);
      function LiveQueryClient2(_ref) {
        var _this;
        var applicationId = _ref.applicationId, serverURL = _ref.serverURL, javascriptKey = _ref.javascriptKey, masterKey = _ref.masterKey, sessionToken = _ref.sessionToken, installationId = _ref.installationId;
        (0, _classCallCheck2.default)(this, LiveQueryClient2);
        _this = _super.call(this);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "attempts", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "id", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "requestId", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "applicationId", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "serverURL", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "javascriptKey", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "masterKey", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sessionToken", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "installationId", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "additionalProperties", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "connectPromise", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "subscriptions", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "socket", void 0);
        (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", void 0);
        if (!serverURL || (0, _indexOf.default)(serverURL).call(serverURL, "ws") !== 0) {
          throw new Error("You need to set a proper Parse LiveQuery server url before using LiveQueryClient");
        }
        _this.reconnectHandle = null;
        _this.attempts = 1;
        _this.id = 0;
        _this.requestId = 1;
        _this.serverURL = serverURL;
        _this.applicationId = applicationId;
        _this.javascriptKey = javascriptKey || void 0;
        _this.masterKey = masterKey || void 0;
        _this.sessionToken = sessionToken || void 0;
        _this.installationId = installationId || void 0;
        _this.additionalProperties = true;
        _this.connectPromise = (0, _promiseUtils.resolvingPromise)();
        _this.subscriptions = new _map.default();
        _this.state = CLIENT_STATE.INITIALIZED;
        _this.on("error", function() {
        });
        return _this;
      }
      (0, _createClass2.default)(LiveQueryClient2, [{
        key: "shouldOpen",
        value: function() {
          return this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED;
        }
      }, {
        key: "subscribe",
        value: function(query, sessionToken) {
          var _this2 = this;
          if (!query) {
            return;
          }
          var className = query.className;
          var queryJSON = query.toJSON();
          var where = queryJSON.where;
          var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(",") : void 0;
          var subscribeRequest = {
            op: OP_TYPES.SUBSCRIBE,
            requestId: this.requestId,
            query: {
              className,
              where,
              fields
            }
          };
          if (sessionToken) {
            subscribeRequest.sessionToken = sessionToken;
          }
          var subscription = new _LiveQuerySubscription.default(this.requestId, query, sessionToken);
          this.subscriptions.set(this.requestId, subscription);
          this.requestId += 1;
          this.connectPromise.then(function() {
            _this2.socket.send((0, _stringify.default)(subscribeRequest));
          });
          return subscription;
        }
      }, {
        key: "unsubscribe",
        value: function(subscription) {
          var _this3 = this;
          if (!subscription) {
            return;
          }
          this.subscriptions.delete(subscription.id);
          var unsubscribeRequest = {
            op: OP_TYPES.UNSUBSCRIBE,
            requestId: subscription.id
          };
          this.connectPromise.then(function() {
            _this3.socket.send((0, _stringify.default)(unsubscribeRequest));
          });
        }
      }, {
        key: "open",
        value: function() {
          var _this4 = this;
          var WebSocketImplementation = _CoreManager.default.getWebSocketController();
          if (!WebSocketImplementation) {
            this.emit(CLIENT_EMMITER_TYPES.ERROR, "Can not find WebSocket implementation");
            return;
          }
          if (this.state !== CLIENT_STATE.RECONNECTING) {
            this.state = CLIENT_STATE.CONNECTING;
          }
          this.socket = new WebSocketImplementation(this.serverURL);
          this.socket.onopen = function() {
            _this4._handleWebSocketOpen();
          };
          this.socket.onmessage = function(event) {
            _this4._handleWebSocketMessage(event);
          };
          this.socket.onclose = function() {
            _this4._handleWebSocketClose();
          };
          this.socket.onerror = function(error) {
            _this4._handleWebSocketError(error);
          };
        }
      }, {
        key: "resubscribe",
        value: function() {
          var _context, _this5 = this;
          (0, _forEach.default)(_context = this.subscriptions).call(_context, function(subscription, requestId) {
            var query = subscription.query;
            var queryJSON = query.toJSON();
            var where = queryJSON.where;
            var fields = (0, _keys.default)(queryJSON) ? (0, _keys.default)(queryJSON).split(",") : void 0;
            var className = query.className;
            var sessionToken = subscription.sessionToken;
            var subscribeRequest = {
              op: OP_TYPES.SUBSCRIBE,
              requestId,
              query: {
                className,
                where,
                fields
              }
            };
            if (sessionToken) {
              subscribeRequest.sessionToken = sessionToken;
            }
            _this5.connectPromise.then(function() {
              _this5.socket.send((0, _stringify.default)(subscribeRequest));
            });
          });
        }
      }, {
        key: "close",
        value: function() {
          var _context2;
          if (this.state === CLIENT_STATE.INITIALIZED || this.state === CLIENT_STATE.DISCONNECTED) {
            return;
          }
          this.state = CLIENT_STATE.DISCONNECTED;
          this.socket.close();
          var _iterator = _createForOfIteratorHelper((0, _values.default)(_context2 = this.subscriptions).call(_context2)), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var subscription = _step.value;
              subscription.subscribed = false;
              subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          this._handleReset();
          this.emit(CLIENT_EMMITER_TYPES.CLOSE);
        }
      }, {
        key: "_handleReset",
        value: function() {
          this.attempts = 1;
          this.id = 0;
          this.requestId = 1;
          this.connectPromise = (0, _promiseUtils.resolvingPromise)();
          this.subscriptions = new _map.default();
        }
      }, {
        key: "_handleWebSocketOpen",
        value: function() {
          this.attempts = 1;
          var connectRequest = {
            op: OP_TYPES.CONNECT,
            applicationId: this.applicationId,
            javascriptKey: this.javascriptKey,
            masterKey: this.masterKey,
            sessionToken: this.sessionToken
          };
          if (this.additionalProperties) {
            connectRequest.installationId = this.installationId;
          }
          this.socket.send((0, _stringify.default)(connectRequest));
        }
      }, {
        key: "_handleWebSocketMessage",
        value: function(event) {
          var data = event.data;
          if (typeof data === "string") {
            data = JSON.parse(data);
          }
          var subscription = null;
          if (data.requestId) {
            subscription = this.subscriptions.get(data.requestId);
          }
          var response = {
            clientId: data.clientId,
            installationId: data.installationId
          };
          switch (data.op) {
            case OP_EVENTS.CONNECTED:
              if (this.state === CLIENT_STATE.RECONNECTING) {
                this.resubscribe();
              }
              this.emit(CLIENT_EMMITER_TYPES.OPEN);
              this.id = data.clientId;
              this.connectPromise.resolve();
              this.state = CLIENT_STATE.CONNECTED;
              break;
            case OP_EVENTS.SUBSCRIBED:
              if (subscription) {
                subscription.subscribed = true;
                subscription.subscribePromise.resolve();
                (0, _setTimeout2.default)(function() {
                  return subscription.emit(SUBSCRIPTION_EMMITER_TYPES.OPEN, response);
                }, 200);
              }
              break;
            case OP_EVENTS.ERROR:
              if (data.requestId) {
                if (subscription) {
                  subscription.subscribePromise.resolve();
                  (0, _setTimeout2.default)(function() {
                    return subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, data.error);
                  }, 200);
                }
              } else {
                this.emit(CLIENT_EMMITER_TYPES.ERROR, data.error);
              }
              if (data.error === "Additional properties not allowed") {
                this.additionalProperties = false;
              }
              if (data.reconnect) {
                this._handleReconnect();
              }
              break;
            case OP_EVENTS.UNSUBSCRIBED:
              break;
            default: {
              if (!subscription) {
                break;
              }
              var override = false;
              if (data.original) {
                override = true;
                delete data.original.__type;
                for (var field in data.original) {
                  if (!(field in data.object)) {
                    data.object[field] = void 0;
                  }
                }
                data.original = _ParseObject.default.fromJSON(data.original, false);
              }
              delete data.object.__type;
              var parseObject = _ParseObject.default.fromJSON(data.object, override);
              if (data.original) {
                subscription.emit(data.op, parseObject, data.original, response);
              } else {
                subscription.emit(data.op, parseObject, response);
              }
              var localDatastore = _CoreManager.default.getLocalDatastore();
              if (override && localDatastore.isEnabled) {
                localDatastore._updateObjectIfPinned(parseObject).then(function() {
                });
              }
            }
          }
        }
      }, {
        key: "_handleWebSocketClose",
        value: function() {
          var _context3;
          if (this.state === CLIENT_STATE.DISCONNECTED) {
            return;
          }
          this.state = CLIENT_STATE.CLOSED;
          this.emit(CLIENT_EMMITER_TYPES.CLOSE);
          var _iterator2 = _createForOfIteratorHelper((0, _values.default)(_context3 = this.subscriptions).call(_context3)), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var subscription = _step2.value;
              subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          this._handleReconnect();
        }
      }, {
        key: "_handleWebSocketError",
        value: function(error) {
          var _context4;
          this.emit(CLIENT_EMMITER_TYPES.ERROR, error);
          var _iterator3 = _createForOfIteratorHelper((0, _values.default)(_context4 = this.subscriptions).call(_context4)), _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
              var subscription = _step3.value;
              subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, error);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          this._handleReconnect();
        }
      }, {
        key: "_handleReconnect",
        value: function() {
          var _context5, _this6 = this;
          if (this.state === CLIENT_STATE.DISCONNECTED) {
            return;
          }
          this.state = CLIENT_STATE.RECONNECTING;
          var time = generateInterval(this.attempts);
          if (this.reconnectHandle) {
            clearTimeout(this.reconnectHandle);
          }
          this.reconnectHandle = (0, _setTimeout2.default)((0, _bind.default)(_context5 = function() {
            _this6.attempts++;
            _this6.connectPromise = (0, _promiseUtils.resolvingPromise)();
            _this6.open();
          }).call(_context5, this), time);
        }
      }]);
      return LiveQueryClient2;
    }(_EventEmitter2.default);
    _CoreManager.default.setWebSocketController(typeof WebSocket === "function" || (typeof WebSocket === "undefined" ? "undefined" : (0, _typeof2.default)(WebSocket)) === "object" ? WebSocket : null);
    var _default = LiveQueryClient;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/ParseLiveQuery.js
var require_ParseLiveQuery = __commonJS({
  "node_modules/moralis/lib/browser/ParseLiveQuery.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _promise = _interopRequireDefault(require_promise3());
    var _indexOf = _interopRequireDefault(require_index_of7());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _EventEmitter = _interopRequireDefault(require_EventEmitter());
    var _LiveQueryClient = _interopRequireDefault(require_LiveQueryClient());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    function getLiveQueryClient() {
      return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();
    }
    var LiveQuery = new _EventEmitter.default();
    LiveQuery.open = /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
      var liveQueryClient;
      return _regenerator.default.wrap(function(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getLiveQueryClient();
            case 2:
              liveQueryClient = _context.sent;
              liveQueryClient.open();
            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    LiveQuery.close = /* @__PURE__ */ (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2() {
      var liveQueryClient;
      return _regenerator.default.wrap(function(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return getLiveQueryClient();
            case 2:
              liveQueryClient = _context2.sent;
              liveQueryClient.close();
            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    LiveQuery.on("error", function() {
    });
    var _default = LiveQuery;
    exports.default = _default;
    var defaultLiveQueryClient;
    var DefaultLiveQueryController = {
      setDefaultLiveQueryClient: function(liveQueryClient) {
        defaultLiveQueryClient = liveQueryClient;
      },
      getDefaultLiveQueryClient: function() {
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee3() {
          var _yield$Promise$all, _yield$Promise$all2, currentUser, installationId, sessionToken, liveQueryServerURL, serverURL, protocol, host, applicationId, javascriptKey, masterKey;
          return _regenerator.default.wrap(function(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!defaultLiveQueryClient) {
                    _context3.next = 2;
                    break;
                  }
                  return _context3.abrupt("return", defaultLiveQueryClient);
                case 2:
                  _context3.next = 4;
                  return _promise.default.all([_CoreManager.default.getUserController().currentUserAsync(), _CoreManager.default.getInstallationController().currentInstallationId()]);
                case 4:
                  _yield$Promise$all = _context3.sent;
                  _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2);
                  currentUser = _yield$Promise$all2[0];
                  installationId = _yield$Promise$all2[1];
                  sessionToken = currentUser ? currentUser.getSessionToken() : void 0;
                  liveQueryServerURL = _CoreManager.default.get("LIVEQUERY_SERVER_URL");
                  if (!(liveQueryServerURL && (0, _indexOf.default)(liveQueryServerURL).call(liveQueryServerURL, "ws") !== 0)) {
                    _context3.next = 12;
                    break;
                  }
                  throw new Error("You need to set a proper Parse LiveQuery server url before using LiveQueryClient");
                case 12:
                  if (!liveQueryServerURL) {
                    serverURL = _CoreManager.default.get("SERVER_URL");
                    protocol = (0, _indexOf.default)(serverURL).call(serverURL, "https") === 0 ? "wss://" : "ws://";
                    host = serverURL.replace(/^https?:\/\//, "");
                    liveQueryServerURL = protocol + host;
                    _CoreManager.default.set("LIVEQUERY_SERVER_URL", liveQueryServerURL);
                  }
                  applicationId = _CoreManager.default.get("APPLICATION_ID");
                  javascriptKey = _CoreManager.default.get("JAVASCRIPT_KEY");
                  masterKey = _CoreManager.default.get("MASTER_KEY");
                  defaultLiveQueryClient = new _LiveQueryClient.default({
                    applicationId,
                    serverURL: liveQueryServerURL,
                    javascriptKey,
                    masterKey,
                    sessionToken,
                    installationId
                  });
                  defaultLiveQueryClient.on("error", function(error) {
                    LiveQuery.emit("error", error);
                  });
                  defaultLiveQueryClient.on("open", function() {
                    LiveQuery.emit("open");
                  });
                  defaultLiveQueryClient.on("close", function() {
                    LiveQuery.emit("close");
                  });
                  return _context3.abrupt("return", defaultLiveQueryClient);
                case 21:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }))();
      },
      _clearCachedDefaultClient: function() {
        defaultLiveQueryClient = null;
      }
    };
    _CoreManager.default.setLiveQueryController(DefaultLiveQueryController);
  }
});

// node_modules/moralis/lib/browser/UnitConvert.js
var require_UnitConvert = __commonJS({
  "node_modules/moralis/lib/browser/UnitConvert.js"(exports, module) {
    "use strict";
    init_react();
    var _interopRequireDefault = require_interopRequireDefault();
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _ethers = (init_lib(), __toCommonJS(lib_exports));
    var UnitConverter = /* @__PURE__ */ function() {
      function UnitConverter2() {
        (0, _classCallCheck2.default)(this, UnitConverter2);
      }
      (0, _createClass2.default)(UnitConverter2, null, [{
        key: "ETH",
        value: function(value) {
          return _ethers.ethers.utils.parseEther("".concat(value)).toString();
        }
      }, {
        key: "Token",
        value: function(value) {
          var decimals = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 18;
          return _ethers.ethers.utils.parseUnits("".concat(value), +decimals).toString();
        }
      }, {
        key: "FromWei",
        value: function(value) {
          var decimals = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 18;
          var result = _ethers.ethers.utils.formatUnits(value, decimals);
          var splitResult = result.split(".");
          if (splitResult[1] === "0") {
            return splitResult[0];
          }
          return result;
        }
      }]);
      return UnitConverter2;
    }();
    module.exports = UnitConverter;
  }
});

// node_modules/moralis/lib/browser/MoralisUI.js
var require_MoralisUI = __commonJS({
  "node_modules/moralis/lib/browser/MoralisUI.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var MoralisUI = {
      openPrompt: function() {
        return (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee() {
          return _regenerator.default.wrap(function(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  console.warn("No prompt supplied");
                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      }
    };
    var _default = MoralisUI;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Chains.js
var require_Chains = __commonJS({
  "node_modules/moralis/lib/browser/Chains.js"(exports) {
    "use strict";
    init_react();
    var _Object$defineProperty = require_define_property3();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var Chains = {
      ETH_MAINENT: "0x1",
      ETH_ROPSTEN: "0x3",
      ETH_GOERLI: "0x5",
      ETH_KOVAN: "0x2a",
      ETH_RINKBEY: "0x4",
      ETH_LOCALDEVCHAIN: "0x539",
      POLYGON_MAINNET: "0x89",
      POLYGON_MUMBAI: "0x13881",
      BSC_MAINNET: "0x38",
      BSC_TESTNET: "0x61",
      AVAX_MAINNET: "0xa86a",
      AVAX_TESTNET: "0xa869",
      FANTOM_MAINNET: "0xfa"
    };
    var _default = Chains;
    exports.default = _default;
  }
});

// node_modules/moralis/lib/browser/Parse.js
var require_Parse = __commonJS({
  "node_modules/moralis/lib/browser/Parse.js"(exports, module) {
    "use strict";
    init_react();
    var _typeof = require_typeof();
    var _Reflect$construct = require_construct3();
    var _WeakMap = require_weak_map3();
    var _Object$defineProperty = require_define_property3();
    var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor3();
    var _interopRequireDefault = require_interopRequireDefault();
    var _promise = _interopRequireDefault(require_promise3());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _inherits2 = _interopRequireDefault(require_inherits());
    var _possibleConstructorReturn2 = _interopRequireDefault(require_possibleConstructorReturn());
    var _getPrototypeOf2 = _interopRequireDefault(require_getPrototypeOf());
    var _decode = _interopRequireDefault(require_decode());
    var _encode = _interopRequireDefault(require_encode());
    var _CoreManager = _interopRequireDefault(require_CoreManager());
    var _CryptoController = _interopRequireDefault(require_CryptoController());
    var _InstallationController = _interopRequireDefault(require_InstallationController());
    var ParseOp = _interopRequireWildcard(require_ParseOp());
    var _RESTController2 = _interopRequireDefault(require_RESTController());
    var _MoralisWeb2 = _interopRequireDefault(require_MoralisWeb3());
    var _ethers = (init_lib(), __toCommonJS(lib_exports));
    var _filterConsole = require_filterConsole();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof _WeakMap !== "function")
        return null;
      var cacheBabelInterop = new _WeakMap();
      var cacheNodeInterop = new _WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            _Object$defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function() {
        var Super = (0, _getPrototypeOf2.default)(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
          result = _Reflect$construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn2.default)(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !_Reflect$construct)
        return false;
      if (_Reflect$construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _require = require_utils();
    var checkForSdkUpdates = _require.checkForSdkUpdates;
    var Moralis = /* @__PURE__ */ function(_MoralisWeb) {
      (0, _inherits2.default)(Moralis2, _MoralisWeb);
      var _super = _createSuper(Moralis2);
      function Moralis2() {
        (0, _classCallCheck2.default)(this, Moralis2);
        return _super.apply(this, arguments);
      }
      (0, _createClass2.default)(Moralis2, null, [{
        key: "start",
        value: function() {
          var _start = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(options) {
            var appId, serverUrl, plugins, javascriptKey, masterKey, moralisSecret, apiKey, _yield$this$getApiKey, web3ApiKey, speedyNodeApiKey;
            return _regenerator.default.wrap(function(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    appId = options.appId, serverUrl = options.serverUrl, plugins = options.plugins, javascriptKey = options.javascriptKey, masterKey = options.masterKey, moralisSecret = options.moralisSecret;
                    if (serverUrl) {
                      _context.next = 4;
                      break;
                    }
                    throw new Error("Moralis.start failed: serverUrl is required");
                  case 4:
                    if (appId) {
                      _context.next = 6;
                      break;
                    }
                    throw new Error("Moralis.start failed: appId is required");
                  case 6:
                    if (moralisSecret) {
                      console.warn("Moralis.start warning: Using moralisSecret on the browser enviroment reveals critical information.");
                    }
                    _context.next = 18;
                    break;
                  case 9:
                    if (!moralisSecret) {
                      _context.next = 18;
                      break;
                    }
                    this.moralisSecret = moralisSecret;
                    _context.next = 13;
                    return this.getApiKeys(moralisSecret);
                  case 13:
                    _yield$this$getApiKey = _context.sent;
                    web3ApiKey = _yield$this$getApiKey.web3ApiKey;
                    speedyNodeApiKey = _yield$this$getApiKey.speedyNodeApiKey;
                    apiKey = web3ApiKey;
                    this.speedyNodeApiKey = speedyNodeApiKey;
                  case 18:
                    this.initialize(appId, javascriptKey, masterKey);
                    this.serverURL = serverUrl;
                    this.Web3API.initialize({
                      serverUrl,
                      apiKey,
                      Moralis: Moralis2
                    });
                    this.SolanaAPI.initialize({
                      serverUrl,
                      apiKey,
                      Moralis: Moralis2
                    });
                    if (!(appId && serverUrl)) {
                      _context.next = 25;
                      break;
                    }
                    _context.next = 25;
                    return this.initPlugins(plugins);
                  case 25:
                    checkForSdkUpdates();
                  case 26:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          return function() {
            return _start.apply(this, arguments);
          };
        }()
      }, {
        key: "getApiKeys",
        value: function() {
          var _getApiKeys = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(moralisSecret) {
            var _RESTController, response;
            return _regenerator.default.wrap(function(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.prev = 0;
                    _RESTController = _CoreManager.default.getRESTController();
                    _context2.next = 4;
                    return _RESTController.ajax("GET", "https://admin.moralis.io/api/publics/apiKeys", null, {
                      "moralis-secret": moralisSecret,
                      Accept: "application/json",
                      "Content-Type": "application/json"
                    });
                  case 4:
                    response = _context2.sent;
                    return _context2.abrupt("return", response.response.result);
                  case 8:
                    _context2.prev = 8;
                    _context2.t0 = _context2["catch"](0);
                    throw new Error("Could not fetch keys with moralisSecret");
                  case 11:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, null, [[0, 8]]);
          }));
          return function() {
            return _getApiKeys.apply(this, arguments);
          };
        }()
      }, {
        key: "initialize",
        value: function(applicationId, javaScriptKey) {
          if (_CoreManager.default.get("IS_NODE") && !process.env.SERVER_RENDERING) {
            console.log("It looks like you're using the browser version of the SDK in a node.js environment. You should require('parse/node') instead.");
          }
          Moralis2._initialize(applicationId, javaScriptKey);
        }
      }, {
        key: "_initialize",
        value: function(applicationId, javaScriptKey, masterKey) {
          _CoreManager.default.set("APPLICATION_ID", applicationId);
          _CoreManager.default.set("JAVASCRIPT_KEY", javaScriptKey);
          _CoreManager.default.set("MASTER_KEY", masterKey);
          _CoreManager.default.set("USE_MASTER_KEY", false);
        }
      }, {
        key: "setAsyncStorage",
        value: function(storage) {
          _CoreManager.default.setAsyncStorage(storage);
        }
      }, {
        key: "setLocalDatastoreController",
        value: function(controller) {
          _CoreManager.default.setLocalDatastoreController(controller);
        }
      }, {
        key: "applicationId",
        get: function() {
          return _CoreManager.default.get("APPLICATION_ID");
        },
        set: function(value) {
          _CoreManager.default.set("APPLICATION_ID", value);
        }
      }, {
        key: "javaScriptKey",
        get: function() {
          return _CoreManager.default.get("JAVASCRIPT_KEY");
        },
        set: function(value) {
          _CoreManager.default.set("JAVASCRIPT_KEY", value);
        }
      }, {
        key: "masterKey",
        get: function() {
          return _CoreManager.default.get("MASTER_KEY");
        },
        set: function(value) {
          _CoreManager.default.set("MASTER_KEY", value);
        }
      }, {
        key: "serverURL",
        get: function() {
          return _CoreManager.default.get("SERVER_URL");
        },
        set: function(value) {
          _CoreManager.default.set("SERVER_URL", value);
        }
      }, {
        key: "serverAuthToken",
        get: function() {
          return _CoreManager.default.get("SERVER_AUTH_TOKEN");
        },
        set: function(value) {
          _CoreManager.default.set("SERVER_AUTH_TOKEN", value);
        }
      }, {
        key: "serverAuthType",
        get: function() {
          return _CoreManager.default.get("SERVER_AUTH_TYPE");
        },
        set: function(value) {
          _CoreManager.default.set("SERVER_AUTH_TYPE", value);
        }
      }, {
        key: "liveQueryServerURL",
        get: function() {
          return _CoreManager.default.get("LIVEQUERY_SERVER_URL");
        },
        set: function(value) {
          _CoreManager.default.set("LIVEQUERY_SERVER_URL", value);
        }
      }, {
        key: "encryptedUser",
        get: function() {
          return _CoreManager.default.get("ENCRYPTED_USER");
        },
        set: function(value) {
          _CoreManager.default.set("ENCRYPTED_USER", value);
        }
      }, {
        key: "secret",
        get: function() {
          return _CoreManager.default.get("ENCRYPTED_KEY");
        },
        set: function(value) {
          _CoreManager.default.set("ENCRYPTED_KEY", value);
        }
      }, {
        key: "idempotency",
        get: function() {
          return _CoreManager.default.get("IDEMPOTENCY");
        },
        set: function(value) {
          _CoreManager.default.set("IDEMPOTENCY", value);
        }
      }]);
      return Moralis2;
    }(_MoralisWeb2.default);
    Moralis.ACL = require_ParseACL().default;
    Moralis.Analytics = require_Analytics();
    Moralis.AnonymousUtils = require_AnonymousUtils().default;
    Moralis.Cloud = require_Cloud();
    Moralis.CLP = require_ParseCLP().default;
    Moralis.CoreManager = require_CoreManager();
    Moralis.Config = require_ParseConfig().default;
    Moralis.Error = require_ParseError().default;
    Moralis.FacebookUtils = require_FacebookUtils().default;
    Moralis.File = require_ParseFile().default;
    Moralis.GeoPoint = require_ParseGeoPoint().default;
    Moralis.Polygon = require_ParsePolygon().default;
    Moralis.Installation = require_ParseInstallation().default;
    Moralis.LocalDatastore = require_LocalDatastore();
    Moralis.Object = require_ParseObject().default;
    Moralis.Op = {
      Set: ParseOp.SetOp,
      Unset: ParseOp.UnsetOp,
      Increment: ParseOp.IncrementOp,
      Add: ParseOp.AddOp,
      Remove: ParseOp.RemoveOp,
      AddUnique: ParseOp.AddUniqueOp,
      Relation: ParseOp.RelationOp
    };
    Moralis.Web3API = require_MoralisWeb3Api().default;
    Moralis.SolanaAPI = require_MoralisSolanaApi().default;
    Moralis.Push = require_Push();
    Moralis.Query = require_ParseQuery().default;
    Moralis.Relation = require_ParseRelation().default;
    Moralis.Role = require_ParseRole().default;
    Moralis.Schema = require_ParseSchema().default;
    Moralis.Session = require_ParseSession().default;
    Moralis.Storage = require_Storage();
    Moralis.User = require_ParseUser().default;
    Moralis.LiveQuery = require_ParseLiveQuery().default;
    Moralis.LiveQueryClient = require_LiveQueryClient().default;
    Moralis.Web3 = Moralis;
    Moralis.Units = require_UnitConvert();
    Moralis.Elrond = require_MoralisErd().default;
    Moralis.Erd = Moralis.Elrond;
    Moralis.Dot = require_MoralisDot().default;
    Moralis.UI = require_MoralisUI().default;
    Moralis.Chains = require_Chains().default;
    Moralis.AbstractWeb3Connector = require_AbstractWeb3Connector().default;
    (0, _filterConsole.filterConsole)();
    Moralis._request = function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _CoreManager.default.getRESTController().request.apply(null, args);
    };
    Moralis._ajax = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _CoreManager.default.getRESTController().ajax.apply(null, args);
    };
    Moralis._decode = function(_2, value) {
      return (0, _decode.default)(value);
    };
    Moralis._encode = function(value, _2, disallowObjects) {
      return (0, _encode.default)(value, disallowObjects);
    };
    Moralis._getInstallationId = function() {
      return _CoreManager.default.getInstallationController().currentInstallationId();
    };
    Moralis.enableLocalDatastore = function() {
      Moralis.LocalDatastore.isEnabled = true;
    };
    Moralis.isLocalDatastoreEnabled = function() {
      return Moralis.LocalDatastore.isEnabled;
    };
    Moralis.dumpLocalDatastore = function() {
      if (!Moralis.LocalDatastore.isEnabled) {
        console.log("Moralis.enableLocalDatastore() must be called first");
        return _promise.default.resolve({});
      }
      return Moralis.LocalDatastore._getAllContents();
    };
    Moralis.enableEncryptedUser = function() {
      Moralis.encryptedUser = true;
    };
    Moralis.isEncryptedUserEnabled = function() {
      return Moralis.encryptedUser;
    };
    _CoreManager.default.setCryptoController(_CryptoController.default);
    _CoreManager.default.setInstallationController(_InstallationController.default);
    _CoreManager.default.setRESTController(_RESTController2.default);
    Moralis.Moralis = Moralis;
    module.exports = Moralis;
  }
});

// node_modules/moralis/index.js
var require_moralis = __commonJS({
  "node_modules/moralis/index.js"(exports, module) {
    init_react();
    module.exports = require_Parse();
  }
});

// node_modules/react-moralis/lib/index.esm.js
init_react();
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_moralis = __toESM(require_moralis());
var extendStatics = function(d2, b2) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
    d3.__proto__ = b3;
  } || function(d3, b3) {
    for (var p2 in b3)
      if (Object.prototype.hasOwnProperty.call(b3, p2))
        d3[p2] = b3[p2];
  };
  return extendStatics(d2, b2);
};
function __extends(d2, b2) {
  if (typeof b2 !== "function" && b2 !== null)
    throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
  extendStatics(d2, b2);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t2) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t2[p2] = s2[p2];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y2, t2, g2;
  return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n2) {
    return function(v2) {
      return step([n2, v2]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
          return t2;
        if (y2 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t2[1]) {
              _2.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _2.label < t2[2]) {
              _2.label = t2[2];
              _2.ops.push(op);
              break;
            }
            if (t2[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var Plugin;
(function(Plugin2) {
  Plugin2["ONE_INCH"] = "oneInch";
  Plugin2["OPEN_SEA"] = "opensea";
  Plugin2["FIAT"] = "fiat";
  Plugin2["RARIBLE"] = "rarible";
})(Plugin || (Plugin = {}));
var currencyFormatter = new Intl.NumberFormat("en-us", {
  style: "currency",
  currency: "USD",
  minimumFractionDigits: 2,
  maximumFractionDigits: 2
});
var decimalFormatter = new Intl.NumberFormat("en-us", {
  style: "decimal",
  minimumSignificantDigits: 1,
  maximumSignificantDigits: 4
});
var MoralisContext = (0, import_react.createContext)(null);
var ReactMoralisError = function(_super) {
  __extends(ReactMoralisError2, _super);
  function ReactMoralisError2(message) {
    var _this = _super.call(this, "[react-moralis]: ".concat(message)) || this;
    _this.name = "ReactMoralisError";
    _this.message = message;
    return _this;
  }
  ReactMoralisError2.isReactMoraliserrpr = true;
  return ReactMoralisError2;
}(Error);
var NoMoralisContextProviderError = function(_super) {
  __extends(NoMoralisContextProviderError2, _super);
  function NoMoralisContextProviderError2(message) {
    var _this = _super.call(this, message) || this;
    _this.name = "NoMoralisContextProviderError";
    return _this;
  }
  return NoMoralisContextProviderError2;
}(ReactMoralisError);
var NotAuthenticatedError = function(_super) {
  __extends(NotAuthenticatedError2, _super);
  function NotAuthenticatedError2(message) {
    var _this = _super.call(this, message) || this;
    _this.name = "NotAuthenticatedError";
    return _this;
  }
  return NotAuthenticatedError2;
}(ReactMoralisError);
var ValidationError = function(_super) {
  __extends(ValidationError2, _super);
  function ValidationError2(message) {
    var _this = _super.call(this, message) || this;
    _this.name = "ValidationError";
    return _this;
  }
  return ValidationError2;
}(ReactMoralisError);
var useMoralis = function() {
  var moralisContext = (0, import_react.useContext)(MoralisContext);
  if (!moralisContext) {
    throw new NoMoralisContextProviderError("Make sure to only call useMoralis within a  <MoralisProvider>");
  }
  return moralisContext;
};
var react = function equal(a2, b2) {
  if (a2 === b2)
    return true;
  if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
    if (a2.constructor !== b2.constructor)
      return false;
    var length, i2, keys;
    if (Array.isArray(a2)) {
      length = a2.length;
      if (length != b2.length)
        return false;
      for (i2 = length; i2-- !== 0; )
        if (!equal(a2[i2], b2[i2]))
          return false;
      return true;
    }
    if (a2.constructor === RegExp)
      return a2.source === b2.source && a2.flags === b2.flags;
    if (a2.valueOf !== Object.prototype.valueOf)
      return a2.valueOf() === b2.valueOf();
    if (a2.toString !== Object.prototype.toString)
      return a2.toString() === b2.toString();
    keys = Object.keys(a2);
    length = keys.length;
    if (length !== Object.keys(b2).length)
      return false;
    for (i2 = length; i2-- !== 0; )
      if (!Object.prototype.hasOwnProperty.call(b2, keys[i2]))
        return false;
    for (i2 = length; i2-- !== 0; ) {
      var key = keys[i2];
      if (key === "_owner" && a2.$$typeof) {
        continue;
      }
      if (!equal(a2[key], b2[key]))
        return false;
    }
    return true;
  }
  return a2 !== a2 && b2 !== b2;
};
function n(n2) {
  for (var t2 = arguments.length, r2 = Array(t2 > 1 ? t2 - 1 : 0), e = 1; e < t2; e++)
    r2[e - 1] = arguments[e];
  if (true) {
    var i2 = Y[n2], o2 = i2 ? typeof i2 == "function" ? i2.apply(null, r2) : i2 : "unknown error nr: " + n2;
    throw Error("[Immer] " + o2);
  }
  throw Error("[Immer] minified error nr: " + n2 + (r2.length ? " " + r2.map(function(n3) {
    return "'" + n3 + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function t(n2) {
  return !!n2 && !!n2[Q];
}
function r(n2) {
  return !!n2 && (function(n3) {
    if (!n3 || typeof n3 != "object")
      return false;
    var t2 = Object.getPrototypeOf(n3);
    if (t2 === null)
      return true;
    var r2 = Object.hasOwnProperty.call(t2, "constructor") && t2.constructor;
    return r2 === Object || typeof r2 == "function" && Function.toString.call(r2) === Z;
  }(n2) || Array.isArray(n2) || !!n2[L] || !!n2.constructor[L] || s(n2) || v(n2));
}
function i$1(n2, t2, r2) {
  r2 === void 0 && (r2 = false), o(n2) === 0 ? (r2 ? Object.keys : nn)(n2).forEach(function(e) {
    r2 && typeof e == "symbol" || t2(e, n2[e], n2);
  }) : n2.forEach(function(r3, e) {
    return t2(e, r3, n2);
  });
}
function o(n2) {
  var t2 = n2[Q];
  return t2 ? t2.i > 3 ? t2.i - 4 : t2.i : Array.isArray(n2) ? 1 : s(n2) ? 2 : v(n2) ? 3 : 0;
}
function u(n2, t2) {
  return o(n2) === 2 ? n2.has(t2) : Object.prototype.hasOwnProperty.call(n2, t2);
}
function a(n2, t2) {
  return o(n2) === 2 ? n2.get(t2) : n2[t2];
}
function f(n2, t2, r2) {
  var e = o(n2);
  e === 2 ? n2.set(t2, r2) : e === 3 ? (n2.delete(t2), n2.add(r2)) : n2[t2] = r2;
}
function c(n2, t2) {
  return n2 === t2 ? n2 !== 0 || 1 / n2 == 1 / t2 : n2 != n2 && t2 != t2;
}
function s(n2) {
  return X && n2 instanceof Map;
}
function v(n2) {
  return q && n2 instanceof Set;
}
function p(n2) {
  return n2.o || n2.t;
}
function l(n2) {
  if (Array.isArray(n2))
    return Array.prototype.slice.call(n2);
  var t2 = tn(n2);
  delete t2[Q];
  for (var r2 = nn(t2), e = 0; e < r2.length; e++) {
    var i2 = r2[e], o2 = t2[i2];
    o2.writable === false && (o2.writable = true, o2.configurable = true), (o2.get || o2.set) && (t2[i2] = { configurable: true, writable: true, enumerable: o2.enumerable, value: n2[i2] });
  }
  return Object.create(Object.getPrototypeOf(n2), t2);
}
function d(n2, e) {
  return e === void 0 && (e = false), y(n2) || t(n2) || !r(n2) ? n2 : (o(n2) > 1 && (n2.set = n2.add = n2.clear = n2.delete = h), Object.freeze(n2), e && i$1(n2, function(n3, t2) {
    return d(t2, true);
  }, true), n2);
}
function h() {
  n(2);
}
function y(n2) {
  return n2 == null || typeof n2 != "object" || Object.isFrozen(n2);
}
function b(t2) {
  var r2 = rn[t2];
  return r2 || n(18, t2), r2;
}
function _() {
  return U || n(0), U;
}
function j(n2, t2) {
  t2 && (b("Patches"), n2.u = [], n2.s = [], n2.v = t2);
}
function O(n2) {
  g(n2), n2.p.forEach(S), n2.p = null;
}
function g(n2) {
  n2 === U && (U = n2.l);
}
function w(n2) {
  return U = { p: [], l: U, h: n2, m: true, _: 0 };
}
function S(n2) {
  var t2 = n2[Q];
  t2.i === 0 || t2.i === 1 ? t2.j() : t2.O = true;
}
function P(t2, e) {
  e._ = e.p.length;
  var i2 = e.p[0], o2 = t2 !== void 0 && t2 !== i2;
  return e.h.g || b("ES5").S(e, t2, o2), o2 ? (i2[Q].P && (O(e), n(4)), r(t2) && (t2 = M(e, t2), e.l || x(e, t2)), e.u && b("Patches").M(i2[Q], t2, e.u, e.s)) : t2 = M(e, i2, []), O(e), e.u && e.v(e.u, e.s), t2 !== H ? t2 : void 0;
}
function M(n2, t2, r2) {
  if (y(t2))
    return t2;
  var e = t2[Q];
  if (!e)
    return i$1(t2, function(i2, o3) {
      return A(n2, e, t2, i2, o3, r2);
    }, true), t2;
  if (e.A !== n2)
    return t2;
  if (!e.P)
    return x(n2, e.t, true), e.t;
  if (!e.I) {
    e.I = true, e.A._--;
    var o2 = e.i === 4 || e.i === 5 ? e.o = l(e.k) : e.o;
    i$1(e.i === 3 ? new Set(o2) : o2, function(t3, i2) {
      return A(n2, e, o2, t3, i2, r2);
    }), x(n2, o2, false), r2 && n2.u && b("Patches").R(e, r2, n2.u, n2.s);
  }
  return e.o;
}
function A(e, i2, o2, a2, c2, s2) {
  if (c2 === o2 && n(5), t(c2)) {
    var v2 = M(e, c2, s2 && i2 && i2.i !== 3 && !u(i2.D, a2) ? s2.concat(a2) : void 0);
    if (f(o2, a2, v2), !t(v2))
      return;
    e.m = false;
  }
  if (r(c2) && !y(c2)) {
    if (!e.h.F && e._ < 1)
      return;
    M(e, c2), i2 && i2.A.l || x(e, c2);
  }
}
function x(n2, t2, r2) {
  r2 === void 0 && (r2 = false), n2.h.F && n2.m && d(t2, r2);
}
function z(n2, t2) {
  var r2 = n2[Q];
  return (r2 ? p(r2) : n2)[t2];
}
function I(n2, t2) {
  if (t2 in n2)
    for (var r2 = Object.getPrototypeOf(n2); r2; ) {
      var e = Object.getOwnPropertyDescriptor(r2, t2);
      if (e)
        return e;
      r2 = Object.getPrototypeOf(r2);
    }
}
function k(n2) {
  n2.P || (n2.P = true, n2.l && k(n2.l));
}
function E(n2) {
  n2.o || (n2.o = l(n2.t));
}
function R(n2, t2, r2) {
  var e = s(t2) ? b("MapSet").N(t2, r2) : v(t2) ? b("MapSet").T(t2, r2) : n2.g ? function(n3, t3) {
    var r3 = Array.isArray(n3), e2 = { i: r3 ? 1 : 0, A: t3 ? t3.A : _(), P: false, I: false, D: {}, l: t3, t: n3, k: null, o: null, j: null, C: false }, i2 = e2, o2 = en;
    r3 && (i2 = [e2], o2 = on);
    var u2 = Proxy.revocable(i2, o2), a2 = u2.revoke, f2 = u2.proxy;
    return e2.k = f2, e2.j = a2, f2;
  }(t2, r2) : b("ES5").J(t2, r2);
  return (r2 ? r2.A : _()).p.push(e), e;
}
function D(e) {
  return t(e) || n(22, e), function n2(t2) {
    if (!r(t2))
      return t2;
    var e2, u2 = t2[Q], c2 = o(t2);
    if (u2) {
      if (!u2.P && (u2.i < 4 || !b("ES5").K(u2)))
        return u2.t;
      u2.I = true, e2 = F(t2, c2), u2.I = false;
    } else
      e2 = F(t2, c2);
    return i$1(e2, function(t3, r2) {
      u2 && a(u2.t, t3) === r2 || f(e2, t3, n2(r2));
    }), c2 === 3 ? new Set(e2) : e2;
  }(e);
}
function F(n2, t2) {
  switch (t2) {
    case 2:
      return new Map(n2);
    case 3:
      return Array.from(n2);
  }
  return l(n2);
}
var G;
var U;
var W = typeof Symbol != "undefined" && typeof Symbol("x") == "symbol";
var X = typeof Map != "undefined";
var q = typeof Set != "undefined";
var B = typeof Proxy != "undefined" && Proxy.revocable !== void 0 && typeof Reflect != "undefined";
var H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G);
var L = W ? Symbol.for("immer-draftable") : "__$immer_draftable";
var Q = W ? Symbol.for("immer-state") : "__$immer_state";
var Y = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n2) {
  return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n2;
}, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n2) {
  return "Cannot apply patch, path doesn't resolve: " + n2;
}, 16: 'Sets cannot have "replace" patches.', 17: function(n2) {
  return "Unsupported patch operation: " + n2;
}, 18: function(n2) {
  return "The plugin for '" + n2 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n2 + "()` when initializing your application.";
}, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n2) {
  return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n2 + "'";
}, 22: function(n2) {
  return "'current' expects a draft, got: " + n2;
}, 23: function(n2) {
  return "'original' expects a draft, got: " + n2;
}, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
var Z = "" + Object.prototype.constructor;
var nn = typeof Reflect != "undefined" && Reflect.ownKeys ? Reflect.ownKeys : Object.getOwnPropertySymbols !== void 0 ? function(n2) {
  return Object.getOwnPropertyNames(n2).concat(Object.getOwnPropertySymbols(n2));
} : Object.getOwnPropertyNames;
var tn = Object.getOwnPropertyDescriptors || function(n2) {
  var t2 = {};
  return nn(n2).forEach(function(r2) {
    t2[r2] = Object.getOwnPropertyDescriptor(n2, r2);
  }), t2;
};
var rn = {};
var en = { get: function(n2, t2) {
  if (t2 === Q)
    return n2;
  var e = p(n2);
  if (!u(e, t2))
    return function(n3, t3, r2) {
      var e2, i3 = I(t3, r2);
      return i3 ? "value" in i3 ? i3.value : (e2 = i3.get) === null || e2 === void 0 ? void 0 : e2.call(n3.k) : void 0;
    }(n2, e, t2);
  var i2 = e[t2];
  return n2.I || !r(i2) ? i2 : i2 === z(n2.t, t2) ? (E(n2), n2.o[t2] = R(n2.A.h, i2, n2)) : i2;
}, has: function(n2, t2) {
  return t2 in p(n2);
}, ownKeys: function(n2) {
  return Reflect.ownKeys(p(n2));
}, set: function(n2, t2, r2) {
  var e = I(p(n2), t2);
  if (e == null ? void 0 : e.set)
    return e.set.call(n2.k, r2), true;
  if (!n2.P) {
    var i2 = z(p(n2), t2), o2 = i2 == null ? void 0 : i2[Q];
    if (o2 && o2.t === r2)
      return n2.o[t2] = r2, n2.D[t2] = false, true;
    if (c(r2, i2) && (r2 !== void 0 || u(n2.t, t2)))
      return true;
    E(n2), k(n2);
  }
  return n2.o[t2] === r2 && typeof r2 != "number" && (r2 !== void 0 || t2 in n2.o) || (n2.o[t2] = r2, n2.D[t2] = true, true);
}, deleteProperty: function(n2, t2) {
  return z(n2.t, t2) !== void 0 || t2 in n2.t ? (n2.D[t2] = false, E(n2), k(n2)) : delete n2.D[t2], n2.o && delete n2.o[t2], true;
}, getOwnPropertyDescriptor: function(n2, t2) {
  var r2 = p(n2), e = Reflect.getOwnPropertyDescriptor(r2, t2);
  return e ? { writable: true, configurable: n2.i !== 1 || t2 !== "length", enumerable: e.enumerable, value: r2[t2] } : e;
}, defineProperty: function() {
  n(11);
}, getPrototypeOf: function(n2) {
  return Object.getPrototypeOf(n2.t);
}, setPrototypeOf: function() {
  n(12);
} };
var on = {};
i$1(en, function(n2, t2) {
  on[n2] = function() {
    return arguments[0] = arguments[0][0], t2.apply(this, arguments);
  };
}), on.deleteProperty = function(t2, r2) {
  return isNaN(parseInt(r2)) && n(13), en.deleteProperty.call(this, t2[0], r2);
}, on.set = function(t2, r2, e) {
  return r2 !== "length" && isNaN(parseInt(r2)) && n(14), en.set.call(this, t2[0], r2, e, t2[0]);
};
var un = function() {
  function e(t2) {
    var e2 = this;
    this.g = B, this.F = true, this.produce = function(t3, i3, o2) {
      if (typeof t3 == "function" && typeof i3 != "function") {
        var u2 = i3;
        i3 = t3;
        var a2 = e2;
        return function(n2) {
          var t4 = this;
          n2 === void 0 && (n2 = u2);
          for (var r2 = arguments.length, e3 = Array(r2 > 1 ? r2 - 1 : 0), o3 = 1; o3 < r2; o3++)
            e3[o3 - 1] = arguments[o3];
          return a2.produce(n2, function(n3) {
            var r3;
            return (r3 = i3).call.apply(r3, [t4, n3].concat(e3));
          });
        };
      }
      var f2;
      if (typeof i3 != "function" && n(6), o2 !== void 0 && typeof o2 != "function" && n(7), r(t3)) {
        var c2 = w(e2), s2 = R(e2, t3, void 0), v2 = true;
        try {
          f2 = i3(s2), v2 = false;
        } finally {
          v2 ? O(c2) : g(c2);
        }
        return typeof Promise != "undefined" && f2 instanceof Promise ? f2.then(function(n2) {
          return j(c2, o2), P(n2, c2);
        }, function(n2) {
          throw O(c2), n2;
        }) : (j(c2, o2), P(f2, c2));
      }
      if (!t3 || typeof t3 != "object") {
        if ((f2 = i3(t3)) === H)
          return;
        return f2 === void 0 && (f2 = t3), e2.F && d(f2, true), f2;
      }
      n(21, t3);
    }, this.produceWithPatches = function(n2, t3) {
      return typeof n2 == "function" ? function(t4) {
        for (var r3 = arguments.length, i4 = Array(r3 > 1 ? r3 - 1 : 0), o2 = 1; o2 < r3; o2++)
          i4[o2 - 1] = arguments[o2];
        return e2.produceWithPatches(t4, function(t5) {
          return n2.apply(void 0, [t5].concat(i4));
        });
      } : [e2.produce(n2, t3, function(n3, t4) {
        r2 = n3, i3 = t4;
      }), r2, i3];
      var r2, i3;
    }, typeof (t2 == null ? void 0 : t2.useProxies) == "boolean" && this.setUseProxies(t2.useProxies), typeof (t2 == null ? void 0 : t2.autoFreeze) == "boolean" && this.setAutoFreeze(t2.autoFreeze);
  }
  var i2 = e.prototype;
  return i2.createDraft = function(e2) {
    r(e2) || n(8), t(e2) && (e2 = D(e2));
    var i3 = w(this), o2 = R(this, e2, void 0);
    return o2[Q].C = true, g(i3), o2;
  }, i2.finishDraft = function(t2, r2) {
    var e2 = t2 && t2[Q];
    e2 && e2.C || n(9), e2.I && n(10);
    var i3 = e2.A;
    return j(i3, r2), P(void 0, i3);
  }, i2.setAutoFreeze = function(n2) {
    this.F = n2;
  }, i2.setUseProxies = function(t2) {
    t2 && !B && n(20), this.g = t2;
  }, i2.applyPatches = function(n2, r2) {
    var e2;
    for (e2 = r2.length - 1; e2 >= 0; e2--) {
      var i3 = r2[e2];
      if (i3.path.length === 0 && i3.op === "replace") {
        n2 = i3.value;
        break;
      }
    }
    e2 > -1 && (r2 = r2.slice(e2 + 1));
    var o2 = b("Patches").$;
    return t(n2) ? o2(n2, r2) : this.produce(n2, function(n3) {
      return o2(n3, r2);
    });
  }, e;
}();
var an = new un();
var fn = an.produce;
an.produceWithPatches.bind(an);
an.setAutoFreeze.bind(an);
an.setUseProxies.bind(an);
an.applyPatches.bind(an);
an.createDraft.bind(an);
an.finishDraft.bind(an);
var n$1 = fn;
function i(f2) {
  var u2 = (0, import_react.useState)(function() {
    return d(typeof f2 == "function" ? f2() : f2, true);
  }), i2 = u2[1];
  return [u2[0], (0, import_react.useCallback)(function(t2) {
    i2(typeof t2 == "function" ? n$1(t2) : d(t2));
  }, [])];
}
var _useResolveCall = function(call, initialData, params, options, defaultAutoFetch, validate) {
  if (defaultAutoFetch === void 0) {
    defaultAutoFetch = true;
  }
  var isInitialized = useMoralis().isInitialized;
  var autoFetch = __assign({
    autoFetch: defaultAutoFetch
  }, options !== null && options !== void 0 ? options : {}).autoFetch;
  var _a = (0, import_react.useState)(false), isFetching = _a[0], setIsFetching = _a[1];
  var _b = (0, import_react.useState)(null), error = _b[0], setError = _b[1];
  var _c = i(initialData), data = _c[0], setData = _c[1];
  var paramsRef = (0, import_react.useRef)(params);
  if (!react(paramsRef.current, params)) {
    paramsRef.current = params;
  }
  var fetch = (0, import_react.useCallback)(function(_a2) {
    var _b2 = _a2 === void 0 ? {} : _a2, throwOnError = _b2.throwOnError, onComplete = _b2.onComplete, onError = _b2.onError, onSuccess = _b2.onSuccess, fetchParams = _b2.params;
    return __awaiter(void 0, void 0, void 0, function() {
      var combinedParams, error_2, results, error_1;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            combinedParams = __assign(__assign({}, params), fetchParams);
            _c2.label = 1;
          case 1:
            _c2.trys.push([1, 3, 4, 5]);
            if (validate) {
              error_2 = validate(combinedParams);
              if (error_2) {
                throw new Error(error_2);
              }
            }
            setIsFetching(true);
            setError(null);
            return [4, call(combinedParams)];
          case 2:
            results = _c2.sent();
            setData(results);
            if (onSuccess) {
              onSuccess(results);
            }
            return [2, results];
          case 3:
            error_1 = _c2.sent();
            setData(initialData);
            setError(error_1);
            if (throwOnError) {
              throw error_1;
            }
            if (onError) {
              onError(error_1);
            }
            return [3, 5];
          case 4:
            setIsFetching(false);
            if (onComplete) {
              onComplete();
            }
            return [7];
          case 5:
            return [2];
        }
      });
    });
  }, [call, paramsRef.current, validate]);
  var isEmpty = (0, import_react.useMemo)(function() {
    if (data == null) {
      return true;
    }
    if (Array.isArray(data) && data.length === 0) {
      return true;
    }
    return false;
  }, [data]);
  var isLoading = (0, import_react.useMemo)(function() {
    return isFetching && isEmpty;
  }, [isEmpty, isFetching]);
  (0, import_react.useEffect)(function() {
    if (!isInitialized || !autoFetch) {
      return;
    }
    fetch();
  }, [fetch, isInitialized]);
  return {
    fetch,
    isFetching,
    isLoading,
    error,
    data,
    setData
  };
};
var AuthenticationState;
(function(AuthenticationState2) {
  AuthenticationState2["UNDEFINED"] = "undefined";
  AuthenticationState2["UNAUTHENTICATED"] = "unauthenticated";
  AuthenticationState2["AUTHENTICATED"] = "authenticated";
  AuthenticationState2["AUTHENTICATING"] = "authenticating";
  AuthenticationState2["LOGGING_OUT"] = "logging_out";
  AuthenticationState2["ERROR"] = "error";
})(AuthenticationState || (AuthenticationState = {}));
var initialAuth = {
  state: AuthenticationState.UNDEFINED,
  error: null
};
var useMoralisWeb3Api = function() {
  var Moralis = useMoralis().Moralis;
  return __assign({ Web3API: Moralis.Web3API }, Moralis.Web3API);
};
var useWeb3ExecuteFunction = function(params, options) {
  var Moralis = useMoralis().Moralis;
  var call = (0, import_react.useCallback)(function(callParams) {
    return __awaiter(void 0, void 0, void 0, function() {
      var allParams;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            allParams = __assign(__assign({}, params), callParams);
            return [4, Moralis.executeFunction(allParams)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  }, []);
  return _useResolveCall(call, null, params, options, false);
};
var useWeb3Contract = function(params) {
  var _a = useWeb3ExecuteFunction(params), data = _a.data, error = _a.error, runContractFunction = _a.fetch, isFetching = _a.isFetching, isLoading = _a.isLoading;
  return { runContractFunction, data, error, isFetching, isLoading };
};

export {
  useMoralis,
  useMoralisWeb3Api,
  useWeb3Contract
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=/build/_shared/chunk-LU5NVT4F.js.map
